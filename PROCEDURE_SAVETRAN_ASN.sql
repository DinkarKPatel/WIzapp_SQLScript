create PROCEDURE SAVETRAN_ASN  
(  
 @NUPDATEMODE  NUMERIC(1,0),  
 @NSPID    INT=0,  
 @CMEMONOPREFIX  VARCHAR(50)='',  
 @CFINYEAR   VARCHAR(10)='',  
 @CXNMEMOID   VARCHAR(40)='',  
 @SHIPMENTDATE DATETIME='',
 @EXPECTED_TIME_ARRIVAL DATETIME=''
 
    
)  
----WITH ENCRYPTION  
AS  
BEGIN  
 DECLARE @CTEMPDBNAME   VARCHAR(100),  
   @CMASTERTABLENAME  VARCHAR(100),  
   @CDETAILTABLENAME1  VARCHAR(100),  
   @CTEMPMASTERTABLENAME VARCHAR(100),  
   @CTEMPDETAILTABLENAME1 VARCHAR(100),  
   @CTEMPMASTERTABLE  VARCHAR(100),  
   @CTEMPDETAILTABLE1  VARCHAR(100),  
   @CERRORMSG    VARCHAR(500),  
   @CKEYFIELD1    VARCHAR(50),  
   @CKEYFIELDVAL1   VARCHAR(50),  
   @CMEMONO    VARCHAR(20),  
   @NMEMONOLEN    NUMERIC(20,0),  
   @CMEMONOVAL    VARCHAR(50),  
   @CMEMODEPTID   VARCHAR(4),  
   @CLOCATIONID   VARCHAR(4),  
   @CCMD     NVARCHAR(4000),  
   @NSAVETRANLOOP   BIT,  
   @NSTEP     INT,  
   @CXNTYPEPARA VARCHAR(10) ,  
   @CWIZAPPUSERCODE VARCHAR(10),  
   @CMEMOPREFIXPROC VARCHAR(25),
   @CTARGETDEPT_ID CHAR(4) ,@CLOCID    VARCHAR(4)
     
 DECLARE @OUTPUT TABLE (ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100) ,MEMO_NO VARCHAR(100))  
 DECLARE  @TBLERROR TABLE(PO_NO VARCHAR(50),ARTICLE_NO VARCHAR(50),PARA1_NAME VARCHAR(50),  
    AVAILABLE_QC_QTY NUMERIC(10,2),ASN_QTY NUMERIC(10,2))  
  
 SET @NSTEP = 10  -- SETTTING UP ENVIRONMENT  
    SET @CXNTYPEPARA='ASN'  
  
 SET @CTEMPDBNAME = ''  
 SET @CMASTERTABLENAME = 'ASN_MST'  
 SET @CDETAILTABLENAME1 = 'ASN_DET'  
   
 SET @CTEMPMASTERTABLENAME = 'ASN_ASN_MST_UPLOAD'  
 SET @CTEMPDETAILTABLENAME1 = 'ASN_ASN_DET_UPLOAD'  
   
 SET @CTEMPMASTERTABLE = @CTEMPDBNAME + @CTEMPMASTERTABLENAME  
 SET @CTEMPDETAILTABLE1 = @CTEMPDBNAME + @CTEMPDETAILTABLENAME1  
   
 SET @CERRORMSG   = ''  
 SET @CKEYFIELD1   = 'MEMO_ID'  
 SET @CMEMONO   = 'MEMO_NO'  
 
 
 select @CLOCID=location_code from ASN_ASN_MST_UPLOAD where sp_id=@NSPID
 
 
  SELECT @CLOCATIONID=@CLOCID  
  
 BEGIN TRANSACTION  
   
 BEGIN TRY  

 IF ISNULL(@CLOCATIONID,'')=''
 BEGIN
    SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
	GOTO END_PROC    
 END

  IF @NUPDATEMODE=3  
  BEGIN  
      SET @NSTEP = 20  
      IF ISNULL(@CXNMEMOID,'') = ''   
       BEGIN  
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED '  
		GOTO END_PROC      
      END  
      
      SET @CKEYFIELDVAL1=@CXNMEMOID
    
   SET @NSTEP = 30    
   SET @CCMD=N' UPDATE ASN_MST SET CANCELLED=1,LAST_UPDATE=GETDATE() WHERE MEMO_ID='''+@CXNMEMOID+''''  
   EXEC SP_EXECUTESQL @CCMD  
   GOTO END_PROC  
  END 
  
  IF @NUPDATEMODE=4
  BEGIN
      
        SET @CCMD=N' UPDATE A SET REMARKS=B.REMARKS FROM ASN_DET A JOIN 
         ' + @CTEMPDETAILTABLE1 +' B ON A.ROW_ID=B.ROW_ID WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+'''
             AND A.MEMO_ID='''+@CXNMEMOID+'''' 
        PRINT @CCMD              
        EXEC SP_EXECUTESQL @CCMD 
   
   
        SET @CCMD=N' UPDATE ASN_MST SET STATUS=4 WHERE MEMO_ID='''+@CXNMEMOID+'''' 
        PRINT @CCMD              
        EXEC SP_EXECUTESQL @CCMD 
   
    
   
   SET @CKEYFIELDVAL1=@CXNMEMOID
   GOTO END_PROC
          
  END 
  
  IF @NUPDATEMODE=6
  GOTO FORAPPROVED

  
 
  
  
  
    
  SET @NSTEP = 40  
  --GETTING DEPT_ID FROM TEMP MASTER TABLE  
  SET @CCMD = 'SELECT  @CKEYFIELDVAL1 = MEMO_ID FROM ' + @CTEMPMASTERTABLE +' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''  
  EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT',@CKEYFIELDVAL1 OUTPUT  
  IF (@CKEYFIELDVAL1 IS NULL)  
  BEGIN  
     SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED...'  
     GOTO END_PROC      
  END  
  
  -- START UPDATING XN TABLES   
  IF @NUPDATEMODE = 1 -- ADDMODE   
  BEGIN   
   SET @NSTEP = 50  -- GENERATING NEW KEY  
        
       SET @CCMD = 'SELECT  @CKEYFIELDVAL1 = MEMO_ID,@CWIZAPPUSERCODE=USER_CODE FROM ' + @CTEMPMASTERTABLE +' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''  
          EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT,@CWIZAPPUSERCODE VARCHAR(10) OUTPUT',@CKEYFIELDVAL1 OUTPUT,@CWIZAPPUSERCODE OUTPUT   
    
    EXEC SAVETRAN_GETMEMOPREFIX  
    @CXNTYPE=@CXNTYPEPARA,  
    @CUSERCODE=@CWIZAPPUSERCODE,  
    @CFINYEAR=@CFINYEAR,  
    @CSOURCELOCID=@CLOCATIONID,  
    @CMANUALPREFIX=@CMEMONOPREFIX,  
    @NSPID=@NSPID,  
    @CMEMOPREFIX=@CMEMOPREFIXPROC OUTPUT,  
    @CERRORMSG=@CERRORMSG OUTPUT  
      
    IF ISNULL(@CERRORMSG,'')<>''  
     GOTO END_PROC  
     
   SET @NMEMONOLEN   = LEN(@CMEMOPREFIXPROC)+6  
     
   IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
   BEGIN  
    -- GENERATING NEW MRR_NO    
    SET @NSAVETRANLOOP=0  
    WHILE @NSAVETRANLOOP=0  
    BEGIN  
     EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMOPREFIXPROC, 1,  
         @CFINYEAR,0, @CMEMONOVAL OUTPUT     
       
     SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+'   
           WHERE '+@CMEMONO+'='''+@CMEMONOVAL+'''   
           AND FIN_YEAR = '''+@CFINYEAR+''' )  
         SET @NLOOPOUTPUT=0  
        ELSE  
         SET @NLOOPOUTPUT=1'  
     PRINT @CCMD  
     EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT  
    END  
  
    IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'  
    BEGIN  
       SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'   
       GOTO END_PROC      
    END  
  
    SET @NSTEP = 60  -- GENERATING NEW ID  
  
    -- GENERATING NEW ORDER ID  
    SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+REPLICATE('0', (22-LEN(@CLOCATIONID + @CFINYEAR))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL)) 
    
    IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'    
    BEGIN  
       SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
       GOTO END_PROC  
    END  
      
    SET @NSTEP = 70  
    -- UPDATING NEWLY GENERATED MEMO NO AND MEMO ID IN BUYER ORDER MST AND BUYER ORDER DET TEMP TABLES  
    SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' +   
       @CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''  
    PRINT @CCMD    
    EXEC SP_EXECUTESQL @CCMD  
      
    SET @NSTEP = 90  
    SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''  
    PRINT @CCMD   
    EXEC SP_EXECUTESQL @CCMD  
      
    SET @NSTEP = 100  
    SET @CCMD = N'UPDATE '+ @CTEMPDETAILTABLE1 + ' SET ROW_ID = NEWID() WHERE LEFT(ROW_ID,5) = ''LATER'' AND SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''  
    PRINT @CCMD   
    EXEC SP_EXECUTESQL @CCMD  
    END  
  END     -- END OF ADDMODE  
  ELSE    -- CALLED FROM EDITMODE  
  BEGIN    -- START OF EDITMODE  
   SET @NSTEP = 110  -- GETTING ID INFO FROM TEMP TABLE  
     
   -- GETTING ORDER_ID WHICH IS BEING EDITED  
   SET @CCMD = 'SELECT @CKEYFIELDVAL1 = MEMO_ID, @CMEMONOVAL = MEMO_NO FROM ' + @CTEMPMASTERTABLE +' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''  
   EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT',   
          @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT  
   IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )  
   BEGIN  
      SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'  
      GOTO END_PROC      
   END  
     
   SET @NSTEP = 120  -- UPDATING SENT_TO_HO FLAG TEMP TABLE  
     
   SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE  SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''  
   PRINT @CCMD   
   EXEC SP_EXECUTESQL @CCMD  
     
   SET @NSTEP = 130   
   SET @CCMD = N'UPDATE '+ @CTEMPDETAILTABLE1 + ' SET ROW_ID = NEWID() WHERE LEFT(ROW_ID,5) = ''LATER'' AND SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''  
   PRINT @CCMD   
   EXEC SP_EXECUTESQL @CCMD  
     
     
     END     -- END OF EDITMODE  
       
     DELETE FROM ASN_DET  WHERE MEMO_ID =@CKEYFIELDVAL1  
    
    DECLARE @CWHERECLAUSE VARCHAR(1000)  
        SET @CWHERECLAUSE = ' SP_ID='+LTRIM(RTRIM(STR(@NSPID)))  
             
  SET @NSTEP = 150  
  EXEC UPDATEMASTERXN_MIRROR --UPDATEMASTERXN   
     @CSOURCEDB = @CTEMPDBNAME  
   , @CSOURCETABLE = @CTEMPMASTERTABLENAME  
   , @CDESTDB  = ''  
   , @CDESTTABLE = @CMASTERTABLENAME  
   , @CKEYFIELD1 = @CKEYFIELD1  
   , @BALWAYSUPDATE = 1  
   ,@CFILTERCONDITION=@CWHERECLAUSE  
    
  SET @NSTEP = 160  -- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES  
  
  EXEC UPDATEMASTERXN_MIRROR --UPDATEMASTERXN   
     @CSOURCEDB = @CTEMPDBNAME  
   , @CSOURCETABLE = @CTEMPDETAILTABLENAME1  
   , @CDESTDB  = ''  
   , @CDESTTABLE = @CDETAILTABLENAME1  
   , @CKEYFIELD1 = 'ROW_ID'  
   , @BALWAYSUPDATE = 1  
   ,@CFILTERCONDITION=@CWHERECLAUSE  
   
   
  SET @NSTEP = 167   
     
 --VALIDATE AVAILABLE QC QTY FOR ASN QTY  
  DECLARE @CPO_ID VARCHAR(50),@CPO_NO VARCHAR(50),  
    @CARTICLE_NO VARCHAR(50),@CPARA1_NAME VARCHAR(50),  
    @NASN_QTY NUMERIC(10,2),@NQC_QTY NUMERIC(10,2)  
  
  SELECT @CPO_ID=PO_ID  FROM  ASN_MST (NOLOCK) WHERE MEMO_ID =@CKEYFIELDVAL1  
  
  UPDATE ASN_MST SET TOTAL_QUANTITY =B.TOTAL_QUANTITY FROM ASN_MST
  JOIN
  ( SELECT MEMO_ID,SUM(QUANTITY) AS TOTAL_QUANTITY 
    FROM ASN_DET WHERE MEMO_ID=@CKEYFIELDVAL1
    GROUP BY MEMO_ID
  )B ON B.MEMO_ID=ASN_MST.MEMO_ID
  
  
  
  UPDATE ASN_MST SET STATUS=1 WHERE ISNULL(STATUS,0)=0 AND  MEMO_ID=@CKEYFIELDVAL1
  
   
  
   SET @NSTEP = 170  
  IF OBJECT_ID ('TEMPDB..#TMPVALIDATEASN','U') IS NOT NULL  
     DROP TABLE #TMPVALIDATEASN
     
    
    
  SELECT D.PO_NO , B.PO_ID ,C.ARTICLE_CODE,C.PARA1_CODE ,  
  SUM(A.QUANTITY ) AS ASN_QTY   
  INTO #TMPVALIDATEASN  
  FROM ASN_DET A (NOLOCK)  
  JOIN ASN_MST B (NOLOCK) ON A.MEMO_ID =B.MEMO_ID  
  JOIN POD01106 c (NOLOCK)  ON c.row_id=a.PO_ROW_ID
  JOIN pom01106 d (NOLOCK) On d.po_id=c.po_id
  WHERE B.CANCELLED=0  AND B.PO_ID =@CPO_ID AND d.cancelled=0 
  AND a.PO_ROW_ID IN 
  (  
   SELECT DISTINCT A.ROW_ID
   FROM POD01106 A (NOLOCK)  
   JOIN POM01106 B (NOLOCK) ON A.PO_ID =B.PO_ID 
   JOIN ASN_DET (NOLOCK) ON ASN_DET.PO_ROW_ID=A.ROW_ID  
   JOIN asn_mst (nolock) on asn_mst.MEMO_ID=asn_det.MEMO_ID
   WHERE B.CANCELLED =0   and asn_mst.CANCELLED=0
   AND A.PO_ID =@CPO_ID  AND asn_det.MEMO_ID =@CKEYFIELDVAL1 
  ) 

  GROUP BY D.PO_NO ,B.PO_ID ,C.ARTICLE_CODE,C.PARA1_CODE  
          
       
       INSERT INTO @TBLERROR(PO_NO,ARTICLE_NO,PARA1_NAME,AVAILABLE_QC_QTY,ASN_QTY)  
		  SELECT POM.PO_NO,ARTICLE_NO,PARA1_NAME ,  
				 ISNULL(B.QC_QTY,0) AS AVAILABLE_QC_QTY,  
				 A.ASN_QTY   
		  FROM #TMPVALIDATEASN A  
		  LEFT JOIN  
		  (  
			SELECT A.PO_ID ,A.ARTICLE_CODE ,A.PARA1_CODE ,SUM(A.QC_QUANTITY) AS QC_QTY   
			FROM QC_XN_DET_1 A (NOLOCK)  
			JOIN QC_XN_MST B (NOLOCK) ON A.MEMO_ID =B.MEMO_ID   
			WHERE B.CANCELLED =0  
			AND A.PO_ID =@CPO_ID  
			GROUP BY A.PO_ID ,A.ARTICLE_CODE ,A.PARA1_CODE  
		  
		  ) B ON A.PO_ID =B.PO_ID AND A.ARTICLE_CODE =B.ARTICLE_CODE  AND A.PARA1_CODE =B.PARA1_CODE   
		  JOIN POM01106 POM ON POM.PO_ID =A.PO_ID   
		  JOIN ARTICLE ART (NOLOCK) ON ART.ARTICLE_CODE =A.ARTICLE_CODE   
		  JOIN PARA1 P1 (NOLOCK) ON P1.PARA1_CODE =A.PARA1_CODE   
		  WHERE A.ASN_QTY >ISNULL(B.QC_QTY,0)  
           
         IF EXISTS(SELECT TOP  1 'U' FROM @TBLERROR)  
			SET @CERRORMSG='QC QTY NOT AVAILABLE FOR THIS PO PLEASE CHECK'  
       
    GOTO END_PROC
FORAPPROVED:
SET @NSTEP = 180

 IF ISNULL(@CXNMEMOID,'')=''
 BEGIN  
       SET @CERRORMSG = 'MEMO ID SHOULD NOT BE EMPTY'   
       GOTO END_PROC      
END 

IF ISNULL(@SHIPMENTDATE,'')=''
BEGIN
     SET @CERRORMSG = 'SHIPMENT DATE SHOULD NOT BE EMPTY'   
       GOTO END_PROC 
END

IF ISNULL(@EXPECTED_TIME_ARRIVAL,'')=''
BEGIN
     SET @CERRORMSG = ' EXPECTED TIME ARRIVAL SHOULD NOT BE EMPTY'   
       GOTO END_PROC 
END


UPDATE ASN_MST SET APPROVEDLEVELNO=99,DATE_TIME_SHIPMENT=@SHIPMENTDATE,
  EXPECTED_TIME_ARRIVAL=@EXPECTED_TIME_ARRIVAL
 WHERE MEMO_ID=@CXNMEMOID
 

       
       
 END TRY  
 BEGIN CATCH  
  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()  
  GOTO END_PROC  
 END CATCH  
   
END_PROC:  
 IF @@TRANCOUNT>0  
 BEGIN  
  IF ISNULL(@CERRORMSG,'')=''           
   COMMIT TRANSACTION  
  ELSE  
   ROLLBACK  
 END  
 
 IF @NUPDATEMODE=6
	 BEGIN
	     SELECT ISNULL(@CERRORMSG,'') AS ERRMSG
	     
	 END
 ELSE
	 BEGIN
		INSERT @OUTPUT (ERRMSG, MEMO_ID,MEMO_NO) VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') ,ISNULL(@CMEMONOVAL,''))  
		SELECT * FROM @OUTPUT
		IF EXISTS (SELECT TOP 1 'U' FROM @TBLERROR)
		SELECT * FROM @TBLERROR 
	 END  
   
 ---DELETE TEMP TABLES  
   
  --DELETE FROM ASN_ASN_MST_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))  
  --DELETE FROM ASN_ASN_DET_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))  

END   