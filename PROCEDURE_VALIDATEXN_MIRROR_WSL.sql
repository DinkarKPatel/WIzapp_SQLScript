CREATE PROCEDURE VALIDATEXN_MIRROR_WSL  
 @CLOCID VARCHAR(10),
 @CXNID VARCHAR(50),   
 @CMERGEDB VARCHAR(200),
 @CERRORMSG VARCHAR(MAX) OUTPUT  
-- WITH ENCRYPTION
AS  
BEGIN  
/* 
VALIDATEXN_MIRROR_WSL_V208_29_JAN_14 : THIS PROCEDURE WILL VALIDATE ALL THE MIRROR TRANSFERRED DATA FOR
WHOLESALE DATA.
*/
DECLARE	@NCALCDISCOUNTAMT NUMERIC(14,2),@NDISCOUNTAMT NUMERIC(14,2),@DTSQL NVARCHAR(MAX),@NSUBTOTAL NUMERIC(14,2)
		,@NSUMINDNET NUMERIC(14,2),@CSTEP VARCHAR(5),@CCHK_TABLE VARCHAR(50),@NPAYMODECRAMT NUMERIC(10,2)
		,@NPAYMODETOTAMT NUMERIC(10,2),@NTOTAMOUNT NUMERIC(14,2)   
	 SET @CSTEP=00	
	 SET @CERRORMSG=''
	 SET @CSTEP=10
	 IF OBJECT_ID('TEMPDB..#INMTABLE','U') IS NOT NULL 
		DROP TABLE #INMTABLE	 
	 SET @CSTEP=20
	 IF OBJECT_ID('TEMPDB..#INDTABLE','U') IS NOT NULL 
		DROP TABLE #INDTABLE
	 SET @CSTEP=30	
	 IF OBJECT_ID('TEMPDB..#PAYMODETABLE','U') IS NOT NULL 
		DROP TABLE #PAYMODETABLE		
	 SET @CSTEP=40	 
	 CREATE TABLE #INMTABLE(INV_ID VARCHAR(22),INV_MODE NUMERIC (5,0),DISCOUNT_PERCENTAGE NUMERIC (7,3),
			 DISCOUNT_AMOUNT NUMERIC (10,2),NET_AMOUNT NUMERIC (10,2), ROUND_OFF NUMERIC (10,2), 
			 INV_NO CHAR(15),SUBTOTAL NUMERIC(18,4), FIN_YEAR VARCHAR(10),
			 INV_DT DATETIME,USER_CODE CHAR(7),AC_CODE CHAR(10),MANUAL_DISCOUNT BIT )  
	 SET @CSTEP=50	 		 
	 CREATE TABLE #INDTABLE (INV_ID VARCHAR(22),PRODUCT_CODE VARCHAR(50),QUANTITY NUMERIC(10,3),INVOICE_QUANTITY NUMERIC(10,3)
			  ,MRP NUMERIC (10,2),NET_RATE NUMERIC (14,4),DISCOUNT_PERCENTAGE NUMERIC(6,2), DISCOUNT_AMOUNT NUMERIC (14,4)
			  ,RFNET NUMERIC (10,2),ITEM_TAX_PERCENTAGE NUMERIC(6,2),ITEM_TAX_AMOUNT NUMERIC(12,4),MANUAL_DISCOUNT BIT )  
	 SET @CSTEP=60	 
	 CREATE TABLE #PAYMODETABLE( PAYMODE_GRP_CODE CHAR(7), PAYMODE_CODE CHAR(7), AMOUNT NUMERIC(10,2)  )  

BEGIN TRY	 
	 SET @CSTEP=70	     
	 PRINT 'MASTER RECORDS...'
	 SET @DTSQL=N'SELECT INV_ID,INV_MODE,DISCOUNT_PERCENTAGE,DISCOUNT_AMOUNT,NET_AMOUNT,ROUND_OFF, 
				 INV_NO,SUBTOTAL,FIN_YEAR,INV_DT,USER_CODE,AC_CODE,MANUAL_DISCOUNT 
				 FROM  '+@CMERGEDB+'INM01106 (NOLOCK) WHERE INV_ID='''+@CXNID+'''' 
	 SET @CSTEP=80
	 INSERT #INMTABLE
	 EXEC SP_EXECUTESQL @DTSQL 
	 SET @CSTEP=90
	 PRINT 'DETAIL RECORDS...'
	 SET @DTSQL=N'SELECT INV_ID ,PRODUCT_CODE ,QUANTITY ,INVOICE_QUANTITY,MRP ,NET_RATE , DISCOUNT_PERCENTAGE , DISCOUNT_AMOUNT ,RFNET ,  
						ITEM_TAX_PERCENTAGE,ITEM_TAX_AMOUNT, MANUAL_DISCOUNT 
				 FROM  '+@CMERGEDB+'IND01106 (NOLOCK) WHERE INV_ID='''+@CXNID+''''  
	 SET @CSTEP=100
	 INSERT #INDTABLE
	 EXEC SP_EXECUTESQL @DTSQL 
	 SET @CSTEP=110
	 PRINT 'PAYMENT RECORDS...'
	 SET @DTSQL=N'SELECT B.PAYMODE_GRP_CODE, A.PAYMODE_CODE, A.AMOUNT FROM  '+@CMERGEDB+'PAYMODE_XN_DET A  (NOLOCK)  
				 JOIN  '+@CMERGEDB+'PAYMODE_MST B (NOLOCK) ON A.PAYMODE_CODE = B.PAYMODE_CODE  
				 WHERE MEMO_ID = '''+@CXNID+''' AND XN_TYPE = ''WSL'''  
	 SET @CSTEP=120
	 INSERT #PAYMODETABLE
	 EXEC SP_EXECUTESQL @DTSQL 
	 SET @CSTEP=130
	 IF ISNULL(@CERRORMSG,'')<>''
		RETURN
	 SET @CSTEP=140	
	 PRINT 'VALIDATING LEDGERS...'	
	 IF ISNULL(@CERRORMSG,'')=''
	 BEGIN
		 SET @CSTEP=150	
		 SET @DTSQL=N'IF EXISTS (SELECT TOP 1 ''U'' FROM  '+@CMERGEDB+'INM01106 A
								LEFT OUTER JOIN  '+@CMERGEDB+'LM01106 B ON A.AC_CODE=B.AC_CODE
								WHERE A.INV_ID='''+@CXNID+''' AND B.AC_CODE IS NULL)
						SET @CERRORMSGOUT=''INVALID LEDGER DETAILS FOUND''
					 ELSE
						SET @CERRORMSGOUT='''''	
		 EXEC SP_EXECUTESQL @DTSQL,N'@CERRORMSGOUT VARCHAR(200) OUTPUT',@CERRORMSGOUT=@CERRORMSG OUTPUT
		 
		IF ISNULL(@CERRORMSG,'')<>''
			RETURN
	 END
	 SET @CSTEP=150	
	 PRINT 'VALIDATING DISCOUNT TYPE'
 	 IF ISNULL(@CERRORMSG,'')=''
	 BEGIN
		 SET @CSTEP=160	
		 SET @CCHK_TABLE=' '+@CMERGEDB+'DTM'	
		 IF OBJECT_ID(@CCHK_TABLE,'U') IS NOT NULL
		 BEGIN
		 SET @CSTEP=170	
 		 SET @DTSQL=N'IF EXISTS (SELECT TOP 1 ''U'' FROM  '+@CMERGEDB+'INM01106 A
								 LEFT OUTER JOIN DTM C ON A.DT_CODE=C.DT_CODE
								 WHERE A.INV_ID='''+@CXNID+''' AND C.DT_CODE IS NULL)
						SET @CERRORMSGOUT=''INVALID DISCOUNT TYPE FOUND''
					 ELSE
						SET @CERRORMSGOUT='''''	
						
		 EXEC SP_EXECUTESQL @DTSQL,N'@CERRORMSGOUT VARCHAR(200) OUTPUT',@CERRORMSGOUT=@CERRORMSG OUTPUT
		 END
		 IF ISNULL(@CERRORMSG,'')<>''
			RETURN
	 END
	 PRINT 'VALIDATING SALES PERSON'	
	 IF ISNULL(@CERRORMSG,'')=''
	 BEGIN
		 SET @CSTEP=180	
		 SET @DTSQL=N'IF EXISTS (SELECT TOP 1 INV_ID FROM  '+@CMERGEDB+'IND01106 A
								LEFT OUTER JOIN  '+@CMERGEDB+'EMPLOYEE B ON A.EMP_CODE=B.EMP_CODE
								LEFT OUTER JOIN  '+@CMERGEDB+'EMPLOYEE C ON A.EMP_CODE1=C.EMP_CODE
								LEFT OUTER JOIN  '+@CMERGEDB+'EMPLOYEE D ON A.EMP_CODE2=D.EMP_CODE
								WHERE A.INV_ID='''+@CXNID+''' AND ((A.EMP_CODE IS NOT NULL AND B.EMP_CODE IS NULL) 
								OR (A.EMP_CODE1 IS NOT NULL AND C.EMP_CODE IS NULL) OR (A.EMP_CODE2 IS NOT NULL AND D.EMP_CODE IS NULL))) 
						SET @CERRORMSGOUT=''INVALID SALES PERSON DETAILS FOUND''
					 ELSE
						SET @CERRORMSGOUT='''''	
		 PRINT @DTSQL						
		 EXEC SP_EXECUTESQL @DTSQL,N'@CERRORMSGOUT VARCHAR(200) OUTPUT',@CERRORMSGOUT=@CERRORMSG OUTPUT
		 IF ISNULL(@CERRORMSG,'')<>''
			RETURN
	 END
	 SET @CSTEP=190
	 SELECT @NSUBTOTAL=SUBTOTAL FROM #INMTABLE  
	 SET @CSTEP=200
	 SELECT @NSUMINDNET=SUM(NET_RATE*INVOICE_QUANTITY) FROM #INDTABLE
	 SET @CSTEP=210
	 IF ABS(ISNULL(@NSUMINDNET,0)-ISNULL(@NSUBTOTAL,0))>1
	 BEGIN
		SET @CERRORMSG = 'MISMATCH BETWEEN ITEM LEVEL TOTAL AMOUNT & BILL LEVEL SUBTOTAL.....' -- CANNOT SAVE '
		RETURN
	 END	 
	 SET @CSTEP=220
	 SELECT @NPAYMODECRAMT  = SUM(CASE WHEN PAYMODE_GRP_CODE='0000004' THEN AMOUNT ELSE 0 END),  
			@NPAYMODETOTAMT = SUM(AMOUNT) FROM #PAYMODETABLE
	 SET @CSTEP=230  
	 SET @NPAYMODECRAMT  = ISNULL(@NPAYMODECRAMT,0)  
	 SET @NPAYMODETOTAMT = ISNULL(@NPAYMODETOTAMT,0)  
	 SET @CSTEP=240
	 --IF EXISTS (SELECT INV_ID FROM #INMTABLE WHERE INV_MODE=1 AND NET_AMOUNT<>@NPAYMODETOTAMT)  
	 --BEGIN  
		-- SELECT @NTOTAMOUNT=NET_AMOUNT FROM #INMTABLE
		-- SET @CERRORMSG='NET AMOUNT '+STR(@NTOTAMOUNT,14,2)+' SHOULD BE EQUAL TO THE SUM OF ALL PAYMENT MODES '+STR(@NPAYMODETOTAMT,14,2)+'...PLEASE CHECK'  
		-- RETURN  
	 --END 
END TRY	
BEGIN CATCH
		SET @CERRORMSG = 'P:VALIDATEXN_MIRROR_WSL,STEP: '+@CSTEP+'MESSAGE: '+ERROR_MESSAGE()
		RETURN
END CATCH	
END_PROC:  
END  
--*************************************** END OF PROCEDURE VALIDATEXN_MIRROR_WSL
