CREATE PROCEDURE SP_EMP_PAYSLIP_LEAVESCALC_2                      
(                      
 @CEMPID VARCHAR(20),                       
 @NYEAR INT,                       
 @NMONTH INT,                      
 @BRETURNLEAVESONLY BIT=0                      
)      
--WITH ENCRYPTION                
AS                      
BEGIN                      
 --- JASHN MUMBAI VERSION                      
 --LOG ABSENT STATUS - 1.WEEKLY OFF,2.ABSENT,3.LEAVE,4.BIRTHDAY OFF                      
                       
BEGIN TRY                      
                       
 --(dinkar) Replace  left(memoid,2) to Location_code 

	                        
	 DECLARE @NOPSLEAVECR NUMERIC(10,2),@DPAYSLIPDT DATETIME,@NWEEKLYOFF1 INT,@NWEEKLYOFF2 INT,@NWEEKLYOFF INT,                      
	 @CWEEKLYOFF1 VARCHAR(20),@CWEEKLYOFF2 VARCHAR(20),@DFROMDT DATETIME,@DTODT DATETIME,@NFESTIVALOFF INT,                      
	 @NWORKINGDAYS INT,@NMONTHDAYS INT,@BMARKETINGEMP BIT,@DATTENDANCEDT DATETIME,@DOLDATTENDANCEDT DATETIME,                      
	 @DTIMEIN DATETIME,@DTIMEOUT DATETIME,@DFIRSTTIMEIN DATETIME,@DLASTTIMEOUT DATETIME,@CSHIFTID CHAR(7),                      
	 @NCURDRHL INT,@NCURDRSL INT,@NCURDRFL NUMERIC(10,2),@NCURDRFL1 NUMERIC(10,2),@NCURDRFL2 NUMERIC(10,2),                      
	 @NTEMPSL INT,@NCURRENTLEAVEDR NUMERIC(10,2),@NCURRENTLEAVECR NUMERIC(10,2),@NLEAVEDEBITCF NUMERIC(10,2),                      
	 @NABSENTDAYS INT,@NWORKINGONFESTIVALOFF INT,@NWORKINGONWEEKLYOFF INT,@NLWPDAYS NUMERIC(10,2),                      
	 @NCBSLEAVE NUMERIC(10,2),@NOPSLEAVECR1 NUMERIC(10,2),@NOPSLEAVECR2 NUMERIC(10,2),@NCBSLEAVECF NUMERIC(10,2),                      
	 @COLDSHIFTID CHAR(7),@NCURDRFL3 NUMERIC(10,2),@CEMPLOCID CHAR(4),@NWORKINGONBDAYOFF INT,@DBDAY DATETIME,                      
	 @DJOININGDATE DATETIME,@DSTARTDT DATETIME,@NSTEP INT,@NCURDRFL4 NUMERIC(10,2),@NCURDRFL5 NUMERIC(10,2),                      
	 @NJOINEDONDAY INT,@DLASTWEEKLYOFFHOLIDAYON DATETIME,@NWEEKOFFFESTIVALNOTCREDITED INT,@NLOGABSENTSTATUS INT,                      
	 @NPRESENTDAYS INT,@NWEEKLYOFFTAKEN INT,@NPREVLEAVESDR NUMERIC (10,2),@NTOTALLEAVESDR NUMERIC (10,2),
	 @DFINYEARFROMDT DATETIME,@NMAXLEAVESALLOWED INT,@NSALARYDAYS INT,@NLEAVE INT,@NLEAVESALLOWED NUMERIC(10,2),
	 @NOPSLEAVETAKEN NUMERIC(10,2),@CERRORMSG VARCHAR(MAX),@CDEPARTMENTID VARCHAR(10)
	                       
	 SET @NSTEP=1          
	 
	 SELECT @NLWPDAYS=0,@NLEAVEDEBITCF=0
	                        
	 SELECT @CSHIFTID=SHIFT_ID,@CEMPLOCID=DEPT_ID,@DJOININGDATE=DATE_OF_JOINING,@CDEPARTMENTID=DEPARTMENT_ID                      
	 FROM EMP_MST WHERE EMP_ID=@CEMPID                      
	                       
	 DECLARE @TLEAVES TABLE (MONTH_DT DATETIME,MARK_AS_LEAVE BIT)                      
	                       
	 DECLARE @TDAYS TABLE (MONTH_DT DATETIME)                      
	                       
	 DECLARE @TATTENDANCE TABLE (ATTENDANCE_DT DATETIME,TIME_IN DATETIME,TIME_OUT DATETIME,FL_COUNT NUMERIC(3,0),                      
	 HL_COUNT NUMERIC(3,0),SL_COUNT NUMERIC(3,0),SHIFT_ID CHAR(7))                      
	                       
	 SET @DFROMDT=CONVERT(DATETIME,LTRIM(RTRIM(STR(@NYEAR)))+'-'+REPLICATE('0',2-LEN(LTRIM(RTRIM(STR(@NMONTH)))))+                      
				  LTRIM(RTRIM(STR(@NMONTH)))+'-01')                      
	                       
	 SET @DSTARTDT=@DFROMDT                      


	 IF @BRETURNLEAVESONLY=0
	 BEGIN
		DELETE FROM EMP_LEAVES_SUMMARY WHERE EMP_ID=@CEMPID AND XN_DT=@DFROMDT                      
		
		IF DATEDIFF(MM,@DJOININGDATE,@DFROMDT)>6
		BEGIN
			IF NOT EXISTS (SELECT TOP 1 EMP_ID FROM EMP_LEAVES_ALLOWED (NOLOCK) WHERE EMP_ID=@CEMPID)
				INSERT EMP_LEAVES_ALLOWED (EMP_ID,MAX_LEAVES_ALLOWED) 
				SELECT @CEMPID,MAX_LEAVES_ALLOWED FROM EMP_DEPARTMENT A
				JOIN EMP_MST B ON A.DEPARTMENT_ID=B.DEPARTMENT_ID
				WHERE EMP_ID=@CEMPID 
		END
		ELSE
			DELETE FROM EMP_LEAVES_ALLOWED WHERE EMP_ID=@CEMPID
		
	 END	
	                      
	 SET @DTODT=DATEADD(M,1,@DFROMDT)-1                      
	                       
	 SELECT @CWEEKLYOFF1=WEEKLY_OFF1,@CWEEKLYOFF2=WEEKLY_OFF2,@BMARKETINGEMP=MARKETING_EMP FROM EMP_MST             
	 WHERE EMP_ID=@CEMPID                      
	                       
	 SELECT @DPAYSLIPDT=@DSTARTDT,@CWEEKLYOFF1=ISNULL(@CWEEKLYOFF1,''),@CWEEKLYOFF2=ISNULL(@CWEEKLYOFF2,'')                      
	                       
	 WHILE @DPAYSLIPDT <= @DTODT                      
	 BEGIN                      
		  INSERT @TDAYS                      
		  SELECT @DPAYSLIPDT                      
		  SET @DPAYSLIPDT=@DPAYSLIPDT+1                      
	 END                       
	 
	 --SELECT * FROM @TDAYS
	                       
	 SELECT @NMONTHDAYS=COUNT(*) FROM @TDAYS                      
	 SELECT @NWEEKLYOFF1=COUNT(*) FROM @TDAYS WHERE DATENAME(W,MONTH_DT)=@CWEEKLYOFF1                      
	 SELECT @NWEEKLYOFF2=COUNT(*) FROM @TDAYS WHERE DATENAME(W,MONTH_DT)=@CWEEKLYOFF2      
	
	 IF @CDEPARTMENTID<>'HO00004'	                 
		SELECT @NFESTIVALOFF=COUNT(*) FROM @TDAYS WHERE MONTH_DT IN (SELECT HOLIDAY_DATE FROM EMP_CALENDER)
	 ELSE
		SELECT @NFESTIVALOFF=0
	 
	 
	
	 SELECT @NWORKINGONWEEKLYOFF=COUNT(DISTINCT ATTENDANCE_DT) FROM EMP_ATTENDANCE A  JOIN @TDAYS B ON A.ATTENDANCE_DT = B.MONTH_DT
	 WHERE (DATENAME(W,B.MONTH_DT) = @CWEEKLYOFF1 OR DATENAME(W,B.MONTH_DT) = @CWEEKLYOFF2 ) AND EMP_ID = @CEMPID  AND (A.TIME_IN <> '' OR A.TIME_OUT <> '')
	
	 SELECT @NLEAVE = COUNT (DISTINCT ATTENDANCE_DT) FROM EMP_ATTENDANCE A 
	 JOIN @TDAYS B ON A.ATTENDANCE_DT = B.MONTH_DT
	 LEFT OUTER JOIN EMP_CALENDER C ON A.ATTENDANCE_DT = C.HOLIDAY_DATE
	 WHERE EMP_ID = @CEMPID AND (A.TIME_IN = '' OR A.TIME_OUT = '') 
	 AND (DATENAME(W,A.ATTENDANCE_DT) = @CWEEKLYOFF1 OR DATENAME(W,A.ATTENDANCE_DT) = @CWEEKLYOFF2 
		  OR (C.HOLIDAY_DATE IS NOT NULL AND @CDEPARTMENTID<>'HO00004'))
	 AND (ATTENDANCE_DT <> HOLIDAY_DATE OR @CDEPARTMENTID='HO00004')
	 
	 --SELECT @NLEAVE              
	 --- PROCESS THE FIRST TIME IN & LAST TIME OUT FOR NON-MARKETING EMPLOYEES                      
	 DECLARE LEAVESCUR CURSOR FOR SELECT ATTENDANCE_DT,TIME_IN,TIME_OUT,SHIFT_ID FROM EMP_ATTENDANCE
	 WHERE EMP_ID=@CEMPID AND ATTENDANCE_DT BETWEEN @DFROMDT AND @DTODT                      
	 AND ((TIME_IN<>'' AND TIME_OUT<>'') OR (TIME_IN<>'' AND  TIME_OUT='')) ORDER BY ATTENDANCE_DT,TIME_IN                      
	                        
	 OPEN LEAVESCUR                      
	 FETCH NEXT FROM LEAVESCUR INTO @DATTENDANCEDT,@DTIMEIN,@DTIMEOUT,@CSHIFTID                      
	 WHILE @@FETCH_STATUS=0                      
	 BEGIN                      
		  SELECT @DOLDATTENDANCEDT=@DATTENDANCEDT,@DFIRSTTIMEIN=@DTIMEIN,@COLDSHIFTID=@CSHIFTID                      
		                        
		  WHILE @DATTENDANCEDT=@DOLDATTENDANCEDT AND @@FETCH_STATUS=0                      
		  BEGIN                      
		   IF @DTIMEIN<>@DFIRSTTIMEIN                      
			SET @DFIRSTTIMEIN=DATEADD(MI,DATEDIFF(MI,@DLASTTIMEOUT,@DTIMEIN),@DFIRSTTIMEIN)                      
		                         
		   SET @DLASTTIMEOUT=@DTIMEOUT                         
		   FETCH NEXT FROM LEAVESCUR INTO @DATTENDANCEDT,@DTIMEIN,@DTIMEOUT,@CSHIFTID                      
		  END                      
		                        
		  INSERT @TATTENDANCE (ATTENDANCE_DT,TIME_IN,TIME_OUT,SHIFT_ID,FL_COUNT,HL_COUNT,SL_COUNT)                      
		  SELECT @DOLDATTENDANCEDT AS ATTENDANCE_DT,@DFIRSTTIMEIN AS TIME_IN,@DLASTTIMEOUT AS TIME_OUT,                      
			     @COLDSHIFTID AS SHIFT_ID,0,0,0                      
	 END                      
	                       
	 CLOSE LEAVESCUR                      
	 DEALLOCATE LEAVESCUR                   

	                       	                      	                       
	 INSERT @TATTENDANCE (ATTENDANCE_DT,TIME_IN,TIME_OUT,SHIFT_ID,FL_COUNT,HL_COUNT,SL_COUNT)                      
	 SELECT MONTH_DT AS ATTENDANCE_DT,'' AS TIME_IN,'' AS TIME_OUT,@CSHIFTID,0,0,0 FROM @TDAYS A
	 WHERE MONTH_DT NOT IN (SELECT ATTENDANCE_DT FROM @TATTENDANCE)
	 	       

LBLPROCESSLEAVES:                      
	 ---- MARK THE LEAVES (SHORT LEAVE,FULL LEAVE,HALF LEAVE ETC.) ACCORDING TO SHIFT WORKING HOURS
		 	 
	 UPDATE A SET FL_COUNT=1 FROM @TATTENDANCE A JOIN EMP_SHIFTS B ON A.SHIFT_ID=B.SHIFT_ID                      
	 WHERE ( DATEDIFF(HH,A.TIME_IN,A.TIME_OUT)<B.SHORTDAY_WORKING_HOURS OR
		   ( DATEDIFF(HH,A.TIME_IN,A.TIME_OUT)<B.HALFDAY_WORKING_HOURS AND B.SHORTDAY_WORKING_HOURS=0) OR
		   ( DATEDIFF(HH,A.TIME_IN,A.TIME_OUT)<B.FULLDAY_WORKING_HOURS AND B.HALFDAY_WORKING_HOURS=0)
		   OR A.TIME_OUT='' )                      
	                       
	 UPDATE A SET HL_COUNT=1 FROM @TATTENDANCE A JOIN EMP_SHIFTS B ON A.SHIFT_ID=B.SHIFT_ID                      
	 WHERE  (DATEDIFF(HH,A.TIME_IN,A.TIME_OUT)>=B.HALFDAY_WORKING_HOURS AND 
		  DATEDIFF(HH,A.TIME_IN,A.TIME_OUT)<B.FULLDAY_WORKING_HOURS AND FL_COUNT=0)                      

	 UPDATE A SET SL_COUNT=1 FROM @TATTENDANCE A JOIN EMP_SHIFTS B ON A.SHIFT_ID=B.SHIFT_ID                      
	 AND ( DATEDIFF(HH,A.TIME_IN,A.TIME_OUT)<B.SHORTDAY_WORKING_HOURS
	 AND FL_COUNT=0 AND HL_COUNT=0 )                      
	       
	 SELECT  @NCURDRHL = SUM(HL_COUNT),@NCURDRSL = SUM(SL_COUNT),@NCURDRFL = SUM(FL_COUNT)                      
	 FROM @TATTENDANCE                       
	 
	 --SELECT * FROM @TATTENDANCE WHERE FL_COUNT=1 OR HL_COUNT=1 
	 
	 SELECT @NCURDRHL=ISNULL(@NCURDRHL,0),@NCURDRSL=ISNULL(@NCURDRSL,0) ,@NCURDRFL=ISNULL(@NCURDRFL,0)                     

	 SELECT @NPRESENTDAYS=COUNT(ATTENDANCE_DT) FROM @TATTENDANCE A JOIN EMP_SHIFTS B ON A.SHIFT_ID=B.SHIFT_ID                      
	 WHERE A.TIME_IN <> ''
	                       
	 IF @DJOININGDATE>@DFROMDT                      
		  SET @NJOINEDONDAY=DATEDIFF(D,@DFROMDT,@DJOININGDATE)+1                      
	 ELSE                      
		  SET @NJOINEDONDAY=0                      
	 
	          
	 SET @NCURRENTLEAVEDR = ( @NCURDRFL + CAST(@NCURDRHL AS NUMERIC(10,2))/2 +
							 CAST(@NCURDRSL AS NUMERIC(10,2))/4)                      

--	 SELECT @NCURDRFL,@NCURDRHL,@NCURRENTLEAVEDR
	                
	 SELECT @DFINYEARFROMDT=DBO.FN_GETFINYEARDATE('01'+DBO.FN_GETFINYEAR(@DFROMDT),1)	 

	 SELECT @NMAXLEAVESALLOWED = MAX_LEAVES_ALLOWED FROM EMP_LEAVES_ALLOWED
	 WHERE EMP_ID=@CEMPID
	 
	 SET @NMAXLEAVESALLOWED= ISNULL(@NMAXLEAVESALLOWED,0)
	 
	 SELECT @NPREVLEAVESDR=SUM(CURRENT_MONTH_LEAVES_DR)*-1 FROM EMP_LEAVES_SUMMARY (NOLOCK)
	 WHERE EMP_ID=@CEMPID AND XN_DT BETWEEN  @DFINYEARFROMDT AND @DFROMDT	 						 
	 
	 SET @NPREVLEAVESDR=ISNULL(@NPREVLEAVESDR,0)
	 
	 SET @NOPSLEAVECR=@NMAXLEAVESALLOWED+@NPREVLEAVESDR
	 
	 SELECT @NWEEKLYOFFTAKEN= COUNT(DISTINCT MONTH_DT) FROM @TDAYS                  
	 WHERE (DATENAME(W,MONTH_DT)=@CWEEKLYOFF1 OR  DATENAME(W,MONTH_DT)=@CWEEKLYOFF2) 
	 
	 IF @NCURRENTLEAVEDR>@NWEEKLYOFFTAKEN
	 BEGIN
	
		SET @NLEAVEDEBITCF = @NCURRENTLEAVEDR-@NWEEKLYOFFTAKEN-ISNULL(@NFESTIVALOFF,0)
		
		SET @NCURRENTLEAVEDR=@NLEAVEDEBITCF+@NPREVLEAVESDR
		
		--SELECT @NMAXLEAVESALLOWED,@NCURRENTLEAVEDR,@NLEAVEDEBITCF,@NPREVLEAVESDR,
		--	   @DFINYEARFROMDT,@DFROMDT
		
		SET @NLWPDAYS = (CASE WHEN @NCURRENTLEAVEDR>@NMAXLEAVESALLOWED THEN @NCURRENTLEAVEDR-@NMAXLEAVESALLOWED ELSE 0 END)
	 END
                  
	 SET @NCBSLEAVE=ISNULL(@NOPSLEAVECR,0)+(ISNULL(@NLEAVEDEBITCF,0)*-1)
	-- SELECT @NMONTHDAYS,@NWORKINGONWEEKLYOFF,@NLWPDAYS
	 SET @NSALARYDAYS = @NMONTHDAYS+@NWORKINGONWEEKLYOFF-@NLEAVE
	 	                       
	 PRINT 'INSERT FINAL LEAVES'                      
	                       
	 IF @BRETURNLEAVESONLY=0                         
		INSERT EMP_LEAVES_SUMMARY ( EMP_ID, XN_DT, OB, ABSENT_LEAVES_DR, FULL_LEAVES_DR, HALF_LEAVES_DR,                      
			   SHORT_LEAVES_DR, CURRENT_MONTH_LEAVES_CR, CF_MONTH_LEAVES_CR, LAST_UPDATE ,
			   CURRENT_MONTH_LEAVES_DR )                      
			SELECT @CEMPID AS EMP_ID,@DSTARTDT AS XN_DT,@NOPSLEAVECR AS OB,0 AS ABSENT_LEAVES_DR,                      
			0 AS FULL_LEAVES_DR,0 AS HALF_LEAVES_DR,0 AS SHORT_LEAVES_DR,                      
			0 AS CURRENT_MONTH_LEAVES_CR,0 AS CF_MONTH_LEAVES_CR,                      
			GETDATE() AS LAST_UPDATE,ISNULL(@NLEAVEDEBITCF,0) AS CURRENT_MONTH_LEAVES_DR                     
             
	                       
	  SELECT ISNULL(@NOPSLEAVECR,0) AS OPS,                       
	   ISNULL(@NABSENTDAYS,0) AS ABSENT_DAYS,                      
	   ISNULL(@NCURDRFL,0) AS LEAVE_DR_FL,                      
	   ISNULL(@NCURDRHL,0) AS LEAVE_DR_HL,                      
	   ISNULL(@NCURDRSL,0) AS LEAVE_DR_SL,                      
	   0 AS LEAVE_CR_FL,                      
	   0 AS LEAVE_CR_HL,                      
	   0 AS LEAVE_CR_SL,                      
	   @NLEAVEDEBITCF AS LEAVES_TAKEN,                      
	   ISNULL(@NCURRENTLEAVECR,0) AS LEAVES_CREDITED,                      
	   ISNULL(@NCBSLEAVE,0) AS CBS,                      
	   ISNULL(@NLWPDAYS,0) AS LWP_DAYS,           
	   ISNULL(@NPRESENTDAYS,0) AS PRESENT_DAYS,
	   ISNULL(@NWEEKLYOFFTAKEN,0) AS WEEKLY_OFF_TAKEN,
	   ISNULL(@NSALARYDAYS,0) AS SALARY_DAYS,
	   ISNULL(@NWORKINGDAYS,0) AS WORKING_DAYS,
	   0 AS ATD_EARLY_GOING,
	   0 AS ATD_LATE_COING,
	   0 AS ATD_HALF_DAY,
	   ISNULL(@CERRORMSG,'') AS ERRMSG
	
	
	 GOTO END_PROC                    
                      
 END TRY                      
                       
 BEGIN CATCH                      
	  SELECT @CERRORMSG = 'PROCEDURE SP_EMP_PAYSLIP_LEAVESCALC_2 STEP: '+STR(ISNULL(@NSTEP,0))+' LINE NO. :'+                      
	  ISNULL(LTRIM(RTRIM(STR(ERROR_LINE()))),'NULL LINE')+'MSG :'+ISNULL(ERROR_MESSAGE(),'NULL MSG')                      
	  
	  GOTO END_PROC
 END CATCH                       

END_PROC:
                           
END               
--*************************************** END OF PROCEDURE SP_EMP_PAYSLIP_LEAVESCALC_2
