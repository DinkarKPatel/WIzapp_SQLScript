CREATE PROCEDURE SAVETRAN_JOB_CARD
(  
 @NUPDATEMODE    NUMERIC(1,0),  
 @NSPID      VARCHAR(50),  
 @CMEMONOPREFIX    VARCHAR(50),  
 @CFINYEAR     VARCHAR(10),  
 @CMACHINENAME    VARCHAR(100)='',  
 @CWINDOWUSERNAME   VARCHAR(100)='',  
 @CWIZAPPUSERCODE   VARCHAR(10)='0000000',  
 @CMEMOID     VARCHAR(40)='',  
 @CMEMODT     DATETIME='',  
 @LGENERATEBARCODES BIT=0,    
 @CBARCODEPREFIX  VARCHAR(20)='',
 @cShort_Close_Remarks varchar(100)=''
)  
--WITH ENCRYPTION
AS  
BEGIN  
 -- @NUPDATEMODE: 1- NEW RETAIL SALE ADDED,   
 --     2- NOT APPLICABLE,   
 --     3- CURRENT RETAIL SALE CANCELLED,   
 --     4- EXISTING RETAIL SALE EDITED  
   
 -- @CMEMOID:  MEMOID IS REQUIRED IF @NUPDATEMODE IS 3 (FROM CANCELLATION)  
 DECLARE @CTEMPDBNAME   VARCHAR(100),  
   @CMASTERTABLENAME  VARCHAR(100),  
   @CDETAILTABLENAME  VARCHAR(100),  
   @CDETAILTABLENAME2  VARCHAR(100),  
   @CDETAILTABLENAME3  VARCHAR(100),
   @CDETAILTABLENAME4  VARCHAR(100),
   @CTEMPMASTERTABLENAME VARCHAR(100),  
   @CTEMPDETAILTABLENAME VARCHAR(100),  
   @CTEMPDETAILTABLENAME2 VARCHAR(100),  
   @CTEMPDETAILTABLENAME3 VARCHAR(100),  
   @CTEMPDETAILTABLENAME4 VARCHAR(100),  
   @CTEMPMASTERTABLE  VARCHAR(100),  
   @CTEMPDETAILTABLE  VARCHAR(100),  
   @CTEMPDETAILTABLE2  VARCHAR(100),  
   @CTEMPDETAILTABLE3  VARCHAR(100),  
   @CTEMPDETAILTABLE4  VARCHAR(100),  
   @CERRORMSG    VARCHAR(500),  
   @LDONOTUPDATESTOCK  BIT,  
   @CKEYFIELD1    VARCHAR(50),  
   @CKEYFIELDVAL1   VARCHAR(50),  
   @CKEYFIELD1_DETAIL2  VARCHAR(50),  
   @CMEMONO    VARCHAR(20),  
   @NMEMONOLEN    NUMERIC(20,0),  
   @CMEMONOVAL    VARCHAR(50),  
   @CMEMODEPTID   VARCHAR(4),  
   @CLOCATIONID   VARCHAR(4),  
   @CHODEPTID    VARCHAR(4),  
   @CCMD     NVARCHAR(4000),  
   @CCMDOUTPUT    NVARCHAR(4000),  
   @NSAVETRANLOOP   BIT,  
   @CREFAPPMEMOID   VARCHAR(40),@CAPRMEMOID VARCHAR(40),  
   @NSTEP     INT,@BINSERTONLY BIT,  
   @BNEGSTOCKFOUND BIT,  
   @CKEYSTABLE VARCHAR(100),@CUSERALIAS VARCHAR(100),  
   @BESTIMATEMEMO NUMERIC(1),@CDEPT_ID CHAR(4),@BALLOWNEGSTOCK BIT,  
   @CMEMONOLEN VARCHAR(5),@CDONOTENFORCEDAYCLOSE VARCHAR(4),@DCURRENTDATE DATETIME  ,
   @CMEMOPREFIXPROC VARCHAR(25),@CLOCID      VARCHAR(4)
  

 SET @NSTEP = 5  -- DO VALIDATIONS ON INPUT DATA BY USER  
   
 DECLARE @CRETVAL VARCHAR(MAX)  
   
 DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))  
   
 SET @CREFAPPMEMOID = ''  
   
 SET @NSTEP = 7  -- SETTTING UP ENVIRONMENT  
 
 -- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
 SET @CTEMPDBNAME = ''  
  
 SET @CMASTERTABLENAME = 'ORD_PLAN_MST'  
 SET @CDETAILTABLENAME = 'ORD_PLAN_DET'  
 SET @CDETAILTABLENAME2 = 'ORD_PLAN_BOM_DET'  
 SET @CDETAILTABLENAME3 = 'ORD_PLAN_BARCODE_DET'
 SET @CDETAILTABLENAME4 = 'ORD_PLAN_JOB'
 
 SET @CTEMPMASTERTABLENAME = 'PFI_ORD_PLAN_MST_UPLOAD'
 SET @CTEMPDETAILTABLENAME = 'PFI_ORD_PLAN_DET_UPLOAD'
 SET @CTEMPDETAILTABLENAME2 = 'PFI_ORD_PLAN_BOM_DET_UPLOAD'
 SET @CTEMPDETAILTABLENAME3 = 'PFI_ORD_PLAN_BARCODE_DET_UPLOAD'
 SET @CTEMPDETAILTABLENAME4 = 'PFI_ORD_PLAN_JOB_UPLOAD'
   
 SET @CTEMPMASTERTABLE = @CTEMPDBNAME + @CTEMPMASTERTABLENAME  
 SET @CTEMPDETAILTABLE = @CTEMPDBNAME + @CTEMPDETAILTABLENAME  
 SET @CTEMPDETAILTABLE2 = @CTEMPDBNAME + @CTEMPDETAILTABLENAME2  
 SET @CTEMPDETAILTABLE3 = @CTEMPDBNAME + @CTEMPDETAILTABLENAME3
 SET @CTEMPDETAILTABLE4 = @CTEMPDBNAME + @CTEMPDETAILTABLENAME4
   
 SET @CERRORMSG   = ''  
 SET @LDONOTUPDATESTOCK = 0  
 SET @CKEYFIELD1   = 'MEMO_ID'  
 SET @CKEYFIELD1_DETAIL2 = 'MEMO_ID'  
  
 SET @CMEMONO   = 'MEMO_NO'  
 
 
 
 SET @CCMD = N'UPDATE '+@CTEMPDETAILTABLE4+' SET ROW_ID=NEWID() WHERE ROW_ID='''' OR ROW_ID LIKE ''LATER%'' and sp_id ='''+@NSPID+''' '
 PRINT @CCMD
 IF @NUPDATEMODE<>3 EXEC SP_EXECUTESQL @CCMD

 SET @CCMD = N' DELETE FROM '+@CTEMPDETAILTABLE+' WHERE ISNULL(ARTICLE_CODE,'''') = '''' and sp_id ='''+@NSPID+''''
 PRINT @CCMD
 EXEC SP_EXECUTESQL @CCMD
 
 SET @CCMD = N'DELETE FROM '+@CTEMPDETAILTABLE2+' WHERE ISNULL(ARTICLE_CODE,'''') = '''' and sp_id ='''+@NSPID+''' '
 PRINT @CCMD
 EXEC SP_EXECUTESQL @CCMD
  
  IF @NUPDATEMODE IN(1,2)
     select @CLOCID=location_code from PFI_ORD_PLAN_MST_UPLOAD where SP_ID=@NSPID   
   ELSE
   SELECT @CLOCID=location_code from ORD_PLAN_MST where MEMO_ID=@CMEMOID  

  SELECT @CLOCATIONID=@CLOCID  
    
 SELECT @CHODEPTID  = [VALUE] FROM CONFIG (nolock) WHERE CONFIG_OPTION='HO_LOCATION_ID'    
   
 --SELECT @BALLOWNEGSTOCK =VALUE FROM MODULES   
 --WHERE USER_CODE=@CWIZAPPUSERCODE   
 --AND FORM_NAME='FRMSALE'   
 --AND FORM_OPTION='ALLOW_NEG_STOCK'    
   
 SET @BALLOWNEGSTOCK =ISNULL(@BALLOWNEGSTOCK,0)  
   
   IF ISNULL(@CLOCATIONID,'')=''
	 BEGIN
		SET @CERRORMSG =' LOCATION ID CAN NOT BE BLANK  '  
		GOTO END_PROC    
	 END
   
 SET @NSTEP = 10  -- GETTING DEPTID INFO FROM TEMP TABLE  
  
    
 BEGIN TRY  
  
	  IF OBJECT_ID('TEMPDB..#TMPPMT','U') IS NOT NULL  
	   DROP TABLE #TMPPMT  
	    
	  SELECT PRODUCT_CODE INTO #TMPPMT FROM SKU WHERE 1=2  
	  
	  IF OBJECT_ID('TEMPDB..#TMPXNSTK','U') IS NOT NULL  
	   DROP TABLE #TMPXNSTK           
	    
	  SELECT PRODUCT_CODE,QUANTITY_IN_STOCK AS XN_STOCK INTO #TMPXNSTK FROM PMT01106 (nolock) WHERE 1=2  
	  
	  IF @NUPDATEMODE=1  
		 SET @BINSERTONLY=1  
	  ELSE  
		 SET @BINSERTONLY=0  
	      
	  BEGIN TRANSACTION  
	  
	  EXEC SP_CHKXNSAVELOG 'JOB_CARD',@NSTEP,1,@NSPID  


	  IF @NUPDATEMODE=5  -- for Short close 
	  BEGIN
	       
		
		   SELECT B.MEMO_ID, C.PRODUCT_CODE,C.AGENCY_CODE ,C.JOB_CODE ,C.QUANTITY_IN_STOCK ,
		        cast(0 as Numeric(10,3)) as TransferQty
		       Into #tmpBC
		   FROM ORD_PLAN_BARCODE_DET A (NOLOCK)
		   JOIN ORD_PLAN_DET B ON A.REFROW_ID =B.ROW_ID
		   JOIN JOBWORK_PMT C (NOLOCK) ON C.PRODUCT_CODE =A.PRODUCT_CODE
		   WHERE B.MEMO_ID =@CMEMOID


		   UPDATE A SET Barcode_SHORT_CLOSE=1 FROM
		   JOBWORK_PMT A
		   JOIN #TMPBC B ON A.PRODUCT_CODE=B.PRODUCT_CODE
		   WHERE A.QUANTITY_IN_STOCK>0 and ISNULL(a.AGENCY_CODE,'')='' and  ISNULL(a.JOB_CODE,'')=''

		   UPDATE ORD_PLAN_MST set SHORT_CLOSE=1,Short_Close_Remarks= @cShort_Close_Remarks
		   where MEMO_ID =@CMEMOID


		    GOTO END_PROC  

	  END
	  
	  
	  IF @NUPDATEMODE<>3  
	  BEGIN  
	       SET @NSTEP = 15  
		   EXEC SP_CHKXNSAVELOG 'JOB_CARD',@NSTEP,1,@NSPID  
		     
		   SELECT @CDONOTENFORCEDAYCLOSE=VALUE FROM CONFIG WHERE CONFIG_OPTION='DO_NOT_ENFORCE_LAST_RUN_DT'  
		  
		   SET @CDONOTENFORCEDAYCLOSE=ISNULL(@CDONOTENFORCEDAYCLOSE,'')  
		  
		   IF @CDONOTENFORCEDAYCLOSE<>'1'  
		   BEGIN  
				SELECT TOP 1 @DCURRENTDATE=dbo.fn_getlastrundate()
				SET @DCURRENTDATE=DATEADD(DD,1,@DCURRENTDATE)  
		   END   
		   ELSE  
		   BEGIN  
				SET @CCMD=N'SELECT @DCURRENTDATE=MEMO_DT FROM '+@CTEMPMASTERTABLE  +' where sp_id ='''+@NSPID+''' '
				EXEC SP_EXECUTESQL @CCMD,N'@DCURRENTDATE DATETIME OUTPUT',@DCURRENTDATE OUTPUT  
		   END 
    
		  SET @NSTEP = 20  --UPDATING AC_CODE INTO TEMP TABLES  
		  EXEC SP_CHKXNSAVELOG 'JOB_CARD',@NSTEP,0,@NSPID  
		    
		  SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET AC_CODE=''0000000000'' WHERE ISNULL(AC_CODE,'''') ='''' and sp_id ='''+@NSPID+''''  
		  PRINT @CCMD  
		  EXEC SP_EXECUTESQL @CCMD  
		  
		  SET @NSTEP = 25	
		  SET @CCMD = ' DELETE FROM ' + @CTEMPDETAILTABLE + ' WHERE ISNULL(ARTICLE_CODE,'''') IN ('''', ''000000000'') and  sp_id ='''+@NSPID+'''' 
		  PRINT @CCMD  
		  EXEC SP_EXECUTESQL @CCMD
		  
		  SET @NSTEP = 30
		  SET @CCMD = 'DELETE FROM ' + @CTEMPDETAILTABLE2 + ' WHERE ISNULL(ARTICLE_CODE,'''') = '''' and  sp_id ='''+@NSPID+''''
		  PRINT @CCMD  
		  EXEC SP_EXECUTESQL @CCMD
		  
		  SET @NSTEP = 35
		  SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE2 + ' SET REF_ROW_ID=NULL WHERE 1=(SELECT ORD_PLAN_MODE FROM  '+@CTEMPMASTERTABLE+') and  sp_id ='''+@NSPID+''''
		  PRINT @CCMD  
		  --EXEC SP_EXECUTESQL @CCMD--REF_ROW_ID IS NULL--30 JUL 2018
		  
		  SET @NSTEP = 40  
		  EXEC SP_CHKXNSAVELOG 'JOB_CARD',@NSTEP,0,@NSPID  
		    
		  -- GETTING DEPT_ID FROM TEMP MASTER TABLE  
		  SET @CCMD = 'SELECT @CMEMODEPTID = location_code FROM '   
			 + (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME ELSE @CTEMPMASTERTABLE +' where   sp_id ='''+@NSPID+'''' END )  
		  EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(4) OUTPUT',   
				 @CMEMODEPTID OUTPUT  
		  IF (@CMEMODEPTID IS NULL )  
		  BEGIN  
			 SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'  
			 GOTO END_PROC      
		  END	
		  
		  SET @NSTEP = 42
		 --ADD COMPONENT IN ARTICLE SET
		 --DECLARE @JOB_CARD_TYPE VARCHAR(10),@BDONOT_UPDATE_SET_STOCK BIT-- 1 FOR COMPONENT BASED 
		 --SELECT TOP 1 @JOB_CARD_TYPE=VALUE  FROM CONFIG WHERE CONFIG_OPTION ='JOB_CARD_COMPONENT_BASED' 
		 --SET @BDONOT_UPDATE_SET_STOCK=0
		 
		 --IF ISNULL(@JOB_CARD_TYPE,'')='1'
		 --BEGIN
		      
			
		     SET @CCMD=N' INSERT '+@CTEMPDETAILTABLE+'	( PARA4_CODE, PARA5_CODE, PARA6_CODE, ARTICLE_CODE, PARA1_CODE, PARA2_CODE, QUANTITY, PURCHASE_PRICE, MRP, PRINT_LABEL, MP_PERCENTAGE, ROW_ID, LAST_UPDATE, PARA3_CODE, MEMO_ID, SRNO, WHOLESALE_PRICE, WSP_PERCENTAGE, TAX_PERCENTAGE, TAX_AMOUNT, RFNET, RFNET_WOTAX, FIX_MRP, MANUAL_MRP, MANUAL_WSP, MD_PERCENTAGE, WD_PERCENTAGE, AUTO_SRNO, MANUAL_WSPP, MANUAL_MPP, BIN_ID, CONSUMED_ITEM_COST, VALUE_ADDITION, VALUE_ADDITION_PER_UNIT, MANUAL_CAL, RATE, HSN_CODE, WOD_ROW_ID )  
		     SELECT A. PARA4_CODE,A. PARA5_CODE,A. PARA6_CODE, B.ARTICLE_CODE, A.PARA1_CODE, Acp.COMPONENT_PARA2_CODE, A.QUANTITY, A.PURCHASE_PRICE, 
		     A.MRP, PRINT_LABEL, A.MP_PERCENTAGE,''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())  +'''' AS ROW_ID,GETDATE() AS LAST_UPDATE, A.PARA3_CODE, MEMO_ID, SRNO, A.WHOLESALE_PRICE, A.WSP_PERCENTAGE, 
		     TAX_PERCENTAGE, TAX_AMOUNT, RFNET, RFNET_WOTAX, A.FIX_MRP, MANUAL_MRP, A.MANUAL_WSP, MD_PERCENTAGE, WD_PERCENTAGE, 
		     AUTO_SRNO, MANUAL_WSPP, MANUAL_MPP, BIN_ID, CONSUMED_ITEM_COST, VALUE_ADDITION, VALUE_ADDITION_PER_UNIT, MANUAL_CAL, 
		     RATE, A.HSN_CODE, WOD_ROW_ID 
		     FROM '+@CTEMPDETAILTABLE+' A 
			 JOIN ARTICLE B (nolock) ON A.ARTICLE_CODE =B.ARTICLE_SET_CODE 
			 JOIN ART_COMPONENT_PARA2 ACP (NOLOCK) ON ACP.ARTICLE_CODE=A.ARTICLE_CODE AND A.PARA2_CODE=ACP.PARA2_CODE
			 and b.article_code=acp.component_article_code
			 WHERE B.ARTICLE_SET_TYPE=2 
			 AND LEFT(A.ROW_ID,5)=''LATER''
			 and a.sp_id ='''+@NSPID+'''  '
		    PRINT @CCMD 
			EXEC SP_EXECUTESQL @CCMD  
			
			
		--	SET @BDONOT_UPDATE_SET_STOCK=1

		   /*
			DECLARE @CCOLNAME VARCHAR(MAX),@CALIASCOLNAME VARCHAR(MAX)	
			SELECT @CCOLNAME=ISNULL(@CCOLNAME+',','')+(NAME),
			@CALIASCOLNAME=ISNULL(@CALIASCOLNAME+',','')+('A.'+NAME)
			FROM SYS.COLUMNS 
			WHERE OBJECT_NAME(OBJECT_ID)=@CTEMPDETAILTABLE
			AND NAME NOT IN('TS','PARA4_CODE', 'PARA5_CODE', 'PARA6_CODE','ARTICLE_CODE','PARA1_CODE', 'PARA2_CODE', 
            'PURCHASE_PRICE', 'MRP', 'MP_PERCENTAGE', 'LAST_UPDATE', 'PARA3_CODE', 'WHOLESALE_PRICE', 'WSP_PERCENTAGE', 'FIX_MRP', 
            'MANUAL_WSP', 'HSN_CODE','ROW_ID')
			ORDER BY NAME
	            
	            
			DECLARE @CNEWCOLNAME VARCHAR(MAX)
			SET @CNEWCOLNAME='PARA4_CODE, PARA5_CODE, PARA6_CODE, ARTICLE_CODE, PARA1_CODE, PARA2_CODE, 
            PURCHASE_PRICE, MRP, MP_PERCENTAGE, LAST_UPDATE, PARA3_CODE, WHOLESALE_PRICE, WSP_PERCENTAGE, FIX_MRP, 
            MANUAL_WSP,  HSN_CODE,ROW_ID,'
            
            SET @CCOLNAME=@CNEWCOLNAME+@CCOLNAME
            
			SET @CCMD=N' INSERT '+@CTEMPDETAILTABLE+' ('+@CCOLNAME+')
			SELECT B.PARA4_CODE, B.PARA5_CODE, B.PARA6_CODE, B.ARTICLE_CODE,B. PARA1_CODE, B.PARA2_CODE, 
            B.PURCHASE_PRICE, B.MRP, B.MP_PERCENTAGE, GETDATE() AS LAST_UPDATE,B. PARA3_CODE, B.WHOLESALE_PRICE,B. WSP_PERCENTAGE, B.FIX_MRP, 
            B.MANUAL_WSP, B. HSN_CODE,
            ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())  +'''' AS ROW_ID,
		    '+@CALIASCOLNAME+' 
			FROM '+@CTEMPDETAILTABLE+' A 
			JOIN ARTICLE B ON A.ARTICLE_CODE =B.ARTICLE_SET_CODE 
			WHERE B.ARTICLE_SET_TYPE=2 
			AND LEFT(A.ROW_ID,5)=''LATER'''
			PRINT @CCMD 
			EXEC SP_EXECUTESQL @CCMD
		 */
		-- END
		
		 --END OF  ADD COMPONENT IN ARTICLE SET
		
	  END



	  -- START UPDATING XN TABLES   
	  IF @NUPDATEMODE = 1 -- ADDMODE   
	  BEGIN   
	     
		   SET @NSTEP = 45  -- GENERATING NEW KEY  
		   EXEC SP_CHKXNSAVELOG 'JOB_CARD',@NSTEP,0,@NSPID     

        

		   
	    EXEC SAVETRAN_GETMEMOPREFIX
			@CXNTYPE='JOB_CARD',
			@CUSERCODE=@CWIZAPPUSERCODE,
			@CFINYEAR=@CFINYEAR,
			@CSOURCELOCID=@CLOCATIONID,
			@CTARGETLOCID='',
			@CMANUALPREFIX=@CMEMONOPREFIX,
			@NSPID=@NSPID,
			@CMEMOPREFIX=@CMEMOPREFIXPROC OUTPUT,
			@CERRORMSG=@CERRORMSG OUTPUT

	  
	   		
		IF ISNULL(@CERRORMSG,'')<>''
			GOTO END_PROC


	  SET @NMEMONOLEN   = LEN(@CMEMOPREFIXPROC)+6  
		     
		   -- GENERATING NEW JOB ORDER NO    
		   SET @NSAVETRANLOOP=0  
		   WHILE @NSAVETRANLOOP=0  
		   BEGIN  
				SET @NSTEP = 50
      			SET @CCMD=N'SELECT TOP 1 @CUSERALIASOUT=USER_ALIAS FROM '+@CTEMPMASTERTABLE+' A JOIN USERS B ON A.USER_CODE=B.USER_CODE where a.  sp_id ='''+@NSPID+''''  
				EXEC SP_EXECUTESQL @CCMD,N'@CUSERALIASOUT VARCHAR(5) OUTPUT',@CUSERALIASOUT=@CUSERALIAS OUTPUT  
			      
				SET @CKEYSTABLE='KEYS_SNM_'+LTRIM(RTRIM(@CUSERALIAS))  
			    
			    SET @NSTEP = 55  
				EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMOPREFIXPROC, 1,  
					@CFINYEAR,0,@CMEMONOVAL OUTPUT     
			      
				PRINT @CMEMONOVAL  
				SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+ @CMASTERTABLENAME +'   
										  WHERE '+@CMEMONO+'='''+@CMEMONOVAL+'''   
										  AND FIN_YEAR = '''+@CFINYEAR+''' )  
								SET @NLOOPOUTPUT=0  
						    ELSE  
								SET @NLOOPOUTPUT=1'  
				PRINT @CCMD  
				EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT  
		   END  
		  
		   IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
		   BEGIN  
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'   
			  GOTO END_PROC      
		   END  
		  
		   SET @NSTEP = 60  -- GENERATING NEW ID  
		   EXEC SP_CHKXNSAVELOG 'JOB_CARD',@NSTEP,0,@NSPID  
		     
		   -- GENERATING NEW JOB ORDER ID  
		   SET @CKEYFIELDVAL1 = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
		   
		   IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'    
		   BEGIN  
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
			  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'  
			  GOTO END_PROC  
		   END  
		  
		   SET @NSTEP = 65  -- UPDATING NEW ID INTO TEMP TABLES  
		     
		   EXEC SP_CHKXNSAVELOG 'JOB_CARD',@NSTEP,0,@NSPID  
		     
		   -- UPDATING NEWLY GENERATED JOB ORDER NO AND JOB ORDER ID IN PIM AND PID TEMP TABLES  
		   SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' +   
			  @CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' where   sp_id ='''+@NSPID+''''  
		   PRINT @CCMD  
		   EXEC SP_EXECUTESQL @CCMD  
		       
		     
		   SET @NSTEP = 70  
		   EXEC SP_CHKXNSAVELOG 'JOB_CARD',@NSTEP,0,@NSPID  
		     
		   SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' where   sp_id ='''+@NSPID+''' '  
		   PRINT @CCMD  
		   EXEC SP_EXECUTESQL @CCMD  
		     
		   SET @NSTEP = 75  
		   EXEC SP_CHKXNSAVELOG 'JOB_CARD',@NSTEP,0,@NSPID  
		   --MEMO ID UPDATE  IN BOM DET
		   SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE2 + ' SET '+@CKEYFIELD1_DETAIL2+' = '''+@CKEYFIELDVAL1+''' where   sp_id ='''+@NSPID+''''  
		   PRINT @CCMD  
		   EXEC SP_EXECUTESQL @CCMD  
		   --MEMO ID UPDATE IN JOB
		   SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE4 + ' SET '+@CKEYFIELD1_DETAIL2+' = '''+@CKEYFIELDVAL1+''' where   sp_id ='''+@NSPID+''''  
		   PRINT @CCMD  
		   EXEC SP_EXECUTESQL @CCMD  
		   
		

		   --EXEC SP_EXECUTESQL @CCMD  
	  END     -- END OF ADDMODE  
	  
	  ELSE    -- CALLED FROM EDITMODE  
	  BEGIN    -- START OF EDITMODE  
	    
		   SET @NSTEP = 80  -- GETTING ID INFO FROM TEMP TABLE  
		     
		   EXEC SP_CHKXNSAVELOG 'JOB_CARD',@NSTEP,0,@NSPID  
		     
		   -- GETTING CM ID WHICH IS BEING EDITED  
		   SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ' + @CKEYFIELD1 + ', @CMEMONOVAL = ' + @CMEMONO + ' FROM '  
			  + (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME + ' WHERE MEMO_ID = ''' + @CMEMOID + ''''   
				ELSE @CTEMPMASTERTABLE +' where sp_id='''+@NSPID+''''  END )  
		     
		   EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT',   
				  @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT  
		   IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )  
		   BEGIN  
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'  
			  GOTO END_PROC      
		   END  
		     
		   IF @NUPDATEMODE = 3     
		   BEGIN  
				SET @NSTEP=85  
				-- UPDATING SENTTOHO FLAG  
				SET @CCMD = N'UPDATE ' + @CMASTERTABLENAME + ' SET CANCELLED = 1,LAST_UPDATE=GETDATE() ' +   
				   N' WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + ''''  
				EXEC SP_EXECUTESQL @CCMD  
		   END  
		     
		   ELSE  
		   BEGIN  
  				SET @NSTEP = 90  -- UPDATING SENT_TO_HO FLAG TEMP TABLE  
			      
				EXEC SP_CHKXNSAVELOG 'JOB_CARD',@NSTEP,0,@NSPID  
			      
				-- UPDATING SENTTOHO FLAG  
				SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET SENT_TO_HO = 0, LAST_UPDATE=GETDATE() where  sp_id ='''+@NSPID+''' '  
				EXEC SP_EXECUTESQL @CCMD  
		         
		   END  
		  
		   -- REVERTING BACK THE STOCK OF PMT W.R.T CURRENT ISSUE  
		   SET @NSTEP = 100  -- REVERTING STOCK  
		     
		   EXEC SP_CHKXNSAVELOG 'JOB_CARD',@NSTEP,0,@NSPID  
		   
		   	 
			--SELECT * FROM PMT01106 WHERE PRODUCT_CODE='CRP80'
			 --19 JUL 2018
		       EXEC UPDATEPMT_JOBCARD
			   @CXNTYPE   = 'JOB_CARD'  
			 , @CXNNO   = @CMEMONOVAL  
			 , @CXNID   = @CKEYFIELDVAL1  
			 , @NREVERTFLAG  = 1  
			 , @NALLOWNEGSTOCK = @BALLOWNEGSTOCK  
			 , @NCHKDELBARCODES = 1  
			 , @NUPDATEMODE  = @NUPDATEMODE      
			 , @CCMD    = @CCMDOUTPUT OUTPUT
			 --, @BDONOT_UPDATE_SET_STOCK=@BDONOT_UPDATE_SET_STOCK 
			 --19 JUL 2018
			 PRINT @CCMDOUTPUT
		   --SELECT @CCMDOUTPUT  
		   --SELECT * FROM PMT01106 WHERE PRODUCT_CODE='CRP80'
		   IF (@NUPDATEMODE = 3)   
		   BEGIN
				 SET @NSTEP = 105 
				 IF @CCMDOUTPUT <> ''  
				 BEGIN  
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'  
					  SET @BNEGSTOCKFOUND=1  
					  PRINT 'NEGATIVE STOCK FOUND-1'  
					  PRINT ISNULL(@CCMDOUTPUT,'@CCMDOUTPUT : NULL')  
					  EXEC SP_EXECUTESQL @CCMDOUTPUT  
    			  END   
				 GOTO END_PROC  
		   END  
		   ELSE  
		   IF (@NUPDATEMODE = 2)   
		   BEGIN  
				 SET @NSTEP = 110
				 IF OBJECT_ID('TEMPDB..#TEMPBARCODES','U') IS NOT NULL  
				  DROP TABLE #TEMPBARCODES  
			      
				 SELECT DISTINCT A.DEPT_ID,C.PRODUCT_CODE,B.BIN_ID INTO #TEMPBARCODES FROM ORD_PLAN_MST A (nolock)
				 JOIN ORD_PLAN_DET B (nolock) ON B.MEMO_ID=A.MEMO_ID  
				 JOIN ORD_PLAN_BARCODE_DET C (nolock) ON C.REFROW_ID=B.ROW_ID
				 WHERE A.MEMO_ID=@CKEYFIELDVAL1  
		   END  
	  END     -- END OF EDITMODE  
	  
	  SET @NSTEP = 115  
	  
	  -- RECHECKING IF ID IS STILL LATER  
	  IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
	  BEGIN  
	   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
	   GOTO END_PROC  
	  END  
	  
	  -- UPDATING MASTER TABLE (PIM01106) FROM TEMP TABLE  
	  SET @NSTEP = 120  -- UPDATING MASTER TABLE     
	     
	  EXEC SP_CHKXNSAVELOG 'JOB_CARD',@NSTEP,0,@NSPID  
	     
	DECLARE @CWHERECLAUSE VARCHAR(1000)
	SET @CWHERECLAUSE='  SP_ID='''+ LTRIM(RTRIM((@NSPID)))+'''' 

	  EXEC UPDATEMASTERXN_MIRROR--UPDATEMASTERXN_OPT   
		  @CSOURCEDB = @CTEMPDBNAME  
		, @CSOURCETABLE = @CTEMPMASTERTABLENAME  
		, @CDESTDB  = ''  
		, @CDESTTABLE = @CMASTERTABLENAME  
		, @CKEYFIELD1 = @CKEYFIELD1  
		, @LINSERTONLY  = @BINSERTONLY  
		, @BALWAYSUPDATE = 1  
		,@CFILTERCONDITION=@CWHERECLAUSE
	      
	  
	  -- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE  
	  SET @NSTEP = 130  -- UPDATING TRANSACTION TABLE  

	  DECLARE @CSNCDETROWID VARCHAR(50)
	  SET @CSNCDETROWID='##JOBCARDROWID'+LTRIM(RTRIM(@NSPID))
	  SET @CCMD = N'IF OBJECT_ID(''TEMPDB..'+@CSNCDETROWID+''',''U'') IS NOT NULL
						DROP TABLE '+@CSNCDETROWID
	  EXEC SP_EXECUTESQL @CCMD  
	  

	  SET @NSTEP = 135 
	  SET @CCMD = N'SELECT ROW_ID,ROW_ID AS OLD_ROW_ID INTO '+@CSNCDETROWID+' FROM ' + @CTEMPDETAILTABLE + ' WHERE LEFT(ROW_ID,5) = ''LATER'' and   sp_id ='''+@NSPID+''''  
	  EXEC SP_EXECUTESQL @CCMD  
	   
	  SET @NSTEP = 140
	  -- UPDATING ROW_ID IN TEMP TABLES - CMD01106  
	  SET @CCMD = N'UPDATE '+@CSNCDETROWID+' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())  +'''''
	  EXEC SP_EXECUTESQL @CCMD 
	  
	  
	  SET @NSTEP = 145
	  -- UPDATING ROW_ID IN TEMP TABLES - CMD01106  
	  SET @CCMD = N'UPDATE A SET ROW_ID = B.ROW_ID
					FROM ' + @CTEMPDETAILTABLE + ' A
					JOIN  '+@CSNCDETROWID+' B ON B.OLD_ROW_ID=A.ROW_ID 
					where a.sp_id ='''+@NSPID+''' '
					          
	  EXEC SP_EXECUTESQL @CCMD 
  
	  SET @NSTEP = 155
	  -- UPDATING ROW_ID IN TEMP TABLES - CMD01106  
	  SET @CCMD = N'UPDATE A SET A.REF_ROW_ID = B.ROW_ID
					FROM ' + @CTEMPDETAILTABLE2 + ' A
					JOIN  '+@CSNCDETROWID+' B ON B.OLD_ROW_ID=A.REF_ROW_ID
					where a.sp_id ='''+@NSPID+''' '
	          
	  EXEC SP_EXECUTESQL @CCMD 
	  
	  --SET @CCMD = N'UPDATE A SET A.REF_ROW_ID = B.ROW_ID
			--		FROM ' + @CTEMPDETAILTABLE4 + ' A
			--		JOIN  '+@CSNCDETROWID+' B ON B.OLD_ROW_ID=A.REF_ROW_ID'
	          
	  --EXEC SP_EXECUTESQL @CCMD 

	  IF @NUPDATEMODE=2  
	  BEGIN  
			-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE  
			SET @NSTEP = 165  -- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES  
		      
			EXEC SP_CHKXNSAVELOG 'JOB_CARD',@NSTEP,0,@NSPID  
			-- CMD01106  
			
			-- PAYMODE_XN_DET  
			SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME2 + '   
			   WHERE ' + @CKEYFIELD1_DETAIL2 + ' = ''' + @CKEYFIELDVAL1 + '''  
			   AND ROW_ID IN   
			   (  
				SELECT A.ROW_ID   
				FROM ' + @CDETAILTABLENAME2 + ' A   
				LEFT OUTER JOIN ' + @CTEMPDETAILTABLE2 + ' B ON A.ROW_ID = B.ROW_ID  and  b.sp_id ='''+@NSPID+'''
				WHERE A.' + @CKEYFIELD1_DETAIL2 + ' = ''' + @CKEYFIELDVAL1 + '''  
				AND   B.ROW_ID IS NULL  
			   )'  
			PRINT @CCMD        
			EXEC SP_EXECUTESQL @CCMD  
			SET @NSTEP = 166 
			SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + '   
			   WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''  
			   AND ROW_ID IN   
			   (  
				SELECT A.ROW_ID   
				FROM ' + @CDETAILTABLENAME + ' A   
				LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B ON A.ROW_ID = B.ROW_ID  and  b.sp_id ='''+@NSPID+'''
				WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''  
				AND   B.ROW_ID IS NULL  
			   )'  
			PRINT @CCMD     
			EXEC SP_EXECUTESQL @CCMD  
		      
			SET @NSTEP = 170  
		      
			EXEC SP_CHKXNSAVELOG 'JOB_CARD',@NSTEP,0,@NSPID  
		      
			SET @NSTEP = 171
			SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME4 + '   
			   WHERE ' + @CKEYFIELD1_DETAIL2 + ' = ''' + @CKEYFIELDVAL1 + '''   '  
			PRINT @CCMD        
			EXEC SP_EXECUTESQL @CCMD  

		   UPDATE A SET MEMO_ID=@CKEYFIELDVAL1 
		   FROM PFI_ORD_PLAN_BOM_DET_UPLOAD A (NOLOCK) WHERE SP_ID=@NSPID
		   AND ISNULL(MEMO_ID,'') IN('LATER','')
           
		   UPDATE A SET MEMO_ID=@CKEYFIELDVAL1 
		   FROM PFI_ORD_PLAN_JOB_UPLOAD A (NOLOCK) WHERE SP_ID=@NSPID
		   AND ISNULL(MEMO_ID,'') IN('LATER','')

		
			

	   END  
	     
	   -- INSERTING/UPDATING THE ENTRIES IN PRD_JID TABLE FROM TEMPTABLE  
	   SET @NSTEP = 175  -- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES  
	     
	   EXEC SP_CHKXNSAVELOG 'JOB_CARD',@NSTEP,0,@NSPID  

	   -- ORD_PLAN_DET  
	   EXEC UPDATEMASTERXN_MIRROR--UPDATEMASTERXN_OPT   
		  @CSOURCEDB = @CTEMPDBNAME  
		, @CSOURCETABLE = @CTEMPDETAILTABLENAME  
		, @CDESTDB  = ''  
		, @CDESTTABLE = @CDETAILTABLENAME  
		, @CKEYFIELD1 = 'ROW_ID'  
		, @LINSERTONLY  = @BINSERTONLY      
		, @BALWAYSUPDATE = 1  
		,@CFILTERCONDITION=@CWHERECLAUSE

  	   	     
	   SET @NSTEP = 180  
	  
	

	     
	   -- ORD_PLAN_BOM_DET  
	   EXEC UPDATEMASTERXN_MIRROR--UPDATEMASTERXN_OPT   
		  @CSOURCEDB = @CTEMPDBNAME  
		, @CSOURCETABLE = @CTEMPDETAILTABLENAME2  
		, @CDESTDB  = ''  
		, @CDESTTABLE = @CDETAILTABLENAME2  
		, @CKEYFIELD1 = 'ROW_ID'  
		, @LINSERTONLY  = @BINSERTONLY      
		, @BALWAYSUPDATE = 1      
		,@CFILTERCONDITION=@CWHERECLAUSE
	     
	   
	   SET @NSTEP = 181    
	   --04 OCT 2018
	   -- ORD_PLAN_JOB
	   EXEC UPDATEMASTERXN_MIRROR--UPDATEMASTERXN_OPT   
		  @CSOURCEDB = @CTEMPDBNAME  
		, @CSOURCETABLE = @CTEMPDETAILTABLENAME4  
		, @CDESTDB  = ''  
		, @CDESTTABLE = @CDETAILTABLENAME4  
		, @CKEYFIELD1 = 'ROW_ID'  
		, @LINSERTONLY  = @BINSERTONLY      
		, @BALWAYSUPDATE = 1  
		,@CFILTERCONDITION=@CWHERECLAUSE    
	  --04 OCT 2018
       
        SET @NSTEP = 182
        
    --   IF EXISTS (SELECT TOP 1 'U'  FROM ORD_PLAN_DET WHERE MEMO_ID =@CKEYFIELDVAL1 AND (ISNULL(MRP,0)=0 OR ISNULL(WHOLESALE_PRICE,0)=0)  )
    --   BEGIN
			 --  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MRP & WSP CAN NOT BE BLANK'    
			 --  GOTO END_PROC  
	   --END
				

		IF EXISTS (SELECT MEMO_ID FROM ORD_PLAN_JOB (nolock) WHERE MEMO_ID=@CKEYFIELDVAL1)
			UPDATE ORD_PLAN_MST SET ENFORCE_JOB_ORDER=1 WHERE MEMO_ID=@CKEYFIELDVAL1

	   SET @NSTEP = 182
	   IF @LGENERATEBARCODES = 1    
	   BEGIN    
		   PRINT 'GENERATING BARCODES'    
		   SET @NSTEP = 185  
		    
		
		DECLARE @BAGAINDTRBO BIT 
				    
		IF OBJECT_ID ('TEMPDB..#TMPBARCODE','U') IS NOT NULL
		   DROP TABLE #TMPBARCODE

         CREATE TABLE #TMPBARCODE
		 (
		   QUANTITY  NUMERIC(10,3),PRODUCT_CODE VARCHAR(50),
		   QUANTITY_IN_STOCK NUMERIC(10,3),DEPT_ID VARCHAR(2),BIN_ID VARCHAR(7),
		   LAST_UPDATE DATETIME,ROW_ID VARCHAR(50)
		 )

		 IF EXISTS (SELECT  TOP 1 'U' FROM ORD_PLAN_DET A WHERE isnull(WOD_ROW_ID,'') <>'' AND A.MEMO_ID =@CKEYFIELDVAL1)
		 begin

		    INSERT INTO #TMPBARCODE(QUANTITY,PRODUCT_CODE,QUANTITY_IN_STOCK,DEPT_ID,BIN_ID,LAST_UPDATE,ROW_ID)

			 SELECT 	A.QUANTITY ,  C.PRODUCT_CODE, C.QUANTITY AS QUANTITY_IN_STOCK, 
			 mst.location_Code  AS DEPT_ID,'000' AS  BIN_ID, 
			 GETDATE() AS LAST_UPDATE, 
			  A.ROW_ID  
			 FROM ORD_PLAN_DET A  (nolock)
			 JOIN BUYER_ORDER_DET B (nolock) ON A.WOD_ROW_ID =B.ROW_ID 
			 JOIN BUYER_ORDER_MST MST (nolock) ON B.ORDER_ID =MST.ORDER_ID 
			 JOIN BUYER_ORDER_BARCODE_DET C (nolock) ON B.ROW_ID =C.REF_ROW_ID
			 LEFT JOIN
			 (
			  SELECT A.PRODUCT_CODE FROM ORD_PLAN_BARCODE_DET A (nolock)
			  JOIN ORD_PLAN_DET B (nolock) ON A.REFROW_ID =B.ROW_ID 
			  JOIN ORD_PLAN_MST C (nolock) ON B.MEMO_ID =C.MEMO_ID 
			  WHERE C.CANCELLED =0 and isnull(wod_ROW_ID,'') <>''
			 ) ORD ON ORD.PRODUCT_CODE =C.PRODUCT_CODE 
			 WHERE WOD_ROW_ID <>'' AND A.MEMO_ID =@CKEYFIELDVAL1
			 AND MST.CANCELLED =0
			 AND ORD.PRODUCT_CODE IS NULL


		 END
		 ELSE IF EXISTS (SELECT  TOP 1 'U' FROM ORD_PLAN_DET A WHERE ISNULL(RBO_ROW_ID,'') <>'' AND A.MEMO_ID =@CKEYFIELDVAL1)
		 BEGIN

		    INSERT INTO #TMPBARCODE(QUANTITY,PRODUCT_CODE,QUANTITY_IN_STOCK,DEPT_ID,BIN_ID,LAST_UPDATE,ROW_ID)

			 SELECT 	A.QUANTITY ,  b.PRODUCT_CODE, b.QUANTITY AS QUANTITY_IN_STOCK, 
			 mst.location_Code  AS DEPT_ID,'000' AS  BIN_ID, 
			 GETDATE() AS LAST_UPDATE, 
			  A.ROW_ID  
			 FROM ORD_PLAN_DET A  (nolock)
			 JOIN WSL_ORDER_DET B (nolock) ON A.rbo_ROW_ID =B.ROW_ID 
			 JOIN WSL_ORDER_mst MST (nolock) ON B.ORDER_ID =MST.ORDER_ID 
			 LEFT JOIN
			 (
			  SELECT A.PRODUCT_CODE 
			  FROM ORD_PLAN_BARCODE_DET A (nolock)
			  JOIN ORD_PLAN_DET B (nolock) ON A.REFROW_ID =B.ROW_ID 
			  JOIN ORD_PLAN_MST C (nolock) ON B.MEMO_ID =C.MEMO_ID 
			  WHERE C.CANCELLED =0 and isnull(RBO_ROW_ID,'') <>''
			 ) ORD ON ORD.PRODUCT_CODE =b.PRODUCT_CODE 
			 WHERE isnull(RBO_ROW_ID,'') <>'' AND A.MEMO_ID =@CKEYFIELDVAL1
			 AND MST.CANCELLED =0
			 AND ORD.PRODUCT_CODE IS NULL

			 set @BAGAINDTRBO=1
			 
			


		 end
		 
		 
		;WITH CTE AS
		(
		  	SELECT *,SR=ROW_NUMBER () OVER (PARTITION BY ROW_ID ORDER BY ROW_ID,PRODUCT_CODE)
		  	FROM #TMPBARCODE
		)
		
		DELETE FROM CTE  WHERE SR>QUANTITY 

		if isnull(@BAGAINDTRBO,0)=1
		begin
		      
			  IF OBJECT_ID('tempdb..#INS_SKU') IS NOT NULL DROP TABLE #INS_SKU
   
		   SELECT B.PRODUCT_CODE,ART.ARTICLE_NAME, A.ARTICLE_CODE
		   ,A.PARA1_CODE, A.PARA2_CODE, A.PARA3_CODE, A.PARA4_CODE, A.PARA5_CODE, A.PARA6_CODE
		   ,A.PURCHASE_PRICE, A.MRP,  GETDATE() AS LAST_UPDATE
		   ,C.MEMO_NO AS INV_NO, C.MEMO_DT, C.MEMO_DT RECEIPT_DT,C.AC_CODE AS AC_CODE
		   ,'0000000' AS FORM_ID,A.WHOLESALE_PRICE AS WS_PRICE,ART.CODING_SCHEME,A.HSN_CODE    
		   INTO #INS_SKU
		   FROM #TMPBARCODE B    
		   JOIN ORD_PLAN_DET A ON B.ROW_ID=A.ROW_ID
		   JOIN ORD_PLAN_MST C ON C.MEMO_ID = A.MEMO_ID    
		   JOIN ARTICLE ART ON A.ARTICLE_CODE = ART.ARTICLE_CODE    
		   LEFT OUTER JOIN SKU D ON B.PRODUCT_CODE = D.PRODUCT_CODE    
		   WHERE C.MEMO_ID = @CKEYFIELDVAL1 AND D.PRODUCT_CODE IS NULL

		   
		   INSERT SKU ( PRODUCT_CODE,PRODUCT_NAME,ARTICLE_CODE, PARA1_CODE, PARA2_CODE, PARA3_CODE,PARA4_CODE, PARA5_CODE, PARA6_CODE,    
			PURCHASE_PRICE, MRP,  LAST_UPDATE,INV_NO,INV_DT, RECEIPT_DT, AC_CODE,FORM_ID,WS_PRICE,BARCODE_CODING_SCHEME,hsn_code  )    
		   SELECT PRODUCT_CODE,ARTICLE_NAME, ARTICLE_CODE,PARA1_CODE, PARA2_CODE, PARA3_CODE, PARA4_CODE, PARA5_CODE, PARA6_CODE
		   ,PURCHASE_PRICE, MRP,  LAST_UPDATE ,INV_NO, MEMO_DT, RECEIPT_DT,AC_CODE,FORM_ID,WS_PRICE,CODING_SCHEME ,HSN_CODE 
		   FROM #INS_SKU    
			

		end
		
	
       
       IF NOT EXISTS(SELECT TOP 1 'U' FROM #TMPBARCODE)
       BEGIN

		   PRINT  @CKEYFIELDVAL1+';  '+@CBARCODEPREFIX+';  '+@CLOCATIONID   
		   EXEC SAVETRAN_GENBARCODES_JOBCARD--SAVETRAN_GENBARCODES_SNC    
			  @CXNID  = @CKEYFIELDVAL1    
			, @CPREFIX  = @CBARCODEPREFIX    
			, @NMODE  = 4     
			, @LOCID  = @CLOCATIONID     
			, @CERRORMSG = @CERRORMSG OUTPUT    

		   IF ISNULL(@CERRORMSG,'')<>''    
				GOTO END_PROC    
		END
		ELSE
		BEGIN
			
			IF OBJECT_ID ('TEMPDB..#NEGSTOCK','U') IS NOT NULL
			   DROP TABLE #NEGSTOCK
			SELECT A.ROW_ID ,A.QUANTITY ,B.QUANTITY_IN_STOCK 
			INTO #NEGSTOCK
			FROM
			(
				SELECT ROW_ID ,QUANTITY  
				FROM #TMPBARCODE A
				GROUP BY ROW_ID ,QUANTITY 
			 ) A
			LEFT OUTER JOIN
			(
			 SELECT ROW_ID ,SUM(QUANTITY_IN_STOCK ) AS  QUANTITY_IN_STOCK
			  FROM #TMPBARCODE A
			  GROUP BY ROW_ID
			) B ON A.ROW_ID =B.ROW_ID 
			WHERE A.QUANTITY <>ISNULL(B.QUANTITY_IN_STOCK,0)
			
			IF EXISTS(SELECT TOP 1 'U' FROM #NEGSTOCK)
			BEGIN
			   SET @NSTEP = 185      
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR GENERATING NEW BARCODES AGANINST BUYER ORDER QTY....'    
				GOTO END_PROC    
			
			END
			
			IF OBJECT_ID ('TEMPDB..#TMPBARCODEQTY','U') IS NOT NULL
		       DROP TABLE #TMPBARCODEQTY
			
			 INSERT ORD_PLAN_BARCODE_DET	( PRODUCT_CODE, REFROW_ID )  
			 SELECT 	  PRODUCT_CODE, ROW_ID AS  REFROW_ID 
			 FROM #TMPBARCODE
			


			 INSERT JOBWORK_PMT	( PRODUCT_CODE, QUANTITY_IN_STOCK, DEPT_ID, BIN_ID, LAST_UPDATE ) 
			 SELECT  A.PRODUCT_CODE, 0 AS QUANTITY_IN_STOCK,A. DEPT_ID, A.BIN_ID, A.LAST_UPDATE
			 FROM #TMPBARCODE A
			 LEFT OUTER JOIN JOBWORK_PMT PMT (nolock) ON A.PRODUCT_CODE=PMT.PRODUCT_CODE AND A.DEPT_ID=PMT.DEPT_ID AND A.BIN_ID =PMT.BIN_ID
			 WHERE PMT.PRODUCT_CODE IS  NULL
			 
			 
		
		END	
	  
	
		   -- CHECK WHETHER BARCODE HAS SUCCESSFULLY GENERATED OR NOT    
		   IF EXISTS ( SELECT TOP 1 B.PRODUCT_CODE FROM ORD_PLAN_DET A (nolock) JOIN ORD_PLAN_BARCODE_DET B (nolock) ON A.ROW_ID=B.REFROW_ID    
					  WHERE MEMO_ID = @CKEYFIELDVAL1 AND B.PRODUCT_CODE = '' )    
		   BEGIN
				SET @NSTEP = 190      
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR GENERATING NEW BARCODES....'    
				GOTO END_PROC    
		   END    
		    
		   -- CHECK ALL BARCODES INSERTED INTO PID    
		   IF EXISTS ( SELECT TOP 1 B.PRODUCT_CODE FROM ORD_PLAN_DET A (nolock) JOIN ORD_PLAN_BARCODE_DET B (nolock) ON A.ROW_ID=B.REFROW_ID        
					  LEFT OUTER JOIN SKU C (nolock) ON B.PRODUCT_CODE = C.PRODUCT_CODE    
					  WHERE A.MEMO_ID = @CKEYFIELDVAL1     
					  AND B.PRODUCT_CODE IS NULL )    
		   BEGIN    
				SET @NSTEP=200    
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR GENERATING NEW BARCODES... NEW CODES NOT GENERATED'    
				-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'    
			        
				GOTO END_PROC    
		   END   
		   
		   
		   IF OBJECT_ID ('TEMPDB..#TMPBARCODEQTY','U') IS NOT NULL
		       DROP TABLE #TMPBARCODEQTY		 
			SELECT DISTINCT  a.MEMO_ID into #TMPBARCODEQTY 
			FROM ORD_PLAN_DET (NOLOCK) A
			JOIN ARTICLE ART (NOLOCK) ON A.ARTICLE_CODE =ART.ARTICLE_CODE 
			left JOIN
			(
			 SELECT REFROW_ID ,COUNT(*) AS QTY
			 FROM ORD_PLAN_BARCODE_DET (NOLOCK)
			 GROUP BY REFROW_ID
			) B ON A.ROW_ID =B.REFROW_ID 
			WHERE A.QUANTITY<>ISNULL(B.QTY,0)
			and a.memo_id=@CKEYFIELDVAL1 AND ART.CODING_SCHEME =3
			AND QTY<>QUANTITY

            if exists(select top 1'u' from #TMPBARCODEQTY)
            begin
                SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' BARCODE GENERATION ERROR PLEASE CHECK....'    
				GOTO END_PROC  
            
            end 
	   END 
	   
	 
	   SET @NSTEP = 205
	    --SELECT * FROM PMT01106 WHERE PRODUCT_CODE='CRP80'
	      
	      EXEC UPDATEPMT_JOBCARD   
		  @CXNTYPE		= 'JOB_CARD'  
		, @CXNNO		= @CMEMONOVAL  
		, @CXNID		= @CKEYFIELDVAL1  
		, @NREVERTFLAG  = 0  
		, @NALLOWNEGSTOCK = @BALLOWNEGSTOCK  
		, @NCHKDELBARCODES = 1  
		, @NUPDATEMODE  = @NUPDATEMODE      
		, @CCMD    = @CCMDOUTPUT OUTPUT 
	--	,@BDONOT_UPDATE_SET_STOCK= @BDONOT_UPDATE_SET_STOCK
	     --SELECT @CCMDOUTPUT
	     --SELECT * FROM PMT01106 WHERE PRODUCT_CODE='CRP80'
	   IF @CCMDOUTPUT <> ''  
	   BEGIN  
			 SET @NSTEP = 210  
			 SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'  
		       
			 SET @BNEGSTOCKFOUND=1      
		       
			 PRINT 'NEGATIVE STOCK FOUND-2-'+@CCMDOUTPUT  
		       
			 EXEC SP_EXECUTESQL @CCMDOUTPUT  
			 GOTO END_PROC  
	   END  
	   
	  
	    
	   SET @NSTEP = 215  

	   IF EXISTS (SELECT TOP 1 ERRMSG FROM @OUTPUT WHERE ISNULL(ERRMSG,'')<>'')  
			SELECT TOP 1 @CERRORMSG= ERRMSG FROM @OUTPUT WHERE ISNULL(ERRMSG,'')<>''  
	   ELSE  
			DELETE FROM @OUTPUT   
	
	  
	   IF @NUPDATEMODE<>3 
	    EXEC SAVETRAN_PUR_UPDSKU_JOBCARD	@CMEMOID =@CKEYFIELDVAL1,	@CERRORMSG =@CERRORMSG OUTPUT
       
	    
	SET @NSTEP = 220  	
	DECLARE @STR VARCHAR(MAX),@STR1 VARCHAR(MAX),@NTOTALQTY NUMERIC(10,3)
	SET @STR=NULL
	SET @STR1=NULL

	SELECT  @STR1=MEMO_ID,@STR =  COALESCE(@STR +  '/ ', ' ' ) + (''+C.UOM_NAME+': '+CAST(SUM(QUANTITY) AS VARCHAR) +' ')  
	FROM ORD_PLAN_DET A (nolock)
	JOIN ARTICLE B (nolock) ON A.ARTICLE_CODE=B.ARTICLE_CODE
	JOIN UOM C (nolock) ON C.UOM_CODE=B.UOM_CODE
	WHERE MEMO_ID=@CKEYFIELDVAL1 GROUP BY C.UOM_NAME ,MEMO_ID

	SELECT @NTOTALQTY=SUM(QUANTITY) FROM  ORD_PLAN_DET WHERE MEMO_ID =@STR1
	
	UPDATE ORD_PLAN_MST SET TOTAL_QUANTITY_STR =@STR,TOTAL_QUANTITY=@NTOTALQTY WHERE MEMO_ID =@STR1
	
		
	UPDATE A SET ITEM_MERCHANT_CODE=D.ITEM_MERCHANT_CODE
	FROM JOBWORK_PMT  A (NOLOCK)
	JOIN ORD_PLAN_BARCODE_DET B (NOLOCK) ON A.PRODUCT_CODE =B.PRODUCT_CODE 
	JOIN ORD_PLAN_DET  C (NOLOCK) ON B.REFROW_ID =C.ROW_ID 
	JOIN BUYER_ORDER_DET D (NOLOCK) ON D.ROW_ID =C.WOD_ROW_ID 
	WHERE C.MEMO_ID=@CKEYFIELDVAL1

	IF EXISTS (SELECT MEMO_ID FROM ORD_PLAN_JOB (nolock) WHERE MEMO_ID=@CKEYFIELDVAL1)
			UPDATE ORD_PLAN_MST SET ENFORCE_JOB_ORDER=1 WHERE MEMO_ID=@CKEYFIELDVAL1
	    
--SELECT * FROM ORD_PLAN_MST WHERE MEMO_ID ='010112400000001-000107'
--SELECT * FROM ORD_PLAN_DET  WHERE MEMO_ID ='010112400000001-000107'
--SELECT * FROM ORD_PLAN_BARCODE_DET WHERE REFROW_ID IN
--(SELECT ROW_ID  FROM ORD_PLAN_DET  WHERE MEMO_ID ='010112400000001-000107'
--)
	    
	   GOTO END_PROC  
   
END TRY  
BEGIN CATCH  
	  SET @CERRORMSG = 'PROCEDURE SAVETRAN_JOBCARD: STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()  
	  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'  
	    
	  GOTO END_PROC  
END CATCH  
   
END_PROC:  
  	
  	
	 IF @@TRANCOUNT>0  
	 BEGIN  
		  EXEC SP_CHKXNSAVELOG 'JOB_CARD',@NSTEP,0,@NSPID  
		  --SELECT @CERRORMSG,ISNULL(@CERRORMSG,''),ISNULL(@CCMDOUTPUT,''),ISNULL(@BNEGSTOCKFOUND,0)
		  
		  IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')='' AND ISNULL(@BNEGSTOCKFOUND,0)=0  
		  BEGIN
		    UPDATE ORD_PLAN_MST SET HO_SYNCH_LAST_UPDATE='' WHERE MEMO_ID=@CKEYFIELDVAL1
			UPDATE ORD_PLAN_MST SET LAST_UPDATE=GETDATE() WHERE MEMO_ID=@CKEYFIELDVAL1
			
			commit TRANSACTION
		  END	
		  ELSE  
			ROLLBACK  
	 END
	 
	 IF ISNULL(@BNEGSTOCKFOUND,0)=0  
	    BEGIN  
		  INSERT @OUTPUT ( ERRMSG, MEMO_ID) VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,''))  
		  SELECT * FROM @OUTPUT   
	    END   


    IF ISNULL(@CERRORMSG,'')='' AND @NUPDATEMODE not in(1,3)
	 BEGIN
		
		 EXEC SP3S_UPDATE_SKUNAMES @CKEYFIELDVAL1,'TTM','',''
	 END

	
		DELETE A FROM PFI_ORD_PLAN_MST_UPLOAD A (NOLOCK) where sp_id=@NSPID 
		DELETE A FROM PFI_ORD_PLAN_DET_UPLOAD A (NOLOCK) where sp_id=@NSPID 
		DELETE A FROM PFI_ORD_PLAN_BOM_DET_UPLOAD A (NOLOCK) where sp_id=@NSPID 
		DELETE A FROM PFI_ORD_PLAN_BARCODE_DET_UPLOAD A (NOLOCK) where sp_id=@NSPID 
		DELETE A FROM PFI_ORD_PLAN_JOB_UPLOAD A (NOLOCK) where sp_id=@NSPID 


------------------------------------------------------ END OF PROCEDURE SAVETRAN_JOB_CARD  
END


