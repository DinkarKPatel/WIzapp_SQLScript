create PROCEDURE SP_TILL_SHIFT_UPDATE
(
  @DFM_DT DATETIME,
  @DTO_DT DATETIME
)
AS
BEGIN
     DECLARE @CCASHIERENABLED BIT,@NRECEIPTS NUMERIC(18,2),@NISSUES NUMERIC(18,2),@NPHY_CL NUMERIC(18,2),
              @NSTEP INT, @CERRMSG VARCHAR(MAX)
     
  BEGIN TRY  
  BEGIN TRANSACTION   
       SELECT TOP 1 @CCASHIERENABLED=VALUE FROM CONFIG WHERE CONFIG_OPTION='OPEN_CASHIER_FOR_CASHMEMOS'
	   SET @CCASHIERENABLED=ISNULL(@CCASHIERENABLED,0)
	   
	   DECLARE @TBLRECEIPT TABLE (SHIFT_ID VARCHAR(100),RECEIPTS NUMERIC(18,2))
	   DECLARE @TBLISSUES TABLE (SHIFT_ID VARCHAR(100),ISSUES NUMERIC(18,2))
	   
	   INSERT INTO @TBLRECEIPT(SHIFT_ID ,RECEIPTS )
	   SELECT A.SHIFT_ID ,RECEIPTS=SUM(ISNULL(B.RECEIPTS,0))
	   FROM TILL_SHIFT_MST A (NOLOCK)
	   JOIN
	   (
			--CASH RECEIVED THRU TILL EXPENSES
			SELECT A.SHIFT_ID,SUM(B.AMOUNT) AS RECEIPTS
			FROM TILL_EXPENSE_MST A
			JOIN TILL_EXPENSE_DET B ON A.MEMO_ID=B.MEMO_ID
			WHERE  B.XN_TYPE='CR'
			GROUP BY A.SHIFT_ID
			UNION ALL
			--CASH RECEIVED THRU ADVANCES/OS RECEIPTS
			SELECT A.SHIFT_ID, SUM(B.AMOUNT) 
			FROM ARC01106 A
			JOIN PAYMODE_XN_DET B ON A.ADV_REC_ID=B.MEMO_ID AND B.XN_TYPE='ARC'
			WHERE  A.ARC_TYPE=1 AND B.PAYMODE_CODE='0000000'
			AND A.CANCELLED=0
			GROUP BY A.SHIFT_ID
			UNION ALL
			--NET CASH RECEIVED AGAINST SALES
			SELECT A.SHIFT_ID , SUM(CASE WHEN @CCASHIERENABLED=0 THEN B.AMOUNT ELSE 0 END) 
			FROM CMM01106 A
			JOIN PAYMODE_XN_DET B ON A.CM_ID=B.MEMO_ID AND B.XN_TYPE='SLS'
			WHERE  B.PAYMODE_CODE='0000000'
			AND A.CANCELLED=0
			GROUP BY A.SHIFT_ID
			UNION ALL
			--NET CASH RECEIVED AGAINST SALES THRU CASHIER
			SELECT A.SHIFT_ID, SUM(B.AMOUNT) 
			FROM DSM01106 A
			JOIN DSD01106 AD ON A.DS_ID=AD.DS_ID
			JOIN PAYMODE_XN_DET B ON AD.CM_ID=B.MEMO_ID AND B.XN_TYPE='SLS'
			WHERE  B.PAYMODE_CODE='0000000'
			AND A.CANCELLED=0
			GROUP BY A.SHIFT_ID
			union aLL
			SELECT A.SHIFT_ID, SUM(B.xn_amount) AS RECEIPTS
			FROM pem01106 A
			JOIN ped01106 B ON A.pem_memo_id=B.pem_memo_id
			WHERE ISNULL(A.SHIFT_ID,'')<>'' AND B.XN_TYPE='CR' and a.cancelled =0
			group by A.SHIFT_ID
	   )B ON A.SHIFT_ID=B.SHIFT_ID
	   WHERE A.OPEN_DATE BETWEEN @DFM_DT AND @DTO_DT 
	   GROUP BY A.SHIFT_ID
	   
	   
	   INSERT INTO @TBLISSUES(SHIFT_ID ,ISSUES)
	   SELECT A.SHIFT_ID ,ISSUES=SUM(B.ISSUES)
	   FROM TILL_SHIFT_MST A (NOLOCK)
	   JOIN
	    (
			--AMOUNT ISSUED THRU TILL EXPENSES
			SELECT A.SHIFT_ID, SUM(B.AMOUNT) AS ISSUES 
			FROM TILL_EXPENSE_MST A
			JOIN TILL_EXPENSE_DET B ON A.MEMO_ID=B.MEMO_ID
			WHERE  B.XN_TYPE='DR'
			GROUP BY A.SHIFT_ID
			UNION ALL
			--CASH ISSUED AGAINST PAYMENTS
			SELECT A.SHIFT_ID, SUM(B.AMOUNT) AS ISSUES 
			FROM ARC01106 A
			JOIN PAYMODE_XN_DET B ON A.ADV_REC_ID=B.MEMO_ID AND B.XN_TYPE='ARC'
			WHERE  A.ARC_TYPE=2 AND B.PAYMODE_CODE='0000000'
			AND A.CANCELLED=0
			GROUP BY A.SHIFT_ID
			UNION ALL
			--CASH ISSUES AGAINST TILL LIFTS
			SELECT A.SHIFT_ID, SUM(A.LIFT_AMOUNT) AS ISSUES
			FROM TILL_LIFTS A 
			WHERE  A.CANCELLED=0
			GROUP BY A.SHIFT_ID
			union aLL
			SELECT A.SHIFT_ID, SUM(B.xn_amount) AS RECEIPTS
			FROM pem01106 A
			JOIN ped01106 B ON A.pem_memo_id=B.pem_memo_id
			WHERE ISNULL(A.SHIFT_ID,'')<>'' AND B.XN_TYPE='DR' and a.cancelled =0
			group by A.SHIFT_ID
	    )B ON A.SHIFT_ID =B.SHIFT_ID 
	    WHERE A.OPEN_DATE BETWEEN @DFM_DT AND @DTO_DT 
	     GROUP BY A.SHIFT_ID
	   
	   UPDATE A SET RECEIPTS =isnull(B.RECEIPTS,0)  FROM TILL_SHIFT_MST A (NOLOCK)
	   left JOIN @TBLRECEIPT B ON A.SHIFT_ID =B.SHIFT_ID 
	   WHERE A.OPEN_DATE BETWEEN @DFM_DT AND @DTO_DT 
	   
	   UPDATE A SET ISSUES =isnull(B.ISSUES,0)   FROM TILL_SHIFT_MST A (NOLOCK)
	   left JOIN @TBLISSUES B ON A.SHIFT_ID =B.SHIFT_ID 
	   WHERE A.OPEN_DATE BETWEEN @DFM_DT AND @DTO_DT 

	   UPDATE A SET COMP_CL=COMP_OP+RECEIPTS-ISSUES,LAST_UPDATE=GETDATE () FROM 
	   TILL_SHIFT_MST A (NOLOCK) WHERE A.OPEN_DATE BETWEEN @DFM_DT AND @DTO_DT 
	   
	     
 END TRY  
 BEGIN CATCH  
    SET @CERRMSG = 'STEP- ' + RTRIM(LTRIM(STR(@NSTEP))) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' 
				 + ERROR_MESSAGE()
 END CATCH 
   
END_PROC:  
	
  
IF @@TRANCOUNT>0  
BEGIN  
  IF ISNULL(@CERRMSG,'')='' 
  BEGIN
		COMMIT TRANSACTION 
  END
  ELSE  
		ROLLBACK  
END  

END
