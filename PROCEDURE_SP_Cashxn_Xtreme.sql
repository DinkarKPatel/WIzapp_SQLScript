CREATE PROCEDURE SP_CASHXN_XTREME
(
	@CDEPTID VARCHAR(4),
	@DFROMDT DATETIME,
	@DTODT DATETIME
)
--WITH ENCRYPTION

AS
BEGIN
	--SELECT @CDEPTID ='', @DFROMDT = '2010-08-01', @DTODT = '2010-11-30'
--(dinkar) Replace  left(memoid,2) to Location_code 
	DECLARE @DOPENINGDT DATETIME,
			@CCURRENTDEPTID VARCHAR(4),
			@NTEMPOPBAL NUMERIC(14,2)

	DECLARE @OUTPUTC TABLE ( XN_DT DATETIME, XN_NO VARCHAR(40), XN_ID VARCHAR(40), XN_TYPE VARCHAR(20), 
							 DEBIT_AMOUNT NUMERIC(12,2), CREDIT_AMOUNT NUMERIC(12,2), AC_NAME VARCHAR(100), 
							 NARRATION VARCHAR(200), OP_BAL NUMERIC(14,2), CL_BAL NUMERIC(14,2) )

	DECLARE @LEDGERC TABLE ( DEPT_ID VARCHAR(4), XN_DT DATETIME, XN_TYPE VARCHAR(20), AC_NAME VARCHAR(100), 
							 DEBIT_AMOUNT NUMERIC(14,2), CREDIT_AMOUNT NUMERIC(14,2) )

	DECLARE @OPSCBSC TABLE ( DEPT_ID VARCHAR(4), XN_DT DATETIME, OP_BAL NUMERIC(14,2), 
							 XN_AMOUNT NUMERIC(14,2), CL_BAL NUMERIC(14,2) )

	DECLARE @TEMPOPSC TABLE ( OP_BAL NUMERIC(14,2) )

	-- TEMP TABLE TO STORED THE LIST OF LOCATIONS CURRENTLY SELECTED
	-- JOIN THIS TABLE IN EACH QUERY TO GET THE RESULT FOR SINGLE, MULTIPLE OR ALL LOCATIONS
	DECLARE @LOCLISTC TABLE ( DEPT_ID CHAR(4) )

	IF @CDEPTID <> ''
		INSERT @LOCLISTC VALUES ( @CDEPTID )
	ELSE
	BEGIN
		IF EXISTS ( SELECT TOP 1 DEPT_ID FROM ACT_FILTER_LOC WHERE SP_ID = @@SPID )
			INSERT @LOCLISTC
			SELECT DEPT_ID FROM ACT_FILTER_LOC WHERE SP_ID = @@SPID
		ELSE
			INSERT @LOCLISTC
			SELECT DEPT_ID FROM LOCATION WHERE LOC_TYPE=1  -- AND INACTIVE=0 
			AND DEPT_ID = MAJOR_DEPT_ID
	END 

	SET @DOPENINGDT = DATEADD(DD, -1, @DFROMDT)
	
	DECLARE LOC_CUR CURSOR FOR
	SELECT DEPT_ID FROM @LOCLISTC
	
	OPEN LOC_CUR
	
	FETCH NEXT FROM LOC_CUR INTO @CCURRENTDEPTID
	WHILE @@FETCH_STATUS = 0
	BEGIN
		PRINT '@CCURRENTDEPTID ' + @CCURRENTDEPTID
	
	
		DELETE FROM @TEMPOPSC
		DELETE FROM @OUTPUTC
	
		-- GETTING OPENING BALANCE
		INSERT @TEMPOPSC ( OP_BAL )
		EXEC SP_CASHXN @CCURRENTDEPTID, '', @DOPENINGDT

		-- GETTING TRANSACTIONS DURING THE PERIOD
		INSERT @OUTPUTC ( XN_DT, XN_NO, XN_ID, XN_TYPE, DEBIT_AMOUNT, CREDIT_AMOUNT, AC_NAME, NARRATION, OP_BAL, CL_BAL )
		EXEC SP_CASHXN @CCURRENTDEPTID, @DFROMDT, @DTODT

		
		INSERT @LEDGERC ( DEPT_ID, XN_DT, XN_TYPE, AC_NAME, DEBIT_AMOUNT, CREDIT_AMOUNT )
		SELECT @CCURRENTDEPTID AS DEPT_ID, XN_DT, XN_TYPE, 
			(CASE WHEN XN_TYPE='REC' THEN 'CASH RECEIPTS' 
				  WHEN XN_TYPE='OPS' THEN 'OPENING CASH'
				  ELSE AC_NAME END) AS AC_NAME, 
			SUM(DEBIT_AMOUNT) AS DEBIT_AMOUNT,
			SUM(CREDIT_AMOUNT) AS CREDIT_AMOUNT
		FROM @OUTPUTC
		GROUP BY XN_DT, XN_TYPE, 
			(CASE WHEN XN_TYPE='REC' THEN 'CASH RECEIPTS' 
				  WHEN XN_TYPE='OPS' THEN 'OPENING CASH'
				  ELSE AC_NAME END)
		ORDER BY XN_DT, XN_TYPE

		
		INSERT @OPSCBSC ( DEPT_ID, XN_DT, OP_BAL, XN_AMOUNT, CL_BAL )
		SELECT @CCURRENTDEPTID AS DEPT_ID, XN_DT, 
			CONVERT(NUMERIC(14,2), 0) AS OP_BAL,
			SUM(DEBIT_AMOUNT - CREDIT_AMOUNT) AS XN_AMOUNT,
			CONVERT(NUMERIC(14,2), 0) AS CL_BAL
		FROM @OUTPUTC
		GROUP BY XN_DT
		ORDER BY XN_DT


		SELECT TOP 1 @NTEMPOPBAL = OP_BAL FROM @TEMPOPSC
		SET @NTEMPOPBAL = ISNULL(@NTEMPOPBAL,0)
		
		--SELECT @CCURRENTDEPTID AS DEPT_ID, @NTEMPOPBAL AS OP_BAL
		
		UPDATE @OPSCBSC SET CL_BAL = @NTEMPOPBAL, @NTEMPOPBAL = (@NTEMPOPBAL + XN_AMOUNT )
		WHERE DEPT_ID = @CCURRENTDEPTID		

		UPDATE @OPSCBSC SET OP_BAL = (CL_BAL - (XN_AMOUNT))
		WHERE DEPT_ID = @CCURRENTDEPTID		
		
		--SELECT * FROM @LEDGERC
		FETCH NEXT FROM LOC_CUR INTO @CCURRENTDEPTID
	END
	CLOSE LOC_CUR
	DEALLOCATE LOC_CUR

	SELECT B.DEPT_NAME, A.*, (A.DEBIT_AMOUNT - A.CREDIT_AMOUNT) AS XN_AMOUNT FROM @LEDGERC A
	JOIN LOCATION B ON A.DEPT_ID = B.DEPT_ID 
	ORDER BY A.DEPT_ID, A.XN_DT
	
	SELECT * FROM @OPSCBSC ORDER BY DEPT_ID, XN_DT
END
