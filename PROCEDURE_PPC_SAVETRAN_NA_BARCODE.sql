CREATE PROCEDURE PPC_SAVETRAN_NA_BARCODE
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CFINYEAR			VARCHAR(10),
	@CXNMEMOID			VARCHAR(40)='',
	@CLOCID				VARCHAR(2)=''

)
--WITH ENCRYPTION
AS
BEGIN
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME1		VARCHAR(100),
			@CDETAILTABLENAME2		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME1	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE1		VARCHAR(100),
			
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(2),
			@CLOCATIONID			VARCHAR(2),
			@CHODEPTID				VARCHAR(2),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@LENABLETEMPDATABASE	BIT,
			@CMEMONOPREFIX VARCHAR(10),
			@CAGENCY_CODE		VARCHAR(10)

	DECLARE @OUTPUT TABLE (ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))
	
	SET @CMEMONOPREFIX=@CLOCID

	SET @NSTEP = 10		-- SETTTING UP ENVIRONMENT

	
	SET @CTEMPDBNAME = ''

	SET @CMASTERTABLENAME	= 'PPC_FG_BARCODE_NA_MST'
	SET @CDETAILTABLENAME1	= 'PPC_FG_BARCODE_NA_DET'

	
	SET @CTEMPMASTERTABLENAME	= 'PPC_PPC_FG_BARCODE_NA_MST_UPLOAD'
	SET @CTEMPDETAILTABLENAME1	= 'PPC_PPC_FG_BARCODE_NA_DET_UPLOAD'
	
	
	
	SET @CTEMPMASTERTABLE	=  @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE1	=  @CTEMPDETAILTABLENAME1

	
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'MEMO_ID'
	SET @CMEMONO			= 'MEMO_NO'
	SET @NMEMONOLEN			= LEN(@CMEMONOPREFIX)+6
	
	IF ISNULL(@CLOCID,'')=''
		SELECT @CLOCATIONID	= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID'
	ELSE
		SELECT @CLOCATIONID=@CLOCID
		
	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		

	BEGIN TRANSACTION
	BEGIN TRY
		
		SET @NSTEP = 20

	 IF @NUPDATEMODE = 3
		BEGIN
		    IF (@CXNMEMOID IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED...'
				  GOTO END_PROC  		
			END
			
			SET @CCMD=N' UPDATE '+@CMASTERTABLENAME+' SET CANCELLED=1,LAST_UPDATE=GETDATE() WHERE '+@CKEYFIELD1+'='''+@CXNMEMOID+'''  '
	        EXEC SP_EXECUTESQL @CCMD
	        
			UPDATE A SET PARA2_CODE ='0000000'
			FROM PPC_FG_SKU A
			JOIN  PPC_FG_BARCODE_NA_DET B ON A.PRODUCT_CODE=B.PRODUCT_CODE
			JOIN PPC_FG_BARCODE_NA_MST C ON B.MEMO_ID=C.MEMO_ID
			WHERE C.MEMO_ID=@CXNMEMOID     
			
			
			GOTO END_PROC
		  END	
       
     
		--GETTING DEPT_ID FROM TEMP MASTER TABLE
		SET @CCMD = 'SELECT @CMEMODEPTID = LEFT(MEMO_ID,2), @CKEYFIELDVAL1 = MEMO_ID FROM ' + @CTEMPMASTERTABLE +' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''' '
		EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT, @CKEYFIELDVAL1 VARCHAR(50) OUTPUT', 
								  @CMEMODEPTID OUTPUT, @CKEYFIELDVAL1 OUTPUT
		IF (@CMEMODEPTID IS NULL)
		BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED...'
			  GOTO END_PROC  		
		END
        
       IF NOT EXISTS(SELECT TOP 1 'U' FROM   PPC_PPC_FG_BARCODE_NA_DET_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID))))
       BEGIN
           SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SIZE RATION NOT FOUND PLEASE...'
		   GOTO END_PROC  
     
       END
       
       
       
		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	
			SET @NSTEP = 50		-- GENERATING NEW KEY
			
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN
				-- GENERATING NEW MRR_NO		
				SET @NSAVETRANLOOP=0
				WHILE @NSAVETRANLOOP=0
				BEGIN
					EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
									@CFINYEAR,0, @CMEMONOVAL OUTPUT   
					
					SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
											WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
											AND FIN_YEAR = '''+@CFINYEAR+''' )
									SET @NLOOPOUTPUT=0
								ELSE
									SET @NLOOPOUTPUT=1'
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
				END

				IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
					  GOTO END_PROC  		
				END

				SET @NSTEP = 60		-- GENERATING NEW ID

				-- GENERATING NEW ORDER ID
				SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+ REPLICATE('0', 15-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL))
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  GOTO END_PROC
				END
				
				SET @NSTEP = 70
				-- CHECK WETHER THE MEMO ID IS STILL LATER
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  GOTO END_PROC
				END

				SET @NSTEP = 80		-- UPDATING NEW ID INTO TEMP TABLES

				-- UPDATING NEWLY GENERATED MEMO NO AND MEMO ID IN BUYER ORDER MST AND BUYER ORDER DET TEMP TABLES
				SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
							@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
				PRINT @CCMD		
				EXEC SP_EXECUTESQL @CCMD
				
				
	    END
		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
			SET @NSTEP = 110		-- GETTING ID INFO FROM TEMP TABLE
			
			-- GETTING ORDER_ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ORDER_ID, @CMEMONOVAL = ORDER_NO FROM ' + @CTEMPMASTERTABLE +' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  GOTO END_PROC  		
			END
			
			SET @NSTEP = 120		-- UPDATING SENT_TO_HO FLAG TEMP TABLE
			
			SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE LEFT(MEMO_ID,5) = ''LATER'' AND SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
			PRINT @CCMD	
			EXEC SP_EXECUTESQL @CCMD
			
			
			DELETE FROM PPC_FG_BARCODE_NA_DET WHERE MEMO_ID = @CKEYFIELDVAL1
			
	    END					-- END OF EDITMODE
        
      
        DECLARE @FILTER VARCHAR(MAX)
	    SET @FILTER=' B.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
		SET @NSTEP = 150
		
		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			, @BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@FILTER
		
		SELECT @CAGENCY_CODE=AC_CODE FROM PPC_FG_BARCODE_NA_MST WHERE MEMO_ID =@CKEYFIELD1
			
		
	     ---BARCODE INSERTION--
	      IF OBJECT_ID ('TEMPDB..#TMPBARCODE','U') IS NOT NULL
          DROP TABLE #TMPBARCODE
  
		  SELECT ROW_ID,ARTICLE_CODE,BILL_NO,AC_CODE,PARA1_CODE,SIZEGROUP_CODE,PARA2_CODE,SELECT_QTY 
		  INTO #TMPBARCODE  
		  FROM PPC_PPC_FG_BARCODE_NA_DET_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))  
		 
		  
		  DECLARE @CARTICLE_CODE VARCHAR(10),@CBILL_NO VARCHAR(100),@CAC_CODE VARCHAR(10),
		  @CPARA1_CODE VARCHAR(100),@CSIZEGROUP_CODE VARCHAR(100),@CPARA2_CODE VARCHAR(100),@SELECT_QTY INT,
		  @CROW_ID VARCHAR(100)

		  
		  WHILE EXISTS (SELECT TOP 1 'U' FROM #TMPBARCODE) 
		  BEGIN
		  
		  IF OBJECT_ID ('TEMPDB..#TMPBARCODEDET','U') IS NOT NULL
				   DROP TABLE #TMPBARCODEDET
		   
		   
		   SELECT TOP 1 @CARTICLE_CODE=ARTICLE_CODE ,@CAC_CODE=AC_CODE,@CBILL_NO =BILL_NO ,@CPARA1_CODE =PARA1_CODE ,
						@CSIZEGROUP_CODE=SIZEGROUP_CODE ,@CPARA2_CODE=PARA2_CODE ,@SELECT_QTY=SELECT_QTY,@CROW_ID=ROW_ID   
		   FROM #TMPBARCODE   
		     	     
			SELECT 
			SR=ROW_NUMBER() OVER (ORDER BY A.BARCODESR,QTY DESC ),
			A.BILL_NO,A.AC_CODE,
			A.PARA1_CODE,A.SIZEGROUP_CODE,A.ARTICLE_CODE,
			A.PARA3_CODE,A.PARA2_CODE,A.PRODUCT_CODE  
			INTO #TMPBARCODEDET
			FROM
			(
			SELECT 
				BARCODESR=ROW_NUMBER () OVER(PARTITION BY A.MEMO_ID ORDER BY A.MEMO_ID),
				DET.BILL_NO,DET.AC_CODE,
				B.PARA1_CODE,B.SIZEGROUP_CODE,B.ARTICLE_CODE,
				B.PARA3_CODE,B.PARA2_CODE,B.PRODUCT_CODE ,QTY
			FROM PPC_AGENCY_ISSUE_FG_FIRST_DET A
			JOIN PPC_FG_SKU B ON A.PRODUCT_CODE =B.PRODUCT_CODE 
			JOIN PPC_FGBCG_DET C ON B.PPC_FGBCG_DET_ROW_ID=C.ROW_ID 
			JOIN PPC_FGBCG_MST FGMST ON FGMST .MEMO_ID =C.MEMO_ID 
			JOIN PPC_AGENCY_ISSUE_FG_FIRST_MST MST ON MST.MEMO_ID =A.MEMO_ID 
			JOIN
			(
			 SELECT MEMO_ID,SUM(QUANTITY) AS QTY
			 FROM PPC_AGENCY_ISSUE_FG_FIRST_DET
			 GROUP BY MEMO_ID
			)TQT ON TQT .MEMO_ID =A.MEMO_ID 
			JOIN
			(
				SELECT  B.AC_CODE,A.ARTICLE_CODE ,
				ROW_ID,B.BILL_NO 
				FROM PPC_BUYER_ORDER_DET A
				JOIN PPC_BUYER_ORDER_MST B ON A.ORDER_ID=B.ORDER_ID
				WHERE B.CANCELLED=0
				GROUP BY B.AC_CODE,A.ARTICLE_CODE ,ROW_ID,B.BILL_NO
			) DET ON DET.ROW_ID=C.BO_DET_ROW_ID 
			LEFT OUTER JOIN
			(
				 SELECT PRODUCT_CODE 
				 FROM PPC_FG_BARCODE_NA_DET A
				 JOIN PPC_FG_BARCODE_NA_MST B ON A.MEMO_ID=B.MEMO_ID
				 WHERE B.CANCELLED=0
			 ) NA ON NA.PRODUCT_CODE=B.PRODUCT_CODE
			WHERE FGMST.CANCELLED=0 AND MST.CANCELLED =0
			AND B.PARA2_CODE='0000000  '
			AND NA.PRODUCT_CODE IS NULL
			AND DET.ARTICLE_CODE=@CARTICLE_CODE
			AND DET.BILL_NO=@CBILL_NO
			AND DET.AC_CODE=@CAC_CODE
			AND B.PARA1_CODE =@CPARA1_CODE
			AND B.SIZEGROUP_CODE  =@CSIZEGROUP_CODE
			AND DET.ROW_ID =@CROW_ID
			AND MST.AC_CODE =@CAGENCY_CODE
			) A


				----SELECT 
				----DET.BILL_NO,
				----DET.AC_CODE,
				----SKU.PARA1_CODE,
				----SKU.SIZEGROUP_CODE,
				----SKU.ARTICLE_CODE,
				----SKU.PARA3_CODE,
				----SKU.PARA2_CODE,
				----SKU.PRODUCT_CODE ,
				----SR=ROW_NUMBER() OVER (ORDER BY B.BO_DET_ROW_ID, SKU.PARA2_CODE,SKU.PRODUCT_CODE)
				----INTO #TMPBARCODEDET
				----FROM PPC_FGBCG_MST A
			 ---- JOIN PPC_FGBCG_DET B ON A.MEMO_ID =B.MEMO_ID 
			 ---- JOIN PPC_FG_SKU SKU ON SKU.PPC_FGBCG_DET_ROW_ID=B.ROW_ID 
			 ---- JOIN
			 ----(
				----SELECT  B.AC_CODE,A.ARTICLE_CODE ,
				----ROW_ID,B.BILL_NO FROM PPC_BUYER_ORDER_DET A
				----JOIN PPC_BUYER_ORDER_MST B ON A.ORDER_ID=B.ORDER_ID
				----WHERE B.CANCELLED=0
				----GROUP BY B.AC_CODE,A.ARTICLE_CODE ,ROW_ID,B.BILL_NO
			 ---- ) DET ON DET.ROW_ID=B.BO_DET_ROW_ID 
			 ---- JOIN ARTICLE ART ON ART.ARTICLE_CODE=SKU.ARTICLE_CODE
			 ---- LEFT OUTER JOIN
			 ---- (
			 ----  SELECT PRODUCT_CODE 
			 ----  FROM PPC_FG_BARCODE_NA_DET A
			 ----  JOIN PPC_FG_BARCODE_NA_MST B ON A.MEMO_ID=B.MEMO_ID
			 ----  WHERE B.CANCELLED=0
			 ---- ) NA ON NA.PRODUCT_CODE=SKU.PRODUCT_CODE
			 ---- WHERE SKU.PARA2_CODE='0000000  '
			 ---- AND DET.ARTICLE_CODE=@CARTICLE_CODE
			 ---- AND DET.BILL_NO=@CBILL_NO
			 ---- AND DET.AC_CODE=@CAC_CODE
			 ---- AND SKU.PARA1_CODE =@CPARA1_CODE
			 ---- AND SKU.SIZEGROUP_CODE  =@CSIZEGROUP_CODE
			 ---- AND DET.ROW_ID =@CROW_ID
			 ---- AND A.CANCELLED=0
			 ---- AND NA.PRODUCT_CODE IS NULL
			  
			  
			--  SELECT @CARTICLE_CODE,@CPARA1_CODE,@CSIZEGROUP_CODE
			  
			  DELETE FROM #TMPBARCODEDET WHERE SR>@SELECT_QTY
			
			  INSERT PPC_FG_BARCODE_NA_DET	( MEMO_ID, PRODUCT_CODE, ROW_ID, QUANTITY ,PARA2_CODE)  
			  SELECT @CKEYFIELDVAL1 AS 	MEMO_ID, PRODUCT_CODE, ROW_ID=CAST(NEWID() AS VARCHAR(100)), QUANTITY=1 ,@CPARA2_CODE
			  FROM #TMPBARCODEDET
			  
			  
			  DELETE FROM #TMPBARCODE WHERE ROW_ID =@CROW_ID AND PARA2_CODE=@CPARA2_CODE
			END
			
			
			UPDATE A SET PARA2_CODE =B.PARA2_CODE 
			FROM PPC_FG_SKU A
			JOIN  PPC_FG_BARCODE_NA_DET B ON A.PRODUCT_CODE=B.PRODUCT_CODE
			JOIN PPC_FG_BARCODE_NA_MST C ON B.MEMO_ID=C.MEMO_ID
			WHERE C.MEMO_ID=@CKEYFIELDVAL1  
			   
			--SELECT ''''+PRODUCT_CODE +''''+',', * FROM PPC_FG_BARCODE_NA_DET WHERE MEMO_ID=@CKEYFIELDVAL1
			--ORDER BY PARA2_CODE 

			

		
	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		GOTO END_PROC
	END CATCH

	
END_PROC:
	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
			COMMIT TRANSACTION
		ELSE
			ROLLBACK
	END
	
	INSERT @OUTPUT ( ERRMSG, MEMO_ID)
		VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )

	SELECT * FROM @OUTPUT	
	
	
	--DROPPING TEMP TABLES
	IF ISNULL(@CERRORMSG,'') = ''
	BEGIN
	   DELETE FROM PPC_PPC_FG_BARCODE_NA_MST_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))
	   DELETE FROM PPC_PPC_FG_BARCODE_NA_DET_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))	
	  
    END
    
 
END						
------------- END OF PROCEDURE PPC_SAVETRAN_BARCODE_PRINT		-----------------------------------------
