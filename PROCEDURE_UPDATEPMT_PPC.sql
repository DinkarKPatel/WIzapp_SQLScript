CREATE PROCEDURE UPDATEPMT_PPC
		@CXNTYPE VARCHAR(10),
		@CXNNO VARCHAR(40),
		@CXNID VARCHAR(40),
		@NREVERTFLAG BIT = 0,
		@NALLOWNEGSTOCK BIT = 0,
		@NCHKDELBARCODES BIT = 0,
		@NUPDATEMODE INT=0,	
		@CCMD NVARCHAR(4000) OUTPUT

		--*** PARAMETERS :
		--*** @CXNTYPE - TRANSACTION TYPE (MODULE SPECIFIC)
		--*** @CXNNO - TRANSACTION NO ( MEMO NO OF MASTER TABLE )
		--*** @CXNID - TRANSACTION ID ( MEMO ID OF MASTER TABLE )
		--*** @NREVERTFLAG - A FLAG TO INDICATE WHETHER THIS PROCEDURE IS CALLED TO REVERT STOCK
		--*** @NALLOWNEGSTOCK - FLAG TO INDICATE WHETHER OR NOT ALLOW NEGATIVE STOCK
		--*** @NRETVAL - OUTPUT PARAMETER RETURNED BY THIS PROCEDURE (BIT 1-SUCCESS, 0-UNSUCCESS)
--WITH ENCRYPTION
AS
BEGIN

	DECLARE @NOUTFLAG INT, @NRETVAL BIT,@CXNTABLE VARCHAR(50),@CEXPR NVARCHAR(500),@CXNIDPARA VARCHAR(50),
			@BCANCELLED BIT
	
	SET @NRETVAL = 0
	SET @CCMD = ''

		
	--*** STARTING STOCK UPDATION FOR PURCHASE 
	IF @CXNTYPE IN ('PUR')				-- PURCHASE INVOICE
	BEGIN
		IF @NREVERTFLAG = 1
			SET @NOUTFLAG = 1
		ELSE
			SET @NOUTFLAG = -1
     
        	
		UPDATE PPC_PMT 
			SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK - ( @NOUTFLAG * B.QUANTITY )
			FROM 
			(	SELECT B.PRODUCT_UID, SUM(B.QUANTITY)+SUM(ADDITIONAL_QTY) AS QUANTITY 
				FROM PPC_PID01106_BARCODE  B
				JOIN PPC_PID01106 PID ON B.PID_ROW_ID =PID.ROW_ID 
				JOIN PPC_PIM01106 C ON PID.MRR_ID = C.MRR_ID
				JOIN PPC_SKU D ON B.PRODUCT_UID = D.PRODUCT_UID
				JOIN ARTICLE E ON D.ARTICLE_CODE = E.ARTICLE_CODE
				WHERE PID.MRR_ID = @CXNID 
				GROUP BY B.PRODUCT_UID
			) B
			WHERE PPC_PMT.PRODUCT_UID = B.PRODUCT_UID --AND BO_BOM_ROW_ID<>''
			
	

		SET @NRETVAL = 1		--*** SUCCESS
		
		
		SELECT @BCANCELLED=CANCELLED FROM PPC_PIM01106 WHERE MRR_ID=@CXNID
		
		--*** CHECKING FOR NEGATIVE STOCK
		--*** IF USER OPTED NOT TO ALLOW NEGATIVE STOCK AND STOCK IS GOING OUT
		IF (@NREVERTFLAG = 0 AND @NALLOWNEGSTOCK = 0 AND @NOUTFLAG = 1) OR @BCANCELLED=1 OR @NUPDATEMODE IN (4,5)
		BEGIN
			--PRINT 'CHECKING FOR NEGATIVE STOCK'
			PRINT 'PMT NEGATIVE START'
			IF EXISTS ( SELECT A.PRODUCT_UID FROM PPC_PMT A JOIN
						(SELECT B.PRODUCT_UID,SUM(B.QUANTITY) AS QUANTITY 
						FROM PPC_PID01106_BARCODE  B
						JOIN PPC_PID01106 PID ON B.PID_ROW_ID =PID.ROW_ID 
						JOIN PPC_PIM01106 C ON C.MRR_ID=PID.MRR_ID
						JOIN PPC_SKU D ON B.PRODUCT_UID = D.PRODUCT_UID
						JOIN ARTICLE E ON D.ARTICLE_CODE = E.ARTICLE_CODE
						WHERE PID.MRR_ID = @CXNID AND E.STOCK_NA=0
						GROUP BY B.PRODUCT_UID
						) B ON B.PRODUCT_UID=A.PRODUCT_UID
						WHERE A.QUANTITY_IN_STOCK < 0)
			BEGIN
				SET @NRETVAL = 0		--*** UNSUCCESS
				SET @CCMD = N'SELECT DISTINCT A.PRODUCT_UID, A.QUANTITY_IN_STOCK FROM PPC_PMT A  JOIN
						(SELECT B.PRODUCT_UID,C.DEPARTMENT_ID, SUM(B.QUANTITY) AS QUANTITY 
						FROM PPC_PID01106_BARCODE B
						JOIN PPC_PID01106 PID ON B.PID_ROW_ID =PID.ROW_ID 
						JOIN PPC_PIM01106 C ON C.MRR_ID=PID.MRR_ID
						JOIN PPC_SKU D ON B.PRODUCT_UID = D.PRODUCT_UID
						JOIN ARTICLE E ON D.ARTICLE_CODE = E.ARTICLE_CODE
						WHERE PID.MRR_ID = '''+@CXNID+''' AND E.STOCK_NA=0
						GROUP BY B.PRODUCT_UID) B ON B.PRODUCT_UID=A.PRODUCT_UID 
						WHERE A.QUANTITY_IN_STOCK < 0 '
			END
		END	
	    
	END			-- END OF LABEL PURCHASE INVOICE
	
ELSE   
 --*** STARTING STOCK UPDATION FOR PURCHASE RETURN  
 IF @CXNTYPE IN ('PPC_PRT')  -- PURCHASE RETURN  
 BEGIN  
  IF @NREVERTFLAG = 1  
   SET @NOUTFLAG = -1  
  ELSE  
   SET @NOUTFLAG = 1  
 
    
  --*** UPDATING THE QUANTITY IN STOCK FROM PMT FOR THE GIVEN MEMO  
  UPDATE A   
   SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK - ( @NOUTFLAG * B.QUANTITY )  
   FROM  PPC_PMT A
   JOIN 
   ( SELECT B.PRODUCT_CODE, B.PRODUCT_UID, SUM(QUANTITY) AS QUANTITY   
    FROM PPC_RMD01106 B  
    JOIN PPC_RMM01106 C ON C.RM_ID=B.RM_ID  
    JOIN PPC_SKU D ON B.PRODUCT_CODE = D.PRODUCT_CODE  
    JOIN ARTICLE E ON D.ARTICLE_CODE = E.ARTICLE_CODE  
    WHERE B.RM_ID = @CXNID AND E.STOCK_NA=0  
    GROUP BY B.PRODUCT_CODE, B.PRODUCT_UID
   ) B  ON A.PRODUCT_CODE = B.PRODUCT_CODE   
   AND A.PRODUCT_UID = B.PRODUCT_UID  
  
  SET @NRETVAL = 1  --*** SUCCESS  
  
  --*** CHECKING FOR NEGATIVE STOCK  
  --*** IF USER OPTED NOT TO ALLOW NEGATIVE STOCK AND STOCK IS GOING OUT  
  IF (@NREVERTFLAG = 0 AND @NALLOWNEGSTOCK = 0 AND @NOUTFLAG = 1)  
  BEGIN  
   IF EXISTS ( SELECT A.PRODUCT_CODE FROM PPC_PMT A JOIN  
      (SELECT B.PRODUCT_CODE,B.PRODUCT_UID, SUM(B.QUANTITY) AS QUANTITY   
      FROM PPC_RMD01106 B  
      JOIN PPC_RMM01106 C ON C.RM_ID=B.RM_ID  
      JOIN PPC_SKU D ON B.PRODUCT_CODE = D.PRODUCT_CODE  
      JOIN ARTICLE E ON D.ARTICLE_CODE = E.ARTICLE_CODE  
      WHERE B.RM_ID = @CXNID AND E.STOCK_NA=0  
      GROUP BY B.PRODUCT_CODE,B.PRODUCT_UID 
      ) B ON B.PRODUCT_CODE=A.PRODUCT_CODE AND B.PRODUCT_UID=A.PRODUCT_UID  
      WHERE A.QUANTITY_IN_STOCK < 0)  
   BEGIN  
    SET @NRETVAL = 0  --*** UNSUCCESS  
    SET @CCMD = N'SELECT DISTINCT A.PRODUCT_CODE, A.QUANTITY_IN_STOCK,''FOLLOWING BAR CODES ARE GOING NEGATIVE STOCK'' AS ERRMSG FROM PPC_PMT A  JOIN  
      (SELECT B.PRODUCT_CODE, B.PRODUCT_UID, SUM(B.QUANTITY) AS QUANTITY   
      FROM PPC_RMD01106 B  
      JOIN PPC_RMM01106 C ON C.RM_ID=B.RM_ID  
      JOIN PPC_SKU D ON B.PRODUCT_CODE = D.PRODUCT_CODE  
      JOIN ARTICLE E ON D.ARTICLE_CODE = E.ARTICLE_CODE  
      WHERE B.RM_ID = '''+@CXNID+''' AND E.STOCK_NA=0  
      GROUP BY B.PRODUCT_CODE, PRODUCT_UID
      ) B ON B.PRODUCT_CODE=A.PRODUCT_CODE AND B.PRODUCT_UID=A.PRODUCT_UID
      WHERE A.QUANTITY_IN_STOCK < 0 '  
   END  
  
  END   
 END  --  END OF PURCHASE RETURN  
  
  
	
	ELSE IF @CXNTYPE IN ('AMIS')				-- PURCHASE INVOICE
	BEGIN
		IF @NREVERTFLAG = 1
			SET @NOUTFLAG = 1
		ELSE
			SET @NOUTFLAG = -1
     
        	
		UPDATE PPC_PMT 
			SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK - ( @NOUTFLAG * B.QUANTITY )
			FROM 
			(	SELECT B.PRODUCT_UID, SUM(B.QUANTITY) AS QUANTITY 
				FROM PPC_AGENCY_ISSUE_MATERIAL_DET  B
				JOIN PPC_AGENCY_ISSUE_MATERIAL_MST  C ON B.MEMO_ID =C.MEMO_ID 
				WHERE C.MEMO_ID  = @CXNID 
				GROUP BY B.PRODUCT_UID
			) B
			WHERE PPC_PMT.PRODUCT_UID = B.PRODUCT_UID --AND BO_BOM_ROW_ID<>''
			
	
		SET @NRETVAL = 1		--*** SUCCESS
		
		
		SELECT @BCANCELLED=CANCELLED FROM PPC_AGENCY_ISSUE_MATERIAL_MST WHERE MEMO_ID=@CXNID
		
		--*** CHECKING FOR NEGATIVE STOCK
		--*** IF USER OPTED NOT TO ALLOW NEGATIVE STOCK AND STOCK IS GOING OUT
		IF (@NREVERTFLAG = 0 AND @NALLOWNEGSTOCK = 0 AND @NOUTFLAG = 1) OR @BCANCELLED=1 OR @NUPDATEMODE IN (4,5)
		BEGIN
			--PRINT 'CHECKING FOR NEGATIVE STOCK'
			PRINT 'PMT NEGATIVE START'
			IF EXISTS ( SELECT A.PRODUCT_UID FROM PPC_PMT A JOIN
						(SELECT B.PRODUCT_UID,SUM(B.QUANTITY) AS QUANTITY 
						FROM PPC_AGENCY_ISSUE_MATERIAL_DET  B
						JOIN PPC_AGENCY_ISSUE_MATERIAL_MST C ON C.MEMO_ID=B.MEMO_ID
						WHERE C.MEMO_ID = @CXNID 
						GROUP BY B.PRODUCT_UID
						) B ON B.PRODUCT_UID=A.PRODUCT_UID
						WHERE A.QUANTITY_IN_STOCK < 0)
			BEGIN
				SET @NRETVAL = 0		--*** UNSUCCESS
				SET @CCMD = N'SELECT DISTINCT A.PRODUCT_UID, A.QUANTITY_IN_STOCK FROM PPC_PMT A  JOIN
						(SELECT B.PRODUCT_UID, SUM(B.QUANTITY) AS QUANTITY 
						FROM PPC_AGENCY_ISSUE_MATERIAL_DET B
						JOIN PPC_AGENCY_ISSUE_MATERIAL_MST C ON C.MEMO_ID=B.MEMO_ID
						WHERE B.MEMO_ID = '''+@CXNID+''' 
						GROUP BY B.PRODUCT_UID) B ON B.PRODUCT_UID=A.PRODUCT_UID 
						WHERE A.QUANTITY_IN_STOCK < 0 '
			END
		END	
	    
	END			-- END OF LABEL ISSUE MATERIAL
	
	ELSE IF @CXNTYPE IN ('DQ')				-- DEALLOCATE 
	BEGIN
		IF @NREVERTFLAG = 1
			SET @NOUTFLAG = 1
		ELSE
			SET @NOUTFLAG = -1
			
		 UPDATE PPC_PMT 
			SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK - ( @NOUTFLAG * B.QUANTITY )
			FROM 
			(	SELECT B.BO_BOM_ROW_ID , B.PRODUCT_UID, SUM(B.QUANTITY) AS QUANTITY 
				FROM PPC_DQ_DET  B
				JOIN PPC_DQRQ_MST  C ON B.MEMO_ID =C.MEMO_ID 
				WHERE C.MEMO_ID  = @CXNID 
				GROUP BY B.BO_BOM_ROW_ID ,B.PRODUCT_UID
			) B
			WHERE PPC_PMT.PRODUCT_UID = B.PRODUCT_UID  AND PPC_PMT.BO_BOM_ROW_ID =B.BO_BOM_ROW_ID 
		
	
	
	
		SET @NRETVAL = 1		--*** SUCCESS
		
		
		SELECT @BCANCELLED=CANCELLED FROM PPC_DQRQ_MST WHERE MEMO_ID=@CXNID
		
		--*** CHECKING FOR NEGATIVE STOCK
		--*** IF USER OPTED NOT TO ALLOW NEGATIVE STOCK AND STOCK IS GOING OUT
		IF (@NREVERTFLAG = 0 AND @NALLOWNEGSTOCK = 0 AND @NOUTFLAG = 1) OR @BCANCELLED=1 OR @NUPDATEMODE IN (4,5)
		BEGIN
			--PRINT 'CHECKING FOR NEGATIVE STOCK'
			PRINT 'PMT NEGATIVE START'
			IF EXISTS ( SELECT A.PRODUCT_UID FROM PPC_PMT A JOIN
						(SELECT B.BO_BOM_ROW_ID , B.PRODUCT_UID,SUM(B.QUANTITY) AS QUANTITY 
						FROM PPC_DQ_DET  B
						JOIN PPC_DQRQ_MST C ON C.MEMO_ID=B.MEMO_ID
						WHERE C.MEMO_ID = @CXNID 
						GROUP BY B.BO_BOM_ROW_ID ,B.PRODUCT_UID
						) B ON B.PRODUCT_UID=A.PRODUCT_UID 
						AND A.BO_BOM_ROW_ID =B.BO_BOM_ROW_ID 
						WHERE A.QUANTITY_IN_STOCK < 0)
			BEGIN
				SET @NRETVAL = 0		--*** UNSUCCESS
				SET @CCMD = N'SELECT DISTINCT A.PRODUCT_UID, A.QUANTITY_IN_STOCK FROM PPC_PMT A  JOIN
						(SELECT B.BO_BOM_ROW_ID ,B.PRODUCT_UID, SUM(B.QUANTITY) AS QUANTITY 
						FROM PPC_DQ_DET B
						JOIN PPC_DQRQ_MST C ON C.MEMO_ID=B.MEMO_ID
						WHERE B.MEMO_ID = '''+@CXNID+''' 
						GROUP BY B.BO_BOM_ROW_ID ,B.PRODUCT_UID) B ON B.PRODUCT_UID=A.PRODUCT_UID 
						AND A.BO_BOM_ROW_ID =B.BO_BOM_ROW_ID 
						WHERE A.QUANTITY_IN_STOCK < 0 '
			END
		END	
		
	    
	END			-- END OF LABEL DEALLOCATE
	
   ELSE IF @CXNTYPE IN ('RQ')				-- REALLOCATE 
	BEGIN
		IF @NREVERTFLAG = 1
			SET @NOUTFLAG = 1
		ELSE
			SET @NOUTFLAG = -1
     
        	
			UPDATE PPC_PMT 
			SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK - ( @NOUTFLAG * B.QUANTITY )
			FROM 
			(	SELECT RQ.BO_BOM_ROW_ID , RQ.PRODUCT_UID, SUM(RQ.QUANTITY) AS QUANTITY 
				FROM PPC_DQ_DET  B
				JOIN PPC_RQ_DET RQ ON B.ROW_ID=RQ.REF_ROW_ID
				JOIN PPC_DQRQ_MST  C ON B.MEMO_ID =C.MEMO_ID 
				WHERE C.MEMO_ID  = @CXNID 
				GROUP BY RQ.BO_BOM_ROW_ID ,RQ.PRODUCT_UID
			) B
			WHERE PPC_PMT.PRODUCT_UID = B.PRODUCT_UID  
			AND PPC_PMT .BO_BOM_ROW_ID =B.BO_BOM_ROW_ID 

		SET @NRETVAL = 1		--*** SUCCESS
		
		
		SELECT @BCANCELLED=CANCELLED FROM PPC_DQRQ_MST WHERE MEMO_ID=@CXNID
		
		--*** CHECKING FOR NEGATIVE STOCK
		--*** IF USER OPTED NOT TO ALLOW NEGATIVE STOCK AND STOCK IS GOING OUT
		
		IF (@NREVERTFLAG = 0 AND @NALLOWNEGSTOCK = 0 AND @NOUTFLAG = 1) OR @BCANCELLED=1 OR @NUPDATEMODE IN (4,5)
		BEGIN
			--PRINT 'CHECKING FOR NEGATIVE STOCK'
			PRINT 'PMT NEGATIVE START'
			IF EXISTS ( SELECT A.PRODUCT_UID FROM PPC_PMT A JOIN
						(SELECT RQ.BO_BOM_ROW_ID , RQ.PRODUCT_UID,SUM(RQ.QUANTITY) AS QUANTITY 
						FROM PPC_DQ_DET  B
				        JOIN PPC_RQ_DET RQ ON B.ROW_ID=RQ.REF_ROW_ID
				        JOIN PPC_DQRQ_MST  C ON B.MEMO_ID =C.MEMO_ID 
				        WHERE C.MEMO_ID  = @CXNID 
						GROUP BY RQ.BO_BOM_ROW_ID ,RQ.PRODUCT_UID
						) B ON B.PRODUCT_UID=A.PRODUCT_UID
						AND B.BO_BOM_ROW_ID =A.BO_BOM_ROW_ID 
						WHERE A.QUANTITY_IN_STOCK < 0)
			BEGIN
				SET @NRETVAL = 0		--*** UNSUCCESS
				SET @CCMD = N'SELECT DISTINCT A.PRODUCT_UID, A.QUANTITY_IN_STOCK FROM PPC_PMT A  JOIN
						(SELECT RQ.BO_BOM_ROW_ID ,RQ.PRODUCT_UID,SUM(RQ.QUANTITY) AS QUANTITY 
						FROM PPC_DQ_DET  B
				        JOIN PPC_RQ_DET RQ ON B.ROW_ID=RQ.REF_ROW_ID
				        JOIN PPC_DQRQ_MST  C ON B.MEMO_ID =C.MEMO_ID 
				        WHERE C.MEMO_ID = '''+@CXNID+''' 
						GROUP BY RQ.BO_BOM_ROW_ID ,B.PRODUCT_UID) B ON B.PRODUCT_UID=A.PRODUCT_UID
						AND B.BO_BOM_ROW_ID =A.BO_BOM_ROW_ID  
						WHERE A.QUANTITY_IN_STOCK < 0 '
			END
		END	
	    
	END			-- END OF LABEL REALLOCATE
 
END_PROC:
	
	IF @CCMD<>''
	BEGIN
		DECLARE @NSPID INT
		SET @NSPID=@@SPID
		DELETE FROM NEGPMTMSG WHERE SP_ID=@@SPID
		
		INSERT NEGPMTMSG (PRODUCT_UID,QUANTITY_IN_STOCK)
		EXEC SP_EXECUTESQL @CCMD
		
		
		UPDATE NEGPMTMSG SET SP_ID=@@SPID WHERE SP_ID IS NULL
		
		SET @CCMD=N'SELECT ARTICLE_NO,PARA1_NAME,PARA2_NAME,QUANTITY_IN_STOCK FROM 
					NEGPMTMSG A (NOLOCK)
					JOIN PRD_SKU B (NOLOCK) ON A.PRODUCT_UID=B.PRODUCT_UID
					JOIN ARTICLE C (NOLOCK) ON C.ARTICLE_CODE=B.ARTICLE_CODE
					JOIN PARA1 D (NOLOCK) ON D.PARA1_CODE=B.PARA1_CODE
					JOIN PARA2 E (NOLOCK) ON E.PARA2_CODE=B.PARA2_CODE
					WHERE SP_ID='+LTRIM(RTRIM(STR(@NSPID)))+
			    'UNION ALL
			    SELECT ARTICLE_NO,PARA1_NAME,PARA2_NAME,QUANTITY_IN_STOCK FROM 
					NEGPMTMSG A (NOLOCK)
					JOIN SKU B (NOLOCK) ON A.PRODUCT_UID=B.PRODUCT_CODE
					JOIN ARTICLE C (NOLOCK) ON C.ARTICLE_CODE=B.ARTICLE_CODE
					JOIN PARA1 D (NOLOCK) ON D.PARA1_CODE=B.PARA1_CODE
					JOIN PARA2 E (NOLOCK) ON E.PARA2_CODE=B.PARA2_CODE
					WHERE SP_ID='+LTRIM(RTRIM(STR(@NSPID)))
					
	END

END
