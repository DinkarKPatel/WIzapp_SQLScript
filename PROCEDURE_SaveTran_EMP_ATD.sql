create PROCEDURE SAVETRAN_EMP_ATD  
(  
 @NUPDATEMODE  NUMERIC(1,0),  
 @NSPID    INT,  
 @NYEAR    INT,  
 @NMONTH    INT,  
 @LCHECKWEEKLYOFF BIT = 0,  
 @CEMPID    VARCHAR(20)  ,
 @cLocId char(4)=''
)  
--WITH ENCRYPTION
AS  
BEGIN  
 -- @NUPDATEMODE: 1- ATTENDANCE IMPORT FROM EXCEL OR DATABASE  
 --     2- MANUAL ENTRY (CREATE EMPTY RECORDS)  
  
 DECLARE @CTEMPDBNAME   VARCHAR(100),  
   @CMASTERTABLENAME  VARCHAR(100),  
   @CTEMPMASTERTABLENAME VARCHAR(100),  
   @CTEMPMASTERTABLE  VARCHAR(100),  
   @CMEMODEPTID   VARCHAR(4),  
   @CERRORMSG    VARCHAR(500),  
   @CLOCATIONID   VARCHAR(4),  
   @CHODEPTID    VARCHAR(4),  
   @CCMD     NVARCHAR(4000),  
   @CCMDOUTPUT    NVARCHAR(4000),  
   @NSAVETRANLOOP   BIT,  
   @NSTEP     INT,  
   @LENABLETEMPDATABASE BIT,  
   @CWEEKLYOFF1   VARCHAR(100),   
   @CWEEKLYOFF2   VARCHAR(100),  
   @NABSSTATUS    INT,
   @CKEYFIELDVAL1 VARCHAR(100),
   @CEMPATTROWID  VARCHAR(100)
  
 DECLARE @DTSTART DATETIME,   
   @DTEND DATETIME,   
   @DTTEMP DATETIME  
  
 DECLARE @CSHIFTID VARCHAR(20),  
   @DSHIFTTIMEIN DATETIME,  
   @DSHIFTTIMEOUT DATETIME,  
   @DSHIFTHALFDAYCUTOFF DATETIME,  
   @CEMPDEPTID VARCHAR(2)  
  
  
 DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))  
  
 SET @NSTEP = 0  -- SETTTING UP ENVIRONMENT  
 SELECT  @CEMPATTROWID=ROW_ID FROM  EMP_WPAYATT
  
 -- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
 SET @CTEMPDBNAME = ''  
  
 SET @CMASTERTABLENAME = 'EMP_ATTENDANCE'  

 SET @CTEMPMASTERTABLENAME = 'TEMP_EMP_ATTENDANCE_'+LTRIM(RTRIM(STR(@NSPID)))  
 SET @CTEMPMASTERTABLE = @CTEMPDBNAME + @CTEMPMASTERTABLENAME  
   
 SET @CERRORMSG   = ''  
   
 SELECT @CLOCATIONID  = VALUE FROM CONFIG WHERE config_option ='LOCATION_ID'
 SELECT @CHODEPTID    = [VALUE] FROM CONFIG WHERE  CONFIG_OPTION='HO_LOCATION_ID'    
  
 SET @NSTEP = 10  -- GETTING DEPTID INFO FROM TEMP TABLE  
  
  
 BEGIN TRY  
  SET @NSTEP = 95  -- CHECKING PARAMETERS  

  IF ISNULL(@CLOCATIONID,'')=''
 BEGIN
    SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
	GOTO END_PROC    
 END
  
  IF ISNULL(@NYEAR,0) <= 0  
  BEGIN  
   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' INVALID VALUE FOR [YEAR]...'  
   GOTO END_PROC      
  END  
    
  IF ISNULL(@NMONTH,0) <= 0  
  BEGIN  
   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' INVALID VALUE FOR [MONTH]...'  
   GOTO END_PROC      
  END  
    
  IF ISNULL(@CEMPID,'') = ''  
  BEGIN  
   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' EMPLOYEE ID IS NOT SPECIFIED...'  
   GOTO END_PROC      
  END  
  
  
  IF @NUPDATEMODE = 1  
  BEGIN  
   -- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE  
   SET @NSTEP = 100  -- UPDATING TRANSACTION TABLE  
  
   -- UPDATING ROW_ID IN TEMP TABLES  
   SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())  
        WHERE LEFT(ROW_ID,5) = ''LATER'''  
   EXEC SP_EXECUTESQL @CCMD  
  
     
   SET @NSTEP = 105  -- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES  
   -- DELETING EXISTING ENTRIES WHICH ARE WITHOUT IN-TIME OR OUT-TIME   
     
   SET @CCMD = N'DELETE A  
      FROM EMP_ATTENDANCE A  
      JOIN ' + @CTEMPMASTERTABLE + ' B   
       ON A.EMP_ID = B.EMP_ID AND A.ATTENDANCE_DT = B.ATTENDANCE_DT  
      WHERE A.EMP_ID = ''' + @CEMPID + '''  
      AND   YEAR(A.ATTENDANCE_DT) = ' + LTRIM(RTRIM(STR(@NYEAR))) + '  
      AND   MONTH(A.ATTENDANCE_DT) = ' + LTRIM(RTRIM(STR(@NMONTH))) + '  
      AND   A.ENTRY_MODE = 2  
      AND   A.MODIFIED = 0  
      AND   A.TIME_IN = ''''  
      AND   A.TIME_OUT = '''''  
   EXEC SP_EXECUTESQL @CCMD  
  
  
   --SET @NSTEP = 105  -- UPDATING TRANSACTION TABLE - DELETING INCOMING ENTRIES  
   ---- DELETING INCOMING ENTRIES WHICH ARE ALREADY THERE IN EXITING TABLE  
  
   --SET @CCMD = N'DELETE A  
   --   FROM ' + @CTEMPMASTERTABLE + ' A  
   --   JOIN EMP_ATTENDANCE B   
   --    ON A.EMP_ID = B.EMP_ID AND A.ATTENDANCE_DT = B.ATTENDANCE_DT  
   --   WHERE B.EMP_ID = ''' + @CEMPID + '''  
   --   AND   YEAR(B.ATTENDANCE_DT) = ' + LTRIM(RTRIM(STR(@NYEAR))) + '  
   --   AND   MONTH(B.ATTENDANCE_DT) = ' + LTRIM(RTRIM(STR(@NMONTH))) + '  
   --   AND   ( B.ENTRY_MODE = 1  
   --     OR B.MODIFIED = 1  
   --     OR B.TIME_IN <> ''''  
   --     OR B.TIME_OUT <> '''')'  
   --EXEC SP_EXECUTESQL @CCMD  
  
 ---TO UPDATE THE TIMEIN AND TIMEOUT    
  SET @NSTEP = 125  
    
     SET @CCMD = N' UPDATE EMP_ATTENDANCE  SET SYNC = 0 WHERE ISNULL(SYNC,0) = 1'   
  EXEC SP_EXECUTESQL @CCMD  
    
  DECLARE @CTIMEIN DATETIME, @CTIMEOUT DATETIME, @CATTENDENCEDT DATETIME  
  DECLARE @CROWID VARCHAR(200)  
  DECLARE  @CNEWROWID VARCHAR(200)  
    
  IF (NOT ISNULL(OBJECT_ID ('_TEMP_ATTR_'),'') ='')  
   DROP TABLE _TEMP_ATTR_  
  SET @CCMD =N' SELECT * INTO _TEMP_ATTR_  
   FROM '+ @CTEMPMASTERTABLE + ' ORDER BY EMP_ID, ATTENDANCE_DT, TIME_IN, TIME_OUT'  
    EXEC SP_EXECUTESQL @CCMD   
  DECLARE ABC CURSOR FOR       
   SELECT EMP_ID, ATTENDANCE_DT,ROW_ID FROM _TEMP_ATTR_   
     
  -- SELECT * FROM _TEMP_ATTR_  
    
    OPEN ABC          
  FETCH NEXT FROM ABC INTO @CEMPID,@CATTENDENCEDT, @CROWID  
  WHILE @@FETCH_STATUS = 0          
  BEGIN          
  -- PRINT 'A'  
     SELECT TOP 1 @CNEWROWID = ROW_ID, @CTIMEIN = TIME_IN, @CTIMEOUT = TIME_OUT    
     FROM EMP_ATTENDANCE  
     WHERE EMP_ID = @CEMPID AND ATTENDANCE_DT = @CATTENDENCEDT AND ISNULL(SYNC ,0)=0   
     ORDER BY TIME_IN, TIME_OUT   
       
       
     -- SELECT TOP 1  ROW_ID,  TIME_IN, TIME_OUT    
     --FROM EMP_ATTENDANCE  
     --WHERE EMP_ID = @CEMPID AND ATTENDANCE_DT = @CATTENDENCEDT AND ISNULL(SYNC ,0)=0   
     --ORDER BY TIME_IN, TIME_OUT   
       
    --PRINT ''+@CNEWROWID +''   
    --PRINT 'TEST'  
      
       
  IF (ISNULL(@CNEWROWID ,'') <>'' )  
  BEGIN   
  --PRINT 'F'    
    
  IF EXISTS (SELECT ROW_ID FROM _TEMP_ATTR_ WHERE LOG_ABSENT_STATUS>0 AND ROW_ID =@CROWID )  
   BEGIN  
        UPDATE A SET A.TIME_IN = '1900-01-01',A.TIME_OUT = '1900-01-01', A.LOG_ABSENT_STATUS = B.LOG_ABSENT_STATUS,  
    A.REMARKS_IN = B.REMARKS_IN, A.REMARKS_OUT  = B.REMARKS_OUT   
    FROM EMP_ATTENDANCE A       
    JOIN _TEMP_ATTR_ B ON A.EMP_ID = B.EMP_ID  
      AND A.ATTENDANCE_DT = B.ATTENDANCE_DT  
    WHERE  B.ROW_ID =  @CROWID   
    AND A.ROW_ID = @CNEWROWID      
   END  
   ELSE  
   BEGIN  
       
     IF (ISNULL(@CTIMEIN,'') ='')  
     BEGIN  
     --PRINT 'F'   
      UPDATE A SET TIME_IN = B.TIME_IN, A.LOG_ABSENT_STATUS = B.LOG_ABSENT_STATUS,  
        A.REMARKS_IN = B.REMARKS_IN,A.EMPIMAGE=B.EMPIMAGE    
        FROM EMP_ATTENDANCE A       
        JOIN _TEMP_ATTR_ B ON A.EMP_ID = B.EMP_ID  
          AND A.ATTENDANCE_DT = B.ATTENDANCE_DT  
        WHERE  B.ROW_ID =  @CROWID   
        AND A.ROW_ID = @CNEWROWID      
        AND A.TIME_IN =''  
        --PRINT 'A'  
          
      END       
        
     IF (ISNULL(@CTIMEOUT ,'') ='')  
     BEGIN  
     --PRINT 'B'  
       
      --SELECT B.TIME_OUT, B.LOG_ABSENT_STATUS,  
      --   B.REMARKS_OUT,B.EMPIMAGE_OUT  
      --  FROM EMP_ATTENDANCE A        
      --  JOIN _TEMP_ATTR_ B ON A.EMP_ID = B.EMP_ID  
      --    AND A.ATTENDANCE_DT = B.ATTENDANCE_DT  
      --  WHERE  B.ROW_ID =  @CROWID   
      --  AND A.ROW_ID = @CNEWROWID      
      --  AND A.TIME_OUT  =''  
          
      
       UPDATE A SET TIME_OUT = B.TIME_OUT, A.LOG_ABSENT_STATUS = B.LOG_ABSENT_STATUS,  
        A.REMARKS_OUT = B.REMARKS_OUT,A.EMPIMAGE_OUT=B.EMPIMAGE_OUT  
        FROM EMP_ATTENDANCE A        
        JOIN _TEMP_ATTR_ B ON A.EMP_ID = B.EMP_ID  
          AND A.ATTENDANCE_DT = B.ATTENDANCE_DT  
        WHERE  B.ROW_ID =  @CROWID   
        AND A.ROW_ID = @CNEWROWID      
        AND A.TIME_OUT  =''   
      END       
    END  
      UPDATE EMP_ATTENDANCE SET SYNC = 1 WHERE ROW_ID = @CNEWROWID   
        
      SET @CCMD = N'UPDATE '+@CTEMPMASTERTABLENAME+' SET SYNC = 1 WHERE ROW_ID = ''' + @CROWID +''''  
      PRINT @CCMD  
      EXEC SP_EXECUTESQL @CCMD   
      --SELECT * FROM EMP_ATTENDANCE WHERE ROW_ID = @CNEWROWID   
        
    END  
  SET  @CNEWROWID = ''  
  SET @CTIMEIN = ''  
  SET @CTIMEOUT =''  
            
   FETCH NEXT FROM ABC INTO @CEMPID,@CATTENDENCEDT , @CROWID  
  END          
  CLOSE ABC          
  DEALLOCATE ABC   
    
 -- SELECT * FROM _TEMP_ATTR_   
  --SET @CCMD = N'SELECT * FROM '+@CTEMPMASTERTABLENAME+' '  
  --  EXEC SP_EXECUTESQL @CCMD   
      
  SET @CCMD = N'DELETE FROM '+@CTEMPMASTERTABLENAME+' WHERE ISNULL(SYNC,0) = 1'  
    EXEC SP_EXECUTESQL @CCMD   
      
    --SET @CCMD = N'SELECT * FROM '+@CTEMPMASTERTABLENAME+' '  
    --EXEC SP_EXECUTESQL @CCMD   
    
   -- INSERTING/UPDATING THE ENTRIES IN EMP_ATTENDANCE TABLE FROM TEMPTABLE  
   SET @NSTEP = 116  -- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES  
  
   EXEC UPDATEMASTERXN   
      @CSOURCEDB = @CTEMPDBNAME  
    , @CSOURCETABLE = @CTEMPMASTERTABLENAME  
    , @CDESTDB  = ''  
    , @CDESTTABLE = @CMASTERTABLENAME  
    , @CKEYFIELD1 = 'ROW_ID'  
    -- , @LUPDATEXNS = 1  
  
   -- DROPPING TEMP TABLES  
   SET @NSTEP = 120  
     
   --IF OBJECT_ID(@CTEMPMASTERTABLE, 'U') IS NOT NULL  
   --BEGIN  
   -- SET @CCMD = N'DROP TABLE ' +  @CTEMPMASTERTABLE  
   -- EXEC SP_EXECUTESQL @CCMD  
   --END  
  END  
    
   
  
  SET @NSTEP = 129  
  
  --SET @LCHECKWEEKLYOFF = 0  
  
  IF EXISTS ( SELECT [VALUE] FROM CONFIG   
     WHERE    CONFIG_OPTION = 'WEEKLYOFF'   
     AND   [VALUE] = '1' )   
   SET @LCHECKWEEKLYOFF = 1  
  
  
  SELECT @CWEEKLYOFF1 = WEEKLY_OFF1, @CWEEKLYOFF2 = WEEKLY_OFF2 FROM EMP_MST WHERE EMP_ID = @CEMPID  
  SET @CWEEKLYOFF1 = ISNULL(@CWEEKLYOFF1,'')  
  SET @CWEEKLYOFF2 = ISNULL(@CWEEKLYOFF2,'')  
  
  SET @NSTEP = 130  
  -- INSERTING MISSING DATES TO THE ATTENDANCE  
  
  SET @DTSTART = LTRIM(RTRIM(STR(@NYEAR)))+'-'+LTRIM(RTRIM(STR(@NMONTH)))+'-01'  
  SET @DTEND = DATEADD(DD, -1, DATEADD(MM, 1, @DTSTART))  
  
  DECLARE @MONTH_DAYS TABLE ( MONTH_DATE DATETIME, ABS_STATUS INT )  
  
  SET @DTTEMP = @DTSTART  
  
  WHILE @DTTEMP <= @DTEND  
  BEGIN  
   IF @LCHECKWEEKLYOFF = 1 AND ( DATENAME(DW, @DTTEMP) IN ( @CWEEKLYOFF1, @CWEEKLYOFF2 ) )  
    SET @NABSSTATUS = 1  
   ELSE  
   IF @LCHECKWEEKLYOFF = 1 AND ( DATENAME(DW, @DTTEMP) NOT IN ( @CWEEKLYOFF1, @CWEEKLYOFF2 ) )  
    SET @NABSSTATUS = 3 
   ELSE    
    SET @NABSSTATUS = 0  
    
    
   INSERT @MONTH_DAYS VALUES ( @DTTEMP, @NABSSTATUS )  
  
   SET @DTTEMP = DATEADD(DD, 1, @DTTEMP)  
  END  
  
  
  
  --SELECT * FROM @MONTH_DAYS  
  
  SET @NSTEP = 130  
    
  SELECT @CSHIFTID = A.SHIFT_ID,   
    @DSHIFTTIMEIN = B.SHIFT_TIME_IN,  
    @DSHIFTTIMEOUT = B.SHIFT_TIME_OUT,  
    @DSHIFTHALFDAYCUTOFF = B.HALFDAY_CUTOFF,  
    @CEMPDEPTID = A.DEPT_ID  
  FROM EMP_MST A  
  JOIN EMP_SHIFTS B ON A.SHIFT_ID = B.SHIFT_ID  
  WHERE A.EMP_ID = @CEMPID  
  
  IF ISNULL(@CSHIFTID,'') = '' OR   
   ISNULL(@DSHIFTTIMEIN,'') = '' OR  
   ISNULL(@DSHIFTTIMEOUT,'') = '' OR  
   ISNULL(@DSHIFTHALFDAYCUTOFF,'') = '' OR  
   ISNULL(@CEMPDEPTID,'') = ''  
  BEGIN  
   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR GETTING EMPLOYEE SHIFT INFORMATION...'  
   GOTO END_PROC      
  END  
  
  SET @NSTEP = 140  
    
  INSERT EMP_ATTENDANCE ( ATTENDANCE_DT, EMP_ID, TIME_IN, TIME_OUT, ROW_ID,   
   ENTRY_MODE, SHIFT_ID, SHIFT_TIME_IN, SHIFT_TIME_OUT, HALFDAY_CUTOFF, EMPIMAGE,   
   DEPT_ID, EMPIMAGE_OUT, MODIFIED, LOG_ABSENT_STATUS, REMARKS_IN, REMARKS_OUT,   
   LAST_UPDATE, ATT_REMARKS )    
  SELECT A.MONTH_DATE AS ATTENDANCE_DT, @CEMPID AS EMP_ID, '' AS TIME_IN, '' AS TIME_OUT,   
   NEWID() AS ROW_ID, 2 AS ENTRY_MODE, @CSHIFTID AS SHIFT_ID, @DSHIFTTIMEIN AS SHIFT_TIME_IN,   
   @DSHIFTTIMEOUT AS SHIFT_TIME_OUT, @DSHIFTHALFDAYCUTOFF AS HALFDAY_CUTOFF, '' AS EMPIMAGE,   
   @CEMPDEPTID AS DEPT_ID, '' AS EMPIMAGE_OUT, 0 AS MODIFIED, ISNULL(A.ABS_STATUS,0) AS LOG_ABSENT_STATUS, '' AS REMARKS_IN,   
    '' AS REMARKS_OUT, GETDATE() AS LAST_UPDATE, '' AS ATT_REMARKS   
  FROM @MONTH_DAYS A  
  LEFT OUTER JOIN EMP_ATTENDANCE B ON B.ATTENDANCE_DT = A.MONTH_DATE AND B.EMP_ID = @CEMPID  
  WHERE B.EMP_ID IS NULL  
  
  
 END TRY  
 BEGIN CATCH  
  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()  
    
  GOTO END_PROC  
 END CATCH  
   
END_PROC:  
  
  INSERT @OUTPUT ( ERRMSG, MEMO_ID)  
   VALUES ( ISNULL(@CERRORMSG,''), '' )  
  
 SELECT * FROM @OUTPUT   
END