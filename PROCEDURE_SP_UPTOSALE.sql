CREATE PROCEDURE SP_UPTOSALE  --(LocId 3 digit change by Sanjay:30-10-2024)
(  
 @NMODE  NUMERIC(1)=1,  
 @CUSERCODE VARCHAR(7)='0000000',  
 @DTODAYDATE DATETIME='',  
 @CDEPTID VARCHAR(5)=''  
)  
--WITH ENCRYPTION
AS   
BEGIN   
  
 DECLARE @CMTEMP TABLE ( LOCATION_ID VARCHAR(4),  CASH_AMOUNT NUMERIC(12,2), CC_AMOUNT NUMERIC(12,2),   
       CREDIT_AMOUNT NUMERIC(12,2), CASH_BILLS NUMERIC(10), CC_BILLS NUMERIC(10),   
       CHQ_BILLS NUMERIC(10), OTHER_AMT_BILLS NUMERIC(10), CREDIT_BILLS NUMERIC(10),    
       ATD_CHARGES NUMERIC(12,2),  DISCOUNT_AMOUNT NUMERIC(12,2), CN_AMOUNT NUMERIC(12,2),   
       CNISS NUMERIC(12,2), CRFISS NUMERIC(12,2), ADVANCE_AMOUNT_ADJUSTED NUMERIC(12,2),   
       TOTAL_SALE NUMERIC(12,2), GV_AMT NUMERIC(12,2), LOCATION_NAME VARCHAR(100),   
       USER_ID VARCHAR(30), QUANTITY NUMERIC(12,3) )  
  

 DECLARE @NDISPLAY_BILLS_CURRENT_USER_ONLY NUMERIC(1),  
   @NVIEW_DATA_AFTER_DFM NUMERIC(1),   
   @LVALID     NVARCHAR(254),   
   @CCMD     NVARCHAR(MAX),  
   @CLOCFILTER    NVARCHAR(MAX),  
   @CHOLOCID    VARCHAR(5),  
   @NLOCCOUNT    NUMERIC(5),  
   @NDFMFILTER    NUMERIC(5),  
   @CDFMFILTER    NVARCHAR(MAX),  
   @CUSERFILTER   NVARCHAR(MAX)  
   
 DECLARE @DFROMDT DATETIME,  
   @DTODT  DATETIME  
  
 IF ISNULL(@DTODAYDATE,'') = ''  
  SET @DTODAYDATE = CONVERT(DATETIME, CONVERT(VARCHAR, GETDATE(), 112))  
  
 SET @DTODT = @DTODAYDATE  
  
 SET @DFROMDT = CONVERT(DATETIME,   
      CONVERT(VARCHAR(10), YEAR(@DTODT) - (CASE WHEN MONTH(@DTODT)<4 THEN 1 ELSE 0 END) )   
      + '-04-01')  
         
 --**************CHECKING VIEWING DATA OPTION  
 SELECT @NDISPLAY_BILLS_CURRENT_USER_ONLY = CONVERT(NUMERIC(1),(CASE WHEN VALUE='' THEN '0' ELSE VALUE END ))  
 FROM USER_ROLE_DET A JOIN USERS B ON A.ROLE_ID=B.ROLE_ID
 WHERE B.USER_CODE=@CUSERCODE AND FORM_NAME='CASHMEMO'  AND FORM_OPTION='DISPLAY_BILLS_ALL_USERS'  
  
 --**************CHECK FREEZING   
 SELECT @NVIEW_DATA_AFTER_DFM = VIEW_DATA_AFTER_DFM FROM USERS WHERE USER_CODE =@CUSERCODE  
  
 --**************CHECK NO OF LOCATION  
 SELECT @NLOCCOUNT = COUNT(*) FROM LOCATION WHERE DEPT_ID = MAJOR_DEPT_ID  
  
 --**************CHECK HO LOCATION  
 SELECT @CHOLOCID = VALUE FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'  
   
 IF ISNULL(@CDEPTID,'') = ''  
  SELECT @CDEPTID = DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 
  
 SET @LVALID = (CASE WHEN @NMODE = 1   
       THEN ' A.CM_DT = @DTODT '  
      WHEN @NMODE = 2  
       THEN ' (MONTH(A.CM_DT) = MONTH(@DTODT) AND YEAR(A.CM_DT)=YEAR(@DTODT)) '  
      WHEN @NMODE = 3  
       THEN ' A.CM_DT BETWEEN @DFROMDT AND @DTODT '  
      ELSE ''  
     END)  
  
 SET @CLOCFILTER = (CASE WHEN @NLOCCOUNT>1 AND @CHOLOCID=@CDEPTID THEN ''  
       ELSE N' AND a.location_code =  ''' + @CDEPTID + '''' END)  
  
 SET @NDFMFILTER = @NVIEW_DATA_AFTER_DFM  
   
 IF @NDFMFILTER=1 OR @CUSERCODE = '0000000'  
  SET @CDFMFILTER = N''  
 ELSE  
  SET @CDFMFILTER = N' AND CM_DT > ISNULL((SELECT FREEZING_DATE FROM DFMSETUP WHERE MODULE_NAME = ''SLS'' AND USER_CODE = '''+@CUSERCODE+'''),'''')'  
    
    
 SET @CUSERFILTER = (CASE WHEN @CUSERCODE = '0000000' OR @NDISPLAY_BILLS_CURRENT_USER_ONLY=0 THEN  N''  
        ELSE  N' AND A.USER_CODE = '''+ @CUSERCODE + '''' END)  
  
 SET @CCMD=  N' SELECT a.location_code AS LOCATION_ID,    
      SUM( CASE WHEN ' + @LVALID + ' THEN PAY.CASH_AMOUNT ELSE 0 END) AS CASH_AMOUNT,   
      SUM( CASE WHEN ' + @LVALID + ' THEN PAY.CC_AMOUNT ELSE 0 END) AS CC_AMOUNT,   
      SUM( CASE WHEN ' + @LVALID + ' AND PAY.CREDIT_AMOUNT>0 THEN PAY.CREDIT_AMOUNT ELSE 0 END) AS CREDIT_AMOUNT,   
      SUM( CASE WHEN ' + @LVALID + ' AND PAY.CASH_AMOUNT<>0 THEN 1 ELSE 0 END) AS CASH_BILLS,  
      SUM( CASE WHEN ' + @LVALID + ' AND PAY.CC_AMOUNT<>0 THEN 1 ELSE 0 END) AS CC_BILLS,   
      0 AS CHQ_BILLS,   
      SUM( CASE WHEN ' + @LVALID + ' AND (PAY.OTHER_DOC_AMOUNT<>0 OR PAY.CN_AMOUNT<>0) THEN 1 ELSE 0 END) AS OTHER_AMT_BILLS,  
      SUM( CASE WHEN ' + @LVALID + ' AND (PAY.CREDIT_AMOUNT<>0 ) THEN 1 ELSE 0 END) AS CREDIT_BILLS,   
      SUM( CASE WHEN ' + @LVALID + ' THEN A.ATD_CHARGES ELSE 0 END) AS ATD_CHARGES,   
      SUM( CASE WHEN ' + @LVALID + ' AND A.DT_CODE<>'''' AND D.UPDATE_AC=1 THEN DISCOUNT_AMOUNT ELSE 0 END) AS DISCOUNT_AMOUNT,   
      SUM( CASE WHEN ' + @LVALID + ' THEN PAY.CN_AMOUNT ELSE 0 END) AS CN_AMOUNT,   
      SUM( CASE WHEN ' + @LVALID + ' AND PAY.CREDIT_AMOUNT<0 AND SUBSTRING(A.CM_NO,len(location_code)+3,1)=''N''  
      THEN PAY.CREDIT_AMOUNT ELSE 0 END) AS CNISS,   
      SUM( CASE WHEN ' + @LVALID + ' AND PAY.CREDIT_REFUND_AMOUNT<>0 
      THEN PAY.CREDIT_REFUND_AMOUNT ELSE 0 END) AS CRFISS,   
      SUM( CASE WHEN ' + @LVALID + ' THEN PAY.ADVANCE_AMOUNT_ADJUSTED ELSE 0 END) AS ADVANCE_AMOUNT_ADJUSTED,   
      SUM( CASE WHEN ' + @LVALID + ' THEN A.NET_AMOUNT - A.ATD_CHARGES ELSE 0 END) AS TOTAL_SALE,   
      SUM( CASE WHEN ' + @LVALID + ' THEN PAY.MISC_AMOUNT ELSE 0 END) AS GV_AMT,   
      B.DEPT_ID+''-''+B.DEPT_NAME  AS LOCATION_NAME,C.USERNAME AS USER_ID,  
      SUM( ISNULL(CMD.QUANTITY,0) ) AS QUANTITY  
      FROM CMM01106 A   
      JOIN VW_BILL_PAYMODE PAY ON A.CM_ID = PAY.MEMO_ID AND PAY.XN_TYPE = ''SLS''  
      LEFT OUTER JOIN   
      (  
     SELECT CM_ID, SUM(QUANTITY) AS QUANTITY FROM CMD01106  
     GROUP BY CM_ID  
      ) CMD ON CMD.CM_ID = A.CM_ID  
      JOIN LOCATION B ON a.location_code=B.DEPT_ID JOIN USERS C ON A.USER_CODE=C.USER_CODE   
      JOIN DTM D ON A.DT_CODE=D.DT_CODE   
      WHERE '+@LVALID+' AND CANCELLED=0 AND CM_MODE<>2  AND A.MEMO_TYPE=1 ' +   
      @CLOCFILTER +   
      @CDFMFILTER +   
      @CUSERFILTER +   
      N' GROUP BY a.location_code, B.DEPT_ID, B.DEPT_ID + ''-'' + B.DEPT_NAME, C.USERNAME '  
  
  PRINT @CCMD
  
  
 INSERT @CMTEMP ( LOCATION_ID,  CASH_AMOUNT, CC_AMOUNT, CREDIT_AMOUNT, CASH_BILLS, CC_BILLS, CHQ_BILLS,   
      OTHER_AMT_BILLS, CREDIT_BILLS,  ATD_CHARGES,  DISCOUNT_AMOUNT, CN_AMOUNT, CNISS,   
      CRFISS, ADVANCE_AMOUNT_ADJUSTED, TOTAL_SALE, GV_AMT, LOCATION_NAME, USER_ID,   
      QUANTITY )  
 EXEC SP_EXECUTESQL @CCMD,   
  N'@DFROMDT DATETIME, @DTODT DATETIME',   
  @DFROMDT, @DTODT  
  
 SELECT LOCATION_ID, TOTAL_SALE AS TOTALSALE, CASH_AMOUNT AS ASALE, CC_AMOUNT AS SSALE,   
   CREDIT_AMOUNT AS ISALE,   
   ( CASH_BILLS + CC_BILLS + CHQ_BILLS+OTHER_AMT_BILLS+ CREDIT_BILLS ) AS TOTALBILLS, CASH_BILLS AS ABILLS, CC_BILLS AS SBILLS,   
   (CHQ_BILLS+OTHER_AMT_BILLS) AS IBILLS,
   (CREDIT_BILLS) AS CBILLS, ATD_CHARGES AS ATDAMT, DISCOUNT_AMOUNT AS SCHEMEDA, CN_AMOUNT AS CNADJ,  
   CNISS AS CNISSUED, CRFISS AS CRFISSUED, CONVERT(NUMERIC(10,2), 0) AS CHQ_AMT, OTHER_AMT_BILLS AS OTHER_AMT,   
    LTRIM(RTRIM(USER_ID)) AS LOCATION_NAME,  
   CONVERT(NUMERIC(12,2), (CASE WHEN ( CASH_BILLS + CC_BILLS + CHQ_BILLS )>0   
      THEN TOTAL_SALE/( CASH_BILLS + CC_BILLS + CHQ_BILLS )   
      ELSE 0 END)) AS AVGSALE,   
   CONVERT(NUMERIC(12,2), (CASE WHEN CASH_BILLS>0   
      THEN CASH_AMOUNT/CASH_BILLS  
      ELSE 0 END)) AS AVGASALE,   
   CONVERT(NUMERIC(12,2), (CASE WHEN CC_BILLS>0   
      THEN CC_AMOUNT/CC_BILLS  
      ELSE 0 END)) AS AVGSSALE,  
   CONVERT(NUMERIC(12,2), (CASE WHEN CREDIT_BILLS>0   
      THEN CREDIT_AMOUNT/CREDIT_BILLS  
      ELSE 0 END)) AS AVGISALE,  
   ADVANCE_AMOUNT_ADJUSTED AS ADVADJ, GV_AMT AS GVADJ, QUANTITY, USER_ID  
 FROM @CMTEMP  
END   
--*****************END OF SP_UPTOSALE
