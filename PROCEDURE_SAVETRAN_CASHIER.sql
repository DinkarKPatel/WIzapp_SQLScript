create PROCEDURE SAVETRAN_CASHIER
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CMEMONOPREFIX		VARCHAR(50),
	@CFINYEAR			VARCHAR(10),
	@CMACHINENAME		VARCHAR(100)='',
	@CWINDOWUSERNAME	VARCHAR(100)='',
	@CWIZAPPUSERCODE	VARCHAR(10)='0000000',
	@CMEMOID			VARCHAR(40)='',
	@BDIALOGRESULT      BIT=0,
	@CTODAYDATE        DATETIME,
	@CSHIFTID VARCHAR(15)=''
)
--WITH ENCRYPTION
AS
BEGIN
    DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME1		VARCHAR(100),
			@CDETAILTABLENAME2		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME1	VARCHAR(100),
			@CTEMPDETAILTABLENAME2  VARCHAR(100),
			@CTEMPMASTERTABLENAMENEW  VARCHAR(100),
			@CTEMPDETAILTABLENAMENEW1	VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CKEYFIELD1_DETAIL2		VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(2),
			@CLOCATIONID			VARCHAR(4),
			@CHODEPTID				VARCHAR(4),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@LENABLETEMPDATABASE	BIT,
			@DEPTCOLNAME VARCHAR(20),
			@BNEGSTOCKFOUND BIT,@CCMID VARCHAR(40),@CLOCID	VARCHAR(2)

	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))
	DECLARE @DTSQL NVARCHAR(MAX)
	SET @NSTEP = 0		
	
	SET @CTEMPDBNAME = ''
	SET @CMASTERTABLENAME='DSM01106'
	SET	@CDETAILTABLENAME1='DSD01106'
	SET @CDETAILTABLENAME2='PAYMODE_XN_DET'	
		
	
	SET @CTEMPMASTERTABLENAME	='SLS_CMM01106_UPLOAD'
	SET @CTEMPDETAILTABLENAME1	='SLS_CMD01106_UPLOAD'
	SET @CTEMPDETAILTABLENAME2	='SLS_PAYMODE_XN_DET_UPLOAD'

	
	SET @CTEMPMASTERTABLENAME	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLENAME1	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME1
	SET @CTEMPDETAILTABLENAME2	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME2
	
	
	SET @CERRORMSG= ''
	SET @CKEYFIELD1='DS_ID'
	SET @CMEMONO='DS_NO'
	SET @CKEYFIELD1_DETAIL2	= 'MEMO_ID'
	SET @NMEMONOLEN	=10
	
	
	select @CLOCID=location_code from SLS_CMM01106_UPLOAD where SP_ID=@NSPID 
	

		SET @CLOCATIONID=@CLOCID
		
	SELECT @CHODEPTID = [VALUE] FROM CONFIG WHERE  CONFIG_OPTION='HO_LOCATION_ID'		
	
	BEGIN TRY
		
		BEGIN TRANSACTION	

		IF ISNULL(@CLOCATIONID,'')=''
		 BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
			GOTO END_PROC    
		 END
		
		SET @NSTEP = 15		
		IF @NUPDATEMODE = 3 AND ISNULL(@CMEMOID,'') = ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED IF CALLED FROM CANCELLATION'
			GOTO END_PROC  		
		END

		IF CURSOR_STATUS('GLOBAL','DSMSAVECUR') IN (0,1)
		BEGIN
			CLOSE DSMSAVECUR
			DEALLOCATE DSMSAVECUR
		END

		SET @CTEMPDETAILTABLENAMENEW1=@CTEMPDBNAME+'TEMP_DSD01106_'+LTRIM(RTRIM(STR(@NSPID)))		
		
		SET @NSTEP = 30		
		IF @NUPDATEMODE = 1 
		BEGIN
		  
		  SET @CCMD=N'IF (SELECT COUNT(DISTINCT FIN_YEAR) FROM '+@CTEMPMASTERTABLENAME+' 
		  WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''') > 1 
							SET @CERRORMSG = ''MULTIPLE FIN YEAR CAN NOT ACCEPTED''
					   ELSE
							SET @CERRORMSG = ''''' 
		
		  EXEC SP_EXECUTESQL @CCMD,N'@CERRORMSG VARCHAR(MAX) OUTPUT',@CERRORMSG OUTPUT
		  
		  IF ISNULL(@CERRORMSG,'') <> ''	
			GOTO END_PROC  		
		END
		
	  ----------****CREATING TEMPORARY TABLE
      IF(@NUPDATEMODE = 1)
      BEGIN  
				SET @NSTEP=40
				SET @CTEMPMASTERTABLENAMENEW	= @CTEMPDBNAME+'TEMP_DSM01106_'+LTRIM(RTRIM(STR(@NSPID)))
			  
				SET @DTSQL=N'IF OBJECT_ID('''+@CTEMPMASTERTABLENAMENEW+''',''U'') IS NOT NULL  
								DROP TABLE ['+@CTEMPMASTERTABLENAMENEW+']'
				PRINT @DTSQL
				EXEC SP_EXECUTESQL @DTSQL
				
				SET @NSTEP=50
				SET @DTSQL=N'IF OBJECT_ID('''+@CTEMPDETAILTABLENAMENEW1+''',''U'') IS NOT NULL  
								DROP TABLE ['+@CTEMPDETAILTABLENAMENEW1+']'
				PRINT @DTSQL
				EXEC SP_EXECUTESQL @DTSQL
				
				SET @NSTEP=60
				
				SET @DTSQL=N'SELECT TOP 1 * INTO ['+@CTEMPMASTERTABLENAMENEW+'] FROM '+ @CMASTERTABLENAME +' WHERE 1=2'
				PRINT @DTSQL
				EXEC SP_EXECUTESQL @DTSQL
					
				SET @NSTEP=70
				SET @DTSQL=N'INSERT INTO ['+@CTEMPMASTERTABLENAMENEW+'](DS_NO,DS_ID,CANCELLED,LAST_UPDATE,FIN_YEAR,DS_DT,SHIFT_ID)
							 SELECT TOP 1 ''LATER'',''LATER'',0,GETDATE(),FIN_YEAR,'''+ CONVERT(VARCHAR(20),@CTODAYDATE,120) +'''
							 ,'''+@CSHIFTID+''' 
							 FROM '+@CTEMPMASTERTABLENAME+' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
				PRINT @DTSQL
				EXEC SP_EXECUTESQL @DTSQL
				
				SET @NSTEP=72
				SET @DTSQL=N'UPDATE '+@CTEMPMASTERTABLENAME+' SET SHIFT_ID=NULL WHERE SHIFT_ID='''' AND SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
				PRINT @DTSQL
				EXEC SP_EXECUTESQL @DTSQL
				
				SET @NSTEP=73
				SET @DTSQL=N'UPDATE '+@CTEMPMASTERTABLENAMENEW+' SET SHIFT_ID=NULL WHERE SHIFT_ID='''''
				PRINT @DTSQL
				EXEC SP_EXECUTESQL @DTSQL
				
				SET @NSTEP=75
				SET @DTSQL=N'SELECT TOP 1 * INTO ['+@CTEMPDETAILTABLENAMENEW1+'] FROM ' +@CDETAILTABLENAME1 +' WHERE 1=2'
				PRINT @DTSQL
				EXEC SP_EXECUTESQL @DTSQL
					
				SET @NSTEP=80
				SET @DTSQL=N'INSERT INTO ['+@CTEMPDETAILTABLENAMENEW1+'](ROW_ID,CM_ID,DS_ID)
							 SELECT NEWID(),CM_ID,''LATER'' FROM '+@CTEMPMASTERTABLENAME+' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
				PRINT @DTSQL
				EXEC SP_EXECUTESQL @DTSQL
	
				SET @NSTEP = 100		-- GENERATING NEW KEY
				
				-- GENERATING NEW JOB ORDER NO		
				SET @NSAVETRANLOOP=0
				WHILE @NSAVETRANLOOP=0
				BEGIN
						EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CLOCATIONID, 1,
										'',0, @CMEMONOVAL OUTPUT   
						
						PRINT @CMEMONOVAL
						SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
												WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
												AND FIN_YEAR = '''+@CFINYEAR+''' )
										SET @NLOOPOUTPUT=0
									ELSE
										SET @NLOOPOUTPUT=1'
						PRINT @CCMD
						EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
				END

				IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
					  GOTO END_PROC  		
				END

				SET @NSTEP = 110		-- GENERATING NEW ID

				-- GENERATING NEW JOB ORDER ID
				SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+REPLICATE('0', (22-LEN(@CLOCATIONID + @CFINYEAR))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))

				
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  GOTO END_PROC
				END
				
				SET @NSTEP = 120	
				--UPDATING NEW ID INTO TEMP TABLES
				SET @CCMD =N'UPDATE ' + @CTEMPMASTERTABLENAMENEW + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
							@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD
				
				SET @NSTEP = 130	
				SET @CCMD =N'UPDATE ' + @CTEMPDETAILTABLENAMENEW1 + ' SET ' + @CKEYFIELD1+'=''' + @CKEYFIELDVAL1+''''
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD
			
		END
			
		IF @NUPDATEMODE = 3			
		BEGIN
			SET @NSTEP = 140
			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE ' + @CMASTERTABLENAME + ' SET CANCELLED = 1,LAST_UPDATE=GETDATE()  
						WHERE ' + @CKEYFIELD1 + ' = ''' + @CMEMOID + ''''
			PRINT @CCMD		
			EXEC SP_EXECUTESQL @CCMD
			SET @CKEYFIELDVAL1 = @CMEMOID
			
			/*UNMERGED TILL MGMT*/	
			--REVERT THE CASH AMOUNT FOR THIS TRANSACTION IN TILL AMOUNT
			EXEC SP3S_UPDATESHIFT_AMOUNT
					 @CXN_TYPE='CSR'
					,@CXN_ID=@CMEMOID
					,@NMODE=2
					,@NUPDATEMODE=@NUPDATEMODE
					,@CERRMSGOUT=@CERRORMSG OUTPUT
					,@CDEPT_ID=@CLOCID
			
			IF ISNULL(@CERRORMSG,'')<>''
				GOTO END_PROC
					
			GOTO END_PROC
		END
		
		IF @NUPDATEMODE = 1
		BEGIN
		    SET @NSTEP = 150
			EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
				  @CSOURCEDB	 = @CTEMPDBNAME
				, @CSOURCETABLE  = @CTEMPMASTERTABLENAMENEW
				, @CDESTDB		 = ''
				, @CDESTTABLE	 = @CMASTERTABLENAME
				, @CKEYFIELD1	 = @CKEYFIELD1
				, @BALWAYSUPDATE = 1
				
			SET @NSTEP = 160	
			EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
				  @CSOURCEDB	 = @CTEMPDBNAME
				, @CSOURCETABLE  = @CTEMPDETAILTABLENAMENEW1
				, @CDESTDB		 = ''
				, @CDESTTABLE	 = @CDETAILTABLENAME1
				, @CKEYFIELD1	 = @CKEYFIELD1
				, @BALWAYSUPDATE = 1	
				
			SET @NSTEP = 170	
			SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME2 + ' 
						  WHERE XN_TYPE=''SLS'' AND MEMO_ID IN
						  (SELECT CM_ID FROM '+ @CTEMPDETAILTABLENAMENEW1 + ')'
			PRINT @CCMD				
			EXEC SP_EXECUTESQL @CCMD
			
			-- UPDATING TRANSACTION TABLE
			-- UPDATING ROW_ID IN TEMP TABLES - PAYMODE_XN_DET
			SET @NSTEP = 180
			SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLENAME2 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
						  WHERE LEFT(ROW_ID,5) = ''LATER'' AND SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
			PRINT @CCMD				
			EXEC SP_EXECUTESQL @CCMD
			
			DECLARE @COLDCUSTOMER_CODE VARCHAR(12),@CNEWCUSTOMER_CODE VARCHAR(12),
			        @COLDPARTY_STATE_CODE VARCHAR(2),@CNEWPARTY_STATE_CODE VARCHAR(2)
			
			SET @CCMD = N'SELECT TOP 1 @COLDCUSTOMER_CODE=A.CUSTOMER_CODE,@COLDPARTY_STATE_CODE=A.PARTY_STATE_CODE  
			FROM CMM01106 A (NOLOCK)
			JOIN '+@CTEMPMASTERTABLENAME+' B ON A.CM_ID = B.CM_ID WHERE B.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''' '
			EXEC SP_EXECUTESQL @CCMD,N'@COLDCUSTOMER_CODE VARCHAR(12) OUTPUT,@COLDPARTY_STATE_CODE VARCHAR(2) OUTPUT',@COLDCUSTOMER_CODE=@COLDCUSTOMER_CODE OUTPUT,@COLDPARTY_STATE_CODE=@COLDPARTY_STATE_CODE OUTPUT
            PRINT @CCMD+'TEST'
			
			
			SET @NSTEP = 190
			SET @CCMD = N'UPDATE A SET A.CUSTOMER_CODE = B.CUSTOMER_CODE, A.PAY_MODE=B.PAY_MODE,A.PARTY_STATE_CODE=B.PARTY_STATE_CODE
						  FROM CMM01106 A (NOLOCK)
						  JOIN '+@CTEMPMASTERTABLENAME+' B ON A.CM_ID = B.CM_ID	 WHERE B.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
			PRINT @CCMD				
			EXEC SP_EXECUTESQL @CCMD			  
			
			SET @NSTEP = 200	
			
			SET @CCMD = N'SELECT TOP 1 @CNEWCUSTOMER_CODE=A.CUSTOMER_CODE,@CNEWPARTY_STATE_CODE=A.PARTY_STATE_CODE  
			FROM CMM01106 A (NOLOCK)
			JOIN '+@CTEMPMASTERTABLENAME+' B ON A.CM_ID = B.CM_ID WHERE B.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''' '
			EXEC SP_EXECUTESQL @CCMD,N'@CNEWCUSTOMER_CODE VARCHAR(12) OUTPUT,@CNEWPARTY_STATE_CODE VARCHAR(2) OUTPUT',@CNEWCUSTOMER_CODE=@CNEWCUSTOMER_CODE OUTPUT,@CNEWPARTY_STATE_CODE=@CNEWPARTY_STATE_CODE OUTPUT
            PRINT @CCMD
			
			--GST CALCULATE--
			--SELECT @COLDCUSTOMER_CODE,@CNEWCUSTOMER_CODE
			
			IF ISNULL(@COLDCUSTOMER_CODE,'')<>ISNULL(@CNEWCUSTOMER_CODE,'') AND ISNULL(@CNEWPARTY_STATE_CODE,'')<>ISNULL(@COLDPARTY_STATE_CODE,'')
			BEGIN
			DELETE A FROM GST_TAXINFO_CALC A WHERE SP_ID=RTRIM(LTRIM(STR(@NSPID)))
					
			--INSERT GST_TAXINFO_CALC	( PRODUCT_CODE, SP_ID ,NET_VALUE,TAX_METHOD,ROW_ID,QUANTITY )  
			SET @CCMD = N'SELECT PRODUCT_CODE,'''+LTRIM(RTRIM(STR(@NSPID)))+''' AS SP_ID,(NET-ISNULL(CMM_DISCOUNT_AMOUNT,0)) AS NET_VALUE,
			(CASE WHEN TAX_METHOD=2 THEN 1 ELSE 2 END) AS TAX_METHOD,ROW_ID,QUANTITY,B.CM_DT AS MEMO_DT ,A.MRP 
			FROM CMD01106 A (NOLOCK)
			JOIN '+@CTEMPMASTERTABLENAME+' B ON A.CM_ID = B.CM_ID WHERE B.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
			
			INSERT GST_TAXINFO_CALC	( PRODUCT_CODE, SP_ID ,NET_VALUE,TAX_METHOD,ROW_ID,QUANTITY,MEMO_DT ,MRP) 
			EXEC SP_EXECUTESQL 	@CCMD
			
				
			DECLARE @CPARTY_GSTN_NO VARCHAR(20),@BLOCALBILL BIT,@NPARTYTYPE INT,@CPARTYSTATECODE CHAR(2)
			SET @CPARTY_GSTN_NO = ''
			SET @BLOCALBILL=0
			SET @NPARTYTYPE=0
			SET @CPARTYSTATECODE='00'
	        
	        SET @NSTEP = 212	
	        
			SET @CCMD = N'IF EXISTS (SELECT TOP 1 A.CUSTOMER_CODE  FROM CMM01106 A (NOLOCK) 
			JOIN '+@CTEMPMASTERTABLENAME+' B ON A.CM_ID = B.CM_ID  AND B.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''' AND
			A.CUSTOMER_CODE IN ('''',''000000000000'') AND A.PARTY_TYPE<>2 )
			SET @BLOCALBILL=1'
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD, N'@BLOCALBILL BIT OUTPUT',@BLOCALBILL=@BLOCALBILL OUTPUT
			
			SET @NSTEP = 220
			IF @BLOCALBILL<>1
			 BEGIN
				SET @CCMD = N'SELECT TOP 1 @NPARTYTYPE=A.PARTY_TYPE  FROM CMM01106 A (NOLOCK)
			    JOIN '+@CTEMPMASTERTABLENAME+' B ON A.CM_ID = B.CM_ID WHERE B.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''' '
			    EXEC SP_EXECUTESQL @CCMD,N'@NPARTYTYPE INT OUTPUT',@NPARTYTYPE=@NPARTYTYPE OUTPUT
                PRINT @CCMD		
		
				IF @NPARTYTYPE=2
				BEGIN
				    SET @CCMD = N'SELECT TOP 1 @CPARTY_GSTN_NO=AC_GST_NO,@CPARTYSTATECODE=A.PARTY_STATE_CODE  
				    FROM CMM01106 A (NOLOCK)
			        JOIN '+@CTEMPMASTERTABLENAME+' B ON A.CM_ID = B.CM_ID 
			        JOIN LMP01106 C (NOLOCK) ON A.AC_CODE=C.AC_CODE WHERE B.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
			        EXEC SP_EXECUTESQL @CCMD,N'@CPARTY_GSTN_NO VARCHAR(20) OUTPUT,@CPARTYSTATECODE CHAR(2) OUTPUT',@CPARTY_GSTN_NO=@CPARTY_GSTN_NO OUTPUT,@CPARTYSTATECODE=@CPARTYSTATECODE OUTPUT
			    END
				ELSE
				BEGIN
					SET @CCMD = N'SELECT TOP 1 @CPARTY_GSTN_NO=ISNULL(CUS_GST_NO,''''),@CPARTYSTATECODE=A.PARTY_STATE_CODE	 
					FROM CMM01106 A (NOLOCK)
			        JOIN '+@CTEMPMASTERTABLENAME+' B ON A.CM_ID = B.CM_ID 
					JOIN CUSTDYM C (NOLOCK) ON A.CUSTOMER_CODE=C.CUSTOMER_CODE WHERE B.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
					EXEC SP_EXECUTESQL @CCMD,N'@CPARTY_GSTN_NO VARCHAR(20) OUTPUT,@CPARTYSTATECODE CHAR(2) OUTPUT',@CPARTY_GSTN_NO=@CPARTY_GSTN_NO OUTPUT,@CPARTYSTATECODE=@CPARTYSTATECODE OUTPUT
                    PRINT @CCMD	
                 END		
			   END

			 EXEC SP3S_GST_TAX_CAL
				@CXN_TYPE='SLS',
				@CMEMO_ID='',
				@DMEMO_DT='',
				@NSPID=@NSPID,
				@CPARTYSTATE_CODE=@CPARTYSTATECODE,
				@BLOCALBILL=@BLOCALBILL,
				@CPARTY_GSTN_NO=@CPARTY_GSTN_NO,
				@CERRMSG=@CERRORMSG OUTPUT
				
				IF ISNULL(@CERRORMSG,'')<>''
					GOTO END_PROC
		
		      
		      UPDATE A SET
		             IGST_AMOUNT =B.IGST_AMOUNT ,
		             CGST_AMOUNT =B.CGST_AMOUNT ,
		             SGST_AMOUNT =B.SGST_AMOUNT ,
		             HSN_CODE =B.HSN_CODE ,
		             GST_PERCENTAGE =A.GST_PERCENTAGE 
		      FROM CMD01106 A (NOLOCK)
		      JOIN GST_TAXINFO_CALC B (NOLOCK) ON A.ROW_ID =B.ROW_ID 
		      WHERE B.SP_ID =LTRIM(RTRIM(STR(@NSPID)))
		      
		      
		
			END
		
		
		  DECLARE @FILTER VARCHAR(100)
          SET @FILTER=' SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
			-- PAYMODE_XN_DET
			EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPDETAILTABLENAME2
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CDETAILTABLENAME2
				, @CKEYFIELD1	= 'ROW_ID'
				, @BALWAYSUPDATE = 1
				,@CFILTERCONDITION=@FILTER 

			SET @NSTEP = 210		

			IF OBJECT_ID('TEMPDB..#TMPDSMCMM','U') IS NOT NULL
				DROP TABLE #TMPDSMCMM
			
			SELECT CM_ID INTO #TMPDSMCMM FROM CMM01106 WHERE 1=2
			
			SET @CCMD=N'INSERT 	#TMPDSMCMM 
						SELECT CM_ID FROM '+@CTEMPDETAILTABLENAMENEW1
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP=220
			
			DECLARE DSMSAVECUR CURSOR FOR SELECT CM_ID FROM #TMPDSMCMM 
			
			OPEN DSMSAVECUR
			
			FETCH NEXT FROM DSMSAVECUR INTO @CCMID
			WHILE @@FETCH_STATUS=0
			BEGIN
				SET @NSTEP = 230
				
				PRINT 'VALIDATE BILL SAVED:'+@CCMID
				EXEC VALIDATEXN_SLS_OPT
				@CXNID= @CCMID ,
				@NUPDATEMODE=4,
				@CERRORMSG=@CERRORMSG OUTPUT

				IF ISNULL(@CERRORMSG,'')<>''
					GOTO END_PROC
				
				FETCH NEXT FROM DSMSAVECUR INTO @CCMID	
			END
			 
			CLOSE DSMSAVECUR
			DEALLOCATE DSMSAVECUR
		END 	
		
		/*UNMERGED TILL MGMT*/	
		--REVERT THE CASH AMOUNT FOR THIS TRANSACTION IN TILL AMOUNT
		EXEC SP3S_UPDATESHIFT_AMOUNT
				 @CXN_TYPE='CSR'
				,@CXN_ID=@CKEYFIELDVAL1
				,@NMODE=1
				,@NUPDATEMODE=@NUPDATEMODE
				,@CERRMSGOUT=@CERRORMSG OUTPUT
				,@CDEPT_ID=@CLOCID
		
		IF ISNULL(@CERRORMSG,'')<>''
			GOTO END_PROC		
			
			
			
					
		
	END TRY
	BEGIN CATCH
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
					GOTO END_PROC
	END CATCH
	
END_PROC:

	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
		BEGIN	
		    UPDATE DSM01106 SET HO_SYNCH_LAST_UPDATE='' WHERE ds_id=@CKEYFIELDVAL1

			UPDATE A SET LAST_UPDATE=GETDATE() FROM  CMM01106 A (NOLOCK)
			JOIN DSD01106 B (NOLOCK) ON A.CM_ID =B.CM_ID 
			WHERE B.DS_ID=@CKEYFIELDVAL1

			COMMIT TRANSACTION
			IF EXISTS (SELECT G_REPORT_FILE FROM REPORTS(NOLOCK) 
						WHERE MODULE_NAME='POSCASHIER' AND ISNULL(ADVSETTING,0)=1 
						AND RIGHT(G_REPORT_FILE,3) IN ('PRG','LBX','FRX'))
				AND @BDIALOGRESULT	=1					
				BEGIN
					EXEC SPSLS_PRINT_PRG @NSPID,@CKEYFIELDVAL1,3,@CLOCID,1,@CERRORMSG OUTPUT				
				END
		END 					
		ELSE
			ROLLBACK
	END
	
	INSERT @OUTPUT (ERRMSG,MEMO_ID)
			VALUES (ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,''))

	SELECT * FROM @OUTPUT	
	
	IF ISNULL(@CERRORMSG,'') = ''
	BEGIN
	    	
		DELETE FROM SLS_CMM01106_UPLOAD WHERE SP_ID=RTRIM(LTRIM(STR(@NSPID)))
		DELETE FROM SLS_CMD01106_UPLOAD WHERE SP_ID=RTRIM(LTRIM(STR(@NSPID)))
		DELETE FROM SLS_PAYMODE_XN_DET_UPLOAD WHERE SP_ID=RTRIM(LTRIM(STR(@NSPID)))
		
	END

END			
--END OF SAVETRAN - SAVETRAN_CASHIER
