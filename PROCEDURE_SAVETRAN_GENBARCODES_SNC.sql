create PROCEDURE SAVETRAN_GENBARCODES_SNC    
(    
 @CXNID VARCHAR(40),    
 @CPREFIX VARCHAR(50),    
 @NMODE INT= 1,    
 @NSPID varchar(40)='',    
 @LOCID VARCHAR(4)='',    
 @CERRORMSG VARCHAR(MAX) OUTPUT    
)    
--WITH ENCRYPTION
AS     
BEGIN    
 -- @NMODE : SOURCE OF BARCODE GENERATION, 1- FROM PURCHASE, 2- FROM PO    
 --PRINT 'ROHIT 1'    
 -- THIS PROCEDURE ASSUMES THAT THE PID TABLE IS NORMALIZED FOR UNIQUE CODING    
 -- IF IT IS NOT NORMALIZED THEN THE PROCESS WILL FAIL    
     
 BEGIN TRY    
     
	 DECLARE @NROWS    BIGINT,    
	   @NEANROWS   BIGINT,    
	   @NFIXROWS   BIGINT,    
	   @NCTR    BIGINT,    
	   @CPIDROWID   VARCHAR(50),    
	   @CNEXTPRODUCTCODE VARCHAR(50),    
	   @NNEXTKEYVALUE  NUMERIC(30,0),    
	   @CPIMDEPTID   VARCHAR(5),  
	   @CBIN_ALIAS	VARCHAR(10),  
	   @CLOCID    VARCHAR(4),@CHOLOCID VARCHAR(5),    
	   @CCMD NVARCHAR(MAX),@CTEMPIRDTABLE VARCHAR(MAX),@NWHCOUNT INT,    
	   @CBARCODEPREFIX VARCHAR(100),@CADDPREFIX VARCHAR(50),@DMEMODT DATETIME,    
	   @CPREFIXYEARCODE BIT,@CPREFIXLOCID BIT,@CYEARCODE CHAR(2),@CADDLOCIDPREFIX CHAR(4),    
	   @CTEMPIRMTABLE VARCHAR(500),@NSTEP INT,@CCUSTOMPREFIX VARCHAR(50),@BLOOP BIT,@NPURLOCCNT INT,    
	   @BRANDOMGEN BIT,@NBARCODELEN INT,@CARTICLENO VARCHAR(300),@CARTPREFIX VARCHAR(50),    
	   @BGENEANCODES BIT,@CGENEANCODES VARCHAR(5),    
	   @CEANPREFIX VARCHAR(10),@NEANLENGTH INT,@CEANLENGTH VARCHAR(5),@CPREFIXFLOORID VARCHAR(10),  
	   @CADDFLOORIDPREFIX VARCHAR(10),@NSNCROWS INT,@NLOOPQTY INT,@NBARCODEQTY INT,
	   @NROWS1 INT,@NCODINGSCHEME INT  ,   
	   @CPREFIXMONTHCODE VARCHAR(10),@MONTHCODE VARCHAR(2),@CXNBARCODEPREFIX VARCHAR(50)    
	  
	          
	 SELECT @CYEARCODE='',@CADDLOCIDPREFIX='',@CERRORMSG=''    
	     
	 SET @NSTEP=10    
	     
	 IF OBJECT_ID('TEMPDB..#PIDROWS','U') IS NOT NULL    
	  DROP TABLE #PIDROWS    
	    
	 IF OBJECT_ID('TEMPDB..#BARCODES','U') IS NOT NULL    
	  DROP TABLE #BARCODES    
	 /*UNMERGED:16MAY2013*/    
	 SELECT A.ROW_ID AS PID_ROW_ID,B.CODING_SCHEME,A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,CONVERT(INT,0) AS SRNO  
	 ,CONVERT(BIT,0) AS GEN_EAN_CODES   ,a.para1_code ,a.para2_code 
	 INTO #PIDROWS   
	 FROM PID01106 A    
	 JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
	 WHERE 1=2    
	          
	 SELECT A.ROW_ID AS PID_ROW_ID,A.PRODUCT_CODE INTO #BARCODES FROM PID01106 A  WHERE 1=2    
	     
	 PRINT 'GENBC-1'    
	 SET @NSTEP=20    
	     
	 SET @NROWS = 0    
	 SET @NFIXROWS = 0    
	 SET @NEANROWS = 0    
	     
	     
	 SELECT TOP 1 @CGENEANCODES=VALUE FROM CONFIG WHERE CONFIG_OPTION='GEN_EAN_CODES'    
	 IF @CGENEANCODES='1'    
	  SET @BGENEANCODES=1    
	 ELSE    
	  SET @BGENEANCODES=0    
	     
	 SELECT TOP 1 @CEANPREFIX=VALUE FROM CONFIG WHERE CONFIG_OPTION='EAN_PREFIX'    
	 SELECT TOP 1 @CEANLENGTH=VALUE FROM CONFIG WHERE CONFIG_OPTION='EAN_LENGTH'    
	     
	 IF ISNULL(@CEANLENGTH,'')=''    
	  SET @NEANLENGTH=12    
	 ELSE    
	  SET @NEANLENGTH=CONVERT(INT,@CEANLENGTH)     

	   if isnull(@CEANPREFIX,'')=''
		    select @CEANPREFIX=loc_Ean_prefix from location  where dept_id=@CLOCID
	     
	     
	 
	  SELECT @CLOCID = @LOCID     
	        
		SELECT TOP 1 @CHOLOCID = [VALUE] FROM CONFIG WHERE CONFIG_OPTION = 'HO_LOCATION_ID'    
	   
	
     IF ISNULL(@CLOCID,'')=''
	 BEGIN
		SET @CERRORMSG ='2. LOCATION ID CAN NOT BE BLANK  '  
		GOTO END_PROC    
	 END
    
 
	  PRINT 'ENTER BCGEN-1'    
	  SELECT @CPIMDEPTID = location_Code,@DMEMODT=RECEIPT_DT FROM SNC_MST WHERE MEMO_ID = @CXNID    
	  IF ISNULL(@CPIMDEPTID,'') = ''    
			GOTO END_PROC    
	      

	  IF EXISTS (SELECT TOP 1 'U' FROM SNC_MST WHERE MEMO_ID =@CXNID AND ISNULL(TTM_MEMO_ID,'')='')
	  BEGIN
	 
	     PRINT 'ENTER BCGEN-2'    
	  -- BARCODE GENERATION FOR FIXED CODES    
		  INSERT #BARCODES( PID_ROW_ID, PRODUCT_CODE )     
		  SELECT DISTINCT A.ROW_ID,ISNULL(bd.PRODUCT_CODE,B.ARTICLE_NO) 
		  FROM SNC_DET A   
		  LEFT OUTER JOIN SNC_CONSUMABLE_DET  SC ON A.ROW_ID = SC.REF_ROW_ID   AND ISNULL(SC.PRODUCT_CODE ,'')<> ''
		  JOIN ARTICLE B ON A.ARTICLE_CODE = B.ARTICLE_CODE    
		  LEFT OUTER JOIN SNC_BARCODE_DET C ON C.REFROW_ID=A.ROW_ID
		  left join snc_snc_barcode_det_upload bd on bd.REFROW_ID=A.ROW_ID and bd.product_code<>'' and bd.sp_id=@NSPID
		  WHERE A.MEMO_ID = @CXNID AND  C.PRODUCT_CODE IS NULL   
		  AND  B.CODING_SCHEME = 1 
		  AND (B.GEN_EAN_CODES=0 OR @BGENEANCODES=0) 

	      
		  SET @NFIXROWS = @@ROWCOUNT    
	      
		  PRINT 'ENTER BCGEN-3'    
		  -- BARCODE GENERATION FOR LOT AND UNIQUE CODES    
		  INSERT #PIDROWS ( PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,ARTICLE_NO,SRNO,para1_code,para2_code ) /*UNMERGED:16MAY2013*/     
		  SELECT A.ROW_ID, B.CODING_SCHEME, A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,A.SRNO ,a.PARA1_CODE ,a.PARA2_CODE    
		  FROM SNC_DET A    
		  JOIN ARTICLE B ON A.ARTICLE_CODE = B.ARTICLE_CODE    
		  LEFT OUTER JOIN SNC_BARCODE_DET C ON C.REFROW_ID=A.ROW_ID
		   WHERE A.MEMO_ID = @CXNID    
		  AND  B.CODING_SCHEME <> 1    
		  AND  C.PRODUCT_CODE IS NULL 
		  AND (B.GEN_EAN_CODES=0 OR @BGENEANCODES=0) 
		  ORDER BY A.SRNO     
	      
		 SET @NROWS=@@ROWCOUNT    

	
		   -- BARCODE GENERATION FOR FIXED CODES  
		 INSERT #PIDROWS ( PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,ARTICLE_NO,SRNO,GEN_EAN_CODES,PARA1_CODE ,PARA2_CODE )  
		 SELECT A.ROW_ID, B.CODING_SCHEME, A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,A.SRNO ,B.GEN_EAN_CODES ,a.PARA1_CODE ,a.PARA2_CODE   
		 FROM SNC_DET A  
		 JOIN ARTICLE B ON A.ARTICLE_CODE = B.ARTICLE_CODE
		 LEFT OUTER JOIN SNC_BARCODE_DET C ON C.REFROW_ID=A.ROW_ID  
		 WHERE A.MEMO_ID = @CXNID AND ISNULL(C.PRODUCT_CODE,'') = ''  
		 AND B.GEN_EAN_CODES=1 AND @BGENEANCODES=1  
		 ORDER BY A.SRNO  
	 
		 SET @NEANROWS=@@ROWCOUNT 

	 END
	 else IF EXISTS (SELECT TOP 1 'U' FROM SNC_MST WHERE MEMO_ID =@CXNID AND ISNULL(TTM_MEMO_ID,'')<>'')
	 BEGIN
	     INSERT INTO #BARCODES(PID_ROW_ID ,PRODUCT_CODE )
	     SELECT A.REFROW_ID ,PRODUCT_CODE 
		 FROM SNC_SNC_BARCODE_DET_UPLOAD   A 
		 WHERE A.SP_ID = @NSPID 
		

	 end
      
     IF OBJECT_ID ('SAVETRAN_GENCUSTOM_BARCODE','P')   IS NOT NULL
	 BEGIN
	   ALTER TABLE #PIDROWS ADD SUB_SECTION_CODE VARCHAR(10) DEFAULT('')
	   ALTER TABLE #PIDROWS ADD PARA1_CODE VARCHAR(10) DEFAULT('')
	   ALTER TABLE #PIDROWS ADD PARA2_CODE VARCHAR(10) DEFAULT('')
	   ALTER TABLE #PIDROWS ADD KEY_CODE VARCHAR(50) DEFAULT('')
	   ALTER TABLE #PIDROWS ADD gst_percentage NUMERIC(10,2)
	 

	 UPDATE B SET PARA1_CODE=A.PARA1_CODE,PARA2_CODE =A.PARA2_CODE   FROM SNC_DET A
	 JOIN #PIDROWS B ON A.ROW_ID=B.PID_ROW_ID
	 WHERE A.MEMO_ID=@CXNID

	   DECLARE @BGNMODE INT 
	   SET @BGNMODE=5
	  
	   EXEC SAVETRAN_GENCUSTOM_BARCODE @CXNID,@CPREFIX,@BGNMODE,@NSPID ,@LOCID,@CERRORMSG  OUTPUT 
	   IF ISNULL(@CERRORMSG,'')<>''
	   GOTO END_PROC
	     
	   GOTO INS_CODES
	 END
      
      
      
	 PRINT 'GENBC-4'    
	     
	 SET @NSTEP=90    
	    
	 IF NOT EXISTS ( SELECT NAME FROM SYSOBJECTS WHERE NAME = 'SP_GETNEWPREFIX' )    
	 BEGIN    
		  SELECT TOP 1 @CADDPREFIX = VALUE FROM CONFIG WHERE 
		  CONFIG_OPTION='barcode_prefix'
		      
		  SELECT TOP 1 @CPREFIXYEARCODE= VALUE FROM CONFIG WHERE 
		  CONFIG_OPTION='YEAR_CODE_IN_PC'
		  
		  IF ISNULL(@CPREFIXYEARCODE,'')='1'    
			SET @CYEARCODE= RIGHT(LTRIM(RTRIM(STR(DATEPART(YY,@DMEMODT)))),2)     
		   
		  SELECT TOP 1 @CPREFIXMONTHCODE= VALUE FROM CONFIG WHERE CONFIG_OPTION='MONTH_CODE_IN_PC' 
		  IF ISNULL(@CPREFIXMONTHCODE,'')='1'
				SELECT @MONTHCODE=CASE WHEN MONTH(GETDATE())<10 THEN '0'+ CAST(MONTH(GETDATE()) AS VARCHAR(2)) ELSE CAST(MONTH(GETDATE())AS VARCHAR(2))  END
		   
		  
		  SELECT TOP 1 @CPREFIXFLOORID= VALUE FROM CONFIG WHERE 
		  CONFIG_OPTION='FLOOR_ID_IN_PC'
		  
		  IF ISNULL(@CPREFIXFLOORID,'')='1'    
				SET @CADDFLOORIDPREFIX=@CLOCID+ISNULL(@CBIN_ALIAS ,'')
		  ELSE  
				SET @CADDFLOORIDPREFIX=''  
		  
		      
		  SELECT TOP 1 @CPREFIXLOCID= VALUE FROM CONFIG WHERE 
		  CONFIG_OPTION='LOCATION_ID_IN_PC'
		  
		  IF ISNULL(@CPREFIXLOCID,'')='1' AND ISNULL(@CPREFIXFLOORID,'')<>'1'   
			 SET @CADDLOCIDPREFIX=@CLOCID    
		  ELSE    
		  IF @CADDFLOORIDPREFIX=''  
		  BEGIN    
				-- IN CASE THE PURCHASES ARE DONE AT MULTIPLE LOCATIONS, FORCE THE LOCATION ID IN PREFIX    
				SELECT @NPURLOCCNT=COUNT(*) FROM LOCATION WHERE PUR_LOC = 1 OR DEPT_ID=@CHOLOCID    
				IF ISNULL(@NPURLOCCNT,0)>1    
				BEGIN    
			  IF NOT EXISTS (SELECT TOP 1 CONFIG_OPTION FROM CONFIG WHERE  CONFIG_OPTION='LOCATION_ID_IN_PC')     
				INSERT CONFIG ( CONFIG_OPTION, VALUE, ROW_ID, LAST_UPDATE, REMARKS )     
				SELECT 'LOCATION_ID_IN_PC' AS CONFIG_OPTION,'1' AS VALUE,    
				'' AS ROW_ID,GETDATE() AS  LAST_UPDATE,'' AS  REMARKS
			  ELSE    
			   UPDATE CONFIG SET VALUE='1' WHERE CONFIG_OPTION='LOCATION_ID_IN_PC'
			          
				  SET @CADDLOCIDPREFIX=@CLOCID    
		  END    
	  END    
	    
	  PRINT 'GENBC-5'    
	  
	   
	  SET @NSTEP=100    
	  SET  @CPREFIX = LTRIM(RTRIM(ISNULL(@CYEARCODE,''))) +
	                  LTRIM(RTRIM(ISNULL(@MONTHCODE,''))) +
					  LTRIM(RTRIM(ISNULL(@CADDLOCIDPREFIX,''))) +
					  LTRIM(RTRIM(ISNULL(@CADDFLOORIDPREFIX,'')))+
					  LTRIM(RTRIM(ISNULL(@CADDPREFIX,'')))    
	 END     
	 ELSE    
	 BEGIN    
		  -- GETTING CUSTOM PREFIX FOR THE CURRENT ROW OF PID 
		  	IF EXISTS (SELECT TOP 1 'U' FROM INFORMATION_SCHEMA .PARAMETERS  WHERE SPECIFIC_NAME='SP_GETNEWPREFIX' AND PARAMETER_NAME ='@DMEMODT')
			BEGIN
     
					  EXEC SP_GETNEWPREFIX @CPIDROWID, '', @CCUSTOMPREFIX OUTPUT ,@DMEMODT
			END 
			ELSE
			begin
		     EXEC SP_GETNEWPREFIX @CPIDROWID, 'PUR', @CCUSTOMPREFIX OUTPUT 
		  
		  end
		  IF @CCUSTOMPREFIX IS NULL    
		   GOTO END_PROC    
		  SET @CPREFIX = @CCUSTOMPREFIX    
	 END    
	 

		

	IF @NEANROWS > 0 
	  BEGIN  
		 DECLARE @CEANSOURCEABLE VARCHAR(100)  
		 SET @CEANSOURCEABLE='SNC_DET'  
		 SET @NSTEP=150  
		 PRINT 'GENERATE EAN CODE FOR :'+STR(@NEANROWS)+STR(@NROWS)
		 	
		
		 EXEC GETNEXTEANCODE @NEANLENGTH,@CEANPREFIX,1,'', @NEANROWS,@CEANSOURCEABLE,@CXNID,@CERRORMSG OUTPUT   
		   
		 IF @CERRORMSG<>''  
		 BEGIN  
		  PRINT 'GENBARCODE_SNC-RETURND'  
		  GOTO END_PROC  
		 END    
	  END 


	

	 IF @NROWS > 0    
	 BEGIN    
	      
		  SET @NSTEP=110    
		      
		  PRINT 'BAR CODE PREFIX :'+@CPREFIX    
		      
		  PRINT 'GENBC-6'    
		      
		  --CHECKING IF BARCODE SHOULD BE GENERATED RANDOMLY OR USING GETNEXTKEY    
		  SELECT TOP 1 @BRANDOMGEN=ISNULL(VALUE,0) FROM CONFIG WHERE CONFIG_OPTION='PRODUCT_CODE_GENERATION_RANDOM' 
		  
		  SET @BRANDOMGEN=ISNULL(@BRANDOMGEN,0)  
		     
		  IF @BRANDOMGEN=0  
		  BEGIN
		  
			 -- GENERATE BARCODES FOR ARTICLES WHICH ARE CONSIDERED AS PREFIX FOR BAR CODE GENERATION    
			   IF EXISTS (SELECT TOP 1 PID_ROW_ID FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
					WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=0 AND B.GEN_EAN_CODES=0)     
			   BEGIN    		    
		   
			   
			  SELECT @NSNCROWS=SUM(QUANTITY) FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
			  WHERE B.CODING_SCHEME IN (2,3)
			
				-- CALLING GETNEXTKEY PROCEDURE TO GENERATE NEW CODES IN BULK    
				EXEC GETNEXTKEY 'SKU', 'PRODUCT_CODE', 50, @CPREFIX, 0, '', @NSNCROWS,@CNEXTPRODUCTCODE OUTPUT     
				IF @CNEXTPRODUCTCODE IS NULL    
					GOTO END_PROC    
			       
			   PRINT 'NEXT PRODUCT CODE AVAILABLE:'+@CNEXTPRODUCTCODE+STR(LEN(@CNEXTPRODUCTCODE))+STR(LEN(@CPREFIX))    
			   SET @NNEXTKEYVALUE = CONVERT(NUMERIC(30,0),RIGHT(LTRIM(RTRIM(@CNEXTPRODUCTCODE)),LEN(@CNEXTPRODUCTCODE)-LEN(@CPREFIX)))    
			       
			   PRINT 'NEXT PRODUCT CODE VALUE:'+STR(@NNEXTKEYVALUE)    
			       
			   PRINT 'GENBC-7'    
			   SET @NSTEP=120    

			IF CURSOR_STATUS('GLOBAL','PID_CUR') IN (0,1)    
			BEGIN    
			   CLOSE PID_CUR    
			   DEALLOCATE PID_CUR    
			END  

			
			       
			   -- GENERATING MULTIPLE ROWS FOR NEWLY GENERATED PRODUCT CODES    
			   DECLARE PID_CUR CURSOR FOR   
			   
			   SELECT PID_ROW_ID,A.QUANTITY,B.CODING_SCHEME FROM #PIDROWS A
			   JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE
			   WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=0 AND B.GEN_EAN_CODES=0
			   ORDER BY A.SRNO    
			       
			   OPEN PID_CUR    
			   FETCH NEXT FROM PID_CUR INTO @CPIDROWID,@NBARCODEQTY,@NCODINGSCHEME    
			   WHILE @@FETCH_STATUS = 0    
			   BEGIN    
					SET @NSTEP=130     
				    
					PRINT 'GENBC-8'
				    
				    DELETE  AA FROM #BARCODES AA  JOIN #PIDROWS CC ON AA.PRODUCT_CODE =CC.ARTICLE_NO 
				    AND AA.PID_ROW_ID = CC.PID_ROW_ID JOIN ARTICLE B ON CC.ARTICLE_CODE=B.ARTICLE_CODE
					WHERE AA.PID_ROW_ID = @CPIDROWID AND B.CODING_SCHEME =3
						    
					SET @NLOOPQTY=(CASE WHEN @NCODINGSCHEME=3 THEN @NBARCODEQTY ELSE 1 END)
				   
					WHILE @NLOOPQTY>0
					BEGIN    
						SET @BLOOP=1    
					        
						WHILE @BLOOP=1    
						BEGIN  
							 PRINT 'GENBC-9'  
							 
							 SET @NSTEP=135    
							 SET @CNEXTPRODUCTCODE = @CPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE)))       
						         
							 IF NOT EXISTS (SELECT TOP 1 PRODUCT_CODE FROM SKU WHERE PRODUCT_CODE=@CNEXTPRODUCTCODE)    
							 BEGIN    
								  SET @NSTEP=137    
								  INSERT #BARCODES ( PID_ROW_ID, PRODUCT_CODE )    
									VALUES   ( @CPIDROWID, @CNEXTPRODUCTCODE )    

							            
								  SET @BLOOP=0      
							 END       
						     
							 PRINT 'GENBC-10'    
						     
							 SET @NSTEP=138    
							 SET @NNEXTKEYVALUE = @NNEXTKEYVALUE + 1          
							 SET @NLOOPQTY=@NLOOPQTY-1
						END    
				         
					 END   
					 SET @NSTEP=140    
				        
					 FETCH NEXT FROM PID_CUR INTO @CPIDROWID,@NBARCODEQTY,@NCODINGSCHEME        
			   END    
			   CLOSE PID_CUR    
			   DEALLOCATE PID_CUR    

			   
			   PRINT 'GENBC-11'    
			   SET @NNEXTKEYVALUE = @NNEXTKEYVALUE - 1    
			   SET @CNEXTPRODUCTCODE = @CPREFIX + LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE)))    
			       
			   SET @NSTEP=150    
			       
			   ---- UPDATING KEYS TABLE WITH THE MAXIMUM BARCODE GENERATED     
			   UPDATE KEYS_PMT SET     
				LASTKEYVAL = LTRIM(RTRIM(@CNEXTPRODUCTCODE))     
			   WHERE TABLENAME = 'SKU'    
			   AND COLUMNNAME = 'PRODUCT_CODE'    
			   AND FINYEAR  = ''    
			   AND PREFIX  = @CPREFIX    
		   END
	  
		 -- GENERATE BARCODES FOR ARTICLES WHICH ARE CONSIDERED AS PREFIX FOR BAR CODE GENERATION    
	   IF EXISTS (SELECT TOP 1 PID_ROW_ID FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
			WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=1 AND B.GEN_EAN_CODES=0)     
	   BEGIN    

	   
			IF CURSOR_STATUS('GLOBAL','ART_CUR') IN (0,1)    
			BEGIN    
			   CLOSE ART_CUR    
			   DEALLOCATE ART_CUR    
			END  

	         
		DECLARE ART_CUR CURSOR FOR SELECT DISTINCT A.ARTICLE_NO FROM #PIDROWS A    
		JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE WHERE 
		GENERATE_BARCODES_WITHARTICLE_PREFIX=1 AND B.GEN_EAN_CODES=0    
	        
		OPEN ART_CUR    
		FETCH NEXT FROM ART_CUR INTO @CARTICLENO    
		WHILE @@FETCH_STATUS=0    
		BEGIN    
	         
		 SET @CARTPREFIX=@CPREFIX+@CARTICLENO+'-'    
	    
		 SELECT @NROWS = COUNT(*) FROM #PIDROWS WHERE ARTICLE_NO=@CARTICLENO    
	         
		 -- CALLING GETNEXTKEY PROCEDURE TO GENERATE NEW CODES IN BULK    
		 EXEC GETNEXTKEY 'SKU', 'PRODUCT_CODE', 50, @CARTPREFIX, 0, '', @NROWS, @CNEXTPRODUCTCODE OUTPUT     
		 IF @CNEXTPRODUCTCODE IS NULL    
		  GOTO END_PROC    
	         
		 SET @NNEXTKEYVALUE = CAST(RIGHT(@CNEXTPRODUCTCODE,LEN(@CNEXTPRODUCTCODE)-LEN(@CARTPREFIX)) AS NUMERIC(30,0))    
	    
		 -- GENERATING MULTIPLE ROWS FOR NEWLY GENERATED PRODUCT CODES    
		 DECLARE PID_CUR CURSOR FOR     
		 SELECT PID_ROW_ID FROM #PIDROWS WHERE ARTICLE_NO=@CARTICLENO    
	         
		 OPEN PID_CUR    
	         
		 FETCH NEXT FROM PID_CUR INTO @CPIDROWID   
		 WHILE @@FETCH_STATUS = 0    
		 BEGIN    
		  SET @NSTEP=130     
	           
          SET @NLOOPQTY=(CASE WHEN @NCODINGSCHEME=3 THEN @NBARCODEQTY ELSE 1 END)     
     
		    
			WHILE @NLOOPQTY>0     
			BEGIN      
			 SET @NSTEP=135      
			 SET @CNEXTPRODUCTCODE = @CARTPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE)))         
              
			 IF NOT EXISTS (SELECT TOP 1 PRODUCT_CODE FROM SKU WHERE PRODUCT_CODE=@CNEXTPRODUCTCODE)      
			 BEGIN      
				SET @NSTEP=137      
        
        
				INSERT #BARCODES ( PID_ROW_ID, PRODUCT_CODE )      
				VALUES   ( @CPIDROWID, @CNEXTPRODUCTCODE )       
	   
				 SET @NLOOPQTY=@NLOOPQTY-1                     
			 END         
  
			 SET @NSTEP=138      
			 SET @NNEXTKEYVALUE = @NNEXTKEYVALUE + 1      
           
			END   

	         
		  FETCH NEXT FROM PID_CUR INTO @CPIDROWID     
		 END    
		 CLOSE PID_CUR    
		 DEALLOCATE PID_CUR    
	         
		 SET @NNEXTKEYVALUE = @NNEXTKEYVALUE - 1    
		 SET @CNEXTPRODUCTCODE = @CARTPREFIX + CONVERT(VARCHAR(30), @NNEXTKEYVALUE)    
	    
		 -- UPDATING KEYS TABLE WITH THE MAXIMUM BARCODE GENERATED     
		 UPDATE KEYS_PMT SET     
		  LASTKEYVAL = LTRIM(RTRIM(@CNEXTPRODUCTCODE))     
		 WHERE TABLENAME = 'SKU'    
		 AND COLUMNNAME = 'PRODUCT_CODE'    
		 AND FINYEAR  = ''    
		 AND PREFIX  = @CARTPREFIX    
	         
		 FETCH NEXT FROM ART_CUR INTO @CARTICLENO    
		END    
	        
		CLOSE ART_CUR    
		DEALLOCATE ART_CUR    
	        
	   END    
	  END    	 
  END
 

 
   --in wip new barcode always generate with batch code 
    DECLARE @CXNTYPE VARCHAR(10)
	SET @CXNTYPE='SNC'


	IF EXISTS (SELECT TOP 1 'U' FROM SNC_MST WHERE MEMO_ID=@CXNID AND ISNULL(WIP,0) =1)
	begin
	   SET @CXNTYPE='SNC_WIP'
	end

	print 'enter SAVETRAN_GENPERISHABLE_BARCODE :'+convert(varchar,getdate(),113)

	IF EXISTS (SELECT TOP 1'U' FROM SNC_MST WHERE MEMO_ID=@CXNID )
	begin

		EXEC SAVETRAN_GENPERISHABLE_BARCODE
		@NMODE=@nMode,
		@CXNID=@CXNID,
		@CERRORMSG=@CERRORMSG  OUTPUT ,
		@cLocId=@CLOCID ,
		@CXNTYPE=@CXNTYPE

		 IF @CERRORMSG<>''  
		 BEGIN  
			  PRINT 'GENBARCODE_SNC-RETURND'  
			  GOTO END_PROC  

		 END   

		 IF @CXNTYPE='SNC_WIP'
		 BEGIN
		 -- as all coding scheme create in barch barcode for wip Process
		      
			  IF EXISTS (SELECT TOP 1'U' FROM #BARCODES WHERE product_code NOT LIKE '%@%')
			  BEGIN
			    SET @CERRORMSG='Erro In batch barcode Creation '
				GOTO END_PROC
			  END
		 END

	end 

	print 'complete SAVETRAN_GENPERISHABLE_BARCODE :'+convert(varchar,getdate(),113)

INS_CODES:    

   SET @NSTEP=350    
       
   PRINT 'GENBC-12'
   
   IF EXISTS (SELECT TOP 1 a.memo_id FROM snc_det a (NOLOCK) JOIN article b (NOLOCK) ON a.ARTICLE_CODE=b.article_code
			  WHERE a.memo_id=@CXNID AND ISNULL(b.alternate_uom_applicable,0)=1 AND ISNULL(a.alternate_uom_code,'')='')
		UPDATE a WITH (ROWLOCK) SET  alternate_uom_code=b.alternate_uom_code,alt_uom_conversion_factor=b.alt_uom_conversion_factor
		FROM snc_det a  JOIN article b (NOLOCK) ON a.ARTICLE_CODE=b.article_code
		WHERE a.memo_id=@CXNID AND ISNULL(b.alternate_uom_applicable,0)=1 AND ISNULL(a.alternate_uom_code,'')=''

   SET @NSTEP=360    
       
	 
   if exists (SELECT TOP 1 'U' FROM SNC_MST where MEMO_ID=@CXNID and WIP =0)
   Begin
	
	   -- INSERTING RECORDS IN SKU    
	   INSERT SKU ( PRODUCT_CODE,PRODUCT_NAME,ARTICLE_CODE, PARA1_CODE, PARA2_CODE, PARA3_CODE,PARA4_CODE, PARA5_CODE, PARA6_CODE,    
		PURCHASE_PRICE, MRP,  LAST_UPDATE,INV_NO,INV_DT, RECEIPT_DT, AC_CODE,FORM_ID,WS_PRICE,BARCODE_CODING_SCHEME,FIX_MRP,alternate_uom_code,alt_uom_conversion_factor ,
		purchaseLocId,hsn_code )   
		 
	   SELECT distinct   B.PRODUCT_CODE,ART.ARTICLE_NAME, A.ARTICLE_CODE, A.PARA1_CODE, A.PARA2_CODE, A.PARA3_CODE, A.PARA4_CODE, A.PARA5_CODE, A.PARA6_CODE,    
	   A.PURCHASE_PRICE, A.MRP,  GETDATE() AS LAST_UPDATE,     
	   C.MEMO_NO AS INV_NO, C.RECEIPT_DT, C.RECEIPT_DT,C.AC_CODE  AS AC_CODE,     
	   '0000000' AS FORM_ID,A.MRP AS WS_PRICE,ART.CODING_SCHEME,a.FIX_MRP,a.alternate_uom_code,a.alt_uom_conversion_factor,
	   C.location_Code  AS purchaseLocId,art.HSN_CODE 
	   FROM #BARCODES B    
	   JOIN SNC_DET A ON B.PID_ROW_ID=A.ROW_ID
	   JOIN SNC_MST C ON C.MEMO_ID = A.MEMO_ID    
	   JOIN ARTICLE ART ON A.ARTICLE_CODE = ART.ARTICLE_CODE    
	   LEFT OUTER JOIN SKU D ON B.PRODUCT_CODE = D.PRODUCT_CODE    
	   WHERE C.MEMO_ID = @CXNID AND D.PRODUCT_CODE IS NULL    
       and b.product_code not like '%@%'
       
       IF EXISTS (SELECT TOP 1 'U' FROM #BARCODES WHERE PRODUCT_CODE LIKE '%@%')
       BEGIN
       
		  
           INSERT SKU ( PRODUCT_CODE,PRODUCT_NAME,ARTICLE_CODE, PARA1_CODE, PARA2_CODE, PARA3_CODE,PARA4_CODE, PARA5_CODE, PARA6_CODE,    
			PURCHASE_PRICE, MRP,  LAST_UPDATE,INV_NO,INV_DT, RECEIPT_DT, AC_CODE,FORM_ID,WS_PRICE,BARCODE_CODING_SCHEME,FIX_MRP,alternate_uom_code,alt_uom_conversion_factor ,
			purchaseLocId,hsn_code,gst_percentage  )   
			 
		   SELECT distinct   B.PRODUCT_CODE,ART.ARTICLE_NAME, A.ARTICLE_CODE, A.PARA1_CODE, A.PARA2_CODE, A.PARA3_CODE, A.PARA4_CODE, A.PARA5_CODE, A.PARA6_CODE,    
		   A.PURCHASE_PRICE, A.MRP,  GETDATE() AS LAST_UPDATE,     
		   C.MEMO_NO AS INV_NO, C.RECEIPT_DT, C.RECEIPT_DT,C.AC_CODE  AS AC_CODE,     
		   '0000000' AS FORM_ID,A.MRP AS WS_PRICE,ART.CODING_SCHEME,a.FIX_MRP,a.alternate_uom_code,a.alt_uom_conversion_factor,
		   C.location_Code  AS purchaseLocId,
		   case when isnull(s.hsn_code,'') not  in ('0000000000','') then s.hsn_code else   art.HSN_CODE end as HSN_CODE,a.gst_percentage 
		   FROM #BARCODES B    
		   JOIN SKU S (NOLOCK) ON s.PRODUCT_CODE =SUBSTRING (B.PRODUCT_CODE,1,CHARINDEX('@',B.PRODUCT_CODE)-1)
		   JOIN SNC_DET A ON B.PID_ROW_ID=A.ROW_ID
		   JOIN SNC_MST C ON C.MEMO_ID = A.MEMO_ID    
		   JOIN ARTICLE ART ON A.ARTICLE_CODE = ART.ARTICLE_CODE    
		   LEFT OUTER JOIN SKU D ON B.PRODUCT_CODE = D.PRODUCT_CODE    
		   WHERE C.MEMO_ID = @CXNID AND D.PRODUCT_CODE IS NULL    
		   and b.product_code  like '%@%'
		   and s.product_code not like '%@%'
		   
		   
       
       END
       
       
	   SET @NSTEP=370    
       
	   PRINT 'GENBC-13'
	   -- INSERTING RECORDS IN SKU_OH    
	  INSERT SKU_OH ( PRODUCT_CODE, DISCOUNT_AMOUNT, TAX_AMOUNT, FREIGHT, OTHER_CHARGES, ROUND_OFF, VALUE_ADD )    
	   SELECT DISTINCT A.PRODUCT_CODE, 0 AS DISCOUNT_AMOUNT, 0 AS TAX_AMOUNT, 0 AS FREIGHT, 0 AS OTHER_CHARGES,     
	   0 AS ROUND_OFF, 0 AS VALUE_ADD    
	   FROM #BARCODES A    
	   LEFT OUTER JOIN SKU_OH B ON A.PRODUCT_CODE = B.PRODUCT_CODE    
	   WHERE B.PRODUCT_CODE IS NULL    
       
	   SET @NSTEP=380   
   
  
   
   PRINT 'GENBC-14'    
   
   INSERT PMT01106 (PRODUCT_CODE, QUANTITY_IN_STOCK,  DEPT_ID, LAST_UPDATE,BIN_ID )    
	SELECT DISTINCT A.PRODUCT_CODE, 0 AS QUANTITY_IN_STOCK, @CPIMDEPTID AS DEPT_ID,GETDATE() AS LAST_UPDATE,
	C.BIN_ID  FROM #BARCODES A    
	JOIN SNC_DET B ON A.PID_ROW_ID= B.ROW_ID
	JOIN SNC_MST C ON C.MEMO_ID = B.MEMO_ID    
	JOIN #BARCODES BC ON A.PRODUCT_CODE = BC.PRODUCT_CODE    
	LEFT OUTER JOIN PMT01106 D ON A.PRODUCT_CODE = D.PRODUCT_CODE AND D.DEPT_ID = @CPIMDEPTID    
   WHERE B.MEMO_ID = @CXNID    AND ISNULL(C.WIP,0)=0
   AND   D.PRODUCT_CODE IS NULL    
  
   end
  
    SET @NSTEP=390

   INSERT SNC_BARCODE_DET (PRODUCT_CODE,REFROW_ID)
   SELECT PRODUCT_CODE,PID_ROW_ID FROM #BARCODES



     
 END TRY     
     
 BEGIN CATCH    
    
	SET @CERRORMSG = 'PROCEDURE SAVETRAN_GENBARCODES_SNC : STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()    
    
 END CATCH    
     
END_PROC:    
     
END    
--******************************* END OF PROCEDURE SAVETRAN_GENBARCODES_SNC    