CREATE PROCEDURE DBO.PPC_SAVETRAN_CLOSE_WSL_INVOICE
(   @NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CFINYEAR			VARCHAR(10),
	@CXNMEMOID			VARCHAR(40)='',
	@CLOCID				VARCHAR(2)=''	
)
----WITH ENCRYPTION
AS
 BEGIN 
   --DECLARE LOCAL VARIABLE
   DECLARE   @CTEMPDBNAME			    VARCHAR(100)
            ,@CDBSOURCE                 VARCHAR(100)
			,@CMASTERTABLENAME		    VARCHAR(100) 
			,@CDETAILSTABLENAME		    VARCHAR(100) 
			,@CTEMPMASTERTABLENAME		VARCHAR(100) 
			,@CTEMPDETAILSTABLENAME		VARCHAR(100)  
			,@CERRORMSG          		VARCHAR(MAX)  
			,@CKEYFIELD1				VARCHAR(50)
			,@CKEYFIELDVAL1			    VARCHAR(50)
			,@CINV_NO				    VARCHAR(20)
			,@NMEMONOLEN				NUMERIC(20,0)
			,@CMEMONOVAL				VARCHAR(50)
			,@CMEMODEPTID			    VARCHAR(2)
			,@CLOCATIONID			    VARCHAR(2)
			,@CHODEPTID				    VARCHAR(2)
			,@CCMD					    NVARCHAR(4000)
			,@CCMDOUTPUT				NVARCHAR(4000)
			,@NSAVETRANLOOP			    BIT
			,@NSTEP					    INT
			,@LENABLETEMPDATABASE	    BIT
			,@CMEMONOPREFIX             VARCHAR(10)
            ,@FILTER                    VARCHAR(MAX)
	DECLARE @OUTPUT TABLE (ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))
	SET @NSTEP = 10	
	----SET VALUE INTO LOCAL VARIABLE----
	SET @CTEMPDBNAME = ''
	SET @CMASTERTABLENAME      = 'PPC_INM01106'
	SET @CDETAILSTABLENAME     = 'PPC_IND01106'
	SET @CTEMPMASTERTABLENAME  = 'WSL_PPC_INM01106_UPLOAD'
	SET @CTEMPDETAILSTABLENAME = 'WSL_PPC_IND01106_UPLOAD'

	SET @CERRORMSG			= ''
	SET @CKEYFIELD1			= 'INV_ID'
	SET @CINV_NO			= 'INV_NO'
    SET @CDBSOURCE          = ''

    SELECT @CLOCATIONID	= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID'
    SET    @CMEMONOPREFIX  = @CLOCATIONID
    SET @NMEMONOLEN			= LEN(@CMEMONOPREFIX)+6
    BEGIN TRY
     BEGIN TRANSACTION
      IF @NUPDATEMODE = 1 
         BEGIN
			  --SET VALIDATION
			  IF ISNULL(@CFINYEAR,'') = ''
				 BEGIN
				   SET @CERRORMSG ='FINYEAR IS NOT NULL. PLEASE PASS FINYEAR';
				   GOTO PROC_END;
				 END
					
			  --GENERATE NEW INV ID
			  SET @NSAVETRANLOOP=0
			  WHILE @NSAVETRANLOOP=0
					BEGIN
						EXEC GETNEXTKEY @CMASTERTABLENAME, @CINV_NO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
										@CFINYEAR,0, @CMEMONOVAL OUTPUT   
										
									
						
						SET @CCMD=N'IF EXISTS ( SELECT '+@CINV_NO+' FROM '+@CMASTERTABLENAME+' 
												WHERE '+@CINV_NO+'='''+@CMEMONOVAL+''' 
												AND FIN_YEAR = '''+@CFINYEAR+''' )
										SET @NLOOPOUTPUT=0
									ELSE
										SET @NLOOPOUTPUT=1'
						PRINT @CCMD
						EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
					END
				---VALIDATE INV_NO 
				IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
					BEGIN
						SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
						GOTO PROC_END;  		
					END
				--GENERATE INV_ID --------
				SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+ REPLICATE('0', 15-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL))
				
				--VALIDATE INV_ID- CHECKED WETHER THE INV ID IS STILL LATER---------------
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
					BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  GOTO PROC_END;
					END
		     
			   ----UPDATE INV_ID AND INV_NO INTO TEMP MASTER TABLE ---
			   SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLENAME + ' SET ' + @CINV_NO+'=''' + @CMEMONOVAL+''',' + 
									@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
			   PRINT @CCMD		
			   EXEC SP_EXECUTESQL @CCMD
		      
			  ----UPDATE INV_ID INTO TEMP DETAILS TABLE---
			  SET @CCMD = N'UPDATE ' + @CTEMPDETAILSTABLENAME + ' SET ' + @CKEYFIELD1+'=''' + @CKEYFIELDVAL1+'''
									 WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
			   PRINT @CCMD		
			   EXEC SP_EXECUTESQL @CCMD
               
               --INSERT DATA INTO MASTER TABLE 
			 SET @FILTER=' B.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
			 EXEC UPDATEMASTERXN 
					  @CSOURCEDB	= @CDBSOURCE
					, @CSOURCETABLE = @CTEMPMASTERTABLENAME
					, @CDESTDB		= ''
					, @CDESTTABLE	= @CMASTERTABLENAME
					, @CKEYFIELD1	= @CKEYFIELD1
					, @BALWAYSUPDATE = 1
					, @CFILTERCONDITION=@FILTER
			  ----INSERT DETAILS INTO MILK_PURCHASE_DET TABLE-------------------- 
			 SET @NSTEP=17
             ---INSERT BARCODE DETAILS-------------------
         IF OBJECT_ID ('TEMPDB..#TMPBARCODE','U') IS NOT NULL
             DROP TABLE #TMPBARCODE
  
		  SELECT ROW_ID,ARTICLE_CODE,BILL_NO,AC_CODE,PARA1_CODE,SIZEGROUP_CODE,PARA2_CODE,SELECT_QTY,BO_DET_ROW_ID,RATE,MANUAL_INVOICE_NO 
		  INTO #TMPBARCODE  
		  FROM WSL_PPC_IND01106_UPLOAD WHERE SP_ID= @NSPID  

          DECLARE @CARTICLE_CODE VARCHAR(10),@CBILL_NO VARCHAR(100),@CAC_CODE VARCHAR(10),
		  @CPARA1_CODE VARCHAR(100),@CSIZEGROUP_CODE VARCHAR(100),@CPARA2_CODE VARCHAR(100),@SELECT_QTY INT,
		  @CROW_ID VARCHAR(100),@BO_DET_ROW_ID VARCHAR(100),@RATE NUMERIC(10,2),@MANUAL_INVOICE_NO VARCHAR(100)

          
         WHILE EXISTS (SELECT TOP 1 'U' FROM #TMPBARCODE) 
		  BEGIN
		  
		  IF OBJECT_ID ('TEMPDB..#TMPBARCODEDET','U') IS NOT NULL
				   DROP TABLE #TMPBARCODEDET
		   
		   
		   SELECT TOP 1 @CARTICLE_CODE=ARTICLE_CODE ,@CAC_CODE=AC_CODE,@CBILL_NO =BILL_NO ,@CPARA1_CODE =PARA1_CODE ,
						@CSIZEGROUP_CODE=SIZEGROUP_CODE ,@CPARA2_CODE=PARA2_CODE ,@SELECT_QTY=SELECT_QTY,@CROW_ID=ROW_ID,
						@BO_DET_ROW_ID=BO_DET_ROW_ID  ,@RATE=RATE ,@MANUAL_INVOICE_NO=MANUAL_INVOICE_NO
		   FROM #TMPBARCODE   

		     
	 IF OBJECT_ID('TEMPDB..#MAXJOB_DETAILS') IS NOT NULL 
        DROP TABLE #MAXJOB_DETAILS
		CREATE TABLE #MAXJOB_DETAILS
		(
		  ORDER_ID VARCHAR(50)
		 ,ROW_ID VARCHAR(100)
		 ,JOB_CODE VARCHAR(50)
		 ,JOB_ORDER INT
         ,BILL_NO  VARCHAR(100)
		)
		---INSERT DETAILS WITH MAX JOB_ORDER---------------
		INSERT INTO #MAXJOB_DETAILS(ORDER_ID,ROW_ID,JOB_ORDER,BILL_NO)
		SELECT A.ORDER_ID ,A.ROW_ID, MAX(C.JOB_ORDER) AS [JOB_ORDER],B.BILL_NO 
        FROM PPC_BUYER_ORDER_DET A
		JOIN PPC_BUYER_ORDER_MST B ON A.ORDER_ID =B.ORDER_ID 
		JOIN PPC_BO_ART_JOBS C ON A.ROW_ID=C.REF_ROW_ID 
		WHERE CANCELLED=0 
		AND B.BILL_NO = @CBILL_NO
        AND A.ROW_ID=@BO_DET_ROW_ID
  
		GROUP BY A.ORDER_ID ,A.ROW_ID,B.BILL_NO 

		---------UPDATE MAX JOB CODE-------------------
		UPDATE #MAXJOB_DETAILS SET JOB_CODE = (SELECT A.JOB_CODE FROM DBO.PPC_BO_ART_JOBS A WITH(NOLOCK)
											   WHERE A.REF_ROW_ID =#MAXJOB_DETAILS.ROW_ID 
													AND A.JOB_ORDER=#MAXJOB_DETAILS.JOB_ORDER
											   )
          

           IF OBJECT_ID('TEMPDB..#TMPBARCODEDET') IS NOT NULL
            DROP TABLE #TMPBARCODEDET
             SELECT 
				TMP.BILL_NO,
				A.AC_CODE,
				SKU.PARA1_CODE,
				SKU.SIZEGROUP_CODE,
				B.ARTICLE_CODE,
				B.PARA3_CODE,
				SKU.PARA2_CODE,P2.PARA2_NAME ,SKU.PRODUCT_CODE ,
				SR=ROW_NUMBER() OVER (ORDER BY SKU.PARA2_CODE,SKU.PRODUCT_CODE)
			INTO #TMPBARCODEDET
		   FROM PPC_FGBCG_MST A
		  JOIN PPC_FGBCG_DET B ON A.MEMO_ID =B.MEMO_ID ---BO_DET_ROW_ID
		  JOIN PPC_FG_SKU SKU ON SKU.PPC_FGBCG_DET_ROW_ID=B.ROW_ID 
		  JOIN PPC_FG_PMT PMT ON PMT.PRODUCT_CODE=SKU.PRODUCT_CODE 
		  JOIN ARTICLE ART ON ART.ARTICLE_CODE =SKU.ARTICLE_CODE 
		  JOIN PARA1 P1 ON P1.PARA1_CODE =SKU.PARA1_CODE 
		  JOIN PARA2 P2 ON P2.PARA2_CODE =SKU.PARA2_CODE 
		  JOIN PARA3 P3 ON P3.PARA3_CODE =SKU.PARA3_CODE 
		  JOIN PPC_SIZEGROUP SG ON SG.SIZEGROUP_CODE =SKU.SIZEGROUP_CODE 
		  JOIN LM01106 LM ON LM.AC_CODE =A.AC_CODE 
		  JOIN #MAXJOB_DETAILS TMP ON TMP.ROW_ID = B.BO_DET_ROW_ID
		  JOIN
		 (
			SELECT B.AC_CODE ,A.PRODUCT_CODE ,B.JOB_CODE ,A.QUANTITY  
			FROM PPC_AGENCY_REC_FG_DET A
			JOIN PPC_AGENCY_REC_FG_MST B ON A.MEMO_ID =B.MEMO_ID 
			WHERE B.CANCELLED =0 AND ISNULL(MEMO_TYPE,0)=1
		 )REC ON REC.PRODUCT_CODE =SKU.PRODUCT_CODE AND REC.JOB_CODE=TMP.JOB_CODE
         
		WHERE PMT.QUANTITY_IN_STOCK=1
        AND SKU.PARA2_CODE=@CPARA2_CODE
		AND SKU.PARA2_CODE<>'0000000'
				
		
		DELETE FROM #TMPBARCODEDET WHERE SR>@SELECT_QTY
				

		INSERT PPC_IND01106(INV_ID,PRODUCT_CODE,ROW_ID,QUANTITY,ARTICLE_CODE,AC_CODE,BILL_NO,RATE,MANUAL_INVOICE_NO) 
	    SELECT @CKEYFIELDVAL1 AS INV_ID,PRODUCT_CODE,ROW_ID =CAST(NEWID() AS VARCHAR(100)) ,  QUANTITY=1
              ,ARTICLE_CODE,AC_CODE,BILL_NO,@RATE,@MANUAL_INVOICE_NO
		FROM #TMPBARCODEDET

		DELETE FROM #TMPBARCODE WHERE ROW_ID =@CROW_ID  AND PARA2_CODE=@CPARA2_CODE
		END

---SUBTOTAL,NET AMOUNT
          
          IF NOT  EXISTS (SELECT TOP 1 'U' FROM PPC_IND01106 WHERE INV_ID=@CKEYFIELDVAL1)
          BEGIN
              SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' BARCODE NOT FOUND....'
			  GOTO PROC_END
         
          END

---

             ---------UPDATE QUANTITY IN STOCK--------------
             EXEC UPDATEFGPMT_PPC 
				  @CXNTYPE			= 'PPCWSL'
				, @CXNNO			= @CMEMONOVAL
				, @CXNID			= @CKEYFIELDVAL1
				, @NREVERTFLAG		= 1
				, @NALLOWNEGSTOCK	= 0
				, @NCHKDELBARCODES	= 1
				, @CCMD				= @CCMDOUTPUT OUTPUT

			IF @CCMDOUTPUT <> ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'
				GOTO PROC_END
			END

         END
        

         IF @NUPDATEMODE = 3
           BEGIN
             IF ISNULL(@CXNMEMOID,'') = ''
                BEGIN
                  SET @CERRORMSG ='PLEASE PASS VALUE IN CXNMEMOID.'
                  GOTO PROC_END;
                END
             SET @CCMD='UPDATE ['+@CMASTERTABLENAME+'] SET CANCELLED = 1 WHERE INV_ID ='''+@CXNMEMOID+'''' 
             PRINT @CCMD
             EXEC SP_EXECUTESQL @CCMD

             EXEC UPDATEFGPMT_PPC 
					  @CXNTYPE			= 'PPCWSL'
					, @CXNNO			= ''
					, @CXNID			= @CXNMEMOID
					, @NREVERTFLAG		= 0
					, @NALLOWNEGSTOCK	= 0
					, @NCHKDELBARCODES	= 1
					, @CCMD				= @CCMDOUTPUT OUTPUT
			
			
			IF @CCMDOUTPUT <> ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'
				GOTO PROC_END;
			END
           SET @CKEYFIELDVAL1=@CXNMEMOID
          END
  
    PROC_END:
    IF ISNULL(@CERRORMSG,'')=''
     BEGIN
         COMMIT TRANSACTION;

         DELETE FROM WSL_PPC_INM01106_UPLOAD WHERE SP_ID=@NSPID 
         DELETE FROM WSL_PPC_IND01106_UPLOAD WHERE SP_ID=@NSPID 
     END
  ELSE
     BEGIN
       IF @@TRANCOUNT > 0
        ROLLBACK;
     END
      

    END TRY
    BEGIN CATCH
     IF @@TRANCOUNT > 0
       ROLLBACK;

      SET @CERRORMSG ='ERROR || PPC_SAVETRAN_CLOSE_WSL_INVOICE ' + ERROR_MESSAGE()
      --GOTO PROC_END;
    END CATCH

  INSERT @OUTPUT (ERRMSG, MEMO_ID)
  VALUES (ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )
  
  SELECT * FROM @OUTPUT	
 END
