create PROCEDURE SAVETRAN_SUBSECTION
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CMEMONOPREFIX		VARCHAR(50),
	@CFINYEAR			VARCHAR(10),
	@CXNMEMOID			VARCHAR(40)='',
	@CCOMPUTERNAME		VARCHAR(500)='',
	@CWINUSERNAME		VARCHAR(500)='',
	@CWIZUSERCODE		CHAR(7)='',
	@CLOCID VARCHAR(4)=''
)
--WITH ENCRYPTION
AS
BEGIN
	
	--changes by Dinkar in location id varchar(4)..
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME1		VARCHAR(100),
			@CDETAILTABLENAME2		VARCHAR(100),
			@CDETAILTABLENAME3		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME1	VARCHAR(100),
			@CTEMPDETAILTABLENAME2	VARCHAR(100),
			@CTEMPDETAILTABLENAME3	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE1		VARCHAR(100),
			@CTEMPDETAILTABLE2		VARCHAR(100),
			@CTEMPDETAILTABLE3		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELD2				VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(2),
			@CLOCATIONID			VARCHAR(4),
			@CHODEPTID				VARCHAR(4),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@BNEGSTOCKFOUND BIT,
			@CADDCOLUMN				VARCHAR(20),
			@CSTATECODE				VARCHAR(7),
			@NLOOPCNT				INT,
			@CCHKMASTERTABLE		VARCHAR(300),
			@CCHKKEYFIELD			VARCHAR(500),
			@CSUBSECTIONCODE		CHAR(7),
			@DFROMDATE				DATETIME,
			@CLOCSSTROWID			VARCHAR(40)

	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	SET @NSTEP = 0		-- SETTTING UP ENVIRONMENT

	-- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
	SET @CTEMPDBNAME = ''
		
	SET @CMASTERTABLENAME  = 'SECTIOND'
	SET @CDETAILTABLENAME1	= 'LOCSST'
	SET @CDETAILTABLENAME2	= 'LOCSSTADD'
	
	SET @CTEMPMASTERTABLENAME	= 'TEMP_'+@CMASTERTABLENAME+'_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME1	= 'TEMP_LOCSSTVIEW_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME2	= 'TEMP_'+@CDETAILTABLENAME2+'_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE1	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME1
	SET @CTEMPDETAILTABLE2	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME2
		
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'SUB_SECTION_CODE'
	SET @CKEYFIELD2			= 'MEMO_ID'
	SET @NMEMONOLEN			= 7
	
	IF @CLOCID=''
	SELECT @CLOCATIONID		= DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 
	ELSE
	SET @CLOCATIONID=@CLOCID

	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		
	SELECT @CSTATECODE		= '0000000'
	SET @NSTEP = 10		-- GETTING DEPTID INFO FROM TEMP TABLE
	
	SET @CMEMONOPREFIX=@CLOCATIONID
	
	BEGIN TRANSACTION 
	
	BEGIN TRY
		
		SET @CCMD = 'SELECT @CSUBSECTIONCODEOUT=SUB_SECTION_CODE FROM ' + @CTEMPMASTERTABLE
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD,N'@CSUBSECTIONCODEOUT CHAR(7) OUTPUT',@CSUBSECTIONCODEOUT=@CSUBSECTIONCODE OUTPUT

		SET @CCMD=N'UPDATE '+ @CTEMPDETAILTABLENAME1+' SET MEMO_ID=''LATER'' WHERE FROM_DT NOT IN (
					SELECT FROM_DT FROM LOCSST_MST WHERE STATE_CODE='''+@CSTATECODE+''')'	
		EXEC SP_EXECUTESQL @CCMD

		SET @CCMD=N'UPDATE A SET MEMO_ID=B.MEMO_ID FROM '+ @CTEMPDETAILTABLENAME1+' A JOIN
					LOCSST_MST B ON A.FROM_DT=B.FROM_DT WHERE B.STATE_CODE='''+@CSTATECODE+''''	
		EXEC SP_EXECUTESQL @CCMD
									
		SET @CCMD = 'SELECT TOP 1 @CLOCSSTROWIDOUT = ROW_ID FROM ' + @CTEMPDETAILTABLENAME1+'
					 WHERE MEMO_ID=''LATER''' 
		EXEC SP_EXECUTESQL @CCMD, N'@CLOCSSTROWIDOUT VARCHAR(50) OUTPUT', 
								    @CLOCSSTROWIDOUT=@CLOCSSTROWID OUTPUT
		-- START UPDATING XN TABLES	

		
		IF @NUPDATEMODE = 1 OR ISNULL(@CLOCSSTROWID,'')<>''
		BEGIN	
		

		 IF ISNULL(@CLOCATIONID,'')=''
		 BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
			GOTO END_PROC    
		 END
					SET @NSTEP = 20		-- GENERATING NEW KEY
		
			SET @NLOOPCNT=1
			
			WHILE @NLOOPCNT<=2
			BEGIN
				
				IF @NLOOPCNT=1 AND @NUPDATEMODE<>1
					GOTO LBLNEXT
					
				LBLGENKEY:
				
				IF @NLOOPCNT=2
				BEGIN
					SET @DFROMDATE=''
					
					SET @CCMD=N' SELECT TOP 1 @DFROMDATEOUT=FROM_DT FROM '+@CTEMPDETAILTABLE1+'
								 WHERE MEMO_ID=''LATER'''
					PRINT @CCMD			 
					EXEC SP_EXECUTESQL @CCMD,N'@DFROMDATEOUT DATETIME OUTPUT',@DFROMDATEOUT=@DFROMDATE OUTPUT			 	
					
					IF ISNULL(@DFROMDATE,'')=''
						BREAK
				END			
				
				-- GENERATING NEW MRR_NO		
				SET @NSAVETRANLOOP=0
				WHILE @NSAVETRANLOOP=0
				BEGIN
				
					SET @NSTEP = 23
					
					SET @CCHKMASTERTABLE=(CASE WHEN @NLOOPCNT=1 THEN 'SECTIOND' ELSE 'LOCSST_MST' END)
					
					SET @CCHKKEYFIELD = (CASE WHEN  @NLOOPCNT=1 THEN 'SUB_SECTION_CODE' ELSE 'MEMO_ID' END)				
					
					SET @NMEMONOLEN =  (CASE WHEN  @NLOOPCNT=1 THEN 7 ELSE 10 END)				
					
					SET @NSTEP = 26
					
					EXEC GETNEXTKEY @CCHKMASTERTABLE,@CCHKKEYFIELD,@NMEMONOLEN,@CMEMONOPREFIX, 1,
									@CFINYEAR,2, @CMEMONOVAL OUTPUT 
					
					SET @NSTEP = 28
					
					SET @CCMD=N'IF EXISTS ( SELECT '+@CCHKKEYFIELD+' FROM '+@CCHKMASTERTABLE+' 
											WHERE '+@CCHKKEYFIELD+'='''+ @CMEMONOVAL+''' )
									SET @NLOOPOUTPUT=0
								ELSE
									SET @NLOOPOUTPUT=1'
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
					
				END
				
				
				IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
					  GOTO END_PROC  		
				END

				SET @NSTEP = 30		-- GENERATING NEW ID
				
				IF @NLOOPCNT=1
				BEGIN
					SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET SUB_SECTION_CODE = '''+@CMEMONOVAL+''''
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD
		
					SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET SUB_SECTION_CODE = '''+@CMEMONOVAL+''''
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD
			
					SET @CSUBSECTIONCODE=@CMEMONOVAL
				END
				
				ELSE
				BEGIN
					
					SET @NSTEP = 35	
					
					SET @CCMD=N'INSERT LOCSST_MST	( FROM_DT, MEMO_ID, LAST_UPDATE, STATE_CODE, MEMO_DT ) 
								SELECT '''+CONVERT(VARCHAR,@DFROMDATE,110)+''' AS FROM_DT,'''+@CMEMONOVAL+''' AS  MEMO_ID,
								GETDATE() AS LAST_UPDATE,'''+@CSTATECODE+''' AS STATE_CODE,
								CONVERT(VARCHAR,GETDATE(),110) AS MEMO_DT'
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD
							
							
					SET @NSTEP = 40
					SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET MEMO_ID=''' + @CMEMONOVAL+'''
								 WHERE FROM_DT='''+CONVERT(VARCHAR,@DFROMDATE,110) +''''	
					EXEC SP_EXECUTESQL @CCMD
					
					GOTO LBLGENKEY
				END
				
				LBLNEXT:				
				SET @NLOOPCNT=@NLOOPCNT+1
			END
		
		END

		SET @NSTEP = 43
		
		SELECT @CADDCOLUMN =  ISNULL(T1.NAME,'') FROM SYSCOLUMNS T1 JOIN SYSOBJECTS T2 ON T1.ID = T2.ID 
		WHERE T2.XTYPE = 'U' AND T2.NAME = @CTEMPDETAILTABLE1 AND T1.NAME = 'OLD_ROW_ID'
		IF @CADDCOLUMN IS NULL
		BEGIN
			SET @CCMD = N'ALTER TABLE '+@CTEMPDETAILTABLE1+' ADD OLD_ROW_ID VARCHAR (40)'
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
		END
		
		SET @CCMD = N'UPDATE '+@CTEMPDETAILTABLE1+' SET OLD_ROW_ID = ROW_ID '
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
				
				
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
		  WHERE LEFT(ROW_ID,5) = ''LATER'''
		  PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD

		SET @NSTEP = 45
		SET @CCMD = N'UPDATE T1 SET T1.LOCSST_ROW_ID = T2.ROW_ID  FROM '+@CTEMPDETAILTABLE2+' T1 JOIN '+@CTEMPDETAILTABLE1+' T2 ON T1.LOCSST_ROW_ID  = T2.OLD_ROW_ID'
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD
		
		SET @NSTEP = 46
		SET @CCMD = N'UPDATE '+@CTEMPDETAILTABLE2+' SET ROW_ID = '''+@CLOCATIONID+''' + CONVERT(VARCHAR(40), NEWID())
			 WHERE LEFT(ROW_ID,5) = ''LATER'''
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD

		SET @NSTEP = 60

		-- CHECK WETHER THE MEMO ID IS STILL LATER
		IF LTRIM(RTRIM(ISNULL(@CSUBSECTIONCODE,'LATER'))) = 'LATER'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT SUB SECTION CODE....'
			GOTO END_PROC
		END

		SET @NSTEP = 110		-- UPDATING MASTER TABLE
		
		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= 'SUB_SECTION_CODE'
			
		SET @NSTEP = 120	
		
		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLE1
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME1
			, @CKEYFIELD1	= 'ROW_ID'
			
		SET @NSTEP = 130	
		
		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLE2
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME2
			, @CKEYFIELD1	= 'ROW_ID'

		-- AFTER SUCCESSFUL SAVING , JUST DROP THE TEMP TABLES CREATED BY APPLICATION
		SET @NSTEP = 160
		
		
	END TRY

	BEGIN CATCH
			SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(STR(@NSTEP))) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
			
			GOTO END_PROC
	END CATCH

END_PROC:
	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
			COMMIT TRANSACTION
		ELSE
			ROLLBACK
	END
		
	INSERT @OUTPUT ( ERRMSG, MEMO_ID)
			VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CSUBSECTIONCODE ,'') )

	SELECT * FROM @OUTPUT

	EXEC SP_DROPTEMPTABLES_XNS 'MSTSD',@NSPID	
END

-------------------------- END OF PROCEDURE SAVETRAN_SUBSECTION
