CREATE PROCEDURE SP3S_UPDATE_LOCKER	
(	
	 @CXN_TYPE VARCHAR(3)
	,@CXN_ID VARCHAR(30)
	,@NMODE NUMERIC(1) /*1 FOR ADD MODE AND 2 FOR REVERT MODE*/
	,@CERRMSGOUT VARCHAR(500) OUTPUT
	,@CLOCID VARCHAR(5)=''
)
--WITH ENCRYPTION
AS
BEGIN
BEGIN TRY
	DECLARE @CDEPT_ID VARCHAR(2)
	
	
	IF ISNULL(@CLOCID,'')=''
	SELECT TOP 1 @CDEPT_ID=DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 
	ELSE
	SET @CDEPT_ID=@CLOCID
	
	IF @CXN_TYPE='LFT' /*LIFT TRANSACTION TYPE*/
	BEGIN
		IF @NMODE=1
		BEGIN
			--FOR ADD MODE, CHECK IF ENTRY EXISTS IN TABLE TILL_LOCKER AND ACCORDINGLY INSERT/UPDATE
			IF EXISTS(SELECT TOP 1 'U' FROM TILL_LOCKER WHERE DEPT_ID=@CDEPT_ID)
			BEGIN
				--ADD THE LIFT AMOUNT AS LIFTED CASH IS TRANSFERRED TO LOCKER
				UPDATE TILL_LOCKER SET AMOUNT=AMOUNT+ISNULL((SELECT TOP 1 LIFT_AMOUNT FROM TILL_LIFTS WHERE MEMO_ID=@CXN_ID AND ISNULL(RECEIPTDT,'')<>''),0)
				WHERE DEPT_ID=@CDEPT_ID
			END
			ELSE
			BEGIN
				INSERT TILL_LOCKER(DEPT_ID,AMOUNT)
				SELECT TOP 1 @CDEPT_ID,LIFT_AMOUNT FROM TILL_LIFTS WHERE MEMO_ID=@CXN_ID
			END
		END
		ELSE IF @NMODE=2
		/*LIFT TRANSACTION IS BEING CANCELLED*/
		BEGIN
			UPDATE TILL_LOCKER SET AMOUNT=AMOUNT-ISNULL((SELECT TOP 1 LIFT_AMOUNT FROM TILL_LIFTS WHERE MEMO_ID=@CXN_ID AND ISNULL(RECEIPTDT,'')<>''),0)
			WHERE DEPT_ID=@CDEPT_ID
			
			IF EXISTS(SELECT TOP 1 'U' FROM TILL_LOCKER WHERE DEPT_ID=@CDEPT_ID AND AMOUNT<0)
			BEGIN
				SET @CERRMSGOUT='CASH SEEMS TO HAVE BEEN TRANSFERRED TO BANK.AMOUNT GOING NEGATIVE IN LOCKER.CANNOT PROCEED.'
			END 
		END
		GOTO END_PROC
	END
	
	IF @CXN_TYPE='BTF'
	BEGIN
		/*FOR BANK TRANSFER, WHEN THE AMOUNT IS BEING TAKEN OUT FROM THE LOCKER
		 ,FOR CASE OF ADD AND FINAL SAVE OF EDIT CASE VALIDATE THE AMOUNT FOR NON-NEGATIVE VALUE*/
		--IF NO RECORD EXIST FOR THE LOCATION IN TILL_LOCKER, DONOT ALLOW THE BANK TRANSFER TRANSACTION TO OCCUR.
		IF NOT EXISTS(SELECT TOP 1 'U' FROM TILL_LOCKER WHERE DEPT_ID=@CDEPT_ID)
		BEGIN
			SET @CERRMSGOUT='NO AMOUNT FOUND IN LOCKER.CANNOT PROCEED FOR BANK TRANSFER.'
		END
		
		IF @NMODE=1
		BEGIN
			/*REDUCE THE AMOUNT BEING TRANSFERRED FROM TILL_LOCKER*/
			UPDATE TILL_LOCKER SET AMOUNT=AMOUNT-(SELECT TOP 1 AMOUNT FROM TILL_BANK_TRANSFER WHERE MEMO_ID=@CXN_ID)
			WHERE DEPT_ID=@CDEPT_ID
			
			IF EXISTS(SELECT TOP 1 'U' FROM TILL_LOCKER WHERE DEPT_ID=@CDEPT_ID AND AMOUNT<0)
			BEGIN
				SET @CERRMSGOUT='CASH AMOUNT IS GOING NEGATIVE FOR THIS BANK TRANSFER.CANNOT PROCEED FOR BANK TRANSFER.'
				GOTO END_PROC
			END 
		END
		ELSE IF @NMODE=2
		BEGIN
			/*ADD THE AMOUNT TO THE TILL_LOCKER*/
			UPDATE TILL_LOCKER SET AMOUNT=AMOUNT+(SELECT TOP 1 AMOUNT FROM TILL_BANK_TRANSFER WHERE MEMO_ID=@CXN_ID)
			WHERE DEPT_ID=@CDEPT_ID
		END
		GOTO END_PROC
	END
END TRY
BEGIN CATCH 
	SET @CERRMSGOUT='PROC : SP3S_UPDATE_LOCKER, ERRMSG : '+ERROR_MESSAGE()
END CATCH	

END_PROC:
END
--END OF PROCEDURE - SP3S_UPDATE_LOCKER
