CREATE PROCEDURE SAVETRAN_SLS_STOCKNA_CONVERT  
(  
	 @NUPDATEMODE  NUMERIC(1,0),  
	 @NSPID    VARCHAR(50),  
	 @CMEMONOPREFIX  VARCHAR(50),  
	 @CFINYEAR   VARCHAR(10),  
	 @CMEMOID   VARCHAR(40)=''
)  
--WITH ENCRYPTION 
AS  
BEGIN  
	
--changes by Dinkar in location id varchar(4)..

 DECLARE   @CTEMPDBNAME   VARCHAR(100),  
		   @CMASTERTABLENAME  VARCHAR(100),  
		   @CDETAILTABLENAME  VARCHAR(100),  
		   @CTEMPMASTERTABLENAME VARCHAR(100),  
		   @CTEMPDETAILTABLENAME VARCHAR(100),  
		   @CTEMPMASTERTABLE  VARCHAR(100),  
		   @CTEMPDETAILTABLE  VARCHAR(100),  
		   @CERRMSG    VARCHAR(500),  
		   @CKEYFIELD1    VARCHAR(50),  
		   @CKEYFIELDVAL1   VARCHAR(50),  
		   @CMEMONO    VARCHAR(20),  
		   @NMEMONOLEN    NUMERIC(20,0),  
		   @CMEMONOVAL    VARCHAR(50),  
		   @CCMD     NVARCHAR(4000),  
		   @CCMDOUTPUT    NVARCHAR(4000),  
		   @NSAVETRANLOOP   BIT,  
		   @NSTEP    INT,  
		   @CDEPT_ID   VARCHAR(4),  
		   @CMEMODEPTID   VARCHAR(4),
		   @CPETYENABLE	  BIT,
		   @CPETTYTYPE    VARCHAR(2),
		   @CCMID VARCHAR(22),
		   @CSTATECODE CHAR(7),
		   @CHOLOCATIONID CHAR(4) ,
		   @LOCID CHAR(4),@CLocId    Char(4)  
  
  DECLARE @OUTPUT TABLE (MEMO_ID VARCHAR(30),ERRMSG VARCHAR(500)) 
 
  SET @NSTEP = 0  -- SETTTING UP ENVIRONMENT  
  
	  DECLARE @SPID INT
		SET @SPID=@NSPID
  
  -- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
  SET @CTEMPDBNAME = ''  
  
 SET @CMASTERTABLENAME = 'SLS_STOCK_NA_REP_MST'  
 SET @CDETAILTABLENAME = 'SLS_STOCK_NA_REP_DET'  
  
 SET @CTEMPMASTERTABLENAME = 'SLSNA_SLS_STOCK_NA_REP_MST_UPLOAD' 
 SET @CTEMPDETAILTABLENAME = 'SLSNA_SLS_STOCK_NA_REP_DET_UPLOAD'
   
 SET @CTEMPMASTERTABLE = @CTEMPDBNAME + @CTEMPMASTERTABLENAME  
 SET @CTEMPDETAILTABLE = @CTEMPDBNAME + @CTEMPDETAILTABLENAME  
   
 SET @CERRMSG   = ''  
 SET @CKEYFIELD1   = 'MEMO_ID'  
  
 SET @CMEMONO   = 'MEMO_NO'  
 SET @NMEMONOLEN   = 10 
 
 SELECT @CLOCID=LOCATION_CODE FROM SLSNA_SLS_STOCK_NA_REP_MST_UPLOAD (nolock) WHERE SP_ID=@NSPID  
 
 IF ISNULL(@CLocId,'')=''
 BEGIN
	 SET @CCMD=N'SELECT @LOCID=location_code FROM '+@CTEMPDETAILTABLE+' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))  +''''
	 EXEC SP_EXECUTESQL @CCMD,N'@LOCID CHAR(4) OUTPUT',@LOCID OUTPUT
	 
	 SET @CLocId=@LOCID
 END
 
 


 SELECT TOP 1 @CHOLOCATIONID=[VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'
 
 IF @CLocId=''
 SELECT @CDEPT_ID	= DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 
 ELSE
 SET @CDEPT_ID=@CLocId

 
 
 SELECT @CSTATECODE=STATE_CODE FROM LOC_VIEW WHERE DEPT_ID=@CDEPT_ID
 
 BEGIN TRY  
  BEGIN TRANSACTION   

  
DELETE  FROM SLSNA_SLS_STOCK_NA_REP_DET_UPLOAD WHERE SP_ID=@NSPID AND NEW_PRODUCT_CODE=''
 
  -- START UPDATING XN TABLES   
  IF @NUPDATEMODE = 1 -- ADDMODE   
  BEGIN   


 IF ISNULL(@CDEPT_ID,'')=''
 BEGIN
    SET @CERRMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
	GOTO END_PROC    
 END

  /*
	VALIDATIONS ON SLS_STOCK_NA_REP_DET
	1. NEW_PRODUCT_CODE SHOULD NOT HAVE STOCK_NA. 
	2. NEW_PRODUCT_CODE SHOULD HAVE SAME MRP AS THAT OF OLD_PRODUCT_CODE.
	3. NEW_PRODUCT_CODE SHOULD HAVE STOCK EQUAL TO SOLD QUANTITY.
  */

  	    PRINT 'START NORMALIZE_FIX_PRODUCT_CODE '
		IF @NUPDATEMODE<>3 
		BEGIN

	   	  UPDATE SLSNA_SLS_STOCK_NA_REP_DET_UPLOAD SET PRODUCT_CODE=NEW_PRODUCT_CODE WHERE SP_ID=@NSPID 
	
		  EXEC SP3S_NORMALIZE_FIX_PRODUCT_CODE 'SLSNA',@NSPID,@NUPDATEMODE,
		  @CTEMPDETAILTABLE,@CMEMOID,@CERRMSG OUTPUT,@CTEMPMASTERTABLE,@CDEPT_ID
		  IF ISNULL(@CERRMSG,'')<>''
		  BEGIN
			   SET @CERRMSG='ERROR IN NORMALIZATION'+@CERRMSG
			   GOTO END_PROC
		  END
		   UPDATE SLSNA_SLS_STOCK_NA_REP_DET_UPLOAD SET NEW_PRODUCT_CODE=PRODUCT_CODE WHERE SP_ID=@NSPID AND  NEW_PRODUCT_CODE<>ISNULL(PRODUCT_CODE,'')

		END  

		--select * from SLSNA_SLS_STOCK_NA_REP_DET_UPLOAD  WHERE SP_ID=@NSPID

   SET @NSTEP = 10
   SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM '+@CTEMPDETAILTABLE+' A 
							JOIN SKU B ON A.NEW_PRODUCT_CODE=B.PRODUCT_CODE 
							 JOIN ARTICLE C ON B.ARTICLE_CODE=C.ARTICLE_CODE
							  WHERE C.STOCK_NA=1 AND A.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))  +''')
			   SET @CERRMSG=''NEW PRODUCTCODE SHOULD BE STOCK APPLICABLE.CANNOT PROCEED.'''
   EXEC SP_EXECUTESQL @CCMD,N'@CERRMSG VARCHAR(500) OUTPUT',@CERRMSG OUTPUT				   
  
   IF ISNULL(@CERRMSG,'')<>''
	 GOTO END_PROC

   SET @NSTEP=20
   SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM '+@CTEMPDETAILTABLE+' A 
							LEFT JOIN SKU B ON A.NEW_PRODUCT_CODE=B.PRODUCT_CODE 
							 WHERE A.MRP<>ISNULL(B.MRP,0) AND A.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))  +''' )
			   SET @CERRMSG=''NEW PRODUCTCODE MRP SHOULD BE EQUAL TO THAT OF OLD PRODUCT CODE.CANNOT PROCEED.'''
   EXEC SP_EXECUTESQL @CCMD,N'@CERRMSG VARCHAR(500) OUTPUT',@CERRMSG OUTPUT				   		 
  
   IF ISNULL(@CERRMSG,'')<>''
	 GOTO END_PROC


	    --SET @CCMD=N' UPDATE A SET NEW_PRODUCT_CODE=B.PRODUCT_CODE FROM '+@CTEMPDETAILTABLE+' A 
	    --             JOIN PMT01106 B ON A.NEW_PRODUCT_CODE=LEFT(B.PRODUCT_CODE, ISNULL(NULLIF(CHARINDEX (''@'',B.PRODUCT_CODE)-1,-1),LEN(B.PRODUCT_CODE ))) 
	    --             AND B.DEPT_ID='''+@CDEPT_ID+''' AND A.BIN_ID=B.BIN_ID 
	    --             WHERE ISNULL(B.QUANTITY_IN_STOCK,0)>=A.QUANTITY '
	    -- EXEC SP_EXECUTESQL @CCMD
		

   SET @NSTEP=30
   SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM '+@CTEMPDETAILTABLE+' A 
							LEFT JOIN PMT01106 B ON A.NEW_PRODUCT_CODE=B.PRODUCT_CODE AND B.DEPT_ID='''+@CDEPT_ID+'''
								  AND B.BIN_ID=A.BIN_ID
							 WHERE ISNULL(B.QUANTITY_IN_STOCK,0)<A.QUANTITY AND A.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))  +''')
			   SET @CERRMSG=''NEW PRODUCTCODE STOCK IS GOING NEGATIVE.CANNOT PROCEED.'''
   EXEC SP_EXECUTESQL @CCMD,N'@CERRMSG VARCHAR(500) OUTPUT',@CERRMSG OUTPUT				   		 
  
   IF ISNULL(@CERRMSG,'')<>''
	 GOTO END_PROC		 

   DECLARE @STOCK_NA_NEW_BILL BIT 
   SELECT TOP 1 @STOCK_NA_NEW_BILL=VALUE  FROM CONFIG WHERE CONFIG_OPTION ='BOOK_NEW_SALE_FOR_STOCK_NA'


   IF OBJECT_ID('TEMPDB..#NEWBARCODETAX','U') IS NOT NULL
	 DROP TABLE #NEWBARCODETAX	
   
   SELECT OLD_PRODUCT_CODE,NEW_PRODUCT_CODE 
		,TAX_PERCENTAGE AS OLD_TAX_PERCENTAGE
		,TAX_PERCENTAGE AS NEW_TAX_PERCENTAGE
		,CONVERT(CHAR(7),'') AS SUB_SECTION_CODE
		,CONVERT(DATETIME,'') AS CM_DT
		,CONVERT(VARCHAR(30),'') AS MEMO_ID
   INTO #NEWBARCODETAX
   FROM SLS_STOCK_NA_REP_DET
   WHERE 1=2
  	
   SET @CCMD=N'SELECT A.OLD_PRODUCT_CODE,A.NEW_PRODUCT_CODE,A.TAX_PERCENTAGE,0,ART.SUB_SECTION_CODE,A.CM_DT,'''' 
			   FROM '+@CTEMPDETAILTABLE+' A
			   JOIN SKU ON A.NEW_PRODUCT_CODE=SKU.PRODUCT_CODE
			   JOIN ARTICLE ART ON SKU.ARTICLE_CODE=ART.ARTICLE_CODE
			   WHERE A.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))  +''' '
			   	 
  
   PRINT @CCMD
   INSERT #NEWBARCODETAX(OLD_PRODUCT_CODE,NEW_PRODUCT_CODE,OLD_TAX_PERCENTAGE,NEW_TAX_PERCENTAGE
						,SUB_SECTION_CODE,CM_DT,MEMO_ID)	
   EXEC SP_EXECUTESQL @CCMD
   
   --GETTING THE APPLICABLE MEMO_ID FROM LOCSST
   UPDATE AM SET MEMO_ID=B.MEMO_ID
   FROM #NEWBARCODETAX AM
   CROSS APPLY 
   (
	 SELECT TOP 1 LTRIM(RTRIM(B.MEMO_ID)) AS MEMO_ID
	 FROM LOCSST_MST A
	  JOIN LOCSST B ON A.MEMO_ID=B.MEMO_ID 
	   WHERE STATE_CODE=@CSTATECODE 
		 AND FROM_DT<=AM.CM_DT 
		  AND B.SUB_SECTION_CODE=AM.SUB_SECTION_CODE 
		   ORDER BY FROM_DT DESC
   )B
   
   UPDATE AM SET NEW_TAX_PERCENTAGE=ISNULL(B.ADD_TAX_PERCENTAGE,B.TAX_PERCENTAGE)
   FROM #NEWBARCODETAX AM
   CROSS APPLY
   (
	   SELECT B.TAX_PERCENTAGE,C.TAX_PERCENTAGE AS ADD_TAX_PERCENTAGE 
	   FROM LOCSST B    
	   LEFT OUTER JOIN LOCSSTADD C ON C.LOCSST_ROW_ID =B.ROW_ID   
	   WHERE  B.MEMO_ID=AM.MEMO_ID AND B.SUB_SECTION_CODE=AM.SUB_SECTION_CODE
   )B
   
   ------FOR NEW PATTERN STOCK NA BAROCODE RETURN AND NEW BILL ADD IN CASH MEMO 
   IF ISNULL(@STOCK_NA_NEW_BILL,0)=1
   BEGIN

	   IF OBJECT_ID('TEMPDB..#TMPCMID','U') IS NOT NULL
		 DROP TABLE #TMPCMID

	    
	   ---RETURN CASH MEMO 
	   SET @NSTEP=40
	   
	   
	   DELETE FROM SLS_CMD01106_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@SPID)))
	   
	   DELETE FROM SLS_CMM01106_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@SPID)))
	   
	   DELETE FROM SLS_PAYMODE_XN_DET_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@SPID)))

	   
	   SET @CCMD=N'SELECT SP_ID='''+RTRIM(LTRIM(STR(@SPID)))+''', AC_CODE=''0000000000'', ATD_CHARGES=0, AUTOENTRY=0, BIN_ID=''000'', CAMPAIGN_GC_OTP='''', 
				 CANCELLED=0, CASH_TENDERED=0, CM_DT=C.MEMO_DT, 
				 CM_ID=''LATER'', CM_MODE=1, CM_NO=''LATER'', CM_TIME=C.MEMO_DT, COPIES_PTD=0, CUSTOMER_CODE=''000000000000'', DISCOUNT_AMOUNT=0, DISCOUNT_PERCENTAGE=0, 
				 DISCOUNT_REMARKS='''', DT_CODE=''0000000'', ECOUPON_ID='''', EDT_USER_CODE=''0000000'', EXEMPTED=0, FC_RATE=0, FIN_YEAR=C.FIN_YEAR, FLIGHT_NO=C.FIN_YEAR, GV_AMOUNT=0, 
				 LAST_UPDATE=GETDATE(), MANUAL_BILL=0, MANUAL_DISCOUNT=0, MANUAL_ROUNDOFF=0, MEMO_TYPE=1, MRP_WSP=1, NET_AMOUNT=0, 
				 PARTY_TYPE=1, PASSPORT_NO='''', PATCHUP_RUN=0, PAY_MODE=1, PAYBACK=0, POSTEDINAC=0, REF_CM_ID='''', REF_NO='''', REMARKS='''', ROUND_OFF=0, 
				 SALESSETUPINEFFECT=0, SENT_FOR_GR=0, SENT_FOR_RECON=0, SENT_TO_HO=0, SHIFT_ID=NULL, SMS_SENT=0, SUBTOTAL=SUM(B.SUBTOTAL), SUBTOTAL_R=SUM(-(1)*(B.SUBTOTAL)), 
				 TICKET_NO='''', USER_CODE=''0000000'', CTRLS_USED=0, INV_MODE=1, INV_TYPE=1,ISNULL(A.PARTY_STATE_CODE,''00'') AS PARTY_STATE_CODE
				 FROM CMM01106 A
				 JOIN  
				 (
				  SELECT A.CM_ID,SUM(A.NET) AS SUBTOTAL
				  FROM CMD01106 A
				  JOIN  '+@CTEMPDETAILTABLE+' B ON A.ROW_ID=B.CMD_ROW_ID
				  WHERE B.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))  +'''
				  GROUP BY A.CM_ID
				 ) B ON A.CM_ID=B.CM_ID
				 JOIN '+@CTEMPMASTERTABLE+' C ON 1=1
				 GROUP BY C.FIN_YEAR,C.MEMO_DT,A.PARTY_STATE_CODE'
	    
	   PRINT @CCMD                  
	   INSERT SLS_CMM01106_UPLOAD	( SP_ID, AC_CODE, ATD_CHARGES, AUTOENTRY, BIN_ID, CAMPAIGN_GC_OTP, CANCELLED, CASH_TENDERED, CM_DT, CM_ID, CM_MODE, CM_NO, CM_TIME,  COPIES_PTD, CUSTOMER_CODE, DISCOUNT_AMOUNT, DISCOUNT_PERCENTAGE, DISCOUNT_REMARKS, DT_CODE, ECOUPON_ID, EDT_USER_CODE, EXEMPTED, FC_RATE, FIN_YEAR, FLIGHT_NO, GV_AMOUNT, 
	   LAST_UPDATE, MANUAL_BILL, MANUAL_DISCOUNT, MANUAL_ROUNDOFF, MEMO_TYPE, MRP_WSP, NET_AMOUNT, PARTY_TYPE, PASSPORT_NO, PATCHUP_RUN, PAY_MODE, PAYBACK, POSTEDINAC, REF_CM_ID, REF_NO, REMARKS, ROUND_OFF, SALESSETUPINEFFECT, SENT_FOR_GR, SENT_FOR_RECON, SENT_TO_HO, SHIFT_ID, SMS_SENT, SUBTOTAL, SUBTOTAL_R, TICKET_NO, USER_CODE, CTRLS_USED, INV_MODE, INV_TYPE,PARTY_STATE_CODE ) 
	   EXEC SP_EXECUTESQL @CCMD
	   
	   
	   SET @NSTEP=100
	   SET @CCMD=N'SELECT A.BIN_ID,A.CARD_DISCOUNT,CM_ID=''LATER'', 0 AS CMM_DISCOUNT_AMOUNT,A.DEPT_ID,A.DISCOUNT_AMOUNT,A.DISCOUNT_PERCENTAGE, 
					BASIC_DISCOUNT_PERCENTAGE,BASIC_DISCOUNT_AMOUNT,CARD_DISCOUNT_PERCENTAGE,CARD_DISCOUNT_AMOUNT,A.EAN, A.EMP_CODE, A.EMP_CODE1, A.EMP_CODE2, A.FIX_MRP, A.FOC_QUANTITY, A.HOLD_FOR_ALTER, A.ITEM_DESC, A.ITEM_ROUND_OFF, 
					A.LAST_UPDATE, A.MANUAL_DISCOUNT, A.MRP, NET=A.NET, A.NRM_ID, A.OLD_MRP, A.PACK_SLIP_ID, B.NEW_PRODUCT_CODE, QUANTITY=A.QUANTITY, A.REALIZE_SALE, 
					A.REF_ORDER_ID, A.REF_SLS_MEMO_ID, A.REPEAT_PUR_ORDER, A.RFNET, ROW_ID=''LATER_STOCKNA'', A.SLSDET_ROW_ID, A.SR_NO, A.TAX_AMOUNT, A.TAX_METHOD, 
					A.TAX_PERCENTAGE, A.TAX_TYPE, A.WEIGHTED_AVG_DISC_AMT, A.WEIGHTED_AVG_DISC_PCT, A.XN_TYPE, SP_ID='''+RTRIM(LTRIM(STR(@SPID)))+''', TEMP_ROW_ID=''LATER'', A.FORM_ID, 
					A.MANUAL_TAX_METHOD, 0 AS LAST_SLS_DISCOUNT_PERCENTAGE
					FROM CMD01106 A
					JOIN  '+@CTEMPDETAILTABLE+' B ON A.ROW_ID=B.CMD_ROW_ID
					WHERE B.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))  +'''
					UNION ALL
					SELECT A.BIN_ID,A.CARD_DISCOUNT,CM_ID=''LATER'', 0 AS CMM_DISCOUNT_AMOUNT,A.DEPT_ID,ABS(A.DISCOUNT_AMOUNT)*-1,A.DISCOUNT_PERCENTAGE, 
					BASIC_DISCOUNT_PERCENTAGE,ABS(BASIC_DISCOUNT_AMOUNT)*-1,CARD_DISCOUNT_PERCENTAGE,ABS(CARD_DISCOUNT_AMOUNT)*-1,A.EAN, A.EMP_CODE, A.EMP_CODE1, A.EMP_CODE2, A.FIX_MRP, A.FOC_QUANTITY, A.HOLD_FOR_ALTER, A.ITEM_DESC, A.ITEM_ROUND_OFF*-1, 
					A.LAST_UPDATE, A.MANUAL_DISCOUNT, A.MRP, NET=ABS(A.NET)*(-1), A.NRM_ID, A.OLD_MRP, A.PACK_SLIP_ID, A.PRODUCT_CODE, QUANTITY=A.QUANTITY*(-1), A.REALIZE_SALE, 
					A.REF_ORDER_ID, A.REF_SLS_MEMO_ID, A.REPEAT_PUR_ORDER, A.RFNET, ROW_ID=''LATER_STOCKNA'', A.SLSDET_ROW_ID, A.SR_NO, A.TAX_AMOUNT, A.TAX_METHOD, 
					A.TAX_PERCENTAGE, A.TAX_TYPE, A.WEIGHTED_AVG_DISC_AMT, A.WEIGHTED_AVG_DISC_PCT, A.XN_TYPE, SP_ID='''+RTRIM(LTRIM(STR(@SPID)))+''', TEMP_ROW_ID=''LATER'', A.FORM_ID, 
					A.MANUAL_TAX_METHOD , 0 AS LAST_SLS_DISCOUNT_PERCENTAGE,''0000000000'' as hsn_code
					FROM CMD01106 A
					JOIN  '+@CTEMPDETAILTABLE+' B ON A.ROW_ID=B.CMD_ROW_ID
					WHERE B.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))  +''' '
				   
	   PRINT @CCMD
	   INSERT SLS_CMD01106_UPLOAD	( BIN_ID, CARD_DISCOUNT, CM_ID, CMM_DISCOUNT_AMOUNT, DEPT_ID, DISCOUNT_AMOUNT, 
	   DISCOUNT_PERCENTAGE,BASIC_DISCOUNT_PERCENTAGE,BASIC_DISCOUNT_AMOUNT,CARD_DISCOUNT_PERCENTAGE,CARD_DISCOUNT_AMOUNT, EAN, EMP_CODE, EMP_CODE1, EMP_CODE2, FIX_MRP, FOC_QUANTITY, HOLD_FOR_ALTER, 
	   ITEM_DESC, ITEM_ROUND_OFF, LAST_UPDATE, MANUAL_DISCOUNT, MRP, NET, NRM_ID, OLD_MRP, PACK_SLIP_ID,
		PRODUCT_CODE, QUANTITY, REALIZE_SALE, REF_ORDER_ID, REF_SLS_MEMO_ID, REPEAT_PUR_ORDER, RFNET, 
		ROW_ID, SLSDET_ROW_ID, SR_NO, TAX_AMOUNT, TAX_METHOD, TAX_PERCENTAGE, TAX_TYPE, WEIGHTED_AVG_DISC_AMT, 
		WEIGHTED_AVG_DISC_PCT, XN_TYPE, SP_ID, TEMP_ROW_ID, FORM_ID, MANUAL_TAX_METHOD,LAST_SLS_DISCOUNT_PERCENTAGE ,hsn_code)  
	   
	   EXEC SP_EXECUTESQL @CCMD  

	   
	   
	   UPDATE A SET TAX_PERCENTAGE=B.NEW_TAX_PERCENTAGE,TAX_TYPE =1,TAX_METHOD =1
	   FROM SLS_CMD01106_UPLOAD A 
	   JOIN #NEWBARCODETAX B ON A.PRODUCT_CODE =B.NEW_PRODUCT_CODE
	   WHERE A.SP_ID=@SPID
	   
	   UPDATE A SET TAX_TYPE =1,TAX_METHOD =1
	   FROM SLS_CMD01106_UPLOAD A 
	   JOIN #NEWBARCODETAX B ON A.PRODUCT_CODE =B.OLD_PRODUCT_CODE  
	   WHERE A.SP_ID=@SPID
	 
	 
	 
	   UPDATE SLS_CMD01106_UPLOAD SET ROW_ID =NEWID (),   TAX_AMOUNT =ISNULL(NET,0)*ISNULL(TAX_PERCENTAGE,0)/
	   (100+ISNULL(TAX_PERCENTAGE,0)) WHERE ROW_ID ='LATER_STOCKNA'
	 

	 --	UPDATE A SET A.TOTAL_QUANTITY=B.TOTAL_QUANTITY 
		--FROM SLS_CMM01106_UPLOAD A WITH (ROWLOCK)
		--INNER JOIN 
		--(
		--	SELECT SP_ID,SUM(QUANTITY) AS TOTAL_QUANTITY 
		--	FROM  SLS_CMD01106_UPLOAD  (NOLOCK)
		--	WHERE SP_ID=@NSPID GROUP BY SP_ID
		--)B ON  A.SP_ID=B.SP_ID
		--WHERE A.SP_ID=@NSPID

	   SET @NSTEP=120
	   INSERT INTO @OUTPUT(ERRMSG ,MEMO_ID ) 
	   EXEC  SAVETRAN_SLS_AFTERSAVE
		@NUPDATEMODE =1,
		@NSPID=@SPID,
		@CMEMONOPREFIX=@CMEMONOPREFIX,
		@CFINYEAR=@CFINYEAR,
		@CMACHINENAME='',
		@CWINDOWUSERNAME='',
		@CWIZAPPUSERCODE='0000000',
		@CMEMOID='',
		@CMEMODT='',
		@BCALLEDFROMESTIMATE=0,
		@BCALLEDFROMCASHIERMODULE=0,
		@CLOCID='',
		@BDIALOGRESULT=0,
		@BCALLEDFROMSLSSTOCKNACONVERT=1
	    
		SET @NSTEP=130
		SELECT TOP 1 @CERRMSG=ERRMSG FROM @OUTPUT
	    
		DELETE FROM @OUTPUT
	     
		IF ISNULL(@CERRMSG,'')<>''
			GOTO END_PROC
   
  END
  -------*********---------------
  /*
	VERIFY THAT TAX_PERCENTAGE OF OLD_PRODUCT_CODE AND NEW_PRODUCT_CODE SHOULD BE EQUAL
  */
 

   
   SET @NSTEP = 50  -- GENERATING NEW KEY  
     
   -- GENERATING NEW JOB ORDER NO    
   SET @NSAVETRANLOOP=0  
   WHILE @NSAVETRANLOOP=0  
   BEGIN  
		EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1, @CFINYEAR, 0, @CMEMONOVAL OUTPUT     
	      
		SET @NSTEP = 60  
		PRINT @CMEMONOVAL  
		SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+'   
								WHERE '+@CMEMONO+'='''+@CMEMONOVAL+'''   
								AND FIN_YEAR = '''+@CFINYEAR+''' )  
					SET @NLOOPOUTPUT=0  
				   ELSE  
					SET @NLOOPOUTPUT=1'  
		PRINT @CCMD  
		EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT  
   END  
  
   SET @NSTEP = 70
   IF @CMEMONOVAL IS NULL OR @CMEMONOVAL LIKE '%LATER%'
   BEGIN  
      SET @CERRMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'   
      GOTO END_PROC      
   END  
  
   SET @NSTEP = 80    
   
   SET @CKEYFIELDVAL1 = @CLOCID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
   
   IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'    
   BEGIN  
      SET @CERRMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
      GOTO END_PROC  
   END  
  
   SET @NSTEP = 90  -- UPDATING NEW ID INTO TEMP TABLES  
   SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' 
						 +@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))  +''''  
   PRINT @CCMD  
   EXEC SP_EXECUTESQL @CCMD  
   
   SET @NSTEP = 95 
   SET @CCMD = 'UPDATE '+ @CTEMPDETAILTABLE+ ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+'''
					      ,ROW_ID='''+@CDEPT_ID+'''+CONVERT(VARCHAR(40),NEWID()) WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))  +''''  
   PRINT @CCMD  
   EXEC SP_EXECUTESQL @CCMD  
  
  END     -- END OF ADDMODE  
  
  SET @NSTEP = 130
  -- RECHECKING IF ID IS STILL LATER  
  IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
  BEGIN  
	 SET @CERRMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
	 GOTO END_PROC  
  END

  
 DECLARE @cWhereClause VARCHAR(1000)
 SET @CWHERECLAUSE = ' SP_ID='''+LTRIM(RTRIM(@NSPID))+''''

  
  SET @NSTEP = 140  -- UPDATING MASTER TABLE  
  EXEC UPDATEMASTERXN   
      @CSOURCEDB = @CTEMPDBNAME  
    , @CSOURCETABLE = @CTEMPMASTERTABLENAME  
    , @CDESTDB  = ''  
    , @CDESTTABLE = @CMASTERTABLENAME  
    , @CKEYFIELD1 = @CKEYFIELD1  
    , @BALWAYSUPDATE = 1  
	, @CFILTERCONDITION=@cWhereClause
    
  SET @NSTEP = 150  -- UPDATING MASTER TABLE  
  EXEC UPDATEMASTERXN   
      @CSOURCEDB = @CTEMPDBNAME  
    , @CSOURCETABLE = @CTEMPDETAILTABLE  
    , @CDESTDB  = ''  
    , @CDESTTABLE = @CDETAILTABLENAME
    , @CKEYFIELD1 = 'ROW_ID'  
    , @BALWAYSUPDATE = 1
	, @CFILTERCONDITION=@cWhereClause
  
  
  SET @NSTEP = 160
  INSERT PMT01106	( LAST_UPDATE, REP_ID, PRODUCT_CODE, QUANTITY_IN_STOCK, DEPT_ID, BIN_ID )  
  SELECT 	GETDATE() AS LAST_UPDATE,'' AS REP_ID, A.NEW_PRODUCT_CODE ,0 AS QUANTITY_IN_STOCK
			,mst.location_code  AS DEPT_ID, A.BIN_ID 
  FROM SLS_STOCK_NA_REP_DET A
  join SLS_STOCK_NA_REP_MST mst on a.memo_id =mst.memo_id 
  LEFT JOIN PMT01106 B ON A.NEW_PRODUCT_CODE=B.PRODUCT_CODE AND mst.location_code =B.DEPT_ID AND A.BIN_ID=B.BIN_ID
  WHERE A.MEMO_ID=@CKEYFIELDVAL1 AND B.PRODUCT_CODE IS NULL
  
  /*REDUCING STOCK OF NEW PRODUCT CODE*/
  IF ISNULL(@STOCK_NA_NEW_BILL,0)=0
  BEGIN
       
	  SET @NSTEP = 180
	  UPDATE A
			SET QUANTITY_IN_STOCK=A.QUANTITY_IN_STOCK-B.QUANTITY
	  FROM PMT01106 A 
	  JOIN 
	  (
		SELECT A.NEW_PRODUCT_CODE,mst.location_code  AS DEPT_ID,A.BIN_ID,SUM(A.QUANTITY) AS QUANTITY
		FROM SLS_STOCK_NA_REP_DET A
		join SLS_STOCK_NA_REP_MST mst on a.memo_id =mst.memo_id 
		WHERE A.MEMO_ID=@CKEYFIELDVAL1
		GROUP BY A.NEW_PRODUCT_CODE,mst.location_code ,A.BIN_ID
	  )B ON A.PRODUCT_CODE=B.NEW_PRODUCT_CODE AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID
	  
	  SET @NSTEP = 190	
	  /*BARCODE STOCK SHOULD NOT BE NEGATIVE*/	
	  IF EXISTS(SELECT TOP 1 'U' FROM PMT01106 A JOIN SLS_STOCK_NA_REP_DET B 
	               join SLS_STOCK_NA_REP_MST mst on b.memo_id =mst.memo_id 
					ON A.PRODUCT_CODE=B.NEW_PRODUCT_CODE AND A.DEPT_ID=mst.location_code AND A.BIN_ID=B.BIN_ID
					 WHERE B.MEMO_ID=@CKEYFIELDVAL1 AND A.QUANTITY_IN_STOCK<0)
	  BEGIN
		SET @CERRMSG='STOCK GOING NEGATIVE FOR NEW BARCODE.CANNOT PROCEED.'
		GOTO END_PROC
	  END				 
	  
	  SET @NSTEP = 200		 
	  /*REPLACING THE BARCODE IN CMD01106*/
	  UPDATE A SET PRODUCT_CODE=B.NEW_PRODUCT_CODE,HSN_CODE=(CASE WHEN ISNULL(C.HSN_CODE,'') NOT IN ('','0000000000')
	  THEN C.HSN_CODE ELSE D.HSN_CODE END)
	  FROM CMD01106 A
	  JOIN SLS_STOCK_NA_REP_DET B ON A.ROW_ID=B.CMD_ROW_ID
	  JOIN SKU C ON C.PRODUCT_CODE=B.NEW_PRODUCT_CODE
	  JOIN ARTICLE D ON D.ARTICLE_CODE=C.ARTICLE_CODE
	  JOIN SECTIOND E ON E.SUB_SECTION_CODE=D.SUB_SECTION_CODE
	  WHERE B.MEMO_ID=@CKEYFIELDVAL1	
	  	
  END
 
  SET @NSTEP = 210	
  DECLARE @BLOCALBILL BIT,@NATDCHARGES NUMERIC(10,2),@CPARTY_GSTN_NO VARCHAR(20),@CPARTYSTATECODE VARCHAR(20),
		  @NSUBTOTAL NUMERIC(10,2),@NPARTYTYPE NUMERIC(2,0),@DXNDT DATETIME	


  --REBUILD RFOPT FOR THE UPDATED BILLS
  IF OBJECT_ID('TEMPDB..#MODIFIEDBILLS','U') IS NOT NULL
		DROP TABLE #MODIFIEDBILLS
  
  SELECT DISTINCT A.CM_ID 
  INTO #MODIFIEDBILLS
  FROM CMD01106 A(NOLOCK)
  JOIN SLS_STOCK_NA_REP_DET B ON A.ROW_ID=B.CMD_ROW_ID
  WHERE B.MEMO_ID=@CKEYFIELDVAL1

  
  WHILE EXISTS(SELECT TOP 1 'U' FROM #MODIFIEDBILLS)
  BEGIN
		SET @NSTEP = 220
	    SELECT TOP 1 @CCMID=CM_ID FROM #MODIFIEDBILLS
				
		SELECT @CPARTYSTATECODE='',@BLOCALBILL=0
		
		SELECT TOP 1 @DXNDT=CM_DT,@NATDCHARGES=ATD_CHARGES,@NSUBTOTAL=SUBTOTAL+SUBTOTAL_R FROM CMM01106 WHERE CM_ID=@CCMID
					
		DELETE FROM GST_TAXINFO_CALC WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))
		
		SET @NSTEP = 230
		INSERT GST_TAXINFO_CALC	( PRODUCT_CODE, SP_ID ,NET_VALUE,TAX_METHOD,ROW_ID,QUANTITY,MRP )  
		SELECT PRODUCT_CODE,LTRIM(RTRIM(STR(@NSPID))) AS SP_ID,(NET-ISNULL(CMM_DISCOUNT_AMOUNT,0)) AS NET_VALUE,
		2 AS TAX_METHOD,ROW_ID,QUANTITY ,MRP
		FROM CMD01106 WHERE CM_ID=@CCMID AND (TAX_METHOD=1 OR ISNULL(IGST_AMOUNT,0)+ISNULL(SGST_AMOUNT,0)+ISNULL(CGST_AMOUNT,0)=0)
		
		--SELECT * FROM GST_TAXINFO_CALC WHERE SP_ID=@NSPID
		IF EXISTS (SELECT TOP 1 SP_ID FROM GST_TAXINFO_CALC WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID))))
		BEGIN
			SET @NSTEP = 280
			EXEC SP_CHKXNSAVELOG 'SLS_TMP',@NSTEP,0,@NSPID,0
			SET @CPARTY_GSTN_NO = ''

			IF EXISTS (SELECT TOP 1 CUSTOMER_CODE FROM CMM01106 WHERE CM_ID=@CCMID AND
				CUSTOMER_CODE IN ('','000000000000') AND PARTY_TYPE<>2 )
				SET @BLOCALBILL=1
			ELSE
			BEGIN
				
				SET @NSTEP = 290
				EXEC SP_CHKXNSAVELOG 'SLS_TMP',@NSTEP,0,@NSPID,0		
			
				SELECT @NPARTYTYPE=PARTY_TYPE FROM CMM01106 WHERE CM_ID=@CCMID
				IF @NPARTYTYPE=2
					SELECT @CPARTY_GSTN_NO=AC_GST_NO,@CPARTYSTATECODE=A.PARTY_STATE_CODE
					FROM CMM01106 A JOIN LMP01106 B ON A.AC_CODE=B.AC_CODE
					WHERE CM_ID=@CCMID
				ELSE
					SELECT @CPARTY_GSTN_NO=ISNULL(CUS_GST_NO,''),@CPARTYSTATECODE=A.PARTY_STATE_CODE
					FROM CMM01106 A JOIN CUSTDYM B ON A.CUSTOMER_CODE=B.CUSTOMER_CODE
					WHERE CM_ID=@CCMID
			END

			SET @NSTEP = 300
			EXEC SP_CHKXNSAVELOG 'SLS_TMP',@NSTEP,0,@NSPID,0		
									
			EXEC SP3S_GST_TAX_CAL
			@CXN_TYPE='SLS',
			@CMEMO_ID='',
			@DMEMO_DT=@DXNDT,
			@NSPID=@NSPID,
			@CPARTYSTATE_CODE=@CPARTYSTATECODE,
			@BLOCALBILL=@BLOCALBILL,
			@CPARTY_GSTN_NO=@CPARTY_GSTN_NO,
			@CERRMSG=@CERRMSG OUTPUT
			
			IF ISNULL(@CERRMSG,'')<>''
				GOTO END_PROC

			SET @NSTEP = 305
			EXEC SP_CHKXNSAVELOG 'SLS_TMP',@NSTEP,0,@NSPID,0		
			
			UPDATE CMD01106 SET TAX_AMOUNT=0,TAX_PERCENTAGE=0,TAX_METHOD=1,
			HSN_CODE=B.HSN_CODE,GST_PERCENTAGE=B.GST_PERCENTAGE,IGST_AMOUNT=B.IGST_AMOUNT,
			CGST_AMOUNT=B.CGST_AMOUNT,SGST_AMOUNT=B.SGST_AMOUNT,
			XN_VALUE_WITHOUT_GST=B.XN_VALUE_WITHOUT_GST,XN_VALUE_WITH_GST=B.XN_VALUE_WITH_GST
			FROM GST_TAXINFO_CALC B WHERE B.ROW_ID=CMD01106.ROW_ID	AND CMD01106.CM_ID=@CCMID
			AND (CMD01106.QUANTITY>0 OR CMD01106.REF_SLS_MEMO_DT>'2017-06-30')
		END
		
		UPDATE cmm01106 WITH (ROWLOCk) SET last_update=getdate() WHERE cm_id=@CCMID
		UPDATE cmm01106 WITH (ROWLOCk) SET wizclip_bill_synch_last_update=last_update WHERE cm_id=@CCMID
		AND ISNULL(wizclip_bill_synch_last_update,'')<>''
			 
		IF ISNULL(@CERRMSG,'')<>''
			GOTO END_PROC
		 
	    DELETE #MODIFIEDBILLS WHERE CM_ID=@CCMID	
	    
		
  END			 
  
END TRY  
BEGIN CATCH  
    SET @CERRMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
END CATCH 
   
END_PROC:  


	
	PRINT 'LAST STEP IN SAVETRAN_SLS_STOCKNA_CONVERT :'+STR(@NSTEP)+':'+STR(@NSPID)
	
	INSERT INTO @OUTPUT(MEMO_ID,ERRMSG)
	SELECT @CKEYFIELDVAL1,ISNULL(@CERRMSG,'') 

	
  
IF @@TRANCOUNT>0  
BEGIN  
  IF ISNULL(@CERRMSG,'')='' 
  BEGIN
	commit TRANSACTION 
  END
  ELSE  
	ROLLBACK  
END  

   DELETE FROM SLS_CMD01106_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@SPID)))
   
   DELETE FROM SLS_CMM01106_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@SPID)))



	  DELETE FROM SLSNA_SLS_STOCK_NA_REP_MST_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@SPID)))
      DELETE FROM SLSNA_SLS_STOCK_NA_REP_det_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@SPID)))
		
				
	SELECT * FROM @OUTPUT

END        
---------- END OF PROCEDURE SAVETRAN_SLS_STOCKNA_CONVERT
