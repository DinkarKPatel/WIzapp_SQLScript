CREATE PROCEDURE SAVETRAN_PUR_PRD
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CMEMONOPREFIX		VARCHAR(50),
	@CFINYEAR			VARCHAR(10),
	@CMACHINENAME		VARCHAR(100)='',
	@CWINDOWUSERNAME	VARCHAR(100)='',
	@CWIZAPPUSERCODE	VARCHAR(10)='0000000',
	@CMEMOID			VARCHAR(40)='',
	@CPRDDEPARTMENTID	CHAR(7)='',
	@BTHROUGHIMPORT		BIT=0,
	@DRECEIPTDT			DATETIME = '',
	@CLOCID				VARCHAR(2)=''
)
----WITH ENCRYPTION
AS
BEGIN
	-- @NUPDATEMODE:	1- NEW PUR ADDED, 
	--					2- NEW BOX ADDED TO EXISTING PUR, 
	--					3- CURRENT PUR CANCELLED, 
	--					4- EXISTING PUR EDITED

	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),
			@CINTERMIDIATETABLENAME		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE		VARCHAR(100),
			@CTEMPITERMIDIATETABLENAME	VARCHAR(100),
			@CTEMPITERMIDIATETABLE	VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(2),
			@CLOCATIONID			VARCHAR(2),
			@CHODEPTID				VARCHAR(2),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@NSUBTOTAL NUMERIC(20,2),
			@BNEGSTOCKFOUND BIT,
			@CWSLINVOICEID	VARCHAR(22),
			@BPURTHROUGHIMPORT	BIT,@CMSG VARCHAR(200),@NTAX NUMERIC(20,2)

	BEGIN TRY
		
		BEGIN TRANSACTION
		
		SET @BPURTHROUGHIMPORT=0
		
		SET @NSTEP = 10

		SET @CTEMPDETAILTABLENAME	= 'TEMP_PRD_PID01106_'+LTRIM(RTRIM(STR(@NSPID)))	
		SET @CTEMPITERMIDIATETABLENAME	= 'TEMP_PRD_PO_PUR_'+LTRIM(RTRIM(STR(@NSPID)))	
						
		
		--IF @NUPDATEMODE = 6
		--	GOTO LBLUPDATERECEIPTDATE
		
		--- CREATE NEW MASTERS & THEN REPLACE THEM IN THE PURCHASE DETAIL TABLE
		--- IF PURCHASE DONE THROUGH IMPORT FILE 				
		IF @BTHROUGHIMPORT=1 
		BEGIN
			SET @NSTEP = 15
			PRINT 'COME IN IMPORTMASTERS'
			
				PRINT 'COME IN IMPORTMASTERS-1'
			EXEC SP_GETMASTERS '01112',2,@CERRORMSG OUTPUT 

	         PRINT 'COME OUT OF IMPORTMASTERS'			
			IF ISNULL(@CERRORMSG,'')<>''
				GOTO END_PROC
			
			SET @NSTEP = 20
			SET @CCMD=N'UPDATE A SET ARTICLE_CODE=ART.ARTICLE_CODE,PARA1_CODE=ISNULL(C.PARA1_CODE,''0000000''),
						PARA2_CODE=ISNULL(D.PARA2_CODE,''0000000''),PARA3_CODE=ISNULL(E.PARA3_CODE,''0000000''),
						PARA4_CODE=ISNULL(F.PARA4_CODE,''0000000''),PARA5_CODE=ISNULL(G.PARA5_CODE,''0000000''),
						PARA6_CODE=ISNULL(H.PARA6_CODE,''0000000'') FROM 
						'+@CTEMPDBNAME+@CTEMPDETAILTABLENAME+' A JOIN #TMPMASTERSENC B ON A.ROW_ID=B.ROW_ID
					    JOIN ARTICLE ART ON ART.ARTICLE_NO = B.ARTICLE_NO  
					    LEFT OUTER JOIN PARA1 C ON C.PARA1_NAME = B.PARA1_NAME  
					    LEFT OUTER JOIN PARA2 D ON D.PARA2_NAME = B.PARA2_NAME  
					    LEFT OUTER JOIN PARA3 E ON E.PARA3_NAME = B.PARA3_NAME  
					    LEFT OUTER JOIN PARA4 F ON F.PARA4_NAME = B.PARA4_NAME  
					    LEFT OUTER JOIN PARA5 G ON G.PARA5_NAME = B.PARA5_NAME  
					    LEFT OUTER JOIN PARA6 H ON H.PARA6_NAME = B.PARA6_NAME ' 
			PRINT @CCMD		    
			EXEC SP_EXECUTESQL @CCMD			

			SET @CCMD=N'UPDATE A SET ARTICLE_CODE=ART.ARTICLE_CODE,PARA1_CODE=ISNULL(C.PARA1_CODE,''0000000''),
						PARA2_CODE=ISNULL(D.PARA2_CODE,''0000000''),PARA3_CODE=ISNULL(E.PARA3_CODE,''0000000''),
						PARA4_CODE=ISNULL(F.PARA4_CODE,''0000000''),PARA5_CODE=ISNULL(G.PARA5_CODE,''0000000''),
						PARA6_CODE=ISNULL(H.PARA6_CODE,''0000000'') FROM 
						'+@CTEMPDBNAME+@CTEMPDETAILTABLENAME+' A JOIN #TMPMASTERSENC B ON A.PRODUCT_CODE=B.PRODUCT_CODE
					    JOIN ARTICLE ART ON ART.ARTICLE_NO = B.ARTICLE_NO  
					    LEFT OUTER JOIN PARA1 C ON C.PARA1_NAME = B.PARA1_NAME  
					    LEFT OUTER JOIN PARA2 D ON D.PARA2_NAME = B.PARA2_NAME  
					    LEFT OUTER JOIN PARA3 E ON E.PARA3_NAME = B.PARA3_NAME  
					    LEFT OUTER JOIN PARA4 F ON F.PARA4_NAME = B.PARA4_NAME  
					    LEFT OUTER JOIN PARA5 G ON G.PARA5_NAME = B.PARA5_NAME  
					    LEFT OUTER JOIN PARA6 H ON H.PARA6_NAME = B.PARA6_NAME
					    WHERE ISNULL(A.PRODUCT_CODE,'''')<>'''' ' 
			PRINT @CCMD		    
			EXEC SP_EXECUTESQL @CCMD			
			
			SET @BPURTHROUGHIMPORT=1
				
			DROP TABLE #TMPMASTERSENC
		END	
		
		
		
		IF OBJECT_ID('TEMPDB..#TMPPMT','U') IS NOT NULL
			DROP TABLE #TMPPMT
		
		SELECT PRODUCT_CODE INTO #TMPPMT FROM SKU WHERE 1=2

		IF OBJECT_ID('TEMPDB..#TMPXNSTK','U') IS NOT NULL
			DROP TABLE #TMPXNSTK						   
		
		SELECT PRODUCT_UID,QUANTITY_IN_STOCK AS XN_STOCK INTO #TMPXNSTK FROM PRD_PMT WHERE 1=2
		


		IF @NUPDATEMODE=3			
		BEGIN
			SET @NSTEP = 25
						
			IF ISNULL(@CMEMOID,'') = ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED .....CANNOT PROCEED'
				GOTO END_PROC  		
			END
			
			SET @CKEYFIELDVAL1=@CMEMOID
			

			SET @NSTEP = 30
			
			IF EXISTS (SELECT TOP 1 'U' FROM PRD_PID01106 A
			JOIN PRD_PIM01106 B ON A.MRR_ID =B.MRR_ID 
			JOIN
			(
			  SELECT A.PRODUCT_UID  FROM PRD_STK_TRANSFER_DET A
			  JOIN PRD_STK_TRANSFER_MST B ON A.MEMO_ID =B.MEMO_ID 
			  WHERE B.CANCELLED =0
			  UNION 
			  SELECT A.PRODUCT_UID  FROM PRD_STK_TRANSFER_DET_PENDING A
			  JOIN PRD_STK_TRANSFER_MST_PENDING B ON A.MEMO_ID =B.MEMO_ID 
			  WHERE B.CANCELLED =0
			 ) C ON A.PRODUCT_UID =C.PRODUCT_UID  
				WHERE A.MRR_ID =@CKEYFIELDVAL1
			)
			BEGIN
			    
				SET @CERRORMSG='TRANSACTION FOUND IN CUTTING ORDER  CAN NOT CANCELLED..... PLEASE CHECK'
				GOTO END_PROC
			
			END			
		
			
			EXEC UPDATEPMT_PRD 
				  @CXNTYPE			= 'PUR'  
				, @CXNNO			= @CMEMONOVAL
				, @CXNID			= @CKEYFIELDVAL1
				, @NREVERTFLAG		= 1
				, @NALLOWNEGSTOCK	= 0
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= @NUPDATEMODE				
				, @CCMD				= @CCMDOUTPUT OUTPUT
			
			IF @CCMDOUTPUT <> ''
			BEGIN
				PRINT @CCMDOUTPUT
				
				SET @NSTEP = 35
					
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'
				SET @BNEGSTOCKFOUND=1				
				EXEC SP_EXECUTESQL @CCMDOUTPUT
				GOTO END_PROC
			END
		
			SET @NSTEP = 38
			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE PRD_PIM01106 SET CANCELLED = 1,SENT_TO_HO=0,LAST_UPDATE=GETDATE() ' + 
						N' WHERE MRR_ID = ''' + @CMEMOID + ''''
			EXEC SP_EXECUTESQL @CCMD
			
			GOTO END_PROC
		
		END

		SET @NSTEP = 50
        
				
		SET @CCMD=N'DELETE FROM '+@CTEMPDETAILTABLENAME+' WHERE ARTICLE_CODE IN ('''',''00000000'')'
		EXEC SP_EXECUTESQL @CCMD
		
		SET @NSTEP = 55	
		IF @NUPDATEMODE<>2
		
		--IMPLEMENT LATER ON
		--EXEC SP_VALIDATEXN_BEFORESAVE 'PUR',@NSPID,'0000000',@NUPDATEMODE,@CCMDOUTPUT OUTPUT,@BNEGSTOCKFOUND OUTPUT
			 
		
		
		IF ISNULL(@CCMDOUTPUT,'') <> ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION ON TEMP DATA FAILED : ' + @CCMDOUTPUT + '...'
			GOTO END_PROC
		END
		
		DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

		SET @NSTEP = 60		-- SETTTING UP ENVIRONMENT

		SET @CTEMPDBNAME = ''

		SET @CMASTERTABLENAME	= 'PRD_PIM01106'
		SET @CDETAILTABLENAME	= 'PRD_PID01106'
		SET @CINTERMIDIATETABLENAME='PRD_PO_PUR'

		SET @CTEMPMASTERTABLENAME	= 'TEMP_PRD_PIM01106_'+LTRIM(RTRIM(STR(@NSPID)))
		SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
		SET @CTEMPDETAILTABLE	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME
		SET @CTEMPITERMIDIATETABLE= @CTEMPDBNAME + @CTEMPITERMIDIATETABLENAME
		
		SET @CERRORMSG			= ''
		SET @LDONOTUPDATESTOCK	= 0
		SET @CKEYFIELD1			= 'MRR_ID'
		SET @CMEMONO			= 'MRR_NO'
		SET @NMEMONOLEN			= 10
		
		IF ISNULL(@CLOCID,'')=''
			SELECT @CLOCATIONID	= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID'
		ELSE
			SELECT @CLOCATIONID=@CLOCID
			
		SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		
		
		SET @NSTEP=70
		
		-- GETTING DEPT_ID FROM TEMP MASTER TABLE
		SET @CCMD = 'SELECT @CMEMODEPTID = DEPT_ID, @CKEYFIELDVAL1 = MRR_ID FROM '+@CTEMPMASTERTABLE
	
		EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT, @CKEYFIELDVAL1 VARCHAR(50) OUTPUT', 
								  @CMEMODEPTID OUTPUT, @CKEYFIELDVAL1 OUTPUT
		IF (@CMEMODEPTID IS NULL )
		BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED...'
			  --SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
			  GOTO END_PROC  		
		END


 
 
		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	

			SET @NSTEP = 80		-- GENERATING NEW KEY
           PRINT 'GENERATING NEW KEY... START'			
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN
				-- GENERATING NEW MRR_NO		
				SET @NSAVETRANLOOP=0
				WHILE @NSAVETRANLOOP=0
				BEGIN
					SET @NSTEP=90
					EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
									@CFINYEAR,0, @CMEMONOVAL OUTPUT   
					
					PRINT @CMEMONOVAL
					
					
					SET @NSTEP=100
					SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
											WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
											AND FIN_YEAR = '''+@CFINYEAR+''' )
									SET @NLOOPOUTPUT=0
								ELSE
									SET @NLOOPOUTPUT=1'
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
				END

				IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
					  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
					  GOTO END_PROC  		
				END

                PRINT 'GENERATING NEW KEY... START'			

				SET @NSTEP = 110		-- GENERATING NEW ID
				

				-- GENERATING NEW MRR ID
				SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+ REPLICATE('0', 15-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL))
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
					  GOTO END_PROC
				END
				
				SET @NSTEP = 120
				
				-- RECHECKING IF ID IS STILL LATER
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
				BEGIN
					SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					GOTO END_PROC
				END				


				SET @NSTEP = 130		-- UPDATING NEW ID INTO TEMP TABLES

				-- UPDATING NEWLY GENERATED MRR NO AND MRR ID IN PIM AND PID TEMP TABLES
				SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
							@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
				EXEC SP_EXECUTESQL @CCMD
			
				SET @NSTEP = 135		-- UPDATING NEW ID INTO TEMP TABLES
				
				
				SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD
				
				---- MAKE AN ENTRY INTO PURCHASE + PO LINK TABLE
								
				--IF OBJECT_ID(@CTEMPITERMIDIATETABLE,'U') IS NOT NULL
				--BEGIN
				--	SET @NSTEP = 42
				--	SET @CCMD=N'INSERT PRD_PO_PUR (MRR_ID,PO_ID)
				--				SELECT '''+@CKEYFIELDVAL1+''',PO_ID FROM '+@CTEMPITERMIDIATETABLE
						
								
				--	EXEC SP_EXECUTESQL @CCMD			 	
				--END
				
				
			END

		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
		      
			SET @NSTEP = 150		-- GETTING ID INFO FROM TEMP TABLE

			-- GETTING MRR_ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = MRR_ID, @CMEMONOVAL = MRR_NO FROM '+@CTEMPMASTERTABLE
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
				  
				  GOTO END_PROC  		
			END
			SET @NSTEP = 155		-- STORING OLD STATUS OF BARCODES 
			
			

			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET SENT_TO_HO = 0, POSTEDINAC = 0,LAST_UPDATE=GETDATE() '
			EXEC SP_EXECUTESQL @CCMD
					
			--VALIDATION TRANSACTION IN CUTTING ORDER
			SET @NSTEP = 160		-- AUDIT TRIAL ENTRY
            
            IF OBJECT_ID ('TEMPDB..#TMPMRR','') IS NOT NULL
               DROP TABLE #TMPMRR
            
            SELECT MRR_ID INTO #TMPMRR FROM PIM01106 WHERE 1=2
            
            SET @CCMD = N' SELECT  DISTINCT A.MRR_ID  FROM PRD_PID01106 A
                           JOIN PRD_PIM01106 B ON A.MRR_ID=B.MRR_ID
                           JOIN
                           (
                            
                            SELECT A.PRODUCT_UID FROM PRD_STK_TRANSFER_DET A
                            JOIN PRD_STK_TRANSFER_MST B ON A.MEMO_ID=B.MEMO_ID
                            WHERE B.CANCELLED=0
                            GROUP BY A.PRODUCT_UID
                            UNION 
                            SELECT PRODUCT_UID FROM PRD_STK_TRANSFER_DET_PENDING A
                            JOIN PRD_STK_TRANSFER_MST_PENDING B ON A.MEMO_ID=B.MEMO_ID
                            WHERE B.CANCELLED=0
                            GROUP BY A.PRODUCT_UID
                           ) C  ON A.PRODUCT_UID=C.PRODUCT_UID
                           LEFT OUTER JOIN
                           (
                            SELECT A.PRODUCT_UID FROM ' + @CTEMPDETAILTABLE +' A
                            JOIN ' + @CTEMPMASTERTABLE + ' B ON A.MRR_ID=B.MRR_ID
                            WHERE A.MRR_ID='''+@CKEYFIELDVAL1+'''
                            GROUP BY A.PRODUCT_UID
                           
                           ) D ON A.PRODUCT_UID=D.PRODUCT_UID
                           WHERE   A.MRR_ID='''+@CKEYFIELDVAL1+''' AND D.PRODUCT_UID IS NULL'
            
            PRINT @CCMD
            INSERT INTO #TMPMRR
			EXEC SP_EXECUTESQL @CCMD
			
			IF EXISTS (SELECT TOP 1 'U' FROM #TMPMRR)
			BEGIN
			   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' TRANSACTION FOUND IN CUTTING ORDER....' 
			   GOTO END_PROC
			END		



			-- REVERTING BACK THE STOCK OF PMT W.R.T CURRENT PURCHASE
			SET @NSTEP = 170		-- REVERTING STOCK
			
		
			
				EXEC UPDATEPMT_PRD 
					  @CXNTYPE			= 'PUR'
					, @CXNNO			= @CMEMONOVAL
					, @CXNID			= @CKEYFIELDVAL1
					, @NREVERTFLAG		= 1
					, @NALLOWNEGSTOCK	= 0
					, @NCHKDELBARCODES	= 1
					, @NUPDATEMODE		= @NUPDATEMODE					
					, @CCMD				= @CCMDOUTPUT OUTPUT
			 	
		END					-- END OF EDITMODE

       

		SET @NSTEP = 180

		-- RECHECKING IF ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END				
		
		
		SET @NSTEP=210						 
		
		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			, @BALWAYSUPDATE = 1


		-- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE
		SET @NSTEP = 220		-- UPDATING TRANSACTION TABLE

		-- UPDATING ROW_ID IN TEMP TABLES
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE LEFT(ROW_ID,5) = ''LATER'''
		EXEC SP_EXECUTESQL @CCMD
		
		SET @NSTEP = 225
		
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET PRODUCT_UID='''' WHERE PRODUCT_UID IS NULL'
		EXEC SP_EXECUTESQL @CCMD			
		
		-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
		SET @NSTEP = 230		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES

		SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + ' 
					WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
					AND ROW_ID IN 
					(
						SELECT A.ROW_ID 
						FROM ' + @CDETAILTABLENAME + ' A 
						LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B ON A.ROW_ID = B.ROW_ID
						WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
						AND B.ROW_ID IS NULL
					)'
		PRINT @CCMD
		
		
		EXEC SP_EXECUTESQL @CCMD
		
	
		--PRINT 'ROHIT'
		-- INSERTING/UPDATING THE ENTRIES IN PID01106 TABLE FROM TEMPTABLE
		SET @NSTEP = 240		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME
			, @CKEYFIELD1	= 'ROW_ID'
			, @BALWAYSUPDATE = 1
			--, @LUPDATEXNS	= 1
	
		      		
	
		SET @NSTEP = 290	
		
		
					
		
		---- MAKE AN ENTRY INTO PURCHASE + PO LINK TABLE
								
				IF OBJECT_ID(@CTEMPITERMIDIATETABLE,'U') IS NOT NULL
				BEGIN
					SET @NSTEP = 42
					
					SET @CCMD=N'DELETE FROM PRD_PO_PUR WHERE MRR_ID='''+@CKEYFIELDVAL1+''''
						
								
					EXEC SP_EXECUTESQL @CCMD		
					
					
					SET @CCMD=N'INSERT PRD_PO_PUR (MRR_ID,PO_ID)
								SELECT '''+@CKEYFIELDVAL1+''',PO_ID FROM '+@CTEMPITERMIDIATETABLE
						
								
					EXEC SP_EXECUTESQL @CCMD			 	
				END
		
		
		
		SET @NSTEP = 295
		
				
		
			
		-- UPDATING TOTALS IN PIM TABLE
		UPDATE A SET SUBTOTAL = ISNULL( B.SUBTOTAL ,0 )
		FROM PRD_PIM01106 A LEFT OUTER JOIN
		( 	
			SELECT	MRR_ID, SUM(INVOICE_QUANTITY*PURCHASE_PRICE) AS SUBTOTAL
			FROM PRD_PID01106 
			WHERE MRR_ID = @CKEYFIELDVAL1
			GROUP BY MRR_ID  
		) B ON  A.MRR_ID = B.MRR_ID  
		WHERE A.MRR_ID = @CKEYFIELDVAL1
		
		SET @NSTEP = 300
		
		UPDATE PRD_PIM01106 SET DISCOUNT_AMOUNT = ROUND(SUBTOTAL*ROUND(DISCOUNT_PERCENTAGE,2)/100,2)
		WHERE MRR_ID= @CKEYFIELDVAL1
		
		SET @NSTEP = 305
		SELECT @NSUBTOTAL=SUBTOTAL FROM PRD_PIM01106 WHERE MRR_ID= @CKEYFIELDVAL1
							
		SET @NSTEP = 310		
		
		UPDATE PRD_PID01106 SET TAX_PERCENTAGE=B.TAX_PERCENTAGE 
		FROM FORM B 
		WHERE B.FORM_ID=PRD_PID01106.FORM_ID 
		AND PRD_PID01106.MRR_ID= @CKEYFIELDVAL1
		
		
		DECLARE		@NMRP_VALUE			NUMERIC(14,2)
		DECLARE		@NEXCISE_PER		NUMERIC(14,3)
		
		

		SELECT @NMRP_VALUE=SUM(MRP * INVOICE_QUANTITY) FROM PRD_PID01106 WHERE MRR_ID= @CKEYFIELDVAL1
		
		SELECT	@NEXCISE_PER=(CASE WHEN ISNULL(EXCISE_DUTY_AMOUNT,0)=0 THEN 0 ELSE CONVERT(NUMERIC(14,3),((EXCISE_DUTY_AMOUNT/@NMRP_VALUE)*100)) END)
		FROM PIM01106 
		WHERE MRR_ID= @CKEYFIELDVAL1

		IF(ISNULL(@NEXCISE_PER,0)>0)
		BEGIN
			
			UPDATE A SET A.TAX_AMOUNT= CONVERT(NUMERIC(14,2),(CONVERT(NUMERIC(14,2),((CONVERT(NUMERIC(14,2),(A.INVOICE_QUANTITY * A.PURCHASE_PRICE))-(CONVERT(NUMERIC(14,2),(A.INVOICE_QUANTITY * A.PURCHASE_PRICE)) * CONVERT(NUMERIC(14,2),(B.DISCOUNT_PERCENTAGE/100))))) +((A.INVOICE_QUANTITY * A.MRP)*(@NEXCISE_PER/100))) * CONVERT(NUMERIC(14,2),A.TAX_PERCENTAGE/100))) 
			FROM PRD_PID01106 A
			JOIN PRD_PIM01106 B ON B.MRR_ID=A.MRR_ID
			WHERE A.MRR_ID= @CKEYFIELDVAL1
			
		END
		ELSE
		BEGIN
			UPDATE A SET A.TAX_AMOUNT=CONVERT(NUMERIC(14,2),(((CONVERT(NUMERIC(14,2),(A.INVOICE_QUANTITY * A.PURCHASE_PRICE))-CONVERT(NUMERIC(14,2),(CONVERT(NUMERIC(14,2),(A.INVOICE_QUANTITY * A.PURCHASE_PRICE)) * CONVERT(NUMERIC(14,2),(B.DISCOUNT_PERCENTAGE/100)))))  * A.TAX_PERCENTAGE/100 )))
			FROM PRD_PID01106 A
			JOIN PRD_PIM01106 B ON B.MRR_ID=A.MRR_ID
			WHERE A.MRR_ID= @CKEYFIELDVAL1
		END
					
		
		
		IF NOT EXISTS (SELECT TOP 1 PRODUCT_UID FROM PRD_PID01106 WHERE MRR_ID= @CKEYFIELDVAL1)
		BEGIN
			SET @NSTEP = 315
			UPDATE PRD_PIM01106 SET OTHER_CHARGES=0,EXCISE_DUTY_AMOUNT=0,FREIGHT=0
			WHERE MRR_ID= @CKEYFIELDVAL1
		END
		
		
		SELECT @NTAX=SUM(TAX_AMOUNT) FROM PRD_PID01106 WHERE MRR_ID=@CKEYFIELDVAL1
		
		SET @NSTEP = 320		
		UPDATE PRD_PIM01106 SET ROUND_OFF=ROUND((SUBTOTAL +ISNULL(@NTAX,0) +  OTHER_CHARGES + 
					 EXCISE_DUTY_AMOUNT+FREIGHT ) - DISCOUNT_AMOUNT,0)-(SUBTOTAL+ISNULL(@NTAX,0)+OTHER_CHARGES+
					 FREIGHT+EXCISE_DUTY_AMOUNT-DISCOUNT_AMOUNT)
		WHERE MRR_ID=@CKEYFIELDVAL1
		
	
		SET @NSTEP=330
		UPDATE PRD_PIM01106 SET TAX_AMOUNT=ISNULL(@NTAX,0),TOTAL_AMOUNT=(SUBTOTAL +ISNULL(@NTAX,0) +  OTHER_CHARGES + 
					 FREIGHT+EXCISE_DUTY_AMOUNT+ROUND_OFF) - DISCOUNT_AMOUNT
		WHERE MRR_ID=@CKEYFIELDVAL1
		
	    
		--IT IS ALL READY GENEREATED BY PO  BECASE DIRECT PUR IS NOT ALLOW
		IF EXISTS(SELECT TOP 1 'U' FROM PRD_PIM01106 WHERE MRR_ID =@CKEYFIELDVAL1 AND PIM_MODE=4)
		BEGIN
		EXEC SAVETRAN_UPDSKU_PRD 'PUR',@CKEYFIELDVAL1,@CERRORMSG OUTPUT 
		IF ISNULL(@CERRORMSG,'')<>''
				GOTO END_PROC
		END
		
		
		-- UPDATE PRD_SKU PURCHASE_PRICE
		
		UPDATE  A SET A.PURCHASE_PRICE = B.PURCHASE_PRICE  ,A.WS_PRICE = B.WHOLESALE_PRICE
		FROM PRD_SKU A
		JOIN PRD_PID01106 B ON A.PRODUCT_UID= B.PRODUCT_UID
		JOIN ARTICLE C ON B.ARTICLE_CODE= C.ARTICLE_CODE
		WHERE B.MRR_ID=@CKEYFIELDVAL1 AND  A.PURCHASE_PRICE <> B.PURCHASE_PRICE
				
				
		UPDATE PRD_POM01106 SET AC_CODE=  A.AC_CODE
        FROM PRD_PIM01106 A JOIN PRD_PO_PUR  B ON A.MRR_ID = B.MRR_ID 
        JOIN PRD_POM01106 C ON B.PO_ID = C.PO_ID 
        WHERE A.MRR_ID = @CKEYFIELDVAL1
		
							
		
		SET @NSTEP = 345
		PRINT 'RF'
		EXEC UPDATERFNET_PRD 'PUR',@CKEYFIELDVAL1

LBLUPDATESTOCK:						
		-- UPDATING STOCK OF PMT W.R.T. CURRENT PURCHASE
		SET @NSTEP = 270		-- UPDATING PMT TABLE
	PRINT 'STEP 9'

		
        
		  EXEC UPDATEPMT_PRD 
		  @CXNTYPE			= 'PUR'
		, @CXNNO			= @CMEMONOVAL
		, @CXNID			= @CKEYFIELDVAL1
		, @NREVERTFLAG		= 0
		, @NALLOWNEGSTOCK	= 0
		, @NCHKDELBARCODES	= 1
		, @NUPDATEMODE		= @NUPDATEMODE					
		, @CCMD				= @CCMDOUTPUT OUTPUT
		
		--SELECT B.PRODUCT_UID , A.* FROM PRD_PMT A
  --      JOIN PRD_PID01106 B ON A.PRODUCT_UID =B.PRODUCT_UID 
  --      WHERE B.MRR_ID ='WH0111800000WHWH000014'
		--PRINT 'STEP 9.1'
		
		IF @CCMDOUTPUT <> ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT... STOCK IS GOING NEGATIVE'
			-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
			--EXEC SP_EXECUTESQL @CCMDOUTPUT
			SET @BNEGSTOCKFOUND=1
			GOTO END_PROC
		END

		-- VALIDATING ENTRIES
				
		SET @NSTEP = 350
		
		EXEC VALIDATEXN_PUR_PRD			 
			  @CXNID	= @CKEYFIELDVAL1
			, @NUPDATEMODE = @NUPDATEMODE			
			, @CERRORMSG	= @CCMDOUTPUT OUTPUT

		IF @CCMDOUTPUT <> ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION FAILED : ' + @CCMDOUTPUT + '...'
			GOTO END_PROC
		END


	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'
			
		GOTO END_PROC
	END CATCH
	
	
END_PROC:
	
	--SELECT PRODUCT_CODE,PRODUCT_UID, * FROM PRD_PID01106 WHERE MRR_ID='0101118000000101000006'
	
	IF @@TRANCOUNT>0
	BEGIN
		
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
		BEGIN
			UPDATE PRD_PIM01106 SET POSTEDINAC=0 WHERE MRR_ID=ISNULL(@CKEYFIELDVAL1,'')
			COMMIT TRANSACTION
				
		END
		ELSE
			ROLLBACK
	END

		
	
	IF ISNULL(@BNEGSTOCKFOUND,0)=0
	BEGIN
		INSERT @OUTPUT ( ERRMSG, MEMO_ID)
				VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )

		SELECT * FROM @OUTPUT	
	END	
   	ELSE
   	SELECT @CERRORMSG AS ERRMSG
	
	SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPDETAILTABLE + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPDETAILTABLE
	EXEC SP_EXECUTESQL @CCMD
	

    SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPMASTERTABLE + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPMASTERTABLE
	EXEC SP_EXECUTESQL @CCMD
	
	
		
END
------------------------------------------------------ END OF PROCEDURE SAVETRAN_PUR
