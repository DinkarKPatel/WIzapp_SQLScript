CREATE PROCEDURE SP3S_SEND_TILL_SMS
(
 @CSHIFT_ID VARCHAR(100)
)
--WITH ENCRYPTION 
AS
BEGIN
/*
	THIS PROCEDURE WILL SCAN ALL THE OPEN SHIFTS WITH LIMIT_REACHED SET TO 0 SHIFTS FOR CHECKING IF THE TILL LIMITS HAVE REACHED 
	AND IF IT IS REACHED,IT WILL MARK THE SHIFT WITH LIMIT_REACHED = 1 AND RETURN THE CURSOR TO THE CAMPAIGN SYSTEM.
	
	IT WILL ALSO SCAN ALL THE CLOSED SHIFTS WHERE DIFFERENCE IN PHYSICAL CLOSING AND COMPUTER CLOSING EXISTS
	AND CLOSING_MISMATCH IS SET TO 0 AND GET THE CLOSED SHIFTS DATA AND WILL MARK THE CLOSING_MISMATCH TO 1.
	
	ON GETTING THE SHIFTS FOR WHOM THE MESSAGE IS TO BE SENT, IT WILL RETURN THE RECEIPIENT MOBILE NUMBER AND 
	THE TEXT MESSAGE TO THE CAMPAIGN SYSTEM THAT WILL SEND THE SMS TO THE CORRESPONDING PERSON.
*/
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

DECLARE @CUSERCODE VARCHAR(7),@CDEPT_ID VARCHAR(5),@CERRMSG VARCHAR(MAX),@CSTEP VARCHAR(10)
BEGIN TRY
--GETTING THE CURRENT LOCATION ID
SET @CSTEP=10
SELECT TOP 1 @CDEPT_ID=VALUE FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID'

SET @CSTEP=20
--IF TILL BASED CASH MANAGEMENT SYSTEM IS NOT ENABLED FOR THIS LOCATION JUST RETURN
--IF EXISTS(SELECT TOP 1 'U' FROM LOCATION WHERE DEPT_ID=@CDEPT_ID AND ISNULL(TILL_ENABLED,0)=0)
--	RETURN

SET @CSTEP=30
IF OBJECT_ID('TEMPDB..#TOSENDSMS','U') IS NOT NULL
	DROP TABLE #TOSENDSMS
/*
	TMPLT_TYPE : 
	1 - IF THE TILL LIMIT HAS REACHED WHILE THE TILL IS OPEN
	2 - IF THE TILL IS CLOSED AND DIFFERENCE BETWEEN COMPUTER CLOSING AND 
	    PHYSICAL CLOSING EXISTS AND SMS HAS NOT BEEN SET.
*/
SET @CSTEP=40
--SCANNING ALL OPEN SHIFTS FOR LIMIT REACHED
SELECT
	   B.DEPT_ID	
	  ,E.DEPT_NAME 
	  ,A.SHIFT_ID
	  ,A.TILL_ID
	  ,C.TILL_NAME
	  ,A.USER_CODE
	  ,D.USERNAME
	  ,B.TILL_LIMIT
	  ,(A.COMP_OP+A.RECEIPTS-A.ISSUES) AS TILL_AMOUNT
	  ,(A.COMP_OP+A.RECEIPTS-A.ISSUES) AS COMP_CL
	  ,0 AS PHY_CL
	  ,1 AS TMPLT_TYPE 
	  ,TMPLT_TEXT AS TMPLT_TEXT
	  ,CONVERT(VARCHAR(MAX),'') AS SMS_TEXT
INTO #TOSENDSMS	  
FROM TILL_SHIFT_MST A
JOIN TILL_LOCS B ON A.TILL_ID=B.TILL_ID AND A.location_code =B.DEPT_ID
JOIN TILL_MST C ON A.TILL_ID=C.TILL_ID
JOIN USERS D ON A.USER_CODE=D.USER_CODE
JOIN LOCATION E ON B.DEPT_ID=E.DEPT_ID
JOIN TILL_SMS_TMPLT F ON F.TMPLT_TYPE=1
WHERE C.INACTIVE=0 AND LEFT(A.SHIFT_ID,2)=@CDEPT_ID AND A.LIMIT_REACHED=0 AND ISNULL(A.CLOSE_DATE,'')='' 
	  AND (A.COMP_OP+A.RECEIPTS-A.ISSUES)>=B.TILL_LIMIT
	  AND A.SHIFT_ID =@CSHIFT_ID
UNION ALL
--SCANNING ALL CLOSED SHIFTS FOR WHOM THE PHY_CL IS NOT EQUAL TO COMP_CL AND SMS_SENT=0
SELECT 
	   B.DEPT_ID
	  ,E.DEPT_NAME 	
	  ,A.SHIFT_ID
	  ,A.TILL_ID
	  ,C.TILL_NAME
	  ,A.USER_CODE
	  ,D.USERNAME
	  ,B.TILL_LIMIT
	  ,(A.COMP_OP+A.RECEIPTS-A.ISSUES) AS TILL_AMOUNT
	  ,(A.COMP_OP+A.RECEIPTS-A.ISSUES) AS COMP_CL
	  ,A.PHY_CL AS PHY_CL
	  ,2 AS TMPLT_TYPE
	  ,TMPLT_TEXT AS TMPLT_TEXT
	  ,CONVERT(VARCHAR(MAX),'') AS SMS_TEXT
FROM TILL_SHIFT_MST A
JOIN TILL_LOCS B ON A.TILL_ID=B.TILL_ID AND LEFT(A.SHIFT_ID,2)=B.DEPT_ID
JOIN TILL_MST C ON A.TILL_ID=C.TILL_ID
JOIN USERS D ON A.USER_CODE=D.USER_CODE
JOIN LOCATION E ON B.DEPT_ID=E.DEPT_ID
JOIN TILL_SMS_TMPLT F ON F.TMPLT_TYPE=2
LEFT JOIN TILL_SMS_REC_LOC G ON G.DEPT_ID=@CDEPT_ID AND G.TMPLT_TYPE=2
WHERE C.INACTIVE=0 AND A.location_code =@CDEPT_ID  AND ISNULL(A.CLOSE_DATE,'')<>'' --
AND A.SHIFT_ID =@CSHIFT_ID
	 -- AND ABS(ABS(A.COMP_CL)-ABS(A.PHY_CL))>0


SET @CSTEP=50
UPDATE #TOSENDSMS 
SET SMS_TEXT=
REPLACE(
REPLACE(
REPLACE(
REPLACE(
REPLACE(
REPLACE(
REPLACE(
REPLACE(
TMPLT_TEXT
,'<COMP_CL>',COMP_CL)
,'<DEPT_NAME>',DEPT_NAME)
,'<PHY_CL>',PHY_CL)
,'<SHIFT_ID>',SHIFT_ID)
,'<TILL_AMOUNT>',TILL_AMOUNT)
,'<TILL_LIMIT>',TILL_LIMIT)
,'<TILL_NAME>',TILL_NAME)
,'<USER_NAME>',USERNAME)


BEGIN TRANSACTION
SET @CSTEP=60


INSERT TILL_SMS_LOG(SMS_ID,REC_ID,REC_MOBILE,SMS_CONTENT,SMS_PROCESSED,LAST_UPDATE)
SELECT @CDEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS SMS_ID,C.REC_ID,C.REC_MOBILE,A.SMS_TEXT AS SMS_CONTENT
	  ,0 AS SMS_PROCESSED,GETDATE() AS LAST_UPDATE 
FROM #TOSENDSMS A
JOIN TILL_SMS_REC_LOC B ON (A.TMPLT_TYPE=B.TMPLT_TYPE OR B.TMPLT_TYPE=0) AND B.DEPT_ID=@CDEPT_ID
JOIN TILL_SMS_REC C ON B.REC_ID=C.REC_ID
/*0 REPRESENTS THE RECIPIENT WHO IS SHOULD RECEIVE THE SMS FOR BOTH TEMPLATE TYPES*/


UPDATE A SET A.LIMIT_REACHED=(CASE WHEN B.TMPLT_TYPE=1 THEN 1 ELSE A.LIMIT_REACHED END) 
			,A.CLOSING_MISMATCH=(CASE WHEN B.TMPLT_TYPE=2 THEN 1 ELSE A.CLOSING_MISMATCH END) 
FROM TILL_SHIFT_MST A
JOIN 
	(
		SELECT A.SHIFT_ID,A.TMPLT_TYPE
		FROM #TOSENDSMS A
		JOIN TILL_SMS_REC_LOC B ON (A.TMPLT_TYPE=B.TMPLT_TYPE OR B.TMPLT_TYPE=0) AND B.DEPT_ID=@CDEPT_ID
		JOIN TILL_SMS_REC C ON B.REC_ID=C.REC_ID
	)B ON A.SHIFT_ID=B.SHIFT_ID

--SELECT * FROM TILL_SMS_LOG WHERE SMS_PROCESSED=0

END TRY
BEGIN CATCH 
	SET @CERRMSG='ERROR IN PROCEDURE - SP3S_SEND_TILL_SMS AT STEP -'+@CSTEP+', FAILED DUE TO - '+ERROR_MESSAGE()
	GOTO END_PROC
END CATCH

END_PROC:

IF @@TRANCOUNT>0
BEGIN
	IF ISNULL(@CERRMSG,'')=''
		COMMIT TRANSACTION
	ELSE
		ROLLBACK TRANSACTION	
END

END
--END OF PROCEDURE - SP3S_SEND_TILL_SMS
