-- PROCEDURE TO GENERATE BARCODES FOR A GIVEN MRR_ID OR PO_ID  
create PROCEDURE SAVETRAN_GENBARCODES_PRD    
(    
 @CXNID VARCHAR(40),    
 @CPREFIX VARCHAR(50),    
 @NMODE INT= 1,    
 @NSPID INT=0,    
 @LOCID VARCHAR(4)='',    
 @CERRORMSG VARCHAR(MAX) OUTPUT    
) 
--WITH ENCRYPTION   
AS     
BEGIN    

	 -- @NMODE : SOURCE OF BARCODE GENERATION, 1- FROM PURCHASE, 2- FROM PO    
	 --PRINT 'ROHIT 1'    
	 -- THIS PROCEDURE ASSUMES THAT THE PID TABLE IS NORMALIZED FOR UNIQUE CODING    
	 -- IF IT IS NOT NORMALIZED THEN THE PROCESS WILL FAIL    
	     
BEGIN TRY    
	     
	     
	 DECLARE @NROWS    BIGINT,    
	   @NEANROWS   BIGINT,    
	   @NFIXROWS   BIGINT,    
	   @NCTR    BIGINT,    
	   @CPIDROWID   VARCHAR(50),    
	   @CNEXTPRODUCTCODE VARCHAR(50),    
	   @NNEXTKEYVALUE  NUMERIC(30,0),    
	   @CPIMDEPTID   VARCHAR(5),  
	   @CBIN_ALIAS	VARCHAR(10),  
	   @CLOCID    VARCHAR(4),@CHOLOCID VARCHAR(5),    
	   @CCMD NVARCHAR(MAX),@CTEMPIRDTABLE VARCHAR(MAX),@NWHCOUNT INT,    
	   @CBARCODEPREFIX VARCHAR(100),@CADDPREFIX VARCHAR(50),@DMEMODT DATETIME,    
	   @CPREFIXYEARCODE BIT,@CPREFIXLOCID BIT,@CYEARCODE CHAR(2),@CADDLOCIDPREFIX CHAR(2),    
	   @CTEMPIRMTABLE VARCHAR(500),@NSTEP INT,@CCUSTOMPREFIX VARCHAR(50),@BLOOP BIT,@NPURLOCCNT INT,    
	   @BRANDOMGEN BIT,@NBARCODELEN INT,@CARTICLENO VARCHAR(300),@CARTPREFIX VARCHAR(50),    
	   @BGENEANCODES BIT,@CGENEANCODES VARCHAR(5),    
	   @CEANPREFIX VARCHAR(10),@NEANLENGTH INT,@CEANLENGTH VARCHAR(5),@CPREFIXFLOORID VARCHAR(10),  
	   @CADDFLOORIDPREFIX VARCHAR(10),@BBARCODEGENERATED BIT,
	   @CPREFIXMONTHCODE VARCHAR(10),@MONTHCODE VARCHAR(2),@CXNBARCODEPREFIX VARCHAR(50)
	  
	          
	 SELECT @CYEARCODE='',@CADDLOCIDPREFIX='',@CERRORMSG=''    
	     
	 SET @NSTEP=10    
	     
	 IF OBJECT_ID('TEMPDB..#PIDROWS','U') IS NOT NULL    
		DROP TABLE #PIDROWS    
	    
	 IF OBJECT_ID('TEMPDB..#BARCODES','U') IS NOT NULL    
		DROP TABLE #BARCODES    
	  
	 SELECT A.ROW_ID AS PID_ROW_ID,B.CODING_SCHEME,A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,CONVERT(INT,0) AS SRNO  
	 ,CONVERT(BIT,0) AS GEN_EAN_CODES  
	 INTO #PIDROWS   
	 FROM PID01106 A    
	 JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
	 WHERE 1=2    
	          
	 SELECT A.ROW_ID AS PID_ROW_ID,A.PRODUCT_CODE,PRODUCT_UID=A.PRODUCT_CODE INTO #BARCODES FROM PID01106 A  WHERE 1=2    
	     
	 PRINT 'GENBC-1'    
	 SET @NSTEP=20    
	     
	 SET @NROWS = 0    
	 SET @NFIXROWS = 0    
	 SET @NEANROWS = 0    
	     
	     
	 SELECT TOP 1 @CGENEANCODES=VALUE FROM CONFIG WHERE CONFIG_OPTION='GEN_EAN_CODES'    
	 IF @CGENEANCODES='1'    
		 SET @BGENEANCODES=1    
	 ELSE    
		 SET @BGENEANCODES=0    
	     
	 SELECT TOP 1 @CEANPREFIX=VALUE FROM CONFIG WHERE CONFIG_OPTION='EAN_PREFIX'    
	 SELECT TOP 1 @CEANLENGTH=VALUE FROM CONFIG WHERE CONFIG_OPTION='EAN_LENGTH'    
	     
	 IF ISNULL(@CEANLENGTH,'')=''    
		SET @NEANLENGTH=12    
	 ELSE    
		SET @NEANLENGTH=CONVERT(INT,@CEANLENGTH)     
	     
	     
	 IF ISNULL(@LOCID,'')=''    
		 SELECT TOP 1 @CLOCID = [VALUE] FROM CONFIG WHERE CONFIG_OPTION = 'LOCATION_ID'            
	 ELSE    
		 SELECT @CLOCID = @LOCID     
	        
	 SELECT TOP 1 @CHOLOCID = [VALUE] FROM CONFIG WHERE CONFIG_OPTION = 'HO_LOCATION_ID'    
	      
	 IF ISNULL(@CLOCID,'') = ''     
		  GOTO END_PROC      
	       
	 IF @NMODE = 2  -- BARCODE GENERATION FROM ITEM RATE REVISION    
	 BEGIN    
		  DECLARE @CDONOTGENIRRBARCODES VARCHAR(5)    
		  
		      
		  SELECT @NWHCOUNT=COUNT(*) FROM LOCATION WHERE DEPT_ID<>@CHOLOCID AND PUR_LOC=1     
		      
		  SET @NSTEP=60    
		      
		  SELECT TOP 1 @CDONOTGENIRRBARCODES=VALUE FROM CONFIG WHERE CONFIG_OPTION='DONOT_GEN_BARCODE_IRR' 
		   
		  SET @CDONOTGENIRRBARCODES = ISNULL(@CDONOTGENIRRBARCODES,0)       
		       
		  SET @CTEMPIRDTABLE='PRD_IRD01106'
		  SET @CTEMPIRMTABLE='PRD_IRM01106'   
		      
		  SET @NSTEP=70    
		      
		  -- BARCODE GENERATION FOR LOT AND UNIQUE CODES    
		      
		  SET @CCMD=N'SELECT @DMEMODTOUT=IRM_MEMO_DT FROM '+@CTEMPIRMTABLE + ' WHERE IRM_MEMO_ID ='''+@CXNID+''''
		  EXEC SP_EXECUTESQL @CCMD,N'@DMEMODTOUT DATETIME OUTPUT',@DMEMODTOUT=@DMEMODT OUTPUT    
		      
		  SET @NSTEP=75    
		  -- BARCODE GENERATION FOR FIXED CODES    
		      

		  SET @CCMD=N'SELECT ROW_ID,B.ARTICLE_NO,A.PRODUCT_UID FROM '+@CTEMPIRDTABLE+' A    
			 JOIN ARTICLE B ON A.ARTICLE_CODE = B.ARTICLE_CODE    
			 JOIN PRD_SKU C ON C.PRODUCT_UID=A.PRODUCT_UID    
			 JOIN ARTICLE D ON C.ARTICLE_CODE = D.ARTICLE_CODE    
			 WHERE A.IRM_MEMO_ID ='''+@CXNID+''' 
			 AND ISNULL(D.CODING_SCHEME,0)<>1 AND B.CODING_SCHEME=1
			 AND ISNULL(A.NEW_PRODUCT_UID,'''')=''''    
			 UNION ALL    
			 SELECT ROW_ID,NEW_PRODUCT_CODE,NEW_PRODUCT_UID FROM '+@CTEMPIRDTABLE+' A   
			 WHERE A.IRM_MEMO_ID ='''+@CXNID+''' AND ISNULL(NEW_PRODUCT_CODE,'''')<>'''''    
		      
		  PRINT @CCMD    
		  INSERT #BARCODES( PID_ROW_ID,PRODUCT_CODE,PRODUCT_UID  )       
		  EXEC SP_EXECUTESQL @CCMD    
		  
		 
		  SET @NSTEP=77        
		  -- BARCODE GENERATION FOR LOT AND UNIQUE CODES    
		    
		  SET @CCMD=N'SELECT A.ROW_ID, ISNULL(D.CODING_SCHEME,''''), A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO    
			 FROM '+@CTEMPIRDTABLE+' A    
			 JOIN ARTICLE B ON A.ARTICLE_CODE = B.ARTICLE_CODE    
			 JOIN PRD_SKU C ON C.PRODUCT_UID=A.PRODUCT_UID    
			 JOIN ARTICLE D ON D.ARTICLE_CODE=A.OLD_ARTICLE_CODE    
			 WHERE A.IRM_MEMO_ID ='''+@CXNID+''' 
			 AND ISNULL(D.CODING_SCHEME,0)<>1 
			 AND ISNULL(A.NEW_PRODUCT_CODE,'''')=''''     
			 ORDER BY A.SRNO'    
		         
		  SET @NSTEP=80    
		      
		  PRINT @CCMD    
		    
		  INSERT #PIDROWS ( PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,ARTICLE_NO)     
		  EXEC SP_EXECUTESQL @CCMD    
		    
		

	      
	 END  ---- END OF IF @NMODE = 2   
	     
	
	 ----- GENERATE BARCODE PREFIX EXPRESSION WITHOUT CUSTOM PROCEDURE   
	 IF NOT EXISTS ( SELECT NAME FROM SYSOBJECTS WHERE NAME = 'SP_GETNEWPREFIX' )    
	 BEGIN    
		  IF ISNULL(@CXNBARCODEPREFIX,'')=''
				SELECT TOP 1 @CADDPREFIX = VALUE FROM CONFIG WHERE CONFIG_OPTION='BARCODE_PREFIX'
		  ELSE
				SET @CADDPREFIX=@CXNBARCODEPREFIX    
				
		  SELECT TOP 1 @CPREFIXYEARCODE= VALUE FROM CONFIG WHERE CONFIG_OPTION='YEAR_CODE_IN_PC' 
		  
		  IF ISNULL(@CPREFIXYEARCODE,'')='1'    
			 SET @CYEARCODE= RIGHT(LTRIM(RTRIM(STR(DATEPART(YY,@DMEMODT)))),2)     
		   
		  SELECT TOP 1 @CPREFIXMONTHCODE= VALUE FROM CONFIG WHERE CONFIG_OPTION='MONTH_CODE_IN_PC'
		  IF ISNULL(@CPREFIXMONTHCODE,'')='1'
				SELECT @MONTHCODE=CASE WHEN MONTH(GETDATE())<10 THEN '0'+ CAST(MONTH(GETDATE()) AS VARCHAR(2)) ELSE CAST(MONTH(GETDATE())AS VARCHAR(2))  END
		   
		  SELECT TOP 1 @CPREFIXFLOORID= VALUE FROM CONFIG WHERE CONFIG_OPTION='FLOOR_ID_IN_PC'
		
		  IF ISNULL(@CPREFIXFLOORID,'')='1'    
				SET @CADDFLOORIDPREFIX=@CLOCID+ISNULL(@CBIN_ALIAS ,'')
		  ELSE  
				SET @CADDFLOORIDPREFIX=''  
		  
		      
		  SELECT TOP 1 @CPREFIXLOCID= VALUE FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID_IN_PC'
		  IF ISNULL(@CPREFIXLOCID,'')='1' AND ISNULL(@CPREFIXFLOORID,'')<>'1'   
			   SET @CADDLOCIDPREFIX=@CLOCID    
		  ELSE    
		  IF @CADDFLOORIDPREFIX=''  
		  BEGIN    
				-- IN CASE THE PURCHASES ARE DONE AT MULTIPLE LOCATIONS, FORCE THE LOCATION ID IN PREFIX    
				SELECT @NPURLOCCNT=COUNT(*) FROM LOCATION WHERE PUR_LOC = 1 OR DEPT_ID=@CHOLOCID    
				IF ISNULL(@NPURLOCCNT,0)>1    
				BEGIN    
					  IF NOT EXISTS (SELECT TOP 1 CONFIG_OPTION FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID_IN_PC')     
							INSERT CONFIG ( CONFIG_OPTION, VALUE, ROW_ID, LAST_UPDATE, REMARKS)     
							SELECT 'LOCATION_ID_IN_PC' AS CONFIG_OPTION,'1' AS VALUE,    
							'' AS ROW_ID,GETDATE() AS  LAST_UPDATE,'' AS  REMARKS
					  ELSE    
						   UPDATE CONFIG SET VALUE='1' WHERE CONFIG_OPTION='LOCATION_ID_IN_PC' 
						          
					  SET @CADDLOCIDPREFIX=@CLOCID    
				END    
		  END    
	    
		  PRINT 'GENBC-5'    
	  
	   
		  SET @NSTEP=100    
		  SET  @CPREFIX = LTRIM(RTRIM(ISNULL(@CYEARCODE,'')))+LTRIM(RTRIM(ISNULL(@MONTHCODE,''))) + LTRIM(RTRIM(ISNULL(@CADDLOCIDPREFIX,''))) +   
		  LTRIM(RTRIM(ISNULL(@CADDFLOORIDPREFIX,''))) +   LTRIM(RTRIM(ISNULL(@CADDPREFIX,'')))    
	 END  ----- GENERATE BARCODE PREFIX EXPRESSION WITHOUT CUSTOM PROCEDURE
	 
	 ELSE    
	 BEGIN ----- GENERATE BARCODE PREFIX WITH CUSTOM PROCEDURE
		  -- GETTING CUSTOM PREFIX FOR THE CURRENT ROW OF PID    
		  EXEC SP_GETNEWPREFIX @CPIDROWID, 'PUR', @CCUSTOMPREFIX OUTPUT    
		  IF @CCUSTOMPREFIX IS NULL    
			GOTO END_PROC    
		  
		  SET @CPREFIX = @CCUSTOMPREFIX    
	 END    
	
   SELECT @NROWS = COUNT(*) FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE 
   

	
	 IF @NROWS > 0    
	 BEGIN    
		  -- DO NOT PROCEED FOR BARCODE GENERATION IF PID IS NOT NORMALIZED FOR UNIQUE CODES    
		  IF EXISTS ( SELECT TOP 1 PID_ROW_ID FROM #PIDROWS WHERE CODING_SCHEME = 3 AND QUANTITY > 1 )    
		   GOTO END_PROC    
		      
		      
		  SET @NSTEP=110    
		      
		  PRINT 'BAR CODE PREFIX :'+@CPREFIX    
		      
		  PRINT 'GENBC-6'    
		      
		  --CHECKING IF BARCODE SHOULD BE GENERATED RANDOMLY OR USING GETNEXTKEY    
		  SELECT TOP 1 @BRANDOMGEN=ISNULL(VALUE,0) FROM CONFIG WHERE CONFIG_OPTION='PRODUCT_CODE_GENERATION_RANDOM'
		  
		  
		  SET @BRANDOMGEN=ISNULL(@BRANDOMGEN,0)      
		  IF @BRANDOMGEN=0 ---START GENERATE BARCODE WITHOUT NON-RANDOME METHOD
		  BEGIN
			   -- GENERATE BARCODES FOR ARTICLE WHICH ARE CONSIDERED AS PREFIX FOR BAR CODE GENERATION    
			  IF EXISTS (SELECT TOP 1 PID_ROW_ID FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
						 WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=0)    
			  BEGIN     
			       
				   SELECT @NROWS = COUNT(*) FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
				   WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=0      
				       
				   -- CALLING GETNEXTKEY PROCEDURE TO GENERATE NEW CODES IN BULK    
				   EXEC GETNEXTKEY 'PRD_SKU', 'PRODUCT_CODE', 50, @CPREFIX, 0, '', @NROWS,@CNEXTPRODUCTCODE OUTPUT 
				   
				   
				   IF @CNEXTPRODUCTCODE IS NULL    
					GOTO END_PROC    
				       
				   PRINT 'NEXT PRODUCT CODE AVAILABLE:'+@CNEXTPRODUCTCODE+STR(LEN(@CNEXTPRODUCTCODE))+STR(LEN(@CPREFIX))    
				   SET @NNEXTKEYVALUE = CONVERT(NUMERIC(30,0),RIGHT(LTRIM(RTRIM(@CNEXTPRODUCTCODE)),LEN(@CNEXTPRODUCTCODE)-LEN(@CPREFIX)))    
				       
				   PRINT 'NEXT PRODUCT CODE VALUE:'+STR(@NNEXTKEYVALUE)    
				       
				   PRINT 'GENBC-7'    
				   SET @NSTEP=120    
				   
				   SET @BBARCODEGENERATED=0
				   
				   IF CURSOR_STATUS('GLOBAL','PID_CUR') IN (0,1)
				   BEGIN
						CLOSE PID_CUR
						DEALLOCATE PID_CUR
				   END					   
				   -- GENERATING MULTIPLE ROWS FOR NEWLY GENERATED PRODUCT CODES    
				   DECLARE PID_CUR CURSOR FOR     
				   SELECT PID_ROW_ID FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE     
				   WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=0  AND B.GEN_EAN_CODES=0  
				   ORDER BY A.SRNO    
				       
				   OPEN PID_CUR    
				       
				   FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
				   WHILE @@FETCH_STATUS = 0    
				   BEGIN    
				        
						SET @NSTEP=130     
					        
						SET @BLOOP=1    
					        
						WHILE @BLOOP=1    
						BEGIN    
							 SET @NSTEP=135    
							 SET @CNEXTPRODUCTCODE = @CPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE)))       
						     
							 PRINT 'NEXT PRODUCT CODE GEN :'+@CNEXTPRODUCTCODE
							 SET @BBARCODEGENERATED=1
						         
							 IF NOT EXISTS (SELECT TOP 1 PRODUCT_CODE FROM PRD_SKU WHERE PRODUCT_CODE=@CNEXTPRODUCTCODE)    
							 BEGIN    
							  SET @NSTEP=137    
							  INSERT #BARCODES ( PID_ROW_ID, PRODUCT_CODE )    
								VALUES   ( @CPIDROWID, @CNEXTPRODUCTCODE )    
						            
							  SET @BLOOP=0      
							 END       
						         
							 SET @NSTEP=138    
							 SET @NNEXTKEYVALUE = @NNEXTKEYVALUE + 1          
						END    
					         
					        
						SET @NSTEP=140    
					        
						FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
				   END    
				   CLOSE PID_CUR    
				   DEALLOCATE PID_CUR    
				   
				   IF @BBARCODEGENERATED=1
				   BEGIN
					   PRINT 'LAST BAR CODE UPDATED :'+@CNEXTPRODUCTCODE
					   SET @NNEXTKEYVALUE = @NNEXTKEYVALUE - 1    
					   SET @CNEXTPRODUCTCODE = @CPREFIX + LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE)))    
					       
					   SET @NSTEP=150    
					       
					   ---- UPDATING KEYS TABLE WITH THE MAXIMUM BARCODE GENERATED     
					   UPDATE KEYS_PMT SET     
						LASTKEYVAL = LTRIM(RTRIM(@CNEXTPRODUCTCODE))     
					   WHERE TABLENAME = 'PRD_SKU'    
					   AND COLUMNNAME = 'PRODUCT_CODE'    
					   AND FINYEAR  = ''    
					   AND PREFIX  = @CPREFIX    
				   END
			   END	  
		   
		   
		 
			   SET  @BBARCODEGENERATED=0
			   -- GENERATE BARCODES FOR ARTICLES WHICH ARE CONSIDERED AS PREFIX FOR BAR CODE GENERATION    
			   IF EXISTS (SELECT TOP 1 PID_ROW_ID FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
					WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=1 )     
			   BEGIN    
			       
			       
			      
					DECLARE ART_CUR CURSOR FOR SELECT DISTINCT A.ARTICLE_NO FROM #PIDROWS A    
					JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=1 AND B.GEN_EAN_CODES=0    
				        
					OPEN ART_CUR    
					FETCH NEXT FROM ART_CUR INTO @CARTICLENO    
					WHILE @@FETCH_STATUS=0    
					BEGIN    
				         
						 SET @CARTPREFIX=@CPREFIX+@CARTICLENO+'-'    
					    
						 SELECT @NROWS = COUNT(*) FROM #PIDROWS WHERE ARTICLE_NO=@CARTICLENO    
					         
						 -- CALLING GETNEXTKEY PROCEDURE TO GENERATE NEW CODES IN BULK    
						 EXEC GETNEXTKEY 'PRD_SKU', 'PRODUCT_CODE', 50, @CARTPREFIX, 0, '', @NROWS, @CNEXTPRODUCTCODE OUTPUT     
						
						 IF @CNEXTPRODUCTCODE IS NULL    
						  GOTO END_PROC    
					         
						 SET @NNEXTKEYVALUE = CAST(RIGHT(@CNEXTPRODUCTCODE,LEN(@CNEXTPRODUCTCODE)-LEN(@CARTPREFIX)) AS NUMERIC(30,0))    
					    
						 -- GENERATING MULTIPLE ROWS FOR NEWLY GENERATED PRODUCT CODES    
						 DECLARE PID_CUR CURSOR FOR     
						 SELECT PID_ROW_ID FROM #PIDROWS WHERE ARTICLE_NO=@CARTICLENO    
					         
						 OPEN PID_CUR    
					         
						 FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
						 WHILE @@FETCH_STATUS = 0    
						 BEGIN    
							  SET @NSTEP=130     
						        
							  SET @BLOOP=1    
						          
							  WHILE @BLOOP=1    
							  BEGIN    
								   SET @NSTEP=135    
								   SET  @BBARCODEGENERATED=1
							       
								   SET @CNEXTPRODUCTCODE = @CARTPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE)))       
							           
								   IF NOT EXISTS (SELECT TOP 1 PRODUCT_CODE FROM PRD_SKU WHERE PRODUCT_CODE=@CNEXTPRODUCTCODE)    
								   BEGIN    
									SET @NSTEP=137    
									 INSERT #BARCODES ( PID_ROW_ID, PRODUCT_CODE )    
									  VALUES   ( @CPIDROWID, @CNEXTPRODUCTCODE )    
							              
									SET @BLOOP=0      
								   END       
							           
								   SET @NSTEP=138    
								   SET @NNEXTKEYVALUE = @NNEXTKEYVALUE + 1          
							  END    
						         
							  FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
						 END    
						 CLOSE PID_CUR    
						 DEALLOCATE PID_CUR    
					     
					     
					     --SELECT * FROM #BARCODES
						 IF @BBARCODEGENERATED=1
						 BEGIN    
							 SET @NNEXTKEYVALUE = @NNEXTKEYVALUE - 1    
							 SET @CNEXTPRODUCTCODE = @CARTPREFIX + CONVERT(VARCHAR(30), @NNEXTKEYVALUE)    
						    
							 -- UPDATING KEYS TABLE WITH THE MAXIMUM BARCODE GENERATED     
							 UPDATE KEYS_PMT SET     
							  LASTKEYVAL = LTRIM(RTRIM(@CNEXTPRODUCTCODE))     
							 WHERE TABLENAME = 'PRD_SKU'    
							 AND COLUMNNAME = 'PRODUCT_CODE'    
							 AND FINYEAR  = ''    
							 AND PREFIX  = @CARTPREFIX    
						         					         
						 END	 

						 FETCH NEXT FROM ART_CUR INTO @CARTICLENO    					 
					END    
					        
					CLOSE ART_CUR    
					DEALLOCATE ART_CUR    
			        
			   END  
		     
		     
		  END ---- END OF GENERATE BARCODE WITHOUT NON-RANDOME METHOD   
	
	
		  ELSE    
		  BEGIN  ---START OF GENERATE RANDOM BARCODES       


			   SET @NSTEP=320    
			   SELECT TOP 1 @NBARCODELEN=ISNULL(VALUE,0) FROM CONFIG WHERE CONFIG_OPTION='NO_OF_ALPHA_NUMERIC_CHAR'
			       
			   SET @NSTEP=330    
			   IF @NBARCODELEN=0    
			   BEGIN    
					SET @CERRORMSG='PLEASE DEFINE THE LENGTH OF ALPLA NUMERIC CHARACTERS FOR RANDOM BARCODE GENERATION'    
					GOTO END_PROC    
			   END     
			       
			   IF EXISTS (SELECT TOP 1 PID_ROW_ID FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
					WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=0 )    
			   BEGIN     
				   SET @NSTEP=340    
				   DECLARE PID_CUR CURSOR FOR     
				   SELECT PID_ROW_ID FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE WHERE     
				   GENERATE_BARCODES_WITHARTICLE_PREFIX=0   
				    
				   OPEN PID_CUR    
				       
				   FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
				   WHILE @@FETCH_STATUS = 0    
				   BEGIN    
						SET @NSTEP=350     
					        
						SET @BLOOP=1    
					        
						WHILE @BLOOP=1    
						BEGIN    
						 SET @NSTEP=360    
						 SET @CNEXTPRODUCTCODE = @CPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),LEFT(REPLACE(NEWID(),'-',''),@NBARCODELEN))))       
					         
						 IF NOT EXISTS (SELECT TOP 1 PRODUCT_CODE FROM PRD_SKU WHERE PRODUCT_CODE=@CNEXTPRODUCTCODE)    
						 BEGIN    
						  SET @NSTEP=370    
						  INSERT #BARCODES ( PID_ROW_ID, PRODUCT_CODE )    
							VALUES   ( @CPIDROWID, @CNEXTPRODUCTCODE )    
					            
						  SET @BLOOP=0      
						 END       
						END    
					         
					        
						SET @NSTEP=380    
				        
						FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
				   END    
			
				   CLOSE PID_CUR    
				   DEALLOCATE PID_CUR     
			   END      
			        
			   IF EXISTS (SELECT TOP 1 PID_ROW_ID FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
					WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=1 AND B.GEN_EAN_CODES=0)     
			   BEGIN    
					DECLARE ART_CUR CURSOR FOR SELECT DISTINCT A.ARTICLE_NO FROM #PIDROWS A    
					JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=1    
					AND B.GEN_EAN_CODES=0  
				        
					OPEN ART_CUR    
					FETCH NEXT FROM ART_CUR INTO @CARTICLENO    
					WHILE @@FETCH_STATUS=0    
					BEGIN    
				         
						 SET @CARTPREFIX=@CPREFIX+@CARTICLENO+'-'    
					    
						 -- GENERATING MULTIPLE ROWS FOR NEWLY GENERATED PRODUCT CODES    
						 DECLARE PID_CUR CURSOR FOR     
						 SELECT PID_ROW_ID FROM #PIDROWS WHERE ARTICLE_NO=@CARTICLENO    
					         
						 OPEN PID_CUR    
					         
						 FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
						 WHILE @@FETCH_STATUS = 0    
						 BEGIN    
							  SET @NSTEP=130     
						        
							  SET @BLOOP=1    
						          
							  WHILE @BLOOP=1    
							  BEGIN    
								   SET @NSTEP=135    
								   SET @CNEXTPRODUCTCODE = @CARTPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),LEFT(REPLACE(NEWID(),'-',''),@NBARCODELEN))))       
							           
								   IF NOT EXISTS (SELECT TOP 1 PRODUCT_CODE FROM PRD_SKU WHERE PRODUCT_CODE=@CNEXTPRODUCTCODE)    
								   BEGIN    
										SET @NSTEP=137    
										INSERT #BARCODES ( PID_ROW_ID, PRODUCT_CODE )    
										  VALUES   ( @CPIDROWID, @CNEXTPRODUCTCODE )    
								              
										SET @BLOOP=0      
								   END       
						           
							  END    
						         
							  FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
						 END    
						 CLOSE PID_CUR    
						 DEALLOCATE PID_CUR    
				         
						 FETCH NEXT FROM ART_CUR INTO @CARTICLENO    
					END    
				        
					CLOSE ART_CUR    
					DEALLOCATE ART_CUR    
			        
			   END     
		  
		  END ----- END OF GENERATE RANDOM BARCODES         
	END   ----- END OF IF @NROWS>0
	  

	
	----- GENERATE EAN CODES IF PROCEDURE CALLED FROM PURCHASE INVOICE / PURCHASE ORDER  
	IF @NEANROWS > 0 AND @NMODE IN (1,3,2)  
	BEGIN  
		 DECLARE @CEANSOURCEABLE VARCHAR(100)  
 				SET @CEANSOURCEABLE='PRD_IRD01106'
		 		
		 SET @NSTEP=150  
		 EXEC GETNEXTEANCODE @NEANLENGTH,@CEANPREFIX,1,'', @NEANROWS,@CEANSOURCEABLE,@CXNID,@CERRORMSG OUTPUT   
		   
		 IF @CERRORMSG<>''  
		 BEGIN  
			  PRINT 'GENBARCODE-RETURND-5'  
			  GOTO END_PROC  
		 END    

	END  
	
INS_CODES:    

	 IF @NMODE=2    
	 BEGIN    
		   SET @NSTEP=210    
	
		   -- UPDATING IRD TABLE WITH THE NEWLY GENERATED BARCODES    
		   SET @CCMD=N'UPDATE '+@CTEMPIRDTABLE+' SET NEW_PRODUCT_CODE = B.PRODUCT_CODE    
		   FROM #BARCODES B     
		   WHERE '+@CTEMPIRDTABLE+'.ROW_ID = B.PID_ROW_ID    
		   AND '+@CTEMPIRDTABLE+'.NEW_PRODUCT_CODE <> ISNULL(B.PRODUCT_CODE,'''')'    
		       
		   PRINT @CCMD    
		   EXEC SP_EXECUTESQL @CCMD    
		       
		   SET @NSTEP=220    
		
		
	     UPDATE PRD_IRD01106 SET NEW_PRODUCT_UID =CAST(NEWID () AS VARCHAR(100)) WHERE IRM_MEMO_ID =@CXNID
         
         
		   
		   -- INSERTING RECORDS IN SKU    
		   SET @CCMD=N'INSERT PRD_SKU (PRODUCT_UID, ARTICLE_CODE, PARA1_CODE, PARA2_CODE, LAST_UPDATE, PURCHASE_PRICE,            
					  PARA3_CODE, INV_DT, INV_NO, AC_CODE, RECEIPT_DT, PARA4_CODE, PARA5_CODE, PARA6_CODE,    
					  FORM_ID, MRP, DT_CREATED, WS_PRICE, TAX_AMOUNT, CHALLAN_NO,WORK_ORDER_ID,COMPONENT_CODE,  
					  COM_PARA1_CODE,COM_PARA2_CODE,PRODUCT_CODE ) 
			   
		   SELECT DISTINCT A.NEW_PRODUCT_UID,A.ARTICLE_CODE, A.PARA1_CODE, A.PARA2_CODE,   
		   GETDATE() AS LAST_UPDATE,E.PURCHASE_PRICE, A.PARA3_CODE,E.INV_DT,E.INV_NO AS INV_NO,E.AC_CODE,E.RECEIPT_DT,
		   A.PARA4_CODE,A.PARA5_CODE,A.PARA6_CODE,''0000000'' AS FORM_ID, 
		   A.NEW_MRP,'''' AS DT_CREATED, A.NEW_WSP,0 AS TAX_AMOUNT,'''' AS CHALLAN_NO,'''' AS WORK_ORDER_ID,''01'' AS COMPONENT_CODE,
		   ''0000000  '' AS COM_PARA1_CODE ,''0000000  '' AS COM_PARA2_CODE, A.NEW_PRODUCT_CODE       
		   FROM '+@CTEMPIRDTABLE+' A    
		   JOIN ARTICLE C ON A.ARTICLE_CODE = C.ARTICLE_CODE    
		   JOIN #BARCODES BC ON A.ROW_ID = BC.PID_ROW_ID    
		   LEFT OUTER JOIN PRD_SKU D ON A.NEW_PRODUCT_UID = D.PRODUCT_UID    
		   JOIN PRD_SKU E ON E.PRODUCT_UID=A.PRODUCT_UID    
		   WHERE A.NEW_PRODUCT_CODE<>''''    AND A.IRM_MEMO_ID ='''+@CXNID+'''  
		   AND   D.PRODUCT_CODE IS NULL'    
		       
		   PRINT @CCMD    
		   EXEC SP_EXECUTESQL @CCMD      
		   SET @NSTEP=240    
		    
		    
		  SELECT A.*
		     FROM PRD_IRD01106 A    
		   JOIN PRD_IRM01106 B ON A.IRM_MEMO_ID = B.IRM_MEMO_ID    
		   JOIN #BARCODES BC ON A.ROW_ID = BC.PID_ROW_ID    
		   LEFT OUTER JOIN PRD_PMT D ON A.NEW_PRODUCT_UID = D.PRODUCT_UID AND A.DEPARTMENT_ID = D.DEPARTMENT_ID    
		   WHERE D.PRODUCT_CODE IS NULL    AND A.IRM_MEMO_ID ='WH0111700000WH00000002'  

		       
		   SET @CCMD=N'INSERT PRD_PMT (PRODUCT_UID,  QUANTITY_IN_STOCK, DEPARTMENT_ID,LAST_UPDATE ,PRODUCT_CODE )    
		   SELECT DISTINCT A.NEW_PRODUCT_UID,  0 AS QUANTITY_IN_STOCK,A.DEPARTMENT_ID AS DEPARTMENT_ID,     
		    GETDATE() AS LAST_UPDATE,A.NEW_PRODUCT_CODE AS PRODUCT_CODE    
		   FROM '+@CTEMPIRDTABLE+' A    
		   JOIN PRD_IRM01106 B ON A.IRM_MEMO_ID = B.IRM_MEMO_ID    
		   JOIN #BARCODES BC ON A.ROW_ID = BC.PID_ROW_ID    
		   LEFT OUTER JOIN PRD_PMT D ON A.NEW_PRODUCT_UID = D.PRODUCT_UID AND A.DEPARTMENT_ID = D.DEPARTMENT_ID    
		   WHERE D.PRODUCT_CODE IS NULL    AND A.IRM_MEMO_ID ='''+@CXNID+'''  '     
		       
		   PRINT @CCMD    
		   EXEC SP_EXECUTESQL @CCMD    
	      
	 END    
	     
	 

END TRY     
     
BEGIN CATCH    
		    
  SET @CERRORMSG = 'PROCEDURE SAVETRAN_GENBARCODES : STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()    
    
END CATCH    
     
END_PROC:    
     
END    
--******************************* END OF PROCEDURE SAVETRAN_GENBARCODES    
