CREATE PROCEDURE SP_SEND_MIRRORDATA_NEW--(LocId 3 digit change by Sanjay:06-11-2024)
@CXNTYPE VARCHAR(20)='',
@CREQXNID VARCHAR(50),
@BDONOTCHKPENDINGCUST BIT=0,
@BACKNOWLEDGE BIT=0,
@BNEWSENDINGMETHOD BIT=0


--WITH ENCRYPTION
AS
BEGIN

	DECLARE @TXNSSENDINFO TABLE (ORG_TABLENAME VARCHAR(500),TMP_TABLENAME VARCHAR(500),XN_ID VARCHAR(100))  	
		
	DECLARE @TFINALXNSSENDINFO TABLE (XN_TYPE VARCHAR(10),ERRMSG VARCHAR(1000),ORG_TABLENAME VARCHAR(100),TMP_TABLENAME VARCHAR(100),XN_ID VARCHAR(100))
	
	DECLARE @CXN_TYPE VARCHAR(20),@CPROC_NAME VARCHAR(200),@CERRMSG VARCHAR(1000),@NSEND_ORD NUMERIC(4)
		   ,@BEXISTS BIT,@DTSQL NVARCHAR(MAX),@CSTEP VARCHAR(5),@NMAX_ORD NUMERIC(4)
		   ,@CARCT VARCHAR(20),@CCURLOCID VARCHAR(5),@CHOLOCID VARCHAR(5),@CACKNOWLEDGE VARCHAR(4),@BSENDOFFLINE BIT
		   
	DECLARE @XNTYPE VARCHAR(20),@MEMO_ID VARCHAR(100),@CTEMPTABLELIST VARCHAR(100),@CTABLE VARCHAR(100),@RECORDCOUNT INT	   
	   
BEGIN TRY	
	SET @CSTEP=00
	
	IF @CXNTYPE NOT in ('SLS','ARC','WSL','WSR','PUR','PRT','PSHBD','RPS')
		SET @BDONOTCHKPENDINGCUST=1

	SET @BSENDOFFLINE=0
	
	SET @CACKNOWLEDGE=(CASE WHEN @BACKNOWLEDGE=1 THEN '1' ELSE '0' END)
	
	SELECT TOP 1 @CCURLOCID = [VALUE] FROM CONFIG (NOLOCK) WHERE  CONFIG_OPTION='LOCATION_ID'
	SELECT TOP 1 @CHOLOCID = [VALUE] FROM CONFIG (NOLOCK) WHERE  CONFIG_OPTION='HO_LOCATION_ID'
	
	SET @CSTEP = 15
	IF @CCURLOCID=@CHOLOCID AND @CXNTYPE<>'MSTCUS'
	BEGIN
		SET @CERRMSG='XNS SENDING VIA MIRRORSERVICE CAN NOT BE DONE FROM HEAD OFFICE....'
		GOTO EXIT_PROC
	END 
	
	IF @CXNTYPE='MSTCUS'
		SET @CXNTYPE='CUS'
		
	SET @CSTEP=20
	
	
	IF OBJECT_ID('TEMPDB..#TMPPENDINGMST','U') IS NOT NULL	
		DROP TABLE #TMPPENDINGMST
	
	SELECT XN_ID AS SOURCE_XN_ID,XN_TYPE AS SOURCE_XN_TYPE,XN_TYPE AS SEARCH_XN_TYPE INTO #TMPPENDINGMST
	FROM XNNOS WHERE 1=2
	
	SELECT TOP 1 @CCURLOCID=VALUE FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID'	
	
	SET @CSTEP=30
	
	
	IF @cXnType<>'XNSLM'
		SET @CPROC_NAME='SP_SEND_MIRROR_'+LTRIM(RTRIM(@CXNTYPE))+'_DATA_NEW'
	ELSE
		SET @CPROC_NAME='SP_SEND_MIRROR_'+LTRIM(RTRIM(@CXNTYPE))+'_DATA'

	SET @CSTEP=40	
	PRINT @CPROC_NAME+':'+@CXNTYPE
	
	
	
	SET @CSTEP=50
	IF OBJECT_ID(@CPROC_NAME,'P') IS NOT NULL
	BEGIN
		PRINT 'PROC EXISTS FOR SEND..'+@CXNTYPE
		SET @CSTEP=60
		
		IF @CXNTYPE IN ('ADV','ARC')
		BEGIN
			SET @CARCT=(CASE WHEN @CXNTYPE='ADV' THEN '(2)' ELSE '(1,3,4,5)' END)
			SET @DTSQL='EXEC '+@CPROC_NAME+' '''+@CREQXNID+''','''+@CARCT+''','''+@CCURLOCID+''','+
			(CASE WHEN @BDONOTCHKPENDINGCUST=1 THEN '1' ELSE '0' END)+','+@CACKNOWLEDGE+',@CERRMSG OUTPUT'
		END	
        ELSE		
        --SP_SEND_MIRROR_CUS_DATA_NEW
        IF @CXNTYPE IN ('CUS')		
     		SET @DTSQL='EXEC '+@CPROC_NAME+' '''','''+@CREQXNID+''','+@CACKNOWLEDGE+',@CERRMSG OUTPUT'
        ELSE
		IF @CXNTYPE IN ('XNSLM')		
			SET @DTSQL='EXEC '+@CPROC_NAME+' '''+@CCURLOCID+''','''+@CREQXNID+''','+@CACKNOWLEDGE+',@CERRMSG OUTPUT'
		ELSE	
        IF @CXNTYPE IN ('BIN_MST')
        BEGIN
       		
     		SET @DTSQL='EXEC '+@CPROC_NAME+' '''+@CREQXNID+''','+@CACKNOWLEDGE+',@CERRMSG OUTPUT'
     		PRINT @DTSQL
     	END	
     	ELSE			

		IF @CXNTYPE IN ('SLS','WSL','WSR','PUR','PRT','PSHBD','RPS')
			SET @DTSQL='EXEC '+@CPROC_NAME+''''+@CREQXNID+''','''+@CCURLOCID+''','+
			(CASE WHEN @BDONOTCHKPENDINGCUST=1 THEN '1' ELSE '0' END)+','+@CACKNOWLEDGE+',@CERRMSG OUTPUT'
		ELSE        		
			SET @DTSQL='EXEC '+@CPROC_NAME+' '''+@CREQXNID+''','''+@CCURLOCID+''','+@CACKNOWLEDGE+',@CERRMSG OUTPUT'
								
		PRINT @DTSQL
		SET @CSTEP=72
		
		IF @BACKNOWLEDGE=0 AND @CXNTYPE NOT IN ('SLS','ARC') AND  @BNEWSENDINGMETHOD=0
			INSERT @TXNSSENDINFO (ORG_TABLENAME,TMP_TABLENAME,XN_ID)
			EXEC SP_EXECUTESQL @DTSQL,N'@CERRMSG VARCHAR(1000) OUTPUT',@CERRMSG OUTPUT
		ELSE
		IF @BACKNOWLEDGE=0 AND (@CXNTYPE IN ('SLS','ARC') OR  @BNEWSENDINGMETHOD=1)
			EXEC SP_EXECUTESQL @DTSQL,N'@CERRMSG VARCHAR(1000) OUTPUT',@CERRMSG OUTPUT						
			
		SET @CSTEP=75
		IF EXISTS (SELECT TOP 1 * FROM @TXNSSENDINFO)
		BEGIN
			SET @CSTEP=80
			IF EXISTS (SELECT TOP 1 * FROM #TMPPENDINGMST)
			BEGIN
				SET @CSTEP=85
				SELECT A.*,B.* FROM @TXNSSENDINFO A JOIN #TMPPENDINGMST B ON 1=1
				RETURN
			END	
		END	
	END	
	else
		print @CPROC_NAME+' not exists'

	SET @CSTEP=90
	IF @BACKNOWLEDGE=1
		GOTO EXIT_PROC
		
	IF EXISTS(SELECT TOP 1 'U' FROM @TXNSSENDINFO)
	BEGIN
		PRINT 'DATA FOUND FOR XN TYPE :'+@CXNTYPE
		SET @CSTEP=95
		INSERT INTO @TFINALXNSSENDINFO
		SELECT @CXNTYPE ,'' AS ERRMSG,*  FROM @TXNSSENDINFO
		
		SELECT TOP 1 @XNTYPE=XN_TYPE,@MEMO_ID=XN_ID FROM @TFINALXNSSENDINFO
		
		IF EXISTS (SELECT TOP 1 * FROM @TFINALXNSSENDINFO WHERE CHARINDEX('XNSLM',XN_ID)>0 OR CHARINDEX('XNSDTM',XN_ID)>0 OR 
				   CHARINDEX('XNSEMP',XN_ID)>0 OR CHARINDEX('CUS',XN_ID)>0)
		BEGIN		   
			SET @CSTEP=150
			UPDATE @TFINALXNSSENDINFO SET XN_TYPE=(CASE WHEN CHARINDEX('XNSLM',XN_ID)>0 THEN 'XNSLM' WHEN CHARINDEX('XNSDTM',XN_ID)>0 THEN 'XNSDTM' 	   
			WHEN CHARINDEX('XNSEMP',XN_ID)>0 THEN 'XNSEMP' WHEN CHARINDEX('CUS',XN_ID)>0 THEN 'CUS' ELSE XN_TYPE END),
			XN_ID=(CASE WHEN CHARINDEX('XNSLM',XN_ID)>0 THEN SUBSTRING(XN_ID,6,LEN(XN_ID))
						WHEN CHARINDEX('XNSDTM',XN_ID)>0 OR CHARINDEX('XNSEMP',XN_ID)>0 THEN SUBSTRING(XN_ID,7,LEN(XN_ID))
						WHEN CHARINDEX('CUS',XN_ID)>0 THEN SUBSTRING(XN_ID,4,LEN(XN_ID)) ELSE XN_ID END)
																		
		END		
		ELSE
			UPDATE @TFINALXNSSENDINFO SET XN_TYPE=@XNTYPE
					
		SELECT * FROM @TFINALXNSSENDINFO
		RETURN
	END	
	ELSE
	IF  @CXNTYPE NOT IN ('SLS','ARC') AND  @BNEWSENDINGMETHOD=0
	BEGIN
		SET @CERRMSG='NO DATA FOUND FOR THIS ID'
	END
END TRY

BEGIN CATCH
	SET @CERRMSG='P:SP_SEND_MIRRORDATA_NEW, STEP: '+@CSTEP+',MESSAGE:'+ERROR_MESSAGE()
	
	PRINT 'CATCH IN SP_SEND_MIRRORDATA_NEW'+@CERRMSG
END CATCH	 

EXIT_PROC:
	PRINT 'NO PENDING DATA'
	
	IF ISNULL(@CERRMSG,'')<>'' OR @BACKNOWLEDGE=1 OR @CXNTYPE IN ('SLS','ARC') OR  @BNEWSENDINGMETHOD=1
		SELECT ISNULL(@CERRMSG,'') AS ERRMSG

END
----END OF CREATING PROCEDURE SP_SEND_MIRRORDATA_NEW'