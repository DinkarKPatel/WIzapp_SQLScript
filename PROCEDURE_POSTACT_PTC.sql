create PROCEDURE POSTACT_PTC   
(  
 @DTTO DATETIME,  
 @CDEPTID CHAR(4)=''  
)  
AS  
BEGIN  
  
  
    DECLARE @CSTEP VARCHAR(10),@BPOSTDISCOUNTSEPARATELY BIT,@CDISCACCODE VARCHAR(10),@BPOSTFREIGHTSEPARATELY BIT  
   ,@CPETTYCASHACCODE VARCHAR(10),@BPOSTOCTROISEPARATELY BIT,@COCTROIACCODE VARCHAR(10),  
   @BPOSTINSURANCESEPARATELY BIT,@CINSURANCEACCODE VARCHAR(10),  
   @BPOSTOTHERCHARGESSEPARATELY BIT,@COTHERCHARGESACCODE VARCHAR(10),@BPOSTROUNDOFFSEPARATELY BIT,@CROUNDOFFACCODE VARCHAR(10)  
   ,@NCTR NUMERIC(10,0),  
   @NSUBTOTAL NUMERIC(14,2),@NTAXAMOUNT NUMERIC(14,2), @CPURACCODE VARCHAR(50),@CTAXACCODE VARCHAR(100),  
   @LPOSTTAXSEPARATELY NUMERIC(14,2),@CPEMMEMOID VARCHAR(50),@LOUTSTATIONPARTY BIT,@TMPDR NUMERIC(14,2),  
   @TMPCR NUMERIC(14,2),@CCURSTATECODE VARCHAR(10),@CVMID VARCHAR(40),@CLOCATIONID CHAR(2),  
   @CLASTBILLNO VARCHAR(40),@DTMPVENDORBILLDT DATETIME,@CRMLIST VARCHAR(300),@NTMPCREDITDAYS NUMERIC(10),  
   @NTMPCRDISCOUNTPERCENTAGE NUMERIC(14,2),@DLASTINVDT DATETIME,@CVOUCHERCODE VARCHAR(10),  
   @COLDBILLTYPE VARCHAR(10),@CLASTACCODE VARCHAR(10),@CLASTPARTYNAME VARCHAR(100),@NTOTQUANTITY NUMERIC(14,2),  
   @NTOTNETAMOUNT NUMERIC(14,2),@CDEPTNAME VARCHAR(100),@CVOUCHERNO VARCHAR(10)  
 SET @CSTEP=10  
 DECLARE @CPARTYACCODE VARCHAR(10),@CPARTYSTATECODE VARCHAR(10),@NNETAMOUNT NUMERIC(14,2),  
   @NDISCAMOUNT NUMERIC(14,2),@NFREIGHT NUMERIC(14,2), @NOTHER NUMERIC(14,2),@NROUNDOFF NUMERIC(14,2),  
   @NDRTOTAL NUMERIC(14,2),@NCRTOTAL NUMERIC(14,2),@CCUTOFFDATE VARCHAR(20),@CXNTYPE VARCHAR(10)  
   ,@CAC_CODE VARCHAR(20),@CVDID VARCHAR(40)  
      
    SET @CPETTYCASHACCODE=''  
    SET @CROUNDOFFACCODE=''  
      
    SET @CSTEP=20  
    --THIS TABLE VARIABLE STORE ERROR OF OF MEMO ID  
    DECLARE @ERRORS TABLE  
 (  
  XN_ID VARCHAR(40),XN_TYPE VARCHAR(30),XN_NO VARCHAR(40),  
  XN_DT DATETIME,XN_AMT NUMERIC(14,2),XN_AC VARCHAR(100),  
  ERR_DESC VARCHAR(500)  
 )     
      
    SET @CSTEP=30  
    DECLARE @VCHC TABLE   
 (  
  AC_CODE CHAR(10),NARRATION VARCHAR(200),XN_NO VARCHAR(30),  
  XN_DT DATETIME,DEPT_ID CHAR(4),AMOUNT NUMERIC(14,4),XN_ID VARCHAR(22),  
  REF_BILL_NO VARCHAR(50),REF_BILL_DATE DATETIME, ENTRY_ID INT IDENTITY  
  ,CRDAYS NUMERIC(5)  
 )  
   
 SET @CSTEP=40  
 DECLARE @VDC TABLE   
 (  
  VD_ID VARCHAR(50),    VM_ID VARCHAR(40),    AC_CODE CHAR(10),   
  NARRATION VARCHAR(200),   DEBIT_AMOUNT NUMERIC(14,4),  CREDIT_AMOUNT NUMERIC(14,4),  
  X_TYPE CHAR(2),     VS_AC_CODE CHAR(10),    REF_BILL_NO VARCHAR(40),   
  CREDIT_DAYS NUMERIC(10),  CR_DISCOUNT_PERCENTAGE NUMERIC(14,2),    
  VAT_ENTRY INT,REF_BILL_DATE DATETIME, AC_NAME VARCHAR(100)  
 )  
   
 SET @CSTEP=50  
 DECLARE @VMC TABLE  
 (  
  VM_ID VARCHAR(400),    VOUCHER_NO VARCHAR(400),   VOUCHER_DT DATETIME,   
  VOUCHER_CODE CHAR(100),   DEPT_ID CHAR(20),    BILL_TYPE VARCHAR(300),  
  BILL_NO VARCHAR(200),    BILL_ID VARCHAR(220),    BILL_DT DATETIME,   
  BILL_AC_CODE VARCHAR(100),  DRTOTAL NUMERIC(20,2),   CRTOTAL NUMERIC(20,2),   
  CASH_VOUCHER BIT,     SALE_VOUCHER BIT,     QUANTITY NUMERIC(20,2),   
  ANGADIA_CODE CHAR(70),    LR_NO VARCHAR(500),    LR_DT DATETIME,  
  PARTY_NAME VARCHAR(1000),  NET_AMOUNT NUMERIC(20,2),   BILL_STATUS VARCHAR(1000),  
  RM_LIST VARCHAR(3000),   CANCELLED BIT,     DEPT_NAME VARCHAR(100),  
  VOUCHER_TYPE VARCHAR(100)   
 )  
   
 SET @CSTEP=60  
 DECLARE @VLINK TABLE  
 (  
  VM_ID VARCHAR(100),MEMO_ID VARCHAR(100),XN_TYPE VARCHAR(20),LAST_UPDATE DATETIME  
 )  
   
 DECLARE @TBILL_BY_BILL_REF TABLE(VD_ID VARCHAR(40),REF_NO VARCHAR(40),AMOUNT NUMERIC(18,4),LAST_UPDATE DATETIME  
        ,X_TYPE VARCHAR(20),CR_DAYS NUMERIC(5),VM_ID VARCHAR(100))  
   
 SELECT TOP 1 @CCUTOFFDATE=CUTOFFDATE  
 FROM PTCCONFIGMST  
   
 SET @CCUTOFFDATE=ISNULL(@CCUTOFFDATE,'')  
   
 SET @CSTEP=70  
 SET @CVOUCHERCODE = '0000000002'  
    BEGIN TRY  
     
   SET @CSTEP=80  
   IF OBJECT_ID('TEMPDB..#POSTS','U') IS NOT NULL  
    DROP TABLE #POSTS   
     
   SET @CSTEP=90  
   --THIS TABLE STORE ALL PENDING MEMO_ID   
   CREATE TABLE #POSTS (MEMO_ID VARCHAR(30),MODE VARCHAR(10))  
     
   SET @CSTEP=92  
   IF OBJECT_ID('#APPROVALLOCATION','U') IS NOT NULL  
    DROP TABLE #APPROVALLOCATION  
     
   --GETTING LIST OF LOCATIONS ON WHICH APPROVAL PROCESS IS ENABLED  
   SELECT DISTINCT DEPT_ID   
   INTO #APPROVALLOCATION  
   FROM LOC_XNSAPPROVAL  
   WHERE XN_TYPE='PTC'  
     
   DECLARE @IMAXLEVEL INT  
     
   --GETTING THE MAX LEVEL OF APPROVAL FOR PURCHASE TRANSACTION  
   SELECT @IMAXLEVEL=MAX(LEVEL_NO) FROM XN_APPROVAL_CHECKLIST_LEVELS WHERE XN_TYPE='PTC'   
   	IF EXISTS(SELECT TOP 1 'U' FROM XN_APPROVAL_CHECKLIST_LEVELS  WHERE XN_TYPE='PTC' AND INACTIVE=0 AND ISNULL(AC_POSTING,0)<>0)
	BEGIN
		SELECT @IMAXLEVEL=LEVEL_NO
		FROM XN_APPROVAL_CHECKLIST_LEVELS 
		WHERE XN_TYPE='PTC' AND INACTIVE=0 AND ISNULL(AC_POSTING,0)<>0
	END
			  
     
     
   SET @IMAXLEVEL=ISNULL(@IMAXLEVEL,0)  
     
   SET @CSTEP=100  
   /*PETTYCASH EXPENSES FOR LOCATIONS WHERE APPROVAL IS ENABLED*/  
   INSERT INTO #POSTS (MEMO_ID,MODE)  
         SELECT DISTINCT A.PEM_MEMO_ID,'PTC' AS MODE   
         FROM PEM01106 A  
         JOIN LOCATION SL ON SL.DEPT_ID =a.location_Code   
         JOIN #APPROVALLOCATION AL ON a.location_Code =AL.DEPT_ID  
         JOIN PED01106 PED ON PED.PEM_MEMO_ID=A.PEM_MEMO_ID  
         JOIN  
         (  
    SELECT PED_ROW_ID  
    FROM PED_XN_APPROVAL MST  
    WHERE MST.LEVEL_NO>=@IMAXLEVEL
         )APV ON PED.ROW_ID=APV.PED_ROW_ID  
         LEFT OUTER JOIN   
         (  
    SELECT B.MEMO_ID,B.LAST_UPDATE  
    FROM POSTACT_VOUCHER_LINK B   
    JOIN VM01106 C ON C.VM_ID = B.VM_ID   
    WHERE C.CANCELLED=0 AND B.XN_TYPE = 'PTC'   
         )VM  ON A.PEM_MEMO_ID = VM.MEMO_ID    
         WHERE    
          -- POSTING ONLY COMPANY OWN OR POSTING MARK IN FRANCHIES  
            (ISNULL(SL.LOC_TYPE,0)=1 OR ISNULL(SL.ACCOUNT_POSTING_AT_HO,0)=1) AND   
         /*PETTYCASH EXPENSE IS NOT CANCELLED.*/  
         ((A.CANCELLED=1 AND VM.MEMO_ID IS NOT NULL) OR A.CANCELLED=0)     
         /*PETTYCASH EXPENSE INV_DT IS LESS THAN THE SPECIFIED DATE.*/  
         AND A.PEM_MEMO_DT <= @DTTO  
         /*IF CUTOFF DATE IS SPECIFIED, CONSIDER PETTYCASH EXPENSE AFTER THE CUTOFF DATE*/  
         AND (ISNULL(@CCUTOFFDATE,'')='' OR A.PEM_MEMO_DT>@CCUTOFFDATE)  
         /*IF ACCOUNTS_DEPT_ID IS FILLED UP APPLY FILTER TO LOCATION.*/  
         AND (ISNULL(@CDEPTID,'')='' OR a.location_Code =@CDEPTID)  
         /*PETTYCASH EXPENSE IS NOT POSTED OR CORRESPONDING VOUCHER IS NOT CANCELLED*/  
         AND (VM.MEMO_ID IS NULL OR VM.LAST_UPDATE <> A.LAST_UPDATE)   
         UNION ALL  
         /*PETTYCASH EXPENSES FOR LOCATIONS WHERE APPROVAL IS NOT ENABLED*/  
         SELECT DISTINCT A.PEM_MEMO_ID,'PTC' AS MODE   
         FROM PEM01106 A  
          JOIN LOCATION SL ON SL.DEPT_ID =a.location_Code   
         LEFT JOIN #APPROVALLOCATION AL ON a.location_Code =AL.DEPT_ID  
         LEFT OUTER JOIN   
         (  
    SELECT B.MEMO_ID,B.LAST_UPDATE  
    FROM POSTACT_VOUCHER_LINK B   
    JOIN VM01106 C ON C.VM_ID = B.VM_ID   
    WHERE C.CANCELLED=0 AND B.XN_TYPE = 'PTC'   
         )VM  ON A.PEM_MEMO_ID = VM.MEMO_ID    
         WHERE    
          -- POSTING ONLY COMPANY OWN OR POSTING MARK IN FRANCHIES  
            (ISNULL(SL.LOC_TYPE,0)=1 OR ISNULL(SL.ACCOUNT_POSTING_AT_HO,0)=1) AND   
         /*PETTYCASH EXPENSE IS NOT CANCELLED.*/  
         ((A.CANCELLED=1 AND VM.MEMO_ID IS NOT NULL) OR A.CANCELLED=0)     
         /*PETTYCASH EXPENSES FOR LOCATIONS WHERE APPROVAL IS NOT ENABLED*/  
         AND AL.DEPT_ID IS NULL  
         /*PETTYCASH EXPENSE INV_DT IS LESS THAN THE SPECIFIED DATE.*/  
         AND A.PEM_MEMO_DT <= @DTTO  
         /*IF CUTOFF DATE IS SPECIFIED, CONSIDER PETTYCASH EXPENSE AFTER THE CUTOFF DATE*/  
         AND (ISNULL(@CCUTOFFDATE,'')='' OR A.PEM_MEMO_DT>@CCUTOFFDATE)  
         /*IF ACCOUNTS_DEPT_ID IS FILLED UP APPLY FILTER TO LOCATION.*/  
         AND (ISNULL(@CDEPTID,'')='' OR a.location_Code =@CDEPTID)  
         /*PETTYCASH EXPENSE IS NOT POSTED OR CORRESPONDING VOUCHER IS NOT CANCELLED*/  
         AND (VM.MEMO_ID IS NULL OR VM.LAST_UPDATE <> A.LAST_UPDATE)   
           
         SET @CSTEP=150  
         --PETTY CASH A/C MUST BE CONFIGURED FOR POSTING  
   SELECT @CPETTYCASHACCODE=ISNULL(PETTYCASHAC,'')  
   FROM PTCCONFIGMST  
        
      SET @CPETTYCASHACCODE=ISNULL(@CPETTYCASHACCODE,'')  
        
      IF (ISNULL(@CPETTYCASHACCODE,'') IN ('','0000000000'))  
   BEGIN  
    INSERT @ERRORS ( XN_TYPE, ERR_DESC )  
      VALUES ( 'PTC', 'PLEASE CONFIGURE PETTY CASH A/C.' )  
    GOTO ENDPROC     
   END  
    
   SET @CSTEP = 330  
   CREATE INDEX IX_TEMP_PTCTABLE_RM_ID ON #POSTS(MEMO_ID)  
    
   SET @CSTEP=340  
   ---GETTING LIST OF ALL ERROR FROM PETTYCASH EXPENSE AND CONVERT MRN TO BILL  
   INSERT INTO @ERRORS(XN_ID,XN_NO,XN_TYPE,ERR_DESC)  
   --GETTING ERROR LIST FROM PETTYCASH EXPENSE BILLS  
   SELECT DISTINCT PEM.PEM_MEMO_ID,PEM.PEM_MEMO_NO,'PTC' AS XN_TYPE  
      ,(CASE   
       WHEN ISNULL(PED.AC_CODE,'0000000000')='0000000000'   
        THEN 'EXPENSE ACCOUNT NOT SPECIFIED.'  
       WHEN PED.XN_AMOUNT=0  
        THEN 'ZERO VALUE EXPENSE.'  
       ELSE 'UNIDENTIFIED ERROR.' END) AS ERR_DESC    
   FROM PEM01106 PEM  
   JOIN PED01106 PED ON PEM.PEM_MEMO_ID=PED.PEM_MEMO_ID  
   JOIN #POSTS TPT ON PEM.PEM_MEMO_ID=TPT.MEMO_ID AND TPT.MODE='PTC'  
   WHERE   
   --GENERATE ERROR IF EXPENSE A/C IS NOT SPECIFIED.  
   ISNULL(PED.AC_CODE,'0000000000')='0000000000'   
   --GENERATE ERROR IS EXPENSE AMOUNT IS ZERO.  
   OR PED.XN_AMOUNT=0   
          
         SET @CSTEP = 350  
         --DELETE PEM_MEMO_ID FROM TEPM TABLE WHICH HAVE SOME ERROR  
         DELETE A   
         FROM #POSTS A   
         JOIN @ERRORS B ON A.MEMO_ID = B.XN_ID AND A.MODE=B.XN_TYPE  
           
         --SELECT COUNT(*) FROM #POSTS  
         SET @CSTEP = 360  
         IF OBJECT_ID('TEMPDB..#V_PROCESS','U') IS NOT NULL  
    DROP TABLE #V_PROCESS  
     
   SET @CSTEP = 370  
    SELECT   PM.PEM_MEMO_NO  
        , PM.PEM_MEMO_ID  
        , PM.PEM_MEMO_DT  
        , PD.AC_CODE  
        , PD.NARRATION  
        , PD.XN_AMOUNT*(CASE WHEN PD.XN_TYPE='CR' THEN -1 ELSE 1 END) AS XN_AMOUNT  
        , PM.FIN_YEAR  
        , ''  AS PARTY_NAME  
        , PD.REF_NO  
        ,'PTC' AS XN_TYPE  
        , PM.CANCELLED ,pm.location_Code as Dept_id 
   INTO #V_PROCESS  
   FROM PEM01106 PM   
   JOIN PED01106 PD ON PM.PEM_MEMO_ID=PD.PEM_MEMO_ID  
   JOIN #POSTS PT ON PT.MEMO_ID = PM.PEM_MEMO_ID AND PT.MODE='PTC'  
   WHERE HIDDENFROMAPPROVAL<>1  
     
  CREATE INDEX IX_V_PROCESS_RM_ID ON #V_PROCESS(PEM_MEMO_ID,XN_TYPE)  
    
  SELECT @CPEMMEMOID='',@CXNTYPE='',@CAC_CODE='',@NCTR=1  
  SET @CSTEP = 380  
  WHILE EXISTS(SELECT TOP 1 'U' FROM #V_PROCESS)  
  BEGIN  
   SET @CSTEP = 390  
   SELECT TOP 1 @CPEMMEMOID=PEM_MEMO_ID,@CXNTYPE=XN_TYPE,@CAC_CODE=AC_CODE FROM #V_PROCESS  
     
   SET @CSTEP = 400  
   --EXPENSE ACCOUNT SHOULD BE DEBITED/CREDITED WITH THE RESPECTIVE AMOUNT AS PER THE TRANSACTION  
   INSERT @VCHC ( AC_CODE, AMOUNT,NARRATION,XN_NO,XN_ID,XN_DT )  
   SELECT AC_CODE,XN_AMOUNT,NARRATION,PEM_MEMO_NO,PEM_MEMO_ID,PEM_MEMO_DT  
   FROM #V_PROCESS  
   WHERE PEM_MEMO_ID=@CPEMMEMOID  
     
   --PETTY CASH A/C SHOULD BE DEBITED/CREDITED WITH THE TOTAL AMOUNT  
   INSERT @VCHC ( AC_CODE, AMOUNT,NARRATION,XN_NO,XN_ID,XN_DT  )  
   SELECT @CPETTYCASHACCODE,-SUM(XN_AMOUNT)  
      ,'PETTY EXPENSES FOR DATE : '+LTRIM(RTRIM(CONVERT(VARCHAR,PEM_MEMO_DT,105)))  
       +' MEMO NO. : '+LTRIM(RTRIM(PEM_MEMO_NO)),REF_NO,PEM_MEMO_ID  ,PEM_MEMO_DT
   FROM #V_PROCESS   
   WHERE PEM_MEMO_ID=@CPEMMEMOID AND XN_AMOUNT>0  
   GROUP BY PEM_MEMO_DT,PEM_MEMO_NO,REF_NO,PEM_MEMO_ID  
   HAVING ABS(SUM(XN_AMOUNT))>0  
     
   --PETTY CASH A/C SHOULD BE DEBITED/CREDITED WITH THE TOTAL AMOUNT  
   INSERT @VCHC ( AC_CODE, AMOUNT,NARRATION,XN_NO,XN_ID,XN_DT )  
   SELECT @CPETTYCASHACCODE,-SUM(XN_AMOUNT)  
      ,'PETTY CASH RECEIPT FOR DATE : '+LTRIM(RTRIM(CONVERT(VARCHAR,PEM_MEMO_DT,105)))  
       +' MEMO NO. : '+LTRIM(RTRIM(PEM_MEMO_NO)),REF_NO,PEM_MEMO_ID ,PEM_MEMO_DT 
   FROM #V_PROCESS   
   WHERE PEM_MEMO_ID=@CPEMMEMOID AND XN_AMOUNT<0  
   GROUP BY PEM_MEMO_DT,PEM_MEMO_NO,REF_NO,PEM_MEMO_ID  
   HAVING ABS(SUM(XN_AMOUNT))>0  
       
   SET @CSTEP = 500  
   SET @CVMID = ''  
   SELECT @CVMID = A.VM_ID   
   FROM POSTACT_VOUCHER_LINK A  
    JOIN VM01106 B ON A.VM_ID=B.VM_ID  
     WHERE B.CANCELLED=0 AND A.MEMO_ID = @CPEMMEMOID AND A.XN_TYPE=@CXNTYPE  
     
   SET @CSTEP = 510  
   IF ISNULL(@CVMID,'') = ''  
   BEGIN  
       SET @CVMID = 'LATER-'+RTRIM(LTRIM(CONVERT(VARCHAR,@NCTR)))  
    SET @NCTR = @NCTR+1  
   END  
     
   SET @CSTEP = 520  
   INSERT INTO @VLINK(VM_ID ,MEMO_ID,XN_TYPE,LAST_UPDATE )  
   SELECT @CVMID,@CPEMMEMOID,@CXNTYPE,LAST_UPDATE FROM PEM01106 WHERE PEM_MEMO_ID = @CPEMMEMOID  
     
   SET @CSTEP = 530  
   INSERT @VDC (VM_ID, VD_ID, AC_CODE, NARRATION, DEBIT_AMOUNT, CREDIT_AMOUNT, X_TYPE,   
        CREDIT_DAYS, CR_DISCOUNT_PERCENTAGE,AC_NAME,VAT_ENTRY )  
   SELECT @CVMID  
    , 'LATER-'+CONVERT(VARCHAR,ROW_NUMBER() OVER(ORDER BY A.AC_CODE)) AS VD_ID  
    , A.AC_CODE  
    ,A.NARRATION AS NARRATION  
    ,(CASE WHEN SUM(AMOUNT)>0 THEN SUM(AMOUNT) ELSE 0 END) AS DEBIT_AMOUNT  
    ,(CASE WHEN SUM(AMOUNT)<0 THEN ABS(SUM(AMOUNT)) ELSE 0 END) AS CREDIT_AMOUNT  
    ,(CASE WHEN SUM(AMOUNT) > 0 THEN 'DR' ELSE 'CR' END) AS X_TYPE  
    ,A.CRDAYS  
    ,0  
    ,B.AC_NAME  
    ,A.ENTRY_ID   
         FROM @VCHC A  
         JOIN LMV01106 B ON A.AC_CODE = B.AC_CODE  
         WHERE XN_ID = @CPEMMEMOID  
         GROUP BY A.ENTRY_ID ,A.AC_CODE,A.NARRATION,B.AC_NAME,A.CRDAYS  
         ORDER BY X_TYPE,ABS(SUM(AMOUNT)) DESC  
     
         SET @CSTEP = 540  
         SELECT @NDRTOTAL =SUM(DEBIT_AMOUNT),@NCRTOTAL=SUM(CREDIT_AMOUNT) FROM @VDC  
      WHERE VM_ID = @CVMID  
        
        
      --BILL BY BILL REF  
      INSERT @TBILL_BY_BILL_REF  
	   (VD_ID,REF_NO,AMOUNT,LAST_UPDATE,X_TYPE,CR_DAYS,VM_ID)  
	   SELECT C.VD_ID  
		  ,(CASE WHEN ISNULL(A.REF_BILL_NO,'')='' THEN 
		  DBO.FN_GETBILLBYBILL_REFNO(A.AC_CODE,LTRIM(RTRIM(A.XN_NO)),A.XN_DT,(CASE WHEN C.DEBIT_AMOUNT<>0 THEN 'DR' ELSE 'CR' END),@CVMID)
		  ELSE A.REF_BILL_NO END) AS REF_NO  
		  ,ABS(SUM(A.AMOUNT)),GETDATE()  
		  ,(CASE WHEN C.DEBIT_AMOUNT<>0 THEN 'DR' ELSE 'CR' END) AS X_TYPE  
		  ,A.CRDAYS   
		  ,C.VM_ID
	   FROM @VCHC A   
	   JOIN LMV01106 B ON A.AC_CODE=B.AC_CODE  
	   JOIN @VDC C ON C.VAT_ENTRY =A.ENTRY_ID  
	   WHERE A.XN_ID=@CPEMMEMOID AND B.BILL_BY_BILL=1  
	   GROUP BY  A.CRDAYS ,(CASE WHEN ISNULL(A.REF_BILL_NO,'')='' THEN 
		  DBO.FN_GETBILLBYBILL_REFNO(A.AC_CODE,LTRIM(RTRIM(A.XN_NO)),A.XN_DT,(CASE WHEN C.DEBIT_AMOUNT<>0 THEN 'DR' ELSE 'CR' END),@CVMID)
		  ELSE A.REF_BILL_NO END),C.VD_ID,C.DEBIT_AMOUNT,C.VM_ID  
        
        
      SET @CSTEP = 550      
         SET @CVOUCHERNO = ''   
         SELECT TOP 1 @CVOUCHERNO = VOUCHER_NO FROM VM01106 WHERE VM_ID = @CVMID  
         IF ISNULL(@CVOUCHERNO,'') = ''  
    SET @CVOUCHERNO = @CVMID  
           
         SET @CSTEP = 560  
         INSERT @VMC ( VM_ID, VOUCHER_DT, VOUCHER_CODE, DEPT_ID,   
       BILL_TYPE, BILL_NO, BILL_ID, BILL_DT,   
       PARTY_NAME, QUANTITY, NET_AMOUNT, CANCELLED,DRTOTAL,CRTOTAL )  
   SELECT TOP 1 @CVMID,PEM_MEMO_DT,@CVOUCHERCODE,DEPT_ID AS DEPT_ID  
     ,@CXNTYPE,PEM_MEMO_NO,PEM_MEMO_ID,PEM_MEMO_DT,'',0,0,CANCELLED,@NDRTOTAL,@NCRTOTAL  
   FROM #V_PROCESS  
   WHERE PEM_MEMO_ID=@CPEMMEMOID  
     
   SET @CSTEP = 570  
   DELETE @VCHC  
     
     
      DELETE FROM #V_PROCESS WHERE PEM_MEMO_ID = @CPEMMEMOID AND XN_TYPE=@CXNTYPE  
  END         
  
ENDPROC:  
      
    SET @CSTEP = 580  
    SELECT * FROM @VMC ORDER BY VM_ID  
    SELECT * FROM @VDC ORDER BY VM_ID  
    SELECT * FROM @ERRORS  
    SELECT * FROM @VLINK ORDER BY VM_ID  
      
    SELECT A.*,A.REF_NO AS BILL_NO FROM @TBILL_BY_BILL_REF A  
     JOIN @VDC B ON A.VD_ID=B.VD_ID AND A.VM_ID=B.VM_ID  
     JOIN @VMC C ON B.VM_ID=C.VM_ID  
     LEFT OUTER JOIN @ERRORS D ON C.VOUCHER_DT=D.XN_DT AND D.XN_AC=B.AC_CODE 
     WHERE D.ERR_DESC IS NULL  
    
    END TRY  
 BEGIN CATCH  
  SELECT 'STEP:- '+@CSTEP+' '+ERROR_MESSAGE()AS  ERRMSG  
 END CATCH  
           
END 
--END OF PROCEDURE - POSTACT_PTC
