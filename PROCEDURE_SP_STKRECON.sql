CREATE PROC SP_STKRECON  
@NQUERYID INT,  
@CWHERE VARCHAR(200),  
@CMEMOID VARCHAR(20),  
@CREPID VARCHAR(20),  
@CDEPT_ID CHAR(7)  
--WITH ENCRYPTION
AS  

BEGIN  
  
 DECLARE @CCMD NVARCHAR(MAX)  
  
 IF @NQUERYID=1  
  GOTO LBLPENDINGRECON    
    
 ELSE IF @NQUERYID=2  
  GOTO LBLSTRECON_MST    
  
 ELSE IF @NQUERYID=3  
  GOTO LBLLOT   
    
 ELSE IF @NQUERYID=4  
  GOTO LBLLOTDET   
    
 ELSE IF @NQUERYID=5  
  GOTO LBLQUANTITYDETAILS     
    
 ELSE IF @NQUERYID=6  
  GOTO LBLPRODUCTDETAILS  
    
 ELSE IF @NQUERYID=7  
  GOTO LBLALREADYSCANNED  
    
 ELSE IF @NQUERYID=8  
  GOTO LBLEXCESSCAN  
   
 ELSE IF @NQUERYID=9  
  GOTO LBLRECONDETAILS  
    
 ELSE IF @NQUERYID=10  
  GOTO LBLACCESS  
    
 ELSE IF @NQUERYID=11  
  GOTO LBLSTARTRECON  
    
 ELSE IF @NQUERYID=12  
  GOTO LBLDELETELOT  
    
 ELSE IF @NQUERYID=13  
  GOTO LBLUPDATEBOX  
   
   
  
-- EXEC SP_STKRECON 1, '', '', '', '01'   
                               
LBLPENDINGRECON:   
  
  SELECT  CASE WHEN ISNULL(STM_END_DT ,'')='' THEN 'PENDING' ELSE CONVERT(CHAR(10),STM_END_DT, 105 )END   AS STM_END_DT,   
                CASE WHEN ISNULL(STM_START_DT ,'')='' THEN '' ELSE CONVERT(CHAR(10),STM_START_DT, 105 ) END AS STM_START_DT,  
                MEMO_ID, STM_TITLE,  RECONCILED, DEPT_ID, REP_ID, '' AS FILTER_CRITERIA,  '' AS  FILTER_DETAILS, REP_ID   
        FROM STKRECON_HEADER WHERE DEPT_ID=@CDEPT_ID   
        ORDER BY STM_START_DT DESC, MEMO_ID DESC   
          
 GOTO LAST  
  
  
LBLSTRECON_MST:   
  
  SELECT * FROM STKRECON_HEADER WHERE MEMO_ID= @CMEMOID   
  
  GOTO LAST  
  
  
LBLLOT:  
  
  SELECT A.LOT_NO,A.USER_CODE,B.USERNAME   
   FROM STKRECON_LOT_MST A (NOLOCK)   
   JOIN USERS B (NOLOCK) ON A.USER_CODE=B.USER_CODE   
   WHERE  A.MEMO_ID = @CMEMOID   
   ORDER BY B.USERNAME  
     
         GOTO LAST  
           
           
LBLLOTDET: -- FETCHING PRODUCT CODE  WISE QUANTITY DETAILS  FOR A LOT  
   
  SELECT B.PRODUCT_CODE,B.DEPT_ID, B.QUANTITY_IN_STOCK,B.QUANTITY_IN_STOCK AS [STRECON_PHYSICAL_QTY]
  --,B.EXCESS_QTY AS [STRECON_EXCESS_QTY]
  , C.ARTICLE_NO,B.BARCODE_CODING_SCHEME AS CODING_SCHEME,D.PARA1_NAME, E.PARA2_NAME,P3.PARA3_NAME,   
      F.LOT_NO,F.QUANTITY,CAST(0 AS NUMERIC)AS RETAINED,CAST(0 AS NUMERIC) AS CODING_SCHEME,B.*
  FROM PMTVIEW_STK B (NOLOCK) 
  JOIN STKRECON_LOT_DET F (NOLOCK) ON B.PRODUCT_CODE = F.PRODUCT_CODE   
  JOIN STKRECON_LOT_MST G (NOLOCK) ON  F.LOT_NO = G.LOT_NO   
  JOIN ARTICLE C (NOLOCK) ON B.ARTICLE_CODE = C.ARTICLE_CODE   
  JOIN PARA1 D (NOLOCK) ON B.PARA1_CODE = D.PARA1_CODE  
  JOIN PARA2 E (NOLOCK) ON B.PARA2_CODE = E.PARA2_CODE   
  JOIN PARA3 P3 (NOLOCK) ON B.PARA3_CODE = P3.PARA3_CODE   
  WHERE F.LOT_NO =@CWHERE     
  AND B.DEPT_ID= @CDEPT_ID  --AND B.STRECON_ID = @CREPID   
  ORDER BY B.PRODUCT_CODE   
    
  GOTO LAST  
   
                   
LBLQUANTITYDETAILS:  
  
  SELECT  ISNULL(SUM(QUANTITY_IN_STOCK),0) AS QUANTITY_IN_STOCK
  --, ISNULL(SUM(SCANNED_QTY),0) AS SCANNED_QTY 
  --, ISNULL(SUM(SHORTAGE_QTY),0) AS SHORTAGE_QTY
  --, ISNULL(SUM(EXCESS_QTY),0)  AS EXCESS_QTY  
 FROM PMTVIEW_STK  A   
 WHERE A.DEPT_ID  = @CDEPT_ID    
 AND A.REP_ID = @CREPID   
                      
  GOTO LAST  
               
                                  
 LBLPRODUCTDETAILS:                              
         SELECT B.*,B.PRODUCT_CODE,B.DEPT_ID ,B.QUANTITY_IN_STOCK,   
                ISNULL(B.QUANTITY_IN_STOCK,0) AS PHYSICAL_QTY   
                --,ISNULL(B.EXCESS_QTY ,0) AS EXCESS_QTY
                , ARTICLE.ARTICLE_NO,   
                B.BARCODE_CODING_SCHEME AS CODING_SCHEME,D.PARA1_NAME, E.PARA2_NAME,P3.PARA3_NAME,
                CAST('LATER01' AS CHAR(7)) AS LOT_NO ,   
                B.QUANTITY_IN_STOCK AS QUANTITY, B.REP_ID   
         FROM PMTVIEW_STK  B (NOLOCK)   
         JOIN ARTICLE  (NOLOCK) ON B.ARTICLE_CODE = ARTICLE.ARTICLE_CODE    
         JOIN  PARA1 D (NOLOCK) ON B.PARA1_CODE = D.PARA1_CODE    
         JOIN  PARA2 E (NOLOCK) ON B.PARA2_CODE = E.PARA2_CODE    
         JOIN  PARA3 P3 (NOLOCK) ON B.PARA3_CODE = P3.PARA3_CODE    
         WHERE B.PRODUCT_CODE = @CWHERE  AND B.DEPT_ID = @CDEPT_ID     
                    
  GOTO LAST  
LBLALREADYSCANNED:  
  
 SELECT COUNT(PRODUCT_CODE ) FROM STKRECON_LOT_DET A(NOLOCK)   
 JOIN STKRECON_LOT_MST B ON A.LOT_NO = B.LOT_NO   
 WHERE B.MEMO_ID = @CMEMOID  AND A. PRODUCT_CODE = @CWHERE   
   
 GOTO LAST  
           
  
LBLEXCESSCAN:   
  
   SELECT PRODUCT_CODE   
         FROM STKRECON_LOT_DET STLD (NOLOCK)     
         JOIN STKRECON_LOT_MST STLM (NOLOCK) ON STLD.LOT_NO = STLM.LOT_NO      
         WHERE STLM.MEMO_ID = @CMEMOID       
         AND PRODUCT_CODE IN   
         (      
				SELECT A.PRODUCT_CODE      
				FROM STKRECON_LOT_DET A (NOLOCK)   
				JOIN PMTVIEW_STK B (NOLOCK) ON A.PRODUCT_CODE = B.PRODUCT_CODE     
				JOIN ARTICLE C (NOLOCK) ON B.ARTICLE_CODE = C.ARTICLE_CODE  AND B.BARCODE_CODING_SCHEME=3   
				JOIN STKRECON_LOT_MST D ON A.LOT_NO = D.LOT_NO     
				JOIN STKRECON_HEADER E ON D.MEMO_ID = E.MEMO_ID      
				WHERE D.MEMO_ID = @CMEMOID     
				AND E. DEPT_ID = @CDEPT_ID      
				AND D.LOT_NO = @CWHERE   
         )     
         GROUP BY PRODUCT_CODE      
         HAVING SUM(QUANTITY) > 1   
           
  GOTO LAST  
  
  
LBLRECONDETAILS:  
  
    SELECT  @CMEMOID  AS MEMO_ID, SUM(A.QUANTITY_IN_STOCK) AS QUANTITY_IN_STOCK
			--,SUM(A.SCANNED_QTY) AS SCANNED_QTY    
   --         ,SUM(A.SHORTAGE_QTY) AS SHORTAGE_QTY 
   --         ,SUM( A.EXCESS_QTY) AS EXCESS_QTY 
   --         ,SUM(A.EXCESS_QTY_REALIZED) AS EXCESS_QTY_REALIZED
            ,D.SECTION_NAME , C.SUB_SECTION_NAME ,C.SUB_SECTION_CODE, '' AS ROW_ID    
             FROM PMTVIEW_STK A   
             JOIN ARTICLE ART (NOLOCK) ON A.ARTICLE_CODE = ART.ARTICLE_CODE    
             JOIN SECTIOND C (NOLOCK) ON ART.SUB_SECTION_CODE = C.SUB_SECTION_CODE   
             JOIN SECTIONM  D (NOLOCK) ON C.SECTION_CODE = D.SECTION_CODE    
             WHERE A.DEPT_ID= @CDEPT_ID  AND A.REP_ID= @CREPID   
             GROUP BY D.SECTION_NAME , C.SECTION_CODE, C.SUB_SECTION_NAME , C.SUB_SECTION_CODE  
             HAVING SUM(A.QUANTITY_IN_STOCK)>0 
					--OR SUM(A.SCANNED_QTY) >0 OR     
     --               SUM(A.SHORTAGE_QTY) >0 OR SUM( A.EXCESS_QTY) >0 OR    
     --               SUM(A.EXCESS_QTY_REALIZED)>0    
             ORDER BY D.SECTION_NAME , C.SUB_SECTION_NAME    
                          
   GOTO LAST  
     
  
LBLACCESS:  
  
  SELECT COUNT(*) FROM USER_ROLE_DET A
  JOIN USERS B ON A.ROLE_ID=B.ROLE_ID
  WHERE FORM_NAME = 'FRMSTRECON'  AND USER_CODE = @CWHERE    
  AND FORM_OPTION = 'ACCESS' AND VALUE = '1'   
    
  GOTO LAST  
  
      
  
    
    
LBLSTARTRECON:   
    
  UPDATE PMT01106 SET REP_ID =''    
  FROM STKRECON_HEADER B WHERE PMT01106.REP_ID =B.REP_ID   
  AND B.RECONCILED = 1   
    
  
  IF EXISTS(SELECT PRODUCT_CODE  
  FROM PMT01106 (NOLOCK)   
  WHERE QUANTITY_IN_STOCK <0   
  AND DEPT_ID=@CDEPT_ID  AND ISNULL(REP_ID,'')='' )  
    
  BEGIN  
   SELECT 'NEGATIVE STOCK FOUND. \N PLZ SETTLE NEGATIVE STOCK BEFORE STARTING STOCK RECONCILATION...'  
   GOTO LAST   
  END   
    
  --UPDATE PMT01106 SET   
  --PHYSICAL_QTY= 0,EXCESS_QTY = 0   
  --WHERE  (PHYSICAL_QTY<> 0 OR EXCESS_QTY <> 0   
  --OR PHYSICAL_QTY IS NULL OR EXCESS_QTY IS NULL) AND   
  --DEPT_ID= @CDEPT_ID AND ISNULL(REP_ID,'')=''   
GOTO LAST    
  
  
--  UPDATE PMT01106 SET REP_ID =''  

--SELECT * FROM PMT01106  WHERE REP_ID <> '' 
--SELECT * FROM STKRECON_LOT_DET WHERE REP_ID ='STK0000010' 

--SELECT * FROM STKRECON_LOT_MST 
--SELECT * FROM STKRECON_LOT_HEADER 
--  SELECT A.PRODUCT_CODE,*  ,   
--           C.DEPT_ID  
--         FROM STKRECON_LOT_DET (NOLOCK) A    
--         JOIN STKRECON_LOT_MST (NOLOCK) B ON  A.LOT_NO = B.LOT_NO    
--           JOIN STKRECON_HEADER (NOLOCK) C ON B.MEMO_ID = C.MEMO_ID 
--			WHERE C.REP_ID ='STK0000010'
--			ORDER BY A.PRODUCT_CODE 
  
LBLDELETELOT:  
  
  -- UPDATE PMT01106 SET    
  --  EXCESS_QTY   = (CASE WHEN ISNULL(EXCESS_QTY,0) > B.QUANTITY    
  --      THEN ISNULL(EXCESS_QTY,0) - B.QUANTITY ELSE 0 END ),  
  --  PHYSICAL_QTY = (CASE WHEN ( B.QUANTITY - ISNULL(EXCESS_QTY,0) ) > 0   
  --      THEN   
  --      ( CASE WHEN ISNULL(QUANTITY_IN_STOCK,0) - ( B.QUANTITY - ISNULL(EXCESS_QTY,0) )>0    
  --       THEN ISNULL(QUANTITY_IN_STOCK,0) - ( B.QUANTITY - ISNULL(EXCESS_QTY,0) )    
  --       ELSE 0 END )    
  --     ELSE ISNULL(QUANTITY_IN_STOCK,0) END )   
  --FROM   
  --(     
  -- SELECT PRODUCT_CODE, SUM(QUANTITY) AS QUANTITY   
  --   FROM STKRECON_LOT_DET   
  -- WHERE LOT_NO = @CWHERE  
  -- GROUP BY PRODUCT_CODE    
  -- ) B    
  --WHERE(B.PRODUCT_CODE = PMT01106.PRODUCT_CODE )   
  -- AND PMT01106.DEPT_ID= @CDEPT_ID  AND REP_ID = @CREPID  
     
   DELETE FROM STKRECON_LOT_DET WHERE LOT_NO = @CWHERE  
        
   DELETE FROM STKRECON_LOT_MST WHERE LOT_NO =@CWHERE  
  
  
  GOTO LAST  
  
  
  
LBLUPDATEBOX:  
  
   --UPDATE PMT01106 SET    
   --  PHYSICAL_QTY= (CASE WHEN ( ISNULL(PHYSICAL_QTY,0) + B.QUANTITY ) > QUANTITY_IN_STOCK      
   --  THEN QUANTITY_IN_STOCK ELSE ( ISNULL(PHYSICAL_QTY,0) + B.QUANTITY ) END ),    
   --  EXCESS_QTY =   (CASE WHEN ( (B.QUANTITY + ISNULL(PHYSICAL_QTY,0) + ISNULL(EXCESS_QTY ,0))-QUANTITY_IN_STOCK) > 0      
   --  THEN (B.QUANTITY + ISNULL(PHYSICAL_QTY,0) + ISNULL(EXCESS_QTY ,0))-QUANTITY_IN_STOCK ELSE 0 END )      
   --      FROM     
   --      (     
   --      SELECT A.PRODUCT_CODE, SUM(A.QUANTITY) AS QUANTITY  ,   
   --        C.DEPT_ID  
   --      FROM STKRECON_LOT_DET (NOLOCK) A    
   --      JOIN STKRECON_LOT_MST (NOLOCK) B ON  A.LOT_NO = B.LOT_NO    
   --        JOIN STKRECON_HEADER (NOLOCK) C ON B.MEMO_ID = C.MEMO_ID    
   --      WHERE B.LOT_NO = @CWHERE     
   --      GROUP BY PRODUCT_CODE, C.DEPT_ID   
   --      ) B     
   --      WHERE B.PRODUCT_CODE = PMT01106.PRODUCT_CODE  AND PMT01106.DEPT_ID= B.DEPT_ID  
   --      AND PMT01106.REP_ID  = @CREPID   
           
         GOTO LAST  
LAST:  
  
END
