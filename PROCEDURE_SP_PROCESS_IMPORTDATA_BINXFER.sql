create PROCEDURE SP_PROCESS_IMPORTDATA_BINXFER
@CSOURCETABLE VARCHAR(200),
@CUSER_CODE VARCHAR(10)=''
AS
BEGIN
	
	BEGIN TRY

		DECLARE @OUTPUT TABLE(TYPE VARCHAR(50),MESSAGE VARCHAR(200),VALUE VARCHAR(200)) 
		
		DECLARE @TERROR TABLE(SORTORDER INT,TYPE VARCHAR(50),MESSAGE VARCHAR(200),VALUE VARCHAR(200)) 
		
		DECLARE @TNUMCOLUM TABLE (NUMERICCOLUMN VARCHAR(100))

		DECLARE @CCMD NVARCHAR(MAX),@NSTEP INT,@CERRORMSG VARCHAR(MAX),@CCOLNAME VARCHAR(100),@BPROCEED BIT
		,@BDONOTCREATEMASTER BIT,@CPARA1NAME VARCHAR(50),@CPARA2NAME VARCHAR(50),@CPARA3NAME VARCHAR(50)
		,@CPARA4NAME VARCHAR(50),@CPARA5NAME VARCHAR(50),@CPARA6NAME VARCHAR(50),@CPOROWID VARCHAR(MAX)
		,@CSEARCHBUDGETPLAN VARCHAR(200)
		
		
		SELECT @CSOURCETABLE=REPLACE(@CSOURCETABLE,'[','')
		SELECT @CSOURCETABLE=REPLACE(@CSOURCETABLE,']','')
		
		SET @NSTEP=10
			
		INSERT INTO @TNUMCOLUM 
		SELECT 'QUANTITY' 
		
		SET @NSTEP=20
		WHILE EXISTS (SELECT TOP 1 * FROM  @TNUMCOLUM)
		BEGIN
			 SET @CCOLNAME = (SELECT TOP 1 NUMERICCOLUMN FROM @TNUMCOLUM)

			 SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM SYSCOLUMNS WHERE ID=OBJECT_ID('''+@CSOURCETABLE+''')
									   AND NAME='''+@CCOLNAME+''')		
							SET @BPROCEED=1
						 ELSE
							SET @BPROCEED=0'
			 EXEC SP_EXECUTESQL  @CCMD,N'@BPROCEED BIT OUTPUT',@BPROCEED OUTPUT
			 
			 SET @NSTEP=30
			 IF @BPROCEED=1
			 BEGIN
			 					 	 			   		 
				 SET @CCMD = N'SELECT ''ALERT'' AS TYPE, '''+@CCOLNAME+' SHOULD BE NUMERIC AND NOT NEGATIVE'' AS MESSAGE,'+@CCOLNAME+' AS VALUE
							   FROM '+@CSOURCETABLE+' WHERE (ISNUMERIC('+@CCOLNAME+') = 0 OR LEFT(LTRIM('+@CCOLNAME+'),1) = ''-'' OR CHARINDEX('','','+@CCOLNAME+')>0) AND '+@CCOLNAME+' IS NOT NULL' 
				 PRINT @CCMD
				 INSERT INTO @TERROR(TYPE,MESSAGE,VALUE)
				 EXEC SP_EXECUTESQL @CCMD
				 
			 END
			
			 DELETE FROM @TNUMCOLUM WHERE NUMERICCOLUMN= @CCOLNAME
		END
			
		SET @NSTEP=40
		DECLARE @CROWID VARCHAR(200),@CFILTER VARCHAR(200),@NLOOP INT
		
		--SET @CCMD=N'UPDATE '+@CSOURCETABLE+' SET ROW_ID=''LATER_''+LTRIM(RTRIM(NEWID()))'
		--PRINT @CCMD
		--EXEC SP_EXECUTESQL @CCMD
		
	   SET @NSTEP=50  

	  
	  IF OBJECT_ID('TEMPDB..#TMPMASTERSENC','U') IS NOT NULL
			DROP TABLE #TMPMASTERSENC
	  
	  SELECT BIN_ID,BIN_NAME,
	         SOURCE_BIN_ID=BIN_ID ,
	         SOURCE_BIN_NAME= BIN_NAME
	  INTO #TMPMASTERSENC FROM BIN
	  WHERE 1=2
	  
	  SET @NSTEP=70  
	  SET @CCMD=N'INSERT #TMPMASTERSENC (BIN_ID,BIN_NAME,SOURCE_BIN_ID,SOURCE_BIN_NAME)  
			      SELECT DISTINCT '''' AS BIN_ID,ISNULL(ITEM_TARGET_BIN_NAME,''''),
			      '''' AS SOURCE_BIN_ID,ISNULL(SOURCE_BIN_NAME,'''')
			      FROM '+@CSOURCETABLE 
		  
	  PRINT      @CCMD                     
	  EXEC SP_EXECUTESQL @CCMD                         
				

	  SET @NSTEP=80  
	  INSERT @TERROR(SORTORDER,TYPE,VALUE,MESSAGE)
		--LIST OF NEW BINS
	  SELECT DISTINCT 3,'BIN',A.BIN_NAME,'BIN DOES NOT EXIST.'
	  FROM #TMPMASTERSENC A
	  LEFT JOIN BIN B(NOLOCK) ON A.BIN_NAME=B.BIN_NAME
	  WHERE B.BIN_NAME IS NULL
	  UNION 
	  SELECT DISTINCT 4,'BIN',A.SOURCE_BIN_NAME,'SOURCE BIN DOES NOT EXIST.'
	  FROM #TMPMASTERSENC A
	  LEFT JOIN BIN B(NOLOCK) ON A.SOURCE_BIN_NAME=B.BIN_NAME
	  WHERE B.BIN_NAME IS NULL
	  

		IF NOT EXISTS (SELECT TOP 1 * FROM @TERROR)
		BEGIN
			
			SET @NSTEP=150	
		    SET @CCMD=N'UPDATE '+@CSOURCETABLE+' SET QUANTITY=ISNULL(QUANTITY,0),  
					   ITEM_TARGET_BIN_NAME=ISNULL(ITEM_TARGET_BIN_NAME,'''')'  
		    PRINT @CCMD  
		    EXEC SP_EXECUTESQL @CCMD 

		END
		
		if @CUSER_CODE not in('','0000000')
		begin
		
		     INSERT @TERROR(SORTORDER,TYPE,VALUE,MESSAGE)
	         SELECT DISTINCT 4,'BIN',A.SOURCE_BIN_NAME,'USER DOENT ALLOW TO ACCESS BIN'
		     FROM #TMPMASTERSENC A
		     JOIN BIN B(NOLOCK) ON A.SOURCE_BIN_NAME=B.BIN_NAME
		     LEFT JOIN BINUSERS C (NOLOCK) ON B.MAJOR_BIN_ID =C.BIN_ID and c.user_code =@CUSER_CODE 
		     where c.user_code is null
		end
	
		
	
		DECLARE @TERROR1 TABLE(PRODUCT_CODE VARCHAR(100),SOURCE_BIN_NAME VARCHAR(100),SHORTAGE_QTY NUMERIC(10,2), MESSAGE VARCHAR(200)) 	
		
		SET @CCMD=N' SELECT A.PRODUCT_CODE,A.SOURCE_BIN_NAME,
		CAST(A.QUANTITY AS NUMERIC(10,2))-ISNULL(QUANTITY_IN_STOCK,0) AS SHORTAGE_QTY ,
		MESSAGE=''SHORTAGE QTY''
		FROM
		(
		SELECT 
		A.PRODUCT_CODE,A.SOURCE_BIN_NAME,BIN.BIN_ID,
		SUM(CAST(A.QUANTITY AS NUMERIC(10,2))) AS QUANTITY 
		FROM '+@CSOURCETABLE+' A 
		JOIN BIN ON A.SOURCE_BIN_NAME=BIN.BIN_NAME
		GROUP BY A.PRODUCT_CODE,A.SOURCE_BIN_NAME,BIN.BIN_ID
		) A
		LEFT OUTER JOIN
		(
		SELECT  CASE WHEN CHARINDEX(''@'',B.PRODUCT_CODE)=0 THEN B.PRODUCT_CODE 
		        ELSE SUBSTRING (B.PRODUCT_CODE,1, CHARINDEX(''@'',B.PRODUCT_CODE)-1) END AS PRODUCT_CODE,
		 BIN_ID,SUM(QUANTITY_IN_STOCK) AS QUANTITY_IN_STOCK
		 FROM PMT01106 B
		 WHERE QUANTITY_IN_STOCK>0
		  GROUP BY CASE WHEN CHARINDEX(''@'',B.PRODUCT_CODE)=0 THEN B.PRODUCT_CODE 
		        ELSE SUBSTRING (B.PRODUCT_CODE,1, CHARINDEX(''@'',B.PRODUCT_CODE)-1) END ,
		 BIN_ID       
		) B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.BIN_ID=B.BIN_ID
		WHERE CAST(A.QUANTITY AS NUMERIC(10,2)) >ISNULL(QUANTITY_IN_STOCK,0)
		'
		PRINT @CCMD
		INSERT INTO @TERROR1(PRODUCT_CODE,SOURCE_BIN_NAME,SHORTAGE_QTY,MESSAGE)
		EXEC SP_EXECUTESQL @CCMD
		

		SET @CCMD=N' SELECT ''Alert'',A.PRODUCT_CODE,MESSAGE=''NOT AN INVENTORY ITEM''
		FROM '+@CSOURCETABLE+' A 
		JOIN SKU_NAMES B (NOLOCK) ON B.PRODUCT_CODE=A.PRODUCT_CODE
		WHERE ISNULL(B.sku_item_type,0)<>1
		'
		PRINT @CCMD
		INSERT INTO @TERROR(TYPE,VALUE,MESSAGE)
		EXEC SP_EXECUTESQL @CCMD

		GOTO END_PROC
		
	END TRY
	
	BEGIN CATCH
		SET @CERRORMSG = 'PROCEDURE SP_PROCESS_IMPORTDATA_BINXFR : STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		
		
		GOTO END_PROC
	END CATCH
	
END_PROC:

IF ISNULL (@CERRORMSG,'') = '' AND NOT EXISTS (SELECT TOP 1 'U' FROM @TERROR) AND NOT EXISTS (SELECT TOP 1 'U' FROM @TERROR1)
BEGIN
	SET @CCMD=N'SELECT A.PRODUCT_CODE,SBIN.BIN_ID AS SOURCE_BIN_ID, BIN.BIN_ID AS ITEM_TARGET_BIN_ID,QUANTITY,ARTICLE_NO,SECTION_NAME,
	SUB_SECTION_NAME,PARA1_NAME,PARA2_NAME,
	PARA3_NAME,PARA4_NAME,PARA5_NAME,PARA6_NAME,b.mrp as Fco_mrp
	FROM '+@CSOURCETABLE+' A
	JOIN BIN(NOLOCK) ON BIN.BIN_NAME=A.ITEM_TARGET_BIN_NAME
	JOIN SKU B (NOLOCK) ON B.PRODUCT_CODE=A.PRODUCT_CODE
	JOIN ARTICLE C (NOLOCK) ON C.ARTICLE_CODE=B.ARTICLE_CODE
	JOIN SECTIOND SD (NOLOCK) ON SD.SUB_SECTION_CODE=C.SUB_SECTION_CODE
	JOIN SECTIONM SM (NOLOCK) ON SM.SECTION_CODE=SD.SECTION_CODE
	JOIN PARA1 P1 (NOLOCK) ON P1.PARA1_CODE=B.PARA1_CODE
	JOIN PARA2 P2 (NOLOCK) ON P2.PARA2_CODE=B.PARA2_CODE
	JOIN PARA3 P3 (NOLOCK) ON P3.PARA3_CODE=B.PARA3_CODE
	JOIN PARA4 P4 (NOLOCK) ON P4.PARA4_CODE=B.PARA4_CODE
	JOIN PARA5 P5 (NOLOCK) ON P5.PARA5_CODE=B.PARA5_CODE
	JOIN PARA6 P6 (NOLOCK) ON P6.PARA6_CODE=B.PARA6_CODE
	JOIN BIN SBIN (NOLOCK) ON SBIN.BIN_NAME=A.SOURCE_BIN_NAME'
	
	EXEC SP_EXECUTESQL @CCMD
END	
ELSE
BEGIN
	INSERT @OUTPUT ( TYPE, MESSAGE,VALUE) VALUES('ERROR',@CERRORMSG,'')

	IF (SELECT TOP 1 'U' FROM @TERROR) = 'U'
		SELECT TYPE,VALUE,MESSAGE FROM @TERROR
		ORDER BY SORTORDER
     ELSE IF (SELECT TOP 1 'U' FROM @TERROR1) = 'U'
       SELECT * FROM @TERROR1
	 ELSE	
		SELECT * FROM @OUTPUT
	END
END
	
---END OF PROCEDURE - SP_PROCESS_IMPORTDATA_BINXFR
