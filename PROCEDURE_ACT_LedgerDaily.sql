create PROCEDURE ACT_LEDGERDAILY 
(	
		@CACCODE VARCHAR(20), 
		@CDEPTID VARCHAR(4), 
		@DFROMDT DATETIME, 
		@DTODT DATETIME,
		@CFINYEAR VARCHAR(10), 
		@CCOMPANYCODE VARCHAR(2), 
		@NDIVFACTOR NUMERIC(14) = 1
)
--WITH ENCRYPTION
AS
BEGIN
	DECLARE @CTMPACCODE VARCHAR(20), 
			@NOPENING NUMERIC(14,2),
			@NCLOSING NUMERIC(14,2)

	IF @NDIVFACTOR <= 0 
		SET @NDIVFACTOR = 1

	DECLARE @LEDGERC TABLE ( AC_CODE VARCHAR(20), MONTH_NAME VARCHAR(20), DAY_NO INT, DATE DATETIME, 
							 DEBIT NUMERIC(14,2), CREDIT NUMERIC(14,2), CLOSING NUMERIC(14,2), CLOSING_CR_DR CHAR(2) )

	-- GETTING ALL DATES IN GIVEN PERIOD
	DECLARE @DAYC TABLE ( MONTH_NAME VARCHAR(20), DAY_NO INT, DATE DATETIME )
	DECLARE	@DTEMPDATE DATETIME, 
			@NCTR INT

	-- TEMP TABLE TO STORED THE LIST OF LOCATIONS CURRENTLY SELECTED
	-- JOIN THIS TABLE IN EACH QUERY TO GET THE RESULT FOR SINGLE, MULTIPLE OR ALL LOCATIONS
	DECLARE @LOCLISTC TABLE ( DEPT_ID CHAR(4) )
	
	IF @CDEPTID <> ''
		INSERT @LOCLISTC VALUES ( @CDEPTID )
	ELSE
	BEGIN
		IF EXISTS ( SELECT TOP 1 DEPT_ID FROM ACT_FILTER_LOC WHERE SP_ID = @@SPID )
			INSERT @LOCLISTC
			SELECT DEPT_ID FROM ACT_FILTER_LOC WHERE SP_ID = @@SPID
		ELSE
			INSERT @LOCLISTC
			SELECT DEPT_ID FROM LOCATION WHERE LOC_TYPE=1 AND DEPT_ID=MAJOR_DEPT_ID
	END


	SET @DTEMPDATE = @DFROMDT

	WHILE @DTEMPDATE <= @DTODT
	BEGIN

		INSERT @DAYC 
		SELECT DATENAME(MM, @DTEMPDATE ) AS MONTH_NAME, DATEPART(DD, @DTEMPDATE) AS DAY_NO, @DTEMPDATE AS DATE

		SET @DTEMPDATE = DATEADD( DD, 1, @DTEMPDATE) 
	END

	IF @CACCODE = ''		-- IN CASE THE SUPPLIED AC_CODE IS EMPTY THEN IT IS IN MULTI LEDGER MODE
	BEGIN
		DECLARE MULTILEDGER CURSOR FOR
		SELECT AC_CODE FROM LM01106 WHERE PRINT_LEDGER = 1
	END
	ELSE
	BEGIN
		DECLARE MULTILEDGER CURSOR FOR
		SELECT @CACCODE
	END

	OPEN MULTILEDGER
	FETCH NEXT FROM MULTILEDGER INTO @CTMPACCODE 
	WHILE @@FETCH_STATUS = 0
	BEGIN

		SELECT  @NOPENING = 0, 
				@NCLOSING = 0

		--*** TO GET OPENING BALANCE OF A GIVEN ACCOUNT
		SELECT @NOPENING = DBO.FN_ACT_OPENING( @CTMPACCODE, @CDEPTID, @DFROMDT, @CFINYEAR, @CCOMPANYCODE )

		-- INSERTING DEBIT AND CREDIT ENTERIES IN @LEDGERC TABLE 
		INSERT @LEDGERC ( AC_CODE, MONTH_NAME, DAY_NO, DATE, DEBIT, CREDIT, CLOSING, CLOSING_CR_DR )
		SELECT @CTMPACCODE AS AC_CODE, X.MONTH_NAME, X.DAY_NO, X.DATE, ISNULL(Y.DEBIT,0) AS DEBIT, ISNULL(Y.CREDIT,0) AS CREDIT, 
			   ISNULL(Y.CLOSING,0) AS CLOSING, ISNULL(Y.CLOSING_CR_DR,'') AS CLOSING_CR_DR
		FROM @DAYC X
		LEFT OUTER JOIN
		(
				SELECT  DATENAME(MM, B.VOUCHER_DT) AS MONTH_NAME, 
						DATEPART(DD, B.VOUCHER_DT) AS DAY_NO,
						B.VOUCHER_DT AS DATE,
				SUM(A.DEBIT_AMOUNT) AS DEBIT, 
				SUM(A.CREDIT_AMOUNT) AS CREDIT, 0 AS CLOSING, SPACE(2) AS CLOSING_CR_DR
				FROM VD01106 A
				JOIN VM01106 B ON B.VM_ID = A.VM_ID
				JOIN @LOCLISTC LOCLIST ON B.location_code  = LOCLIST.DEPT_ID
				WHERE A.AC_CODE = @CTMPACCODE
				AND B.VOUCHER_DT BETWEEN @DFROMDT AND @DTODT
				AND B.CANCELLED = 0  AND ISNULL(B.OP_ENTRY,0)=0  AND ISNULL(B.MEMO,0)=0 
				AND A.COMPANY_CODE = @CCOMPANYCODE AND B.FIN_YEAR = @CFINYEAR
--				AND B.DEPT_ID = ( CASE WHEN @CDEPTID <> '' THEN @CDEPTID ELSE B.DEPT_ID END )		-- IGNORE THIS LINE IF DEPTID IS NOT PROVIDED
				GROUP BY B.VOUCHER_DT
		) Y ON ( X.DATE = Y.DATE )

		-- UPDATING CLOSING BALANCE
		UPDATE @LEDGERC SET @NCLOSING = CLOSING = ( @NCLOSING + DEBIT - CREDIT )
		WHERE AC_CODE = @CTMPACCODE

		UPDATE @LEDGERC SET CLOSING = ABS(CLOSING + @NOPENING), CLOSING_CR_DR = (CASE WHEN (CLOSING + @NOPENING)>0 THEN 'DR' ELSE 'CR' END )
		WHERE AC_CODE = @CTMPACCODE

		-- APPLYING DIVISION FACTOR (IF ANY)
		IF @NDIVFACTOR > 1
			UPDATE @LEDGERC SET DEBIT = ROUND( DEBIT/@NDIVFACTOR, 2 ), 
				CREDIT = ROUND( CREDIT/@NDIVFACTOR, 2 ),
				CLOSING = ROUND( CLOSING/@NDIVFACTOR, 2 )
			WHERE AC_CODE = @CTMPACCODE

		FETCH NEXT FROM MULTILEDGER INTO @CTMPACCODE 
	END						-- END OF MULTILEDGER SCOPE
	CLOSE MULTILEDGER
	DEALLOCATE MULTILEDGER

	-- PRODUCING OUTPUT
	SELECT A.*, B.AC_NAME, B.ADDRESS0, B.ADDRESS1, B.ADDRESS2, B.AREA_NAME, B.PINCODE, B.CITY, B.STATE
	FROM @LEDGERC A JOIN LMV01106 B ON A.AC_CODE = B.AC_CODE ORDER BY B.AC_NAME
END
