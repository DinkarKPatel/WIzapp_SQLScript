CREATE PROCEDURE SAVETRAN_FLOOR_TRANSFER  
(  
 @NUPDATEMODE  NUMERIC(1,0),  
 @NSPID    VARCHAR(50),  
 @CMEMONOPREFIX  VARCHAR(50),  
 @CFINYEAR   VARCHAR(10),  
 @CMEMOID   VARCHAR(40)='',  
 @DRECEIPTDT   DATETIME = '',
 @BOX_NO    VARCHAR(5),
 @ITEM_CODE  VARCHAR(50) ,
 @bAllowNegative	BIT=0
   
)  
--WITH ENCRYPTION
AS  
BEGIN  
  
  --IN CASE OF @BOX_NO =0 IN @NUPDATEMODE=2 ALL RECOD OF FLOOR ST DET OF CURRENT MEMO IN UPLOAD TABLES
  --@BOX_NO >0 only New record in upload tables @NUPDATEMODE (1,2)
  
 DECLARE @CTEMPDBNAME   VARCHAR(100),  
   @CMASTERTABLENAME  VARCHAR(100),  
   @CDETAILTABLENAME  VARCHAR(100),  
   @CTEMPMASTERTABLENAME VARCHAR(100),  
   @CTEMPDETAILTABLENAME VARCHAR(100),  
   @CTEMPMASTERTABLE  VARCHAR(100),  
   @CTEMPDETAILTABLE  VARCHAR(100),  
   @CERRORMSG    VARCHAR(500),  
   @LDONOTUPDATESTOCK  BIT,  
   @CKEYFIELD1    VARCHAR(50),  
   @CKEYFIELDVAL1   VARCHAR(50),  
   @CMEMONO    VARCHAR(20),  
   @NMEMONOLEN    NUMERIC(20,0),  
   @CMEMONOVAL    VARCHAR(50),  
   @CMEMODEPTID   VARCHAR(4),  
   @CLOCATIONID   VARCHAR(4),  
   @CHODEPTID    VARCHAR(4),  
   @CCMD     NVARCHAR(MAX),  
   @CCMDOUTPUT    NVARCHAR(4000),  
   @NSAVETRANLOOP   BIT,  
   @NSTEP     INT,  
   @NSUBTOTAL NUMERIC(20,2),  
   @BNEGSTOCKFOUND BIT,  
   @CWSLINVOICEID VARCHAR(22),  
   @BPURTHROUGHIMPORT BIT,@CMSG VARCHAR(200),@NTAX NUMERIC(20,2)  
   --27 FEB 2018
   ,@SOURCE_BIN_ID VARCHAR(7)
   ,@TARGET_BIN_ID VARCHAR(7)
   ,@NSAVETRANLOOP1 BIT
   ,@CWHERECLAUSE VARCHAR(500)
   ,@CDEBUGMODE VARCHAR(2)
   ,@BDEBUGMODE BIT,
    @CORDER_ID VARCHAR(50),@NLogSPID VARCHAR(40),@DTSQL NVARCHAR(MAX),@CLOCID    VARCHAR(4)
   
  
   SET @NLogSPID=convert(varchar(40),newid())	     
   INSERT XNSAVELOG ( XN_TYPE, STEP, START_TIME, SP_ID, STEP_MSG ) 
	SELECT 'FCO' AS XN_TYPE,1 AS  STEP,GETDATE() AS  START_TIME,@NSPID AS  SP_ID,'' AS STEP_MSG
	
	SELECT TOP 1 @CDEBUGMODE=VALUE FROM CONFIG WHERE CONFIG_OPTION='DEBUG_MODE'
	
	SET @BDEBUGMODE=(CASE WHEN ISNULL(@CDEBUGMODE,'')='1' THEN 1 ELSE 0 END)
   --27 FEB 2018
  
 BEGIN TRY  
    
  BEGIN TRANSACTION  
    
  SET @BPURTHROUGHIMPORT=0  
    
  SET @NSTEP = 10  
  EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE           

  SET @CTEMPDETAILTABLENAME = 'FCO_FLOOR_ST_DET_UPLOAD' 
  
  
  EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE     
    
  SET @CERRORMSG=''
  --27 FEB 2018
  IF @NUPDATEMODE=1
  BEGIN
	   SET @NSTEP = 15  
	   EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE           

       SET @CCMD='SELECT TOP 1 @SOURCE_BIN_ID=SOURCE_BIN_ID FROM '+@CTEMPDETAILTABLENAME+' WHERE SP_ID='''+LTRIM(RTRIM((@NSPID))) +'''' 
       PRINT @CCMD
       EXEC SP_EXECUTESQL @CCMD, N'@SOURCE_BIN_ID VARCHAR(7) OUTPUT', @SOURCE_BIN_ID OUTPUT
       
  END 
  ELSE
  IF @NUPDATEMODE IN (3,4,5,6)     
  BEGIN  

	  SET @NSTEP = 27  
	  EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE                
	  
	  IF ISNULL(@CMEMOID,'') = ''  
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED .....CANNOT PROCEED'  
	  ELSE   
	  IF @NUPDATEMODE=4 AND @BOX_NO=0
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' Box no. REQUIRED .....CANNOT PROCEED'  
	  ELSE   
	  IF @NUPDATEMODE=5 AND @ITEM_CODE=''
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' Item Code REQUIRED .....CANNOT PROCEED'  
	  ELSE
	  IF @NUPDATEMODE=6 AND @DRECEIPTDT=''
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' receipt Date REQUIRED .....CANNOT PROCEED'  

     IF @CERRORMSG<>''
  		GOTO END_PROC
			
	 SET @CKEYFIELDVAL1=@CMEMOID  
   
       
	   IF @NUPDATEMODE=3
	   BEGIN
			   SET @NSTEP = 28
				EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE                

		   SELECT TOP 1 @CORDER_ID=ORDER_ID FROM FLOOR_ST_MST (NOLOCK) WHERE MEMO_ID =@CKEYFIELDVAL1
		   IF ISNULL(@CORDER_ID,'')<>''
		   BEGIN
			   SET @NSTEP = 30
				EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE                

			   EXEC SP3S_PROCESS_PL_QTY @CKEYFIELDVAL1,@CORDER_ID,1,@CERRORMSG OUTPUT 
			   IF ISNULL(@CERRORMSG,'')<>''
			   GOTO END_PROC
    
		   END    
	   END
	   
	   SET @NSTEP = 33      
	   EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      
     
	    EXEC SP3S_UPDATE_PMTSTOCK_FCO
		@nUpdatemode=@nUpdatemode,
		@BALLOWNEGSTOCK=@bAllowNegative,
		@nDelBoxno=@BOX_NO,
		@cDelBarCode=@ITEM_CODE,
		@cMemoId=@CKEYFIELDVAL1,
		@BNEGSTOCKFOUND=@BNEGSTOCKFOUND OUTPUT,
		@cErrormsg=@cErrormsg output  
     
	   IF @CERRORMSG<>''
	   BEGIN  
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'  
			GOTO END_PROC  
	   END	
    
	   SET @NSTEP = 38  
	   -- UPDATING SENTTOHO FLAG 
		  EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      
       
	   IF @NUPDATEMODE=3
		   SET @CCMD = N'UPDATE FLOOR_ST_MST WITH (ROWLOCK) SET CANCELLED = 1,LAST_UPDATE=GETDATE() ' +   
			  N' WHERE MEMO_ID = ''' + @CMEMOID + ''''  
	   ELSE
	   IF @NUPDATEMODE=4
	   begin
	       SET @cCmd=N'DELETE FROM FLOOR_ST_DET WITH (ROWLOCK) WHERE  MEMO_ID = '''+ @CMEMOID+'''  AND BOX_NO='+STR(@BOX_NO) 
	       
	       SET @DTSQL=N'DELETE FROM FLOOR_ST_DET_EXCESS WITH (ROWLOCK) WHERE  MEMO_ID = '''+ @CMEMOID+'''  AND BOX_NO='+STR(@BOX_NO) 
	       EXEC SP_EXECUTESQL @DTSQL
	   end
	   ELSE
	   IF @NUPDATEMODE=5	
	   begin
			SET @cCmd=N'DELETE FROM FLOOR_ST_DET WITH (ROWLOCK) WHERE  MEMO_ID = '''+ @CMEMOID+'''  AND product_code='''+@ITEM_CODE+''''
			
			SET @DTSQL=N'DELETE FROM FLOOR_ST_DET_EXCESS WITH (ROWLOCK) WHERE  MEMO_ID = '''+ @CMEMOID+'''  AND product_code='''+@ITEM_CODE+''''
			EXEC SP_EXECUTESQL @DTSQL
	   end
	   ELSE
	   IF @NUPDATEMODE=6
		    SET @cCmd=N'UPDATE FLOOR_ST_MST SET RECEIPT_DT='''+CONVERT(VARCHAR,@DRECEIPTDT,110)+''',LAST_UPDATE=GETDATE() WHERE MEMO_ID = '''+@CMEMOID+''''  

	   EXEC SP_EXECUTESQL @CCMD  
	   
	
	  
	   IF @NUPDATEMODE IN (4,5)
	   BEGIN
		  SET @NSTEP = 40  
		  EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      

   			UPDATE A SET TOTAL_QUANTITY =B.TOTAL_QTY 
			FROM FLOOR_ST_MST A (NOLOCK)
			JOIN
			(
				SELECT MEMO_ID ,SUM(QUANTITY) AS TOTAL_QTY
				FROM FLOOR_ST_DET A (NOLOCK)
				WHERE A.MEMO_ID =@CMEMOID
				group by MEMO_ID
			) B ON A.MEMO_ID =B.MEMO_ID 
			WHERE A.MEMO_ID =@CMEMOID
	   END
  
  	   SET @NSTEP = 42  
  	   EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      

  		EXEC SP3S_upd_qty_lastupdate
				@nUpdateMode=3,
				@cXnType='FCO',
				@cMasterTable='FLOOR_ST_MST',
				@cMemoIdCol='Memo_id',
				@cMemoId=@CKEYFIELDVAL1,
				@CERRORMSG=@CERRORMSG OUTPUT


		if @NUPDATEMODE=3
		BEGIN
			UPDATE A SET A.RECEIVED_QTY=0
			FROM XNRECON_GITBIN A
			JOIN FLOOR_ST_MST  B ON B.INV_ID=A.INV_ID AND B.PS_ID=A.PS_ID
			WHERE  b.memo_id=@CMEMOID
		END
	   GOTO END_PROC  
    
  END
  
  SET @NSTEP = 45  -- SETTTING UP ENVIRONMENT  
  EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE                
  
 
  IF EXISTS(SELECT TOP 1 'U' FROM FCO_FLOOR_ST_DET_UPLOAD (NOLOCK) WHERE sp_id=@nSpId AND isnull(ITEM_TARGET_BIN_ID,'') =isnull(SOURCE_BIN_ID,'') )
  BEGIN  
	   SET @NSTEP = 47  -- SETTTING UP ENVIRONMENT  
	   EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE                
 
	   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SOURCE & Target bin can not be Same ....'  
	   SELECT A.PRODUCT_CODE,B1.BIN_NAME AS SOURCE_BIN_NAME,B2.BIN_NAME AS TARGET_BIN_NAME ,
              ' SOURCE & TARGET BIN CAN NOT BE SAME ....' AS ERRMSG
	   FROM FCO_FLOOR_ST_DET_UPLOAD a (NOLOCK) 
	   JOIN BIN B1 (NOLOCK) ON A.SOURCE_BIN_ID =B1.BIN_ID 
	   JOIN BIN B2 (NOLOCK) ON A.ITEM_TARGET_BIN_ID  =B2.BIN_ID 
	   WHERE a.sp_id=@nSpId 
	   AND ISNULL(ITEM_TARGET_BIN_ID,'') =ISNULL(SOURCE_BIN_ID,'')
	   
	   GOTO END_PROC  
  END 
   
  DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))  
  
  SET @NSTEP = 50  -- SETTTING UP ENVIRONMENT  
    EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE                
  
  -- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List  
  SET @CTEMPDBNAME = ''  
  
  SET @CMASTERTABLENAME = 'FLOOR_ST_MST'  
  SET @CDETAILTABLENAME = 'FLOOR_ST_DET'  
  
  SET @CTEMPMASTERTABLENAME = 'FCO_FLOOR_ST_MST_UPLOAD'  
  SET @CTEMPMASTERTABLE = @CTEMPDBNAME + @CTEMPMASTERTABLENAME  
  SET @CTEMPDETAILTABLE = @CTEMPDBNAME + @CTEMPDETAILTABLENAME 
  
  
	 if @NUPDATEMODE<>3
		select @CLOCID=location_Code  from FCO_FLOOR_ST_MST_UPLOAD where SP_ID=@NSPID 
     else
	 	select @CLOCID=location_Code  from FLOOR_ST_MST (NOLOCK) where memo_id=@CMEMOID

     
  IF @NUPDATEMODE IN (1,2)     
  BEGIN  
	 SET @NSTEP = 55
 
	  EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      

	   DELETE FROM BATCHWISE_FIXCODE_UPLOAD  WHERE SP_ID=RTRIM(LTRIM(STR(@NSPID)))
      
	  SET @nStep=57
	  EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      

	   EXEC SP3S_NORMALIZE_FIX_PRODUCT_CODE 'DCO',@NSPID,@NUPDATEMODE,
	   @CTEMPDETAILTABLE,'',@CERRORMSG OUTPUT,@CTEMPMASTERTABLE,@CLOCID,'0000000',0,@bDonotCheckStock=@bAllowNegative

	   IF ISNULL(@CERRORMSG,'')<>''
		BEGIN
			SET @CERRORMSG='ERROR IN NORMALIZATION '+@CERRORMSG
			GOTO END_PROC
		END
		
		SET @nStep=59
	      EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      


        SET @CCMD='UPDATE A SET TARGET_BIN_ID=B.ITEM_TARGET_BIN_ID
                      FROM '+@CTEMPMASTERTABLENAME+' A WITH (NOLOCK) JOIN '+@CTEMPDETAILTABLENAME+' B WITH (NOLOCK)  ON A.SP_ID=B.SP_ID
                       WHERE A.SP_ID='''+LTRIM(RTRIM((@NSPID))) +'''' 
       EXEC SP_EXECUTESQL @CCMD
        
  END
  
   
 
  SET @CERRORMSG   = ''  
  SET @LDONOTUPDATESTOCK = 0  
  SET @CKEYFIELD1   = 'MEMO_ID'  
  SET @CMEMONO   = 'MEMO_NO'  
  SET @NMEMONOLEN   = 10  

     
     
	 SELECT @CLOCATIONID=@CLOCID  
    
  SELECT @CHODEPTID  = [VALUE] FROM CONFIG(NOLOCK) WHERE  CONFIG_OPTION='HO_LOCATION_ID'    
    
	IF ISNULL(@CLOCATIONID,'')=''
	 BEGIN
		SET @CERRORMSG =' LOCATION ID CAN NOT BE BLANK  '  
		GOTO END_PROC    
	 END



    
    
    
  SET @NSTEP=70  
    
  -- GETTING DEPT_ID FROM TEMP MASTER TABLE  
  SET @CCMD = 'SELECT @CMEMODEPTID = BIN_ID, @CKEYFIELDVAL1 = MEMO_ID FROM '+@CTEMPMASTERTABLE+' WITH (NOLOCK) WHERE SP_ID='''+LTRIM(RTRIM((@NSPID))) +''''   
   
  EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT, @CKEYFIELDVAL1 VARCHAR(50) OUTPUT',   
          @CMEMODEPTID OUTPUT, @CKEYFIELDVAL1 OUTPUT  
  IF (@CMEMODEPTID IS NULL )  
  BEGIN  
     SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED...'  
     --SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'  
     GOTO END_PROC      
  END  
   
    
   
  -- START UPDATING XN TABLES   
  IF @NUPDATEMODE = 1 -- ADDMODE   
  BEGIN   
     EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      

	   SET @NSTEP = 80  -- GENERATING NEW KEY  
       PRINT 'GENERATING NEW KEY... START'     

	   --27 FEB 2018
	   SET @CMEMONOPREFIX = LTRIM(RTRIM(@CLOCATIONID))
       SET @NMEMONOLEN=6+LEN(@CMEMONOPREFIX)
       --27 FEB 2018
       
	   IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
	   BEGIN  
			   EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      
            -- GENERATING NEW MRR_NO    
			SET @NSAVETRANLOOP=0  
			WHILE @NSAVETRANLOOP=0  
			BEGIN  
				 SET @NSTEP=90  
				 EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,  
					 @CFINYEAR,0, @CMEMONOVAL OUTPUT     
			       
				 PRINT @CMEMONOVAL  
			       
			       
				 SET @NSTEP=100  
				 SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+'  WITH (NOLOCK)  
					   WHERE '+@CMEMONO+'='''+@CMEMONOVAL+'''   
					   AND FIN_YEAR = '''+@CFINYEAR+''' )  
					 SET @NLOOPOUTPUT=0  
					ELSE  
					 SET @NLOOPOUTPUT=1'  
				 PRINT @CCMD  
				 EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT  
			END  
		  
			IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
			BEGIN 
			   EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      
 
			   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'   
			   -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'  
			   GOTO END_PROC      
			END  
		  
			PRINT 'GENERATING NEW KEY... START'     
		  
			SET @NSTEP = 110  -- GENERATING NEW ID  
		      
		  
			-- GENERATING NEW MRR ID  
			SET @CKEYFIELDVAL1 = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
			 
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'    
			BEGIN  
			   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
			   -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'  
			   GOTO END_PROC  
			END  
		      
			SET @NSTEP = 120  
		      
			-- RECHECKING IF ID IS STILL LATER  
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
			BEGIN 
			   EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      
 
				 SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
				 GOTO END_PROC  
			END      
		  
		  
			SET @NSTEP = 130  -- UPDATING NEW ID INTO TEMP TABLES  
		  
			-- UPDATING NEWLY GENERATED MRR NO AND MRR ID IN PIM AND PID TEMP TABLES  
			SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + '  WITH (ROWLOCK) SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' +   
			   @CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+LTRIM(RTRIM((@NSPID))) +''''   
			EXEC SP_EXECUTESQL @CCMD  
		     
			SET @NSTEP = 135  -- UPDATING NEW ID INTO TEMP TABLES  
		      
		      
			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' WITH (ROWLOCK) SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+'''
			WHERE SP_ID='''+LTRIM(RTRIM((@NSPID))) +''''   
			PRINT @CCMD  
			EXEC SP_EXECUTESQL @CCMD  
	      
	   END  
  
  END     -- END OF ADDMODE  
  ELSE    -- CALLED FROM EDITMODE  
  BEGIN    -- START OF EDITMODE  
          
	   SET @NSTEP = 150  -- GETTING ID INFO FROM TEMP TABLE  
	     EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      

	   -- GETTING MRR_ID WHICH IS BEING EDITED  
	   SET @CCMD = 'SELECT @CKEYFIELDVAL1 = MEMO_ID, @CMEMONOVAL = MEMO_NO FROM '+@CTEMPMASTERTABLE+' WITH (NOLOCK) WHERE SP_ID='''+LTRIM(RTRIM((@NSPID))) +''''   
	   PRINT @CCMD  
	   EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT',   
			  @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT  
	   IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )  
	   BEGIN  
		  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'  
		  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'  
	        
		  GOTO END_PROC      
	   END  
	   SET @NSTEP = 155  -- STORING OLD STATUS OF BARCODES   
	   
  END     -- END OF EDITMODE  
  
  SET @NSTEP = 180  
  
  -- RECHECKING IF ID IS STILL LATER  
  IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
  BEGIN  
   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
   GOTO END_PROC  
  END 
  
  
   SET @NSTEP = 190
  IF @NUPDATEMODE IN (1,2)
  BEGIN
     EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      

       SET @CCMD = N'UPDATE A  WITH (ROWLOCK) SET ITEM_TARGET_BIN_ID =B.TARGET_BIN_ID
       FROM ' + @CTEMPDETAILTABLE + ' A JOIN ' + @CTEMPMASTERTABLENAME + ' B WITH (NOLOCK) ON  A.SP_ID=B.SP_ID 
       WHERE a.sp_id='''+@nSpId+''' AND ISNULL(A.ITEM_TARGET_BIN_ID,'''')=''''' 
       EXEC SP_EXECUTESQL @CCMD  
  
  END
  
      
  SET @NSTEP=200
  EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      

  SET @CCMD = N'  IF EXISTS( SELECT TOP 1 ''U'' FROM ' + @CTEMPDETAILTABLE + ' A WITH (NOLOCK)   JOIN BIN B(NOLOCK)
                                ON  A.ITEM_TARGET_BIN_ID=B.BIN_ID
								JOIN BIN C (NOLOCK) ON C.BIN_ID=A.SOURCE_BIN_ID
                                WHERE SP_ID='''+LTRIM(RTRIM((@NSPID))) +''' AND B.MAJOR_BIN_ID = c.MAJOR_BIN_ID  
                               )
                               UPDATE ' + @CTEMPMASTERTABLENAME + ' WITH (ROWLOCK) SET RECEIPT_DT=MEMO_DT
                               WHERE ISNULL(RECEIPT_DT,'''')='''' AND  SP_ID='''+LTRIM(RTRIM((@NSPID))) +''''
  EXEC SP_EXECUTESQL @CCMD 
  
  
  --MAJOR BI TO MAJOR BIN TRANSFER DIRECT RECEIVE IN GIT

  
  SET @CCMD = N'  IF EXISTS( SELECT TOP 1 ''U'' FROM ' + @CTEMPDETAILTABLE + ' A WITH (NOLOCK)   JOIN BIN B(NOLOCK)
                                ON  A.ITEM_TARGET_BIN_ID=B.BIN_ID
								JOIN BIN C (NOLOCK) ON C.BIN_ID=A.SOURCE_BIN_ID
                                WHERE SP_ID='''+LTRIM(RTRIM((@NSPID))) +''' AND B.BIN_ID = B.MAJOR_BIN_ID 
								AND C.BIN_ID = C.MAJOR_BIN_ID AND ISNULL(B.DONOT_RECEIVE_INTER_BIN_TRANSFER,0)=1
                               )
                               UPDATE ' + @CTEMPMASTERTABLENAME + ' WITH (ROWLOCK) SET RECEIPT_DT=MEMO_DT
                               WHERE ISNULL(RECEIPT_DT,'''')='''' AND  SP_ID='''+LTRIM(RTRIM((@NSPID))) +''''
  EXEC SP_EXECUTESQL @CCMD 
  
  
   IF @NUPDATEMODE IN (1,2)
	BEGIN
		SET @NSTEP=210         
		EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE  
		
		DECLARE @NTOTALQTY NUMERIC(10,3)
		SET @NTOTALQTY=0

		IF ISNULL(@BOX_NO,0) NOT  IN('','0') AND @NUPDATEMODE=2
		BEGIN
		    SELECT @NTOTALQTY=TOTAL_QUANTITY FROM FLOOR_ST_MST (NOLOCK) WHERE MEMO_ID =@CKEYFIELDVAL1
		END

		SET @NSTEP=212         
		EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE  
		
		UPDATE A SET TOTAL_QUANTITY=@NTOTALQTY+B.TOTAL_QUANTITY
		FROM FCO_FLOOR_ST_MST_UPLOAD  A WITH (ROWLOCK) 
		JOIN (SELECT sp_id,SUM(QUANTITY) AS TOTAL_QUANTITY FROM FCO_FLOOR_ST_DET_UPLOAD B (NOLOCK)  
		WHERE SP_ID=@NSPID GROUP BY sp_id) B ON A.sp_id=B.sp_id
		WHERE  A.SP_ID=@NSPID 

	
		SET @NSTEP=215         
		EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE  
	
		EXEC SP3S_upd_qty_lastupdate
		@nUpdateMode=@NUPDATEMODE,
		@cXnType='fco',
		@cMasterTable='FLOOR_ST_MST',
		@nSpId=@NSPID,
		@cMemoIdCol='Memo_id',
		@cMemoId=@CKEYFIELDVAL1,
		@cXnDtCol='Receipt_dt',
		@CERRORMSG=@CERRORMSG OUTPUT


	END      


	
  -- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE  
  SET @NSTEP = 220  -- UPDATING TRANSACTION TABLE 
     EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      
 
  
  -- UPDATING ROW_ID IN TEMP TABLES  
  SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' WITH (ROWLOCK) SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())  
       WHERE SP_ID='''+LTRIM(RTRIM((@NSPID))) +''' AND LEFT(ROW_ID,5) = ''LATER''   '   
  EXEC SP_EXECUTESQL @CCMD  
  
  
  IF EXISTS (SELECT TOP 1 'U' FROM FCO_FLOOR_ST_DET_EXCESS_UPLOAD WHERE SP_ID=@NSPID)
  begin
       
       UPDATE A SET  MEMO_ID=@CKEYFIELDVAL1,  ROW_ID = @CLOCATIONID + CONVERT(VARCHAR(40), NEWID())     
       FROM  FCO_FLOOR_ST_DET_EXCESS_UPLOAD A WHERE SP_ID=@NSPID  AND (LEFT(MEMO_ID,5) = 'LATER' OR ISNULL(MEMO_ID,'')='')
       
  
  end
       
    
  -- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE  
  SET @NSTEP = 225  -- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES  
     EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      

  SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + '  WITH (ROWLOCK)    
     WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''  
     AND ROW_ID IN   
     (  
      SELECT A.ROW_ID   
      FROM ' + @CDETAILTABLENAME + ' A  WITH (NOLOCK)   
      LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B WITH (NOLOCK)  ON A.ROW_ID = B.ROW_ID  
      WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + ''' AND SP_ID='''+LTRIM(RTRIM((@NSPID))) +''' 
      AND B.ROW_ID IS NULL  
     )'  
  PRINT @CCMD  
  EXEC SP_EXECUTESQL @CCMD  
  
  --PRINT 'ROHIT'  
  -- INSERTING/UPDATING THE ENTRIES IN PID01106 TABLE FROM TEMPTABLE  


	SET @CWHERECLAUSE = ' SP_ID='+LTRIM(RTRIM(STR(@NSPID)))
    SET @NSTEP = 228  -- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES  
     EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      


	EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
	  	@CSOURCEDB	= ''
		, @CSOURCETABLE = @CTEMPMASTERTABLENAME
		, @CDESTDB		= ''
		, @CDESTTABLE	= 'FLOOR_ST_MST'
		, @CKEYFIELD1	= @CKEYFIELD1
		, @BALWAYSUPDATE = 1
		,@CFILTERCONDITION=@CWHERECLAUSE

    SET @NSTEP = 230 -- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES  
     EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      

   EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
	  	@CSOURCEDB	= ''
		, @CSOURCETABLE = @CTEMPDETAILTABLENAME
		, @CDESTDB		= ''
		, @CDESTTABLE	= 'FLOOR_ST_DET'
		, @CKEYFIELD1	= 'row_id'
		, @BALWAYSUPDATE = 1
		,@CFILTERCONDITION=@CWHERECLAUSE
		
		
	 EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
	  	@CSOURCEDB	= ''
		, @CSOURCETABLE = 'FCO_FLOOR_ST_DET_EXCESS_UPLOAD'
		, @CDESTDB		= ''
		, @CDESTTABLE	= 'FLOOR_ST_DET_EXCESS'
		, @CKEYFIELD1	= 'row_id'
		, @BALWAYSUPDATE = 1
		,@CFILTERCONDITION=@CWHERECLAUSE
		
		

  
LBLUPDATESTOCK:        
  -- UPDATING STOCK OF PMT W.R.T. CURRENT PURCHASE  
  SET @NSTEP = 270  -- UPDATING PMT TABLE  
 PRINT 'STEP 9'  
     EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      
  
 	EXEC SP3S_UPDATE_PMTSTOCK_FCO
	@nUpdatemode=@nUpdatemode,
	@BALLOWNEGSTOCK=@bAllowNegative,
	@nSpId=@nSpId,
	@CMEMOID=@CKEYFIELDVAL1,
	@BNEGSTOCKFOUND=@BNEGSTOCKFOUND OUTPUT,
	@cErrormsg=@cErrormsg output,
	@BOX_NO    =@BOX_NO
    



  PRINT 'STEP 9.1'  
  
 
   SELECT TOP 1 @CORDER_ID=ORDER_ID FROM FLOOR_ST_MST (NOLOCK) WHERE MEMO_ID =@CKEYFIELDVAL1
   IF ISNULL(@CORDER_ID,'')<>''
   BEGIN
	  SET @NSTEP = 275  -- UPDATING PMT TABLE  
	 PRINT 'STEP 9'  
		 EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      
       
       EXEC SP3S_PROCESS_PL_QTY @CKEYFIELDVAL1,@CORDER_ID,0,@CERRORMSG OUTPUT 
       
       IF ISNULL(@CERRORMSG,'')<>''
       GOTO END_PROC
    
   END 
   Declare @INV_ID VARCHAR(50),@PS_ID VARCHAR(50)
   SELECT TOP 1 @INV_ID=INV_ID,  @PS_ID=PS_ID FROM FLOOR_ST_MST (NOLOCK) WHERE MEMO_ID =@CKEYFIELDVAL1
   IF ISNULL(@INV_ID,'')<>'' --AND ISNULL(@PS_ID,'')<>''
   BEGIN
	  SET @NSTEP = 276  -- UPDATING XNRECON_GITBIN
	 PRINT 'STEP 276'  
		 EXEC SP_CHKXNSAVELOG 'FCO',@NSTEP,0,@nLogSpId,@BDEBUGMODE      
    if @NUPDATEMODE<>3
	begin
		;WITH REC_QTY
		AS
		(
			select INV_ID, PS_ID,SUM(QUANTITY) AS RECEIVED_QUANTITY 
			from FLOOR_ST_DET a (NOLOCK)
			JOIN FLOOR_ST_MST b  (NOLOCK) on b.MEMO_ID=a.MEMO_ID
			WHERE cancelled=0 AND inv_id=@INV_ID and ISNULL(ps_id,'')=ISNULL(@PS_ID,'')
			GROUP BY INV_ID, PS_ID
		)
		UPDATE A SET A.RECEIVED_QTY=B.RECEIVED_QUANTITY
		FROM XNRECON_GITBIN A
		JOIN REC_QTY B ON B.INV_ID=A.INV_ID AND B.PS_ID=A.PS_ID
    end
	else
	begin
		UPDATE A SET A.RECEIVED_QTY=0
		FROM XNRECON_GITBIN A
		WHERE inv_id=@INV_ID and ISNULL(ps_id,'')=ISNULL(@PS_ID,'')
	end
   END 

 END TRY  
 BEGIN CATCH  
  SET @CERRORMSG = 'Procedure SAVETRAN_FLOOR_TRANSFER STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()  
  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'  
     
  GOTO END_PROC  
 END CATCH  
   
   
END_PROC:  
 UPDATE floor_st_mst WITH (ROWLOCk) SET last_update=getdate() WHERE memo_id=@CKEYFIELDVAL1

 IF @@TRANCOUNT>0  
 BEGIN  
	
	  --select ITEM_TARGET_BIN_ID,source_bin_id,row_id,* from floor_st_det where memo_id=@CKEYFIELDVAL1

	  --select a.* from pmt01106 a join floor_St_det b on a.product_code=b.PRODUCT_CODE
	  --where memo_id=@CKEYFIELDVAL1
	  IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')='' AND ISNULL(@BNEGSTOCKFOUND,0)=0 
	  BEGIN  
		   UPDATE FLOOR_ST_MST SET HO_SYNCH_LAST_UPDATE='' WHERE MEMO_ID=@CKEYFIELDVAL1
		  commit TRANSACTION  
	  END  
	  ELSE  
		   ROLLBACK  
 END  
   
 IF ISNULL(@BNEGSTOCKFOUND,0)=0  
 BEGIN  
    INSERT @OUTPUT ( ERRMSG, MEMO_ID)  
    VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )  
  
    SELECT * FROM @OUTPUT   
 END   
   
	DELETE FROM FCO_FLOOR_ST_DET_UPLOAD WITH (ROWLOCK) WHERE SP_ID =@NSPID 
	DELETE FROM FCO_FLOOR_ST_MST_UPLOAD WITH (ROWLOCK) WHERE SP_ID =@NSPID 
    DELETE FROM SAVETRAN_BARCODE_NETQTY WITH (ROWLOCK) WHERE sp_id=@nSpId
   DELETE FROM FCO_FLOOR_ST_DET_EXCESS_UPLOAD WITH (ROWLOCK) WHERE SP_ID =@NSPID 
    
END  
------------------------------------------------------ END OF PROCEDURE SAVETRAN_FLOOR_TRANSFER
