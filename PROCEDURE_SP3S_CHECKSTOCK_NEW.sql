create PROCEDURE SP3S_CHECKSTOCK_NEW    
 @NSPID INT,
 @NMODE INT,
 @NUPDATEMODE INT=0,
 @CMEMOID VARCHAR(40)='',
 @CXNTYPE VARCHAR(10)='WSL',
 @NPASTE INT=0,
 @XN_ITEM_TYPE NUMERIC(2,0)=1,
 @cLOC varchar(5)=''
 
-- WITH ENCRYPTION
AS    
BEGIN    
	 DECLARE @NSTKQTY NUMERIC(10,3),@CPRDCODE VARCHAR(100),@CLOC_ID  VARCHAR(5),@CDONOTCHECKSTOCK VARCHAR(5),@BSTOCKNA BIT,
	 @BDONOTCHECKSTOCK BIT,@CALLOWWSLINACTIVESTOCKNAARTICLES VARCHAR(2), @NITEMTYPE NUMERIC(2,0),@nCodingScheme NUMERIC(1,0),@nDiscon NUMERIC(1,0),
	 @NBEFORECALINVQTY NUMERIC(10,3),@NAFTERCALINVQTY NUMERIC(10,3)
	
	 PRINT 'ENTER CHECK STOCK -1'
	 SET @BDONOTCHECKSTOCK=0
	
	
	
	 
	 IF @cLOC='' 
	    SELECT TOP 1 @CLOC_ID=DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 
     ELSE
	    SELECT @CLOC_ID= @cLOC         
	  
	 
	 SELECT TOP 1 @CALLOWWSLINACTIVESTOCKNAARTICLES= VALUE FROM CONFIG (NOLOCK) WHERE
	 CONFIG_OPTION='ALLOW_WSL_INACTIVESTOCKNA_ARTICLES'
	 
	 SELECT @NITEMTYPE=ITEM_TYPE FROM SKU A(NOLOCK)
	 JOIN ARTICLE B (NOLOCK) ON A.ARTICLE_CODE=B.ARTICLE_CODE
	 JOIN SECTIOND C(NOLOCK) ON C.SUB_SECTION_CODE=B.SUB_SECTION_CODE
	 JOIN SECTIONM D(NOLOCK) ON D.SECTION_CODE=C.SECTION_CODE
	 JOIN WSL_ITEM_DETAILS E(NOLOCK) ON E.PRODUCT_CODE=A.PRODUCT_CODE
	 WHERE SP_ID=@NSPID AND ITEM_TYPE<>@XN_ITEM_TYPE

	
	 
	-- SET @XN_ITEM_TYPE=4
	 IF ISNULL(@NITEMTYPE,0)>0 
	 BEGIN
	      IF ( @XN_ITEM_TYPE<>@NITEMTYPE and  @XN_ITEM_TYPE<>5)
	      BEGIN
	       UPDATE WSL_ITEM_DETAILS SET ERRMSG= CASE 
	                     WHEN  @XN_ITEM_TYPE=1 AND @NITEMTYPE=2 THEN 'CONSUMABLE ITEM NOT ALLOWED IN INVENTORY TRANSCTION'
	                     WHEN  @XN_ITEM_TYPE=1 AND @NITEMTYPE=3 THEN 'ASSESTS    ITEM NOT ALLOWED IN INVENTORY TRANSCTION'
	                     WHEN  @XN_ITEM_TYPE=1 AND @NITEMTYPE=4 THEN 'SERVICE    ITEM NOT ALLOWED IN INVENTORY TRANSCTION'
	                     
	                     WHEN  @XN_ITEM_TYPE=2 AND @NITEMTYPE=1 THEN 'INVENTORY  ITEM NOT ALLOWED IN CONSUMBLE TRANSCTION'
	                     WHEN  @XN_ITEM_TYPE=2 AND @NITEMTYPE=3 THEN 'ASSESTS    ITEM NOT ALLOWED IN CONSUMBLE TRANSCTION'
	                     WHEN  @XN_ITEM_TYPE=2 AND @NITEMTYPE=4 THEN 'SERVICE    ITEM NOT ALLOWED IN CONSUMBLE TRANSCTION'
	                     
	                     WHEN  @XN_ITEM_TYPE=3 AND @NITEMTYPE=1 THEN 'INVENTORY  ITEM NOT ALLOWED IN ASSESTS   TRANSCTION'
	                     WHEN  @XN_ITEM_TYPE=3 AND @NITEMTYPE=2 THEN 'CONSUMABLE ITEM NOT ALLOWED IN ASSESTS   TRANSCTION'
	                     WHEN  @XN_ITEM_TYPE=3 AND @NITEMTYPE=4 THEN 'SERVICE    ITEM NOT ALLOWED IN ASSESTS   TRANSCTION'
	                     
	                     
	                     WHEN  @XN_ITEM_TYPE=4 AND @NITEMTYPE=1 THEN 'INVENTORY  ITEM NOT ALLOWED IN SERVICE   TRANSCTION'
	                     WHEN  @XN_ITEM_TYPE=4 AND @NITEMTYPE=2 THEN 'CONSUMBLE  ITEM NOT ALLOWED IN SERVICE   TRANSCTION'
	                     WHEN  @XN_ITEM_TYPE=4 AND @NITEMTYPE=3 THEN 'ASSESTS    ITEM NOT ALLOWED IN SERVICE   TRANSCTION '

	                     WHEN  @XN_ITEM_TYPE=5 AND @NITEMTYPE=2 THEN 'CONSUMBLE  ITEM NOT ALLOWED IN SERVICE   TRANSCTION'
	                     WHEN  @XN_ITEM_TYPE=5 AND @NITEMTYPE=3 THEN 'ASSESTS    ITEM NOT ALLOWED IN SERVICE   TRANSCTION '
						 WHEN  @XN_ITEM_TYPE=5 AND @NITEMTYPE=4 THEN 'SERVICE    ITEM NOT ALLOWED IN ASSESTS   TRANSCTION'
	          END
	         WHERE SP_ID=@NSPID 
	      END
	 END
	 
	
	 --GET THE PRODUCT_CODE FROM EAN_SYNC,IF EXISTS ELSE GET FROM SKU
	 UPDATE WSL_ITEM_DETAILS SET PRODUCT_CODE=B.PRODUCT_CODE FROM EAN_SYNC B
	 WHERE SP_ID=@NSPID AND B.EAN=WSL_ITEM_DETAILS.PRODUCT_CODE
	 
	 UPDATE A SET ER_FLAG=ISNULL(B.ER_FLAG,0) FROM WSL_ITEM_DETAILS A
	 JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE
	 JOIN ARTICLE C ON C.ARTICLE_CODE=B.ARTICLE_CODE
	 WHERE SP_ID=@NSPID
	 AND (ISNULL(C.STOCK_NA,0)=0 OR ISNULL(C.INACTIVE,0)=0 OR ISNULL(@CALLOWWSLINACTIVESTOCKNAARTICLES,'')='1')
	 
	 
	 --DO NOT CHECK STOCK
	 UPDATE A SET QUANTITY_IN_STOCK =99999 FROM WSL_ITEM_DETAILS A
	 JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE
	 JOIN ARTICLE C ON C.ARTICLE_CODE=B.ARTICLE_CODE
	 WHERE SP_ID=@NSPID AND ISNULL(C.STOCK_NA,0) =1

	  
	 --
	 PRINT 'ENTER CHECK STOCK -2'
	 
	 UPDATE WSL_ITEM_DETAILS SET ERRMSG='SELECTED BAR CODE NOT FOUND....PLEASE CHECK'
	 WHERE SP_ID=@NSPID AND ER_FLAG  IS NULL
	 
	 IF @NUPDATEMODE=2
	 BEGIN
		UPDATE WSL_ITEM_DETAILS SET OLD_QUANTITY=B.QUANTITY FROM WSL_ITEM_DETAILS A
		JOIN (SELECT A.PRODUCT_CODE,SUM(QUANTITY) AS QUANTITY FROM IND01106 A (NOLOCK)
		      JOIN (SELECT DISTINCT PRODUCT_CODE FROM WSL_ITEM_DETAILS (NOLOCK) WHERE SP_ID=@NSPID) B ON A.PRODUCT_CODE=B.PRODUCT_CODE
		      WHERE A.INV_ID=@CMEMOID GROUP BY A.PRODUCT_CODE) B ON A.PRODUCT_CODE=B.PRODUCT_CODE
		WHERE A.SP_ID=@NSPID
	 END

	
	  
	 IF @NMODE<>2
		 UPDATE A SET INVOICE_QUANTITY=(CASE WHEN B.QUANTITY_IN_STOCK >0 THEN 1 ELSE B.QUANTITY_IN_STOCK END)
		 ,QUANTITY=B.QUANTITY_IN_STOCK
		 FROM WSL_ITEM_DETAILS A 
		 JOIN PMT01106 B ON A.PRODUCT_CODE=B.PRODUCT_CODE
		 JOIN SKU C (NOLOCK) ON A.PRODUCT_CODE=C.PRODUCT_CODE
		 JOIN ARTICLE D (NOLOCK) ON D.ARTICLE_CODE=C.ARTICLE_CODE
		 WHERE SP_ID=@NSPID AND B.QUANTITY_IN_STOCK >0  AND B.DEPT_ID= @CLOC_ID
		 AND QUANTITY=0
	 
	 PRINT 'ENTER CHECK STOCK -3'	 
	 DECLARE @ALLOW_ACCESS BIT ,@BINSTOCK INT  ,@MAINTAIN_UNQ_QTY BIT
	 
	 ---VALIDATION FOR UNIQUE BARCODE STOCK>1----	
	 IF @CXNTYPE='WSR' 
	 BEGIN
		SELECT  TOP 1 @MAINTAIN_UNQ_QTY=VALUE FROM CONFIG WHERE CONFIG_OPTION='MAINTAIN_01_QTY_UNQ_CODING' 
		
		IF  ISNULL(@MAINTAIN_UNQ_QTY,1)=1	
			UPDATE A SET ERRMSG='UNIQUE BARCODE HAS ALREADY IN STOCK....PLEASE CHECK'
			FROM WSL_ITEM_DETAILS A 
			JOIN PMT01106 B ON A.PRODUCT_CODE=B.PRODUCT_CODE
			JOIN SKU C (NOLOCK) ON A.PRODUCT_CODE=C.PRODUCT_CODE
			JOIN ARTICLE D (NOLOCK) ON D.ARTICLE_CODE=C.ARTICLE_CODE
			WHERE SP_ID=@NSPID AND B.QUANTITY_IN_STOCK >0 AND B.DEPT_ID= @CLOC_ID AND ISNULL(c.barcode_coding_scheme,D.CODING_SCHEME)=3
	 END
	 
	 PRINT 'ENTER CHECK STOCK -4'	
	 --CHECK IF USER HAS ACCESS TO THE BIN
	 SELECT TOP 1 @ALLOW_ACCESS=1 FROM BINUSERS A (NOLOCK) 
	 JOIN WSL_INV_SETTINGS B ON 1=1 WHERE A.USER_CODE=B.USER_CODE AND A.BIN_ID = B.LOGIN_BIN_ID
	 AND B.SP_ID=@NSPID
	 
	 DECLARE @USER_AUTH VARCHAR(100),@BMBO_COUNTER BIT
	 

     
	 IF @CXNTYPE IN ('SLS','WSL')
	 BEGIN
		PRINT 'ENTER CHECK STOCK -5'
		
		SELECT TOP 1 @CDONOTCHECKSTOCK =VALUE FROM USER_ROLE_DET A
		JOIN USERS B ON A.ROLE_ID=B.ROLE_ID
		JOIN WSL_INV_SETTINGS C ON 1=1		
		WHERE B.USER_CODE=C.USER_CODE AND B.USER_CODE<>'0000000'
		AND FORM_NAME=(CASE WHEN @CXNTYPE='SLS' THEN 'FRMSALE' ELSE 'FRMWSLINVOICE' END)
		AND FORM_OPTION='ALLOW_NEG_STOCK' AND C.SP_ID=@NSPID		

		IF ISNULL(@CDONOTCHECKSTOCK,'')='1'
			SET @BDONOTCHECKSTOCK = 1
	 END  
	 
	 PRINT 'ENTER CHECK STOCK -6'	
	 SELECT @BMBO_COUNTER=ISNULL(MBO_COUNTER,0) FROM BIN A (NOLOCK)
	 JOIN WSL_INV_SETTINGS B ON 1=1  WHERE A.BIN_ID=B.LOGIN_BIN_ID
	 AND B.SP_ID=@NSPID
	 
	 SET @BMBO_COUNTER=ISNULL(@BMBO_COUNTER,0)
	  update WSL_INV_SETTINGS set user_code ='0000000' where user_code ='' and sp_id=@NSPID
	 --SELECT @CXNTYPE, @BDONOTCHECKSTOCK,@NPASTE
	 if @XN_ITEM_TYPE=5 
	 begin
	
	     UPDATE A SET BIN_ID= B.BIN_ID,
		 QUANTITY_IN_STOCK=B.QUANTITY_IN_STOCK
		 FROM WSL_ITEM_DETAILS A 
		 JOIN PMT01106 B ON A.PRODUCT_CODE=B.PRODUCT_CODE
		 WHERE A.SP_ID=@NSPID AND B.QUANTITY_IN_STOCK >0  AND B.DEPT_ID= @CLOC_ID	
		 AND B.BIN_ID='999'


	 end
	 else IF @CXNTYPE='WSL' AND @BDONOTCHECKSTOCK=0 
	 BEGIN
	     
		 SELECT @NBEFORECALINVQTY=SUM(INVOICE_QUANTITY) FROM WSL_ITEM_DETAILS WHERE SP_ID=@NSPID

		

	
	     IF OBJECT_ID ('TEMPDB..#TMPWSL_ITEM_DETAILS','U') IS NOT NULL
            DROP TABLE #TMPWSL_ITEM_DETAILS

         SELECT A.*,
         B.BIN_ID AS STK_BIN_ID ,
         B.QUANTITY_IN_STOCK AS NEW_QUANTITY_IN_STOCK,
		 sr=ROW_NUMBER() OVER(PARTITION BY A.ROW_ID ORDER BY CASE WHEN B.BIN_ID=A.BIN_ID THEN 0 ELSE 1 END),
		 RUNNING_QTY=cast(0 as numeric(14,2))
         INTO #TMPWSL_ITEM_DETAILS
		 FROM WSL_ITEM_DETAILS A 
		 JOIN PMT01106 B ON A.PRODUCT_CODE=B.PRODUCT_CODE
		 JOIN BIN  (NOLOCK) ON BIN.BIN_ID=B.BIN_ID
		 JOIN SKU D ON D.PRODUCT_CODE=B.PRODUCT_CODE
		 JOIN ARTICLE E ON E.ARTICLE_CODE=D.ARTICLE_CODE
		 JOIN WSL_INV_SETTINGS F ON F.SP_ID=A.SP_ID
		 JOIN BINUSERS C ON C.BIN_ID=BIN.MAJOR_BIN_ID AND F.USER_CODE =C.USER_CODE 
		 WHERE A.SP_ID=@NSPID AND B.QUANTITY_IN_STOCK >0  AND B.DEPT_ID= @CLOC_ID
		 AND (F.USER_CODE='0000000' OR C.USER_CODE=F.USER_CODE)
		 and b.bin_id <>'999' AND (isnull(D.barcode_coding_scheme,0) <>1 or CHARINDEX ('@',a.product_code)>0)
		 AND ISNULL(BIN.stk_available_trn,0)=1   


		
	    
	   if ISNULL(@NPASTE,0)=1
	   begin 
	         
		 
		 update #TMPWSL_ITEM_DETAILS set RUNNING_QTY=(select sum(NEW_QUANTITY_IN_STOCK) from #TMPWSL_ITEM_DETAILS a where #TMPWSL_ITEM_DETAILS.row_id =a.row_id and a.PRODUCT_CODE =#TMPWSL_ITEM_DETAILS.PRODUCT_CODE and a.sr <=#TMPWSL_ITEM_DETAILS.sr )
		 UPDATE #TMPWSL_ITEM_DETAILS SET BIN_ID =STK_BIN_ID

		
						     
		DELETE A FROM #TMPWSL_ITEM_DETAILS A WHERE SR>
		(
		SELECT TOP 1 SR FROM #TMPWSL_ITEM_DETAILS B WHERE RUNNING_QTY >=QUANTITY AND  A.ROW_ID =B.ROW_ID AND A.PRODUCT_CODE =B.PRODUCT_CODE  )

		UPDATE A SET NEW_QUANTITY_IN_STOCK  =QUANTITY-(A.RUNNING_QTY -NEW_QUANTITY_IN_STOCK) FROM #TMPWSL_ITEM_DETAILS A
		WHERE SR=
		(
		SELECT TOP 1 SR FROM #TMPWSL_ITEM_DETAILS B WHERE RUNNING_QTY >=QUANTITY AND  A.ROW_ID=B.ROW_ID AND A.PRODUCT_CODE =B.PRODUCT_CODE  )

		UPDATE  #TMPWSL_ITEM_DETAILS SET QUANTITY =NEW_QUANTITY_IN_STOCK
		UPDATE  #TMPWSL_ITEM_DETAILS SET invoice_quantity =QUANTITY  

	 if exists (select top 1 'u' from #TMPWSL_ITEM_DETAILS where isnull(invoice_quantity,0)<=0)
	  begin
	      
	      UPDATE A SET errmsg ='  Quantity Should be always Positive '  
		  FROM WSL_ITEM_DETAILS A (NOLOCK)  
		  FULL OUTER JOIN  
		  (  
			 SELECT ROW_ID 
			 FROM #TMPWSL_ITEM_DETAILS  
			  where  isnull(invoice_quantity,0)<=0 
		  ) B ON A.row_id =B.row_id 
		  WHERE SP_ID =@NSPID  
	
	  end

		 UPDATE A SET CODING_SCHEME=B.BARCODE_CODING_SCHEME FROM WSL_ITEM_DETAILS A (NOLOCK)
		 JOIN SKU B (NOLOCK) ON A.PRODUCT_CODE =B.PRODUCT_CODE
		 WHERE SP_ID =@NSPID 

		UPDATE A SET errmsg ='stock not available in user acess bin.'
		FROM WSL_ITEM_DETAILS A (NOLOCK)
		FULL OUTER JOIN
		(
		   SELECT ROW_ID ,PRODUCT_CODE ,SUM(QUANTITY) AS QTY
		   FROM #TMPWSL_ITEM_DETAILS
		   group by ROW_ID ,PRODUCT_CODE
		) B ON A.row_id =B.row_id AND A.PRODUCT_CODE =B.PRODUCT_CODE 
		WHERE SP_ID =@NSPID
		AND ISNULL(A.quantity,0) <>ISNULL(B.QTY,0)
		AND A.CODING_SCHEME<>1
		

		IF EXISTS (SELECT TOP 1 'U' FROM WSL_ITEM_DETAILS WHERE SP_ID =@NSPID AND ERRMSG <>'')
		   RETURN

		     DELETE A FROM WSL_ITEM_DETAILS A (NOLOCK)
			 WHERE SP_ID =@NSPID AND (ISNULL(a.CODING_SCHEME,0) <>1 OR CHARINDEX ('@',A.PRODUCT_CODE)>0)

	   end

		

		-- AND C.BIN_ID=(CASE WHEN ISNULL(@BMBO_COUNTER,0)=0 THEN F.LOGIN_BIN_ID ELSE  C.BIN_ID END)	
         
         --SELECT TOP 1 'CHECK WSLITEM',* FROM #TMPWSL_ITEM_DETAILS
         IF EXISTS(SELECT TOP 1 'U' FROM #TMPWSL_ITEM_DETAILS)
         BEGIN
		  
			 IF ISNULL(@NPASTE,0)=0	
			 DELETE A FROM WSL_ITEM_DETAILS A (NOLOCK)

			 JOIN SKU B (NOLOCK) ON A.PRODUCT_CODE =B.PRODUCT_CODE
			 WHERE SP_ID =@NSPID AND (ISNULL(B.BARCODE_CODING_SCHEME,0) <>1 OR CHARINDEX ('@',A.PRODUCT_CODE)>0)
			
			 INSERT WSL_ITEM_DETAILS	( GROSS_RATE, MARGIN_PERCENTAGE, MARGIN_AMOUNT, AMOUNT, MANUAL_RATE, MANUAL_NET_RATE, 
			 MANUAL_DISCOUNT, PS_ID, AUTO_SRNO, ROW_ID, SP_ID, ITEM_CATEGORY, BRAND, HSN_CODE, GST_PERCENTAGE, IGST_AMOUNT, 
			 CGST_AMOUNT, SGST_AMOUNT, XN_VALUE_WITHOUT_GST, XN_VALUE_WITH_GST, ORDER_NO, ONLINE_BILL_REF_NO, ITEM_ROUND_OFF, 
			 PRODUCT_CODE, ARTICLE_CODE, ARTICLE_NO, ARTICLE_NAME, PARA1_CODE, PARA1_NAME, PARA2_CODE, PARA2_NAME, PARA3_CODE, 
			 PARA3_NAME, UOM_NAME, DEPT_ID, CODING_SCHEME, INACTIVE, QUANTITY_IN_STOCK, PURCHASE_PRICE, SCHEME_ID, SECTION_NAME, 
			 SECTION_CODE, SUB_SECTION_CODE, SUB_SECTION_NAME, PARA4_CODE, PARA5_CODE, PARA6_CODE, PARA4_NAME, PARA5_NAME, 
			 PARA6_NAME, UOM_CODE, UOM_TYPE, ART_DT_CREATED, PARA3_DT_CREATED, SKU_DT_CREATED, STOCK_NA, EAN, ITEM_FORM_ID,
			 FORM_NAME, PRODUCT_NAME, ER_FLAG, FIX_MRP, INV_DT, RECEIPT_DT, ARTICLE_ALIAS, BIN_ID, BIN_NAME, WIP_UID, 
			 LANDED_COST, ONLINE_BAR_CODE, VENDOR_EAN_NO, ERRMSG, RATE, DISCOUNT_PERCENTAGE, DISCOUNT_AMOUNT, OCTROI_PERCENTAGE, 
			 OCTROI_AMOUNT, NET_RATE, ITEM_TAX_AMOUNT, TAX_STATUS, ITEM_TAX_PERCENTAGE, INV_TAX_STATUS, TAX_METHOD, 
			 FORM_TAX_PERCENTAGE, ITEM_EXCISE_MRP, ITEM_EXCISE_ACCESSIBLE_PERCENTAGE, ITEM_EXCISE_ACCESSIBLE_AMOUNT, 
			 ITEM_EXCISE_DUTY_PERCENTAGE, ITEM_EXCISE_DUTY_AMOUNT, ITEM_EXCISE_EDU_CESS_PERCENTAGE, ITEM_EXCISE_EDU_CESS_AMOUNT,
			 ITEM_EXCISE_HEDU_CESS_PERCENTAGE, ITEM_EXCISE_HEDU_CESS_AMOUNT, INVOICE_QUANTITY, SCHEME_QUANTITY, QUANTITY, 
			 OLD_QUANTITY, ITEM_EXCISE_MRPVAL, BASEAMOUNT_FOR_TAX, EXCISABLE, MRP, WS_PRICE, GIVE_CREDIT_VAT, 
			 CREDIT_VAT_PERCENTAGE, PARTY_RATE_BASE_PRICE, PARTY_RATE_CAL_MODE, PARTY_RATE_GIVE_CREDIT_VAT, VATPAIDONMRP, 
			 PARTY_FINAL_MARGIN, MANUAL_RATE_CHANGED, CREDIT_VAT_AMOUNT, CHARGE_TAX_PCT, CREDIT_CENTRAL_TAX_PCT, 
			 CREDIT_PURCHASE_TAX_PCT, BOX_NO, BOX_DT, BOX_ID,remarks )  
			  SELECT 	  GROSS_RATE, MARGIN_PERCENTAGE, MARGIN_AMOUNT, AMOUNT, MANUAL_RATE, MANUAL_NET_RATE, 
			  MANUAL_DISCOUNT, PS_ID, AUTO_SRNO, ROW_ID, SP_ID, ITEM_CATEGORY, BRAND, HSN_CODE, GST_PERCENTAGE, 
			  IGST_AMOUNT, CGST_AMOUNT, SGST_AMOUNT, XN_VALUE_WITHOUT_GST, XN_VALUE_WITH_GST, ORDER_NO, 
			  ONLINE_BILL_REF_NO, ITEM_ROUND_OFF, A.PRODUCT_CODE, ARTICLE_CODE, ARTICLE_NO, ARTICLE_NAME, PARA1_CODE, PARA1_NAME, 
			  PARA2_CODE, PARA2_NAME, PARA3_CODE, PARA3_NAME, UOM_NAME, DEPT_ID, CODING_SCHEME, 
			  INACTIVE,A.NEW_QUANTITY_IN_STOCK AS QUANTITY_IN_STOCK, PURCHASE_PRICE, SCHEME_ID, SECTION_NAME, SECTION_CODE, SUB_SECTION_CODE, 
			  SUB_SECTION_NAME, PARA4_CODE, PARA5_CODE, PARA6_CODE, PARA4_NAME, PARA5_NAME, PARA6_NAME, UOM_CODE, UOM_TYPE, 
			  ART_DT_CREATED, PARA3_DT_CREATED, SKU_DT_CREATED, STOCK_NA, EAN, ITEM_FORM_ID, FORM_NAME, PRODUCT_NAME, ER_FLAG,
			  FIX_MRP, INV_DT, RECEIPT_DT, ARTICLE_ALIAS,A.STK_BIN_ID AS  BIN_ID, BIN_NAME, WIP_UID, LANDED_COST, ONLINE_BAR_CODE, VENDOR_EAN_NO,
			  ERRMSG, RATE, DISCOUNT_PERCENTAGE, DISCOUNT_AMOUNT, OCTROI_PERCENTAGE, OCTROI_AMOUNT, NET_RATE, ITEM_TAX_AMOUNT, 
			  TAX_STATUS, ITEM_TAX_PERCENTAGE, INV_TAX_STATUS, TAX_METHOD, FORM_TAX_PERCENTAGE, ITEM_EXCISE_MRP, 
			  ITEM_EXCISE_ACCESSIBLE_PERCENTAGE, ITEM_EXCISE_ACCESSIBLE_AMOUNT, ITEM_EXCISE_DUTY_PERCENTAGE, 
			  ITEM_EXCISE_DUTY_AMOUNT, ITEM_EXCISE_EDU_CESS_PERCENTAGE, ITEM_EXCISE_EDU_CESS_AMOUNT, 
			  ITEM_EXCISE_HEDU_CESS_PERCENTAGE, ITEM_EXCISE_HEDU_CESS_AMOUNT, 
			  A.INVOICE_QUANTITY  AS INVOICE_QUANTITY, 
			  A.SCHEME_QUANTITY, 
			  A.QUANTITY   AS  QUANTITY,
			  OLD_QUANTITY, 
			  ITEM_EXCISE_MRPVAL, BASEAMOUNT_FOR_TAX, EXCISABLE, MRP, WS_PRICE, GIVE_CREDIT_VAT, CREDIT_VAT_PERCENTAGE, 
			  PARTY_RATE_BASE_PRICE, PARTY_RATE_CAL_MODE, PARTY_RATE_GIVE_CREDIT_VAT, VATPAIDONMRP, PARTY_FINAL_MARGIN, 
			  MANUAL_RATE_CHANGED, CREDIT_VAT_AMOUNT, CHARGE_TAX_PCT, CREDIT_CENTRAL_TAX_PCT, CREDIT_PURCHASE_TAX_PCT, 
			  BOX_NO, BOX_DT, BOX_ID,remarks 
			  FROM #TMPWSL_ITEM_DETAILS A

			  
        END

	 END
	 ELSE
	 BEGIN
	      
	  
		 UPDATE A SET BIN_ID= B.BIN_ID,
		 QUANTITY_IN_STOCK=B.QUANTITY_IN_STOCK
		 FROM WSL_ITEM_DETAILS A 
		 JOIN PMT01106 B ON A.PRODUCT_CODE=B.PRODUCT_CODE
		 JOIN SKU D ON D.PRODUCT_CODE=B.PRODUCT_CODE
		 JOIN ARTICLE E ON E.ARTICLE_CODE=D.ARTICLE_CODE
		 JOIN WSL_INV_SETTINGS F ON F.SP_ID=A.SP_ID
		 JOIN BIN  (NOLOCK) ON BIN.BIN_ID=B.BIN_ID
		 JOIN BINUSERS C ON C.BIN_ID=BIN.MAJOR_BIN_ID AND F.USER_CODE=C.USER_CODE
		 WHERE A.SP_ID=@NSPID AND B.QUANTITY_IN_STOCK >0  AND B.DEPT_ID= @CLOC_ID
		 AND (F.USER_CODE='0000000' OR C.USER_CODE=F.USER_CODE)
		-- AND C.BIN_ID=(CASE WHEN @BMBO_COUNTER=0 THEN F.LOGIN_BIN_ID ELSE C.BIN_ID END)	
		 AND (@NPASTE=0 OR A.BIN_ID=B.BIN_ID) 
		 and b.bin_id<>'999' 
		 AND ISNULL(BIN.stk_available_trn,0)=1   


	

	     
	 END
	 
	
	 --PROCESS OF PERISHABLE BARCODE
	  PRINT 'PROCESS OF PERISHABLE BARCODE -100'
	  
		 IF OBJECT_ID('TEMPDB..#TMPFIXCODE','U') IS NOT NULL
			 DROP TABLE #TMPFIXCODE

         
		 SELECT B.ROW_ID,B.PRODUCT_CODE,B.DEPT_ID,B.BIN_ID ,SKU.MRP,
		        ART.PERISHABLE
		 INTO #TMPFIXCODE 
		 FROM WSL_ITEM_DETAILS B 
		 JOIN SKU ON SKU.PRODUCT_CODE =B.PRODUCT_CODE 
		 JOIN ARTICLE ART ON ART.ARTICLE_CODE=SKU.ARTICLE_CODE
		 WHERE ISNULL(SKU.BARCODE_CODING_SCHEME,art.coding_scheme)=1 
	     AND  SP_ID=@NSPID 
	     AND  ISNULL(ART.STOCK_NA,0)=0 
	     AND CHARINDEX('@',B.PRODUCT_CODE)=0
	    
	
	  
	   
	    PRINT 'UPDATE STOCK BARCODE -110'
	    IF EXISTS (SELECT TOP 1 'U' FROM #TMPFIXCODE)  
	    BEGIN
	        
			if isnull(@NPASTE,0)=0
			begin

	           EXEC SP3S_UPDATE_PERISHABLE_STOCK @NSPID
			end
			else 
			begin

			


			 UPDATE A SET MRP =SKU.MRP ,WS_PRICE =SKU.WS_PRICE ,
				              PURCHASE_PRICE =SKU.PURCHASE_PRICE ,
							  DONOT_UPDATE_MRP=1,
							  QUANTITY_IN_STOCK =1000  
			FROM WSL_ITEM_DETAILS A (NOLOCK)
			JOIN #TMPFIXCODE TMP ON A.ROW_ID =TMP.ROW_ID
			JOIN PMT01106 B (NOLOCK) ON A.PRODUCT_CODE =CASE WHEN CHARINDEX('@',B.PRODUCT_CODE)=0 THEN B.PRODUCT_CODE 
		                             ELSE SUBSTRING (B.PRODUCT_CODE,1, CHARINDEX('@',B.PRODUCT_CODE)-1) END AND B.DEPT_ID=@CLOC
		    JOIN SKU (NOLOCK) ON SKU.PRODUCT_CODE =B.PRODUCT_CODE 
		    WHERE B.QUANTITY_IN_STOCK >0 

			 
			    UPDATE A SET MRP =SKU.MRP ,WS_PRICE =SKU.WS_PRICE ,
				              PURCHASE_PRICE =SKU.PURCHASE_PRICE ,
							  DONOT_UPDATE_MRP=1,
							  QUANTITY_IN_STOCK =1000
				 FROM WSL_ITEM_DETAILS A (NOLOCK)
				 JOIN #TMPFIXCODE TMP ON A.ROW_ID =TMP.ROW_ID
				 JOIN SKU (NOLOCK) ON SKU.PRODUCT_CODE =a.PRODUCT_CODE 
				 where isnull(a.mrp,0)=0
                      

			   
			end

			  
	        UPDATE A  SET DONOT_UPDATE_MRP=1
	        FROM WSL_ITEM_DETAILS A
	        JOIN  #TMPFIXCODE B ON A.ROW_ID=B.ROW_ID 
	        WHERE SP_ID=@NSPID

	    END
	    
	    
	 
	     
	 
	 --END OF PROCESS OF PERISHABLE BARCODE
	
	 IF @BDONOTCHECKSTOCK=0 AND ISNULL(@NPASTE,0)=0 
	 BEGIN
		 --SELECT 'NOT IN STOCK',PRODUCT_CODE ,QUANTITY_IN_STOCK,QUANTITY,OLD_QUANTITY FROM WSL_ITEM_DETAILS WHERE SP_ID=@NSPID	
		 IF @CXNTYPE='WSL' 
		 BEGIN
		     PRINT 'ENTER CHECK STOCK -7-WSL' 
					     
			DECLARE @NQUANTITY NUMERIC(10,3),@NQUANTITY_IN_STOCK NUMERIC(10,3),@NOLD_QUANTITY NUMERIC(10,3),
					@CERRMSG VARCHAR(1000)

			SELECT @NQUANTITY=ISNULL(A.QUANTITY,0), @NQUANTITY_IN_STOCK=SUM(A.QUANTITY_IN_STOCK),
			@NOLD_QUANTITY=ISNULL(A.OLD_QUANTITY,0),@nCodingScheme=ISNULL(b.barcode_coding_scheme,c.coding_scheme),
			@nDisCon=ISNULL(discon,0)
			FROM WSL_ITEM_DETAILS A 
			JOIN SKU B ON B.PRODUCT_CODE=A.PRODUCT_CODE
			JOIN ARTICLE C ON C.ARTICLE_CODE=B.ARTICLE_CODE
			LEFT OUTER JOIN
			 (
			   SELECT ROW_ID FROM #TMPFIXCODE
			   GROUP BY ROW_ID
			 ) TMP ON A.ROW_ID =TMP.ROW_ID 
			WHERE SP_ID=@NSPID AND  ISNULL(C.STOCK_NA,0)=0 
			AND ISNULL(A.PS_ID,'')='' AND TMP.ROW_ID IS NULL
			GROUP BY ISNULL(A.QUANTITY,0),ISNULL(A.OLD_QUANTITY,0),ISNULL(b.barcode_coding_scheme,c.coding_scheme),
			ISNULL(discon,0)

			SET @CERRMSG=''

			IF ISNULL(@NQUANTITY,0)>0 AND (ISNULL(@NQUANTITY_IN_STOCK,0)+ISNULL(@NOLD_QUANTITY,0))=0
			SET @CERRMSG='1.BARCODE NOT IN STOCK....PLEASE CHECK'

			IF ISNULL(@NQUANTITY,0)> (ISNULL(@NQUANTITY_IN_STOCK,0)+ISNULL(@NOLD_QUANTITY,0))
			BEGIN
				IF NOT (ISNULL(@NQUANTITY,0)=1 AND @nDisCon=2 AND @nCodingScheme<>3)
					SET @CERRMSG='BAR CODE SCAN QTY : '+LTRIM(RTRIM(STR(@NQUANTITY,10,2)))+' STOCK QTY :'+LTRIM(RTRIM(STR(ISNULL(@NQUANTITY_IN_STOCK,0)+ISNULL(@NOLD_QUANTITY,0),10,2)))+'....CAN NOT PROCEED'
				ELSE
					UPDATE a SET INVOICE_QUANTITY=ISNULL(@NQUANTITY_IN_STOCK,0)
					FROM WSL_ITEM_DETAILS A 
					WHERE SP_ID=@NSPID  AND ISNULL(errmsg,'')=''											
			END	
			
			UPDATE WSL_ITEM_DETAILS SET ERRMSG =@CERRMSG
			FROM WSL_ITEM_DETAILS A 
			WHERE SP_ID=@NSPID  AND ISNULL(errmsg,'')=''
			
		
		 
		 END
		 ELSE
		 BEGIN
		
		     
			 PRINT 'ENTER CHECK STOCK -7'
			 UPDATE A SET ERRMSG=(CASE WHEN ISNULL(A.QUANTITY_IN_STOCK,0)+ISNULL(A.OLD_QUANTITY,0)=0 THEN '2.BARCODE NOT IN STOCK....PLEASE CHECK'
			 ELSE 'BAR CODE SCAN QTY : '+LTRIM(RTRIM(STR(A.QUANTITY,10,2)))+' STOCK QTY :'+LTRIM(RTRIM(STR(ISNULL(A.QUANTITY_IN_STOCK,0)+ISNULL(A.OLD_QUANTITY,0),10,2)))+'....CAN NOT PROCEED' END)
			 FROM WSL_ITEM_DETAILS A 
			 JOIN SKU B ON B.PRODUCT_CODE=A.PRODUCT_CODE
			 JOIN ARTICLE C ON C.ARTICLE_CODE=B.ARTICLE_CODE
			 LEFT OUTER JOIN
			 (
			   SELECT ROW_ID FROM #TMPFIXCODE
			   GROUP BY ROW_ID
			 ) TMP ON A.ROW_ID =TMP.ROW_ID 
			 WHERE SP_ID=@NSPID AND TMP.ROW_ID IS  NULL 
			 AND  (ISNULL(A.QUANTITY_IN_STOCK,0)+ISNULL(A.OLD_QUANTITY,0))<A.QUANTITY AND ISNULL(C.STOCK_NA,0)=0 
			 AND ISNULL(A.PS_ID,'')=''  AND ISNULL(a.errmsg,'')=''
		 END
	 END
	 ELSE
		 UPDATE A SET BIN_ID=CASE WHEN ISNULL(A.DONOT_UPDATE_MRP,0)=0 THEN  B.BIN_ID ELSE A.BIN_ID END,
		 QUANTITY_IN_STOCK=CASE WHEN ISNULL(A.DONOT_UPDATE_MRP,0)=0 THEN
		 (CASE WHEN ISNULL(A.PS_ID,'')='' THEN B.QUANTITY_IN_STOCK ELSE A.QUANTITY_IN_STOCK END)
		 ELSE a.QUANTITY_IN_STOCK END
		 FROM WSL_ITEM_DETAILS A 
		 JOIN PMT01106 B ON A.PRODUCT_CODE=B.PRODUCT_CODE
		 JOIN BIN  (NOLOCK) ON BIN.BIN_ID=B.BIN_ID
		 JOIN SKU D (NOLOCK) ON D.PRODUCT_CODE=B.PRODUCT_CODE
		 JOIN ARTICLE E (NOLOCK) ON E.ARTICLE_CODE=D.ARTICLE_CODE
		 JOIN WSL_INV_SETTINGS F (NOLOCK) ON F.SP_ID=A.SP_ID
		 JOIN BINUSERS C (NOLOCK) ON C.BIN_ID=BIN.MAJOR_BIN_ID and  F.USER_CODE=C.USER_CODE
		 WHERE A.SP_ID=@NSPID  AND B.DEPT_ID= @CLOC_ID
		 AND (F.USER_CODE='0000000' OR C.USER_CODE=F.USER_CODE)
		 AND B.QUANTITY_IN_STOCK >0 
		 AND (@NPASTE=0 OR A.BIN_ID=B.BIN_ID) 
		 and b.bin_id<>'999' 
		 AND ISNULL(BIN.stk_available_trn,0)=1   
		


		
		  
	 PRINT 'ENTER CHECK STOCK -8'
	 UPDATE WSL_ITEM_DETAILS SET BIN_ID='000',QUANTITY_IN_STOCK=0
	 WHERE SP_ID=@NSPID AND BIN_ID IS NULL
	 

	 --UPDATE A SET ERRMSG='BARCODE IS PART OF STOCK RECONCILIATION....PLEASE CHECK'
	 --FROM WSL_ITEM_DETAILS A 
	 --JOIN PMT01106 B ON A.PRODUCT_CODE=B.PRODUCT_CODE
	 --JOIN STMH01106 C ON C.REP_ID=B.REP_ID AND B.DEPT_ID= C.DEPT_ID
	 --JOIN BIN  (NOLOCK) ON BIN.BIN_ID=B.BIN_ID
	 --JOIN BINUSERS D ON D.BIN_ID=BIN.MAJOR_BIN_ID
	 --JOIN WSL_INV_SETTINGS E ON E.SP_ID=A.SP_ID
	 --WHERE A.SP_ID=@NSPID AND B.BIN_ID=E.LOGIN_BIN_ID AND D.USER_CODE=E.USER_CODE
	 --AND B.DEPT_ID IN (SELECT location_id FROM WSL_INV_SETTINGS WHERE SP_ID=@NSPID  )
	 --AND ISNULL(errmsg,'')=''




	   
	UPDATE A SET ERRMSG ='STOCK NOT AVAILABLE FOR OUTWARD TRANSACTION' FROM WSL_ITEM_DETAILS A (NOLOCK)
	JOIN BIN (NOLOCK) ON A.BIN_ID =BIN.BIN_ID WHERE ISNULL(BIN.STK_AVAILABLE_TRN,0)=0 AND SP_ID=@NSPID
	and  ISNULL(errmsg,'')=''

--CHANGE 
	  UPDATE A SET UOM_TYPE =  U.UOM_TYPE, 		STOCK_NA =  B.STOCK_NA, 		CODING_SCHEME = 
	   ISNULL(sku.barcode_coding_scheme,B.CODING_SCHEME), 
	   		
	   PURCHASE_PRICE =  SKU.purchase_price ,		
	   MRP =CASE WHEN ISNULL(A.DONOT_UPDATE_MRP,0)=0 THEN SKU.MRP ELSE A.MRP END , 		
	   WS_PRICE =SKU.ws_price , 
	   
	   ER_FLAG =  SKU.ER_FLAG, 		FIX_MRP =  B.FIX_MRP, 		ARTICLE_NO =  B.ARTICLE_NO, 		ARTICLE_NAME =  B.ARTICLE_NAME, 		PARA1_NAME =  C.PARA1_NAME, 		PARA2_NAME =  D.PARA2_NAME, 		PARA3_NAME =  F.PARA3_NAME, 		ONLINE_BAR_CODE = SKU.ONLINE_PRODUCT_CODE, 		VENDOR_EAN_NO = SKU.VENDOR_EAN_NO, 		PRODUCT_NAME =  SKU.PRODUCT_NAME, 		ARTICLE_ALIAS =  B.ALIAS, 		BIN_NAME =  BIN.BIN_NAME, 		PARA6_NAME =  I.PARA6_NAME, 		
	   ART_DT_CREATED = B.DT_CREATED, 		
	   PARA3_DT_CREATED = F.DT_CREATED, 		SKU_DT_CREATED = SKU.DT_CREATED, 		EAN = EAN_SYNC.EAN, 		UOM_NAME = U.UOM_NAME, 		SECTION_NAME =  SM.SECTION_NAME, 		SECTION_CODE =  SM.SECTION_CODE,
	   SUB_SECTION_CODE =  SD.SUB_SECTION_CODE, 		SUB_SECTION_NAME =  SD.SUB_SECTION_NAME, 		
	   PARA4_NAME =  G.PARA4_NAME, 		
	   PARA5_NAME =  H.PARA5_NAME, 		
	   ARTICLE_CODE = B.ARTICLE_CODE, 		
	   PARA1_CODE =  SKU.PARA1_CODE, 		PARA2_CODE =  SKU.PARA2_CODE, 		
	   PARA3_CODE =  SKU.PARA3_CODE, 		PARA4_CODE =  SKU.PARA4_CODE, 		
	   PARA5_CODE =  SKU.PARA5_CODE, 		PARA6_CODE =  SKU.PARA6_CODE, 	
	   	UOM_CODE =  U.UOM_CODE
		FROM [WSL_ITEM_DETAILS] A
		JOIN SKU (NOLOCK) ON SKU.PRODUCT_CODE=A.PRODUCT_CODE
		JOIN ARTICLE B  (NOLOCK) ON B.ARTICLE_CODE = SKU.ARTICLE_CODE        
		JOIN SECTIOND SD  (NOLOCK) ON B.SUB_SECTION_CODE = SD.SUB_SECTION_CODE      
		JOIN SECTIONM SM  (NOLOCK) ON SD.SECTION_CODE = SM.SECTION_CODE      
		JOIN PARA1 C  (NOLOCK) ON SKU.PARA1_CODE = C.PARA1_CODE        
		JOIN PARA2 D  (NOLOCK) ON SKU.PARA2_CODE = D.PARA2_CODE        
		JOIN PARA3 F  (NOLOCK) ON SKU.PARA3_CODE = F.PARA3_CODE        
		JOIN PARA4 G  (NOLOCK) ON SKU.PARA4_CODE = G.PARA4_CODE        
		JOIN PARA5 H  (NOLOCK) ON SKU.PARA5_CODE = H.PARA5_CODE        
		JOIN PARA6 I  (NOLOCK) ON SKU.PARA6_CODE = I.PARA6_CODE     
		LEFT OUTER JOIN UOM U  (NOLOCK) ON B.UOM_CODE = U.UOM_CODE   
		JOIN BIN (NOLOCK) ON BIN.BIN_ID=A.BIN_ID
		LEFT OUTER JOIN EAN_SYNC (NOLOCK) ON EAN_SYNC.PRODUCT_CODE=SKU.PRODUCT_CODE
		WHERE SP_ID=@NSPID AND ISNULL(ERRMSG,'')=''


	SELECT @NAFTERCALINVQTY=SUM(INVOICE_QUANTITY) FROM WSL_ITEM_DETAILS WHERE SP_ID=@NSPID

	

	IF ISNULL(@NBEFORECALINVQTY,0)<> ISNULL(@NAFTERCALINVQTY ,0) AND ISNULL(@NBEFORECALINVQTY,0)<>0 and @NPASTE =1
	    update wsl_item_details set errmsg='Quantity mismatch before scan '+rtrim(ltrim(str(@NBEFORECALINVQTY)))+' after scan'+rtrim(ltrim(str(@NAFTERCALINVQTY))) where sp_id=@NSPID
	
	  
			  
END
--END OF PROCEDURE - SP3S_CHECKSTOCK_NEW
