CREATE PROCEDURE SAVETRAN_RPS
(  
 @NUPDATEMODE  NUMERIC(1,0),  
 @NSPID    VARCHAR(40),  
 @CMEMONOPREFIX  VARCHAR(50),  
 @CFINYEAR   VARCHAR(10),  
 @CMACHINENAME  VARCHAR(100)='',  
 @CWINDOWUSERNAME VARCHAR(100)='',  
 @CWIZAPPUSERCODE VARCHAR(10)='0000000',  
 @CMEMOID   VARCHAR(40)='',  
 @CMEMODT   DATETIME='',  
 @BCALLEDFROMESTIMATE BIT=0
)  
--WITH ENCRYPTION
AS  
BEGIN  
   
	DECLARE @cStep VARCHAR(10),@BALLOWNEGSTOCK BIT ,@dMemoDt datetime 
	
BEGIN TRY  
	
	 -- @NUPDATEMODE: 1- NEW RETAIL SALE ADDED,   
	 --     2- NOT APPLICABLE,   
	 --     3- CURRENT RETAIL SALE CANCELLED,   
	 --     4- EXISTING RETAIL SALE EDITED  
	   
	 -- @CMEMOID:  MEMOID IS REQUIRED IF @NUPDATEMODE IS 3 (FROM CANCELLATION)  
	 DECLARE @CTEMPDBNAME   VARCHAR(100),  
	   @CMASTERTABLENAME  VARCHAR(100),  
	   @CDETAILTABLENAME  VARCHAR(100),  
	   @CTEMPMASTERTABLENAME VARCHAR(100),  
	   @CTEMPDETAILTABLENAME VARCHAR(100),  
	   @CTEMPMASTERTABLE  VARCHAR(100),  
	   @CTEMPDETAILTABLE  VARCHAR(100),  
	   @CERRORMSG    VARCHAR(500),  
	   @LDONOTUPDATESTOCK  BIT,  
	   @CKEYFIELD1    VARCHAR(50),  
	   @CKEYFIELDVAL1   VARCHAR(50),  
	   @CKEYFIELD1_DETAIL2  VARCHAR(50),  
	   @CMEMONO    VARCHAR(20),  
	   @NMEMONOLEN    NUMERIC(20,0),  
	   @CMEMONOVAL    VARCHAR(50),  
	   @CLOCATIONID   VARCHAR(4),  
	   @CHODEPTID    VARCHAR(4),  
	   @CCMD     NVARCHAR(4000),  
	   @CCMDOUTPUT    NVARCHAR(4000),  
	   @NSAVETRANLOOP   BIT,  
	   @CREFAPPMEMOID   VARCHAR(40),@cMissingRowId VARCHAR(50),
	   @LENABLETEMPDATABASE BIT,@BNEGSTOCKFOUND BIT ,@dCmDt datetime,@cRpsMemoLen VARCHAR(5),@CLOCID	VARCHAR(5) 
	   
	SET @cStep = 5  -- DO VALIDATIONS ON INPUT DATA BY USER  
	   
	DECLARE @CRETVAL VARCHAR(MAX)  
	   
	   
	   
	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))  
	  
	   
	SET @CREFAPPMEMOID = ''  
	   
	SET @cStep = 7  -- SETTTING UP ENVIRONMENT  
	  
	  
	SELECT @BALLOWNEGSTOCK =VALUE FROM USER_ROLE_DET A (NOLOCK)
	JOIN USERS B (NOLOCK) ON A.ROLE_ID=B.ROLE_ID 
	WHERE USER_CODE=@CWIZAPPUSERCODE 
	AND FORM_NAME='FRMSALE' 
	AND FORM_OPTION='ALLOW_NEG_STOCK'		
	
	SET @BALLOWNEGSTOCK =ISNULL(@BALLOWNEGSTOCK,0)
	
	/*Rohit 17-04-2023 Against WizTicket 0323-00169
	--FOR SUPER USER NEGATIVE STOCK SHOULD NOT BE ALLOWED
	IF @CWIZAPPUSERCODE='0000000'
		SET @BALLOWNEGSTOCK=0
	*/
	SET @CTEMPDBNAME = ''  
	  
	SET @CMASTERTABLENAME = 'RPS_MST'  
	SET @CDETAILTABLENAME = 'RPS_DET'  
	  
	--SET @CTEMPMASTERTABLENAME = 'TEMP_RPS_MST_'+LTRIM(RTRIM(STR(@NSPID)))  
	--SET @CTEMPDETAILTABLENAME = 'TEMP_RPS_DET_'+LTRIM(RTRIM(STR(@NSPID)))  
	SET @CTEMPMASTERTABLENAME = 'RPS_RPS_MST_UPLOAD'
	SET @CTEMPDETAILTABLENAME = 'RPS_RPS_DET_UPLOAD'
	  
	  
	SET @CTEMPMASTERTABLE = @CTEMPDBNAME + @CTEMPMASTERTABLENAME  
	SET @CTEMPDETAILTABLE = @CTEMPDBNAME + @CTEMPDETAILTABLENAME  
	   
	SET @CERRORMSG   = ''  
	SET @LDONOTUPDATESTOCK = 0  
	SET @CKEYFIELD1   = 'CM_ID'  
	  
	SELECT @CLOCID=LOCATION_CODE FROM RPS_RPS_MST_UPLOAD (nolock) WHERE SP_ID=@NSPID    
	 
	IF ISNULL(@CLOCID,'')='' 
		SELECT @CLOCATIONID  =DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 
	ELSE 
		SET @CLOCATIONID=@CLOCID
	 
	SELECT @CHODEPTID  = [VALUE] FROM CONFIG (NOLOCK) WHERE CONFIG_OPTION='HO_LOCATION_ID'    
	      

	IF @NUPDATEMODE IN (1,2)
	BEGIN
	  
	   IF ISNULL(@CLOCATIONID,'')=''
		 BEGIN
			SET @CERRORMSG = ' LOCATION ID CAN NOT BE BLANK  '  
			GOTO END_PROC    
		 END

		SET @cStep = 5  -- GETTING ID INFO FROM TEMP TABLE  
		-- GETTING CM ID WHICH IS BEING EDITED  
		SELECT @CKEYFIELDVAL1 = CM_ID,@CMEMONOVAL = CM_NO,@cMemoId=cm_id,@DCMDT=cm_dt FROM
		rps_rps_mst_upload (NOLOCK) WHERE SP_ID=LTRIM(RTRIM((@NSPID)))

		IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )  
		BEGIN  
			SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(@cStep)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'  
			GOTO END_PROC      
		END  
		
		EXEC SP_VALIDATEXN_BEFORESAVE 'RPS',@NSPID,'0000000',@NUPDATEMODE,@CCMDOUTPUT OUTPUT,@BNEGSTOCKFOUND OUTPUT  
		     
		IF ISNULL(@CCMDOUTPUT,'') <> ''  
		BEGIN  
			SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(@cStep)) + ' DATA VALIDATION ON TEMP DATA FAILED : ' + @CCMDOUTPUT + '...'  
			GOTO END_PROC  
		END  


	END  
	    
	   
	IF @NUPDATEMODE IN ( 3,4) 
	BEGIN  
		  IF ISNULL(@CMEMOID,'') = ''  	
		  BEGIN
			   SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(@cStep)) + ' MEMO ID REQUIRED IF CALLED FROM '+(CASE WHEN @nUpdatemode=3 THEN
			   'CANCELLATION'  ELSE 'CTRL+F8' END)
			   GOTO END_PROC      
          END

		SET @cStep = 8.3
		EXEC SP_CHKXNSAVELOG 'RPS',@cStep,0,@NSPID,1

		EXEC SP3S_upd_qty_lastupdate
		@nUpdateMode=@nUpdateMode,
		@cXnType='RPS',
		@cMasterTable='rps_mst',
		@cMemoIdCol='cm_id',
		@cMemoId=@cMemoId,
		@CERRORMSG=@CERRORMSG OUTPUT
	
		IF ISNULL(@cErrormsg,'')<>''
			GOTO END_PROC

		  IF @NUPDATEMODE=4
			GOTO lblUPDATEDATE
	END   
	    
	SET @cStep=15  

	SET @CMEMONO   = 'CM_NO'  	  
	EXEC SP_CHKXNSAVELOG 'SLS',@cStep,0,@NSPID  
	
	
	
    BEGIN TRANSACTION  
	IF @NUPDATEMODE<>1
	BEGIN
		IF @NUPDATEMODE=2
			SELECT TOP 1 @cMemoId=cm_id FROM  rps_rps_mst_UPLOAD (NOLOCK) WHERE sp_id=@nSpId
	
	END
	
		IF @NUPDATEMODE<>3
		BEGIN
			  PRINT 'START NORMALIZE_FIX_PRODUCT_CODE '		    
			  
			  EXEC SP3S_NORMALIZE_FIX_PRODUCT_CODE 'RPS',@NSPID,@NUPDATEMODE,
			  @CTEMPDETAILTABLE,@CMEMOID,@CERRORMSG OUTPUT,'',@CLOCID,@CWIZAPPUSERCODE

			  IF ISNULL(@CERRORMSG,'')<>''
			  BEGIN
				   SET @CERRORMSG='ERROR IN RORMALIZATION'+@CERRORMSG
				   GOTO END_PROC
			  END
			  			
		END  
        

	IF @NUPDATEMODE<>4
	BEGIN
		IF EXISTS (SELECT TOP 1 product_code FROM savetran_barcode_netqty (NOLOCK) WHERE sp_id=@nSpId)
			delete from savetran_barcode_netqty WITH (ROWLOCK) WHERE sp_id=@nSpid

		IF @NUPDATEMODE IN (1,2)
		BEGIN
			INSERT savetran_barcode_netqty (sp_id,DEPT_ID,BIN_ID,PRODUCT_CODE,XN_QTY,bin_transfer,new_entry)	
			SELECT @nSpId as sp_id,@CLOCATIONID,A.BIN_ID,A.PRODUCT_CODE,SUM(A.QUANTITY),0 as bin_transfer,1 as new_entry
			FROM RPS_RPS_DET_UPLOAD A (NOLOCK)
			JOIN SKU_names B (NOLOCK) ON A.product_code=B.product_code
			WHERE A.SP_ID=@nSpId AND ISNULL(b.stock_na,0)=0  
			GROUP BY A.DEPT_ID,A.BIN_ID,A.PRODUCT_CODE
		END
		IF @NUPDATEMODE IN (2,3)
			INSERT savetran_barcode_netqty (sp_id,DEPT_ID,BIN_ID,PRODUCT_CODE,XN_QTY,bin_transfer,new_entry)	
			SELECT @nSpId as sp_id, mst.location_Code  ,A.BIN_ID,A.PRODUCT_CODE,-SUM(A.QUANTITY),0 as bin_transfer,0 as new_entry
			FROM RPS_DET A (NOLOCK)
			join RPS_MST mst (nolock) on a.cm_id =mst.cm_id 
			JOIN SKU_names B (NOLOCK) ON A.product_code=B.product_code
			WHERE A.cm_ID=@cMemoId AND ISNULL(b.stock_na,0)=0  
			GROUP BY mst.location_Code ,A.BIN_ID,A.PRODUCT_CODE
		

	END

	/*STOCK UPDATE CHANGES*/
	  
	-- START UPDATING XN TABLES   
	IF @NUPDATEMODE = 1 -- ADDMODE   
	BEGIN   
	     
		   SET @cStep = 20  -- GENERATING NEW KEY  
		     
		   -- GENERATING NEW MEMO NO    

			select @cRpsMemoLen=value from config (nolock) where config_option='rps_memo_len'
	  

			 -- (We will now onwards shall generate 12 chars pack slip no. irrespective of previous number length
			 --  as discussed with Sir after problem reported by Arun while testing REtail pack slip for Bigshop some scenario (Sanjay:22-12-2023))
			

		   SET @NSAVETRANLOOP=0  
		   WHILE @NSAVETRANLOOP=0  
		   BEGIN  
	      		EXEC GETNEXTKEY_RPS 
				@CPREFIX=@CMEMONOPREFIX,   
				@CFINYEAR=@CFINYEAR,
				@CNEWKEYVAL=@CMEMONOVAL OUTPUT     
			      
				PRINT @CMEMONOVAL  
				SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+'  (NOLOCK)   
					  WHERE '+@CMEMONO+'='''+@CMEMONOVAL+'''   
					  AND FIN_YEAR = '''+@CFINYEAR+''' )  
					SET @NLOOPOUTPUT=0  
				   ELSE  
					SET @NLOOPOUTPUT=1'  
				PRINT @CCMD  
				EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT  
		   END  
		  
		   IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
		   BEGIN  
			  SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(@cStep)) + ' ERROR CREATING NEXT MEMO NO....'   
			  GOTO END_PROC      
		   END  
		  
		   SET @cStep = 30  -- GENERATING NEW ID  
		  
		   -- GENERATING NEW JOB ORDER ID  
		   SET @CKEYFIELDVAL1 = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
		   
		   IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		   BEGIN  
			  SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(@cStep)) + ' ERROR CREATING NEXT MEMO ID....'  
			  GOTO END_PROC  
		   END  
		  
		   SET @cStep = 32  -- UPDATING NEW ID INTO TEMP TABLES  
		     
		   -- UPDATING NEWLY GENERATED JOB ORDER NO AND JOB ORDER ID IN PIM AND PID TEMP TABLES  
		   SET @CCMD = 'UPDATE rps_rps_mst_upload WITH (ROWLOCK) SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' +   
			  @CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+LTRIM(RTRIM((@NSPID))) +''''  
		   PRINT @CCMD  
		   EXEC SP_EXECUTESQL @CCMD  
		     
		   SET @cStep = 34  
		     
		   SET @CCMD = 'UPDATE rps_rps_det_upload WITH (ROWLOCK)  SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+LTRIM(RTRIM((@NSPID))) +''''  
		   PRINT @CCMD  
		   EXEC SP_EXECUTESQL @CCMD  

			SET @cStep = 35.4
			EXEC SP_CHKXNSAVELOG 'RPS_after',@cStep,0,@NSPID,1
			
			EXEC SP3S_GENAPR_DATA 
			@nSpId=@nSpId,
			@cMemoId=@CKEYFIELDVAL1,
			@CFINYEAR=@CFINYEAR,
			@cLocationId=@cLocationId,
			@bCalledfromRps=1,
			@BALLOWNEGSTOCK=@BALLOWNEGSTOCK,
			@CERRORMSG=@CERRORMSG OUTPUT

			IF ISNULL(@cErrormsg,'')<>''
				GOTO END_PROC
		        
	END     -- END OF ADDMODE  
	ELSE    -- CALLED FROM EDITMODE  
	BEGIN    -- START OF EDITMODE  
	       SET @cStep = 55  -- STORING OLD STATUS OF BARCODES   
		     
		   IF @NUPDATEMODE = 3     
		   BEGIN  
			    SET @cKeyfieldval1=@cMemoId

				SET @cStep=60  
				-- UPDATING SENTTOHO FLAG  
				SET @CCMD = N'UPDATE ' + @CMASTERTABLENAME + ' SET CANCELLED = 1,LAST_UPDATE=GETDATE() ' +   
				   N' WHERE cm_id='''+@cMemoId + ''''  
				EXEC SP_EXECUTESQL @CCMD  
				
				EXEC SP3S_UPDATE_PMTSTOCK_RPS
				@nUpdatemode=@nUpdatemode,
				@nSpId=@nSpId,
				@bRevertFlag=1,
				@BALLOWNEGSTOCK=@BALLOWNEGSTOCK,
				@BNEGSTOCKFOUND=@BNEGSTOCKFOUND OUTPUT,
				@CERRORMSG=@CERRORMSG OUTPUT

				IF ISNULL(@cErrormsg,'')<>''
					GOTO END_PROC
				
		   END  
		     	
			
		   IF (@NUPDATEMODE = 3) 
		   BEGIN
				SET @cStep = 67 -- Deleting reference from Delivery Rack table where packets for Pack Slip are assigned to a Rack
				IF EXISTS (SELECT TOP 1 rps_id FROM delivery_racks_issue_details (NOLOCK) WHERE rps_id=@cMemoId)
					DELETE FROM delivery_racks_issue_details WITH (ROWLOCK) WHERE rps_id=@cMemoId

				GOTO END_PROC
		   END	

		   SET @cStep = 70
			-- UPDATING SENTTOHO FLAG  
			SET @CCMD = N'UPDATE rps_rps_mst_upload WITH (ROWLOCK)  SET SENT_TO_HO = 0,LAST_UPDATE=GETDATE() WHERE SP_ID='''+LTRIM(RTRIM((@NSPID))) +''' '  
			EXEC SP_EXECUTESQL @CCMD  
		                 
		
		   -- REVERTING BACK THE STOCK OF PMT W.R.T CURRENT ISSUE  
		   SET @cStep = 80  -- REVERTING STOCK  

			IF EXISTS (SELECT TOP 1 tablename FROM savetran_updcols_updatestr (NOLOCK) WHERE sp_id=@nSPID)
				DELETE FROM savetran_updcols_updatestr WITH (ROWLOCK) WHERE sp_id=@nSPID

			INSERT savetran_updcols_updatestr (sp_id,tablename,updatestr)
			SELECT @nSPID as sp_id,tablename,'' from mirrorxnsinfo (NOLOCK)
			WHERE tablename IN ('rps_mst','rps_det')

			SET @cStep = 82.5		-- SETTTING UP ENVIRONMENT
			EXEC SP_CHKXNSAVELOG 'WPS',@cStep,1,@nSpId,'',1	 	       

			SELECT TOP 1 @cMissingRowId=a.row_id FROM rps_det A (NOLOCK) 
			LEFT JOIN 
			(SELECT row_id FROM RPS_rps_det_UPLOAD B (NOLOCK) WHERE sp_id=@nSpId) b
				ON A.row_ID =B.row_ID WHERE A.cm_id =@cMemoId AND b.row_id IS NULL

			IF ISNULL(@cMissingRowId,'')<>''
			BEGIN		
				SET @CSTEP=83.5
				EXEC SP_CHKXNSAVELOG 'RPS',@CSTEP,0,@CMEMOID,'',1
			
				DELETE A FROM rps_det A WITH (ROWLOCK) 
				LEFT JOIN 
				(SELECT row_id FROM RPS_rps_det_UPLOAD B (NOLOCK) WHERE sp_id=@nSpId) b
					ON A.row_ID =B.row_ID WHERE A.cm_id =@cMemoId AND b.row_id IS NULL

			END
	     
	END     -- END OF EDITMODE  
	  
	-- UPDATING MASTER TABLE (PIM01106) FROM TEMP TABLE  
	
	
	SET @cStep='88'
	UPDATE a WITH (ROWLOCK) SET subtotal=b.subtotal FROM RPS_rps_mst_UPLOAD a
	JOIN (SELECT sp_id,sum(net) subtotal FROM RPS_RPS_DET_UPLOAD (NOLOCK) WHERE sp_id=@NSPID
	      GROUP BY sp_id) b ON a.sp_id=b.sp_id

	DECLARE @nSubtotal NUMERIC(10,2),@NCMMDISCAMT NUMERIC(10,2),@NSLSSUBTOTAL NUMERIC(10,2),@NSLRSUBTOTAL NUMERIC(10,2)
    SET @cStep='90'
	SELECT @nSubtotal=subtotal,@NCMMDISCAMT=discount_amount FROM RPS_rps_mst_UPLOAD (NOLOCK) WHERE sp_id=@nSpId
	
	SELECT @NSLSSUBTOTAL=SUM(CASE WHEN net>0 THEN net else 0 end),
	@NSLRSUBTOTAL=SUM(CASE WHEN net<0 THEN net else 0 end) FROM RPS_RPS_DET_UPLOAD (NOLOCK)
	WHERE sp_id=@nSpId

	print 'Update cmm_discount amount'
	IF @NSUBTOTAL>0
	BEGIN
		SET @CSTEP='95'
		UPDATE RPS_RPS_DET_UPLOAD WITH (ROWLOCK) SET rps_mst_discount_amount=round((NET*@NCMMDISCAMT)/@NSLSSUBTOTAL,2)
		WHERE sp_id=@nSpId AND NET>0 
	END
	
	IF @NSUBTOTAL<0
	BEGIN
		SET @CSTEP='97'
		UPDATE RPS_RPS_DET_UPLOAD WITH (ROWLOCK) SET rps_mst_discount_amount=round((NET*@NCMMDISCAMT)/@NSLRSUBTOTAL,2)
		WHERE sp_id=@nSpId AND NET<0 
	END	
	
	SET @cStep = 97.8  -- UPDATING MASTER TABLE     
	  
	SET @CCMD=N'UPDATE rps_rps_mst_upload WITH (ROWLOCK)  SET NET_AMOUNT=ATD_CHARGES+SUBTOTAL-DISCOUNT_AMOUNT
				WHERE SP_ID='''+LTRIM(RTRIM((@NSPID))) +''''
	EXEC SP_EXECUTESQL @CCMD

	DECLARE @nNET_AMOUNT NUMERIC(14,2),@nRoundOff NUMERIC(14,2)
	SELECT @nNET_AMOUNT=NET_AMOUNT FROM rps_rps_mst_upload WITH (ROWLOCK)  WHERE SP_ID=@NSPID

	SET @nRoundOff =ROUND(@nNET_AMOUNT,0)-@nNET_AMOUNT
		
update rps_rps_mst_upload SET NET_AMOUNT=ROUND(@nNET_AMOUNT,0),ROUND_OFF=@nRoundOff WHERE SP_ID=@NSPID

	IF @NUPDATEMODE IN (1,2)
	BEGIN
		SET @cSTEP = 102
		UPDATE a SET total_quantity=b.total_quantity FROM rps_rps_MST_UPLOAD A WITH (ROWLOCK) 
		JOIN (SELECT sp_id,sum(quantity) as total_quantity FROM rps_rps_DET_UPLOAD b (NOLOCK)  
				WHERE sp_id=@nSpId GROUP BY sp_id) b ON a.sp_id=b.sp_id

		SET @cStep = 103.2
		EXEC SP_CHKXNSAVELOG 'RPS',@cStep,1,@nSpId,'',1	 
			
		EXEC SP3S_upd_qty_lastupdate
		@nUpdateMode=@NUPDATEMODE,
		@cXnType='RPS',
		@nSpId=@nSpId,
		@cMasterTable='rps_mst',
		@cMemoIdCol='cm_id',
		@cXnDtCol='cm_dt',
		@cUploadTableNamePara='rps_rps_mst_upload',
		@CERRORMSG=@CERRORMSG OUTPUT
	
		IF ISNULL(@cErrormsg,'')<>''
			GOTO END_PROC

	END
	
	SET @cStep = 105
	
	DECLARE @CWHERECLAUSE VARCHAR(100)
    SET @CWHERECLAUSE=' SP_ID='''+LTRIM(RTRIM((@NSPID)))+''''


	declare @lInsertonly bit,@cUpdatestr VARCHAR(4000),@LUPDATEONLY BIT
	SET  @LUPDATEONLY = 0
	SET @lInsertonly = (CASE WHEN @NUPDATEMODE=1 THEN 1 ELSE 0 END)

	EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
		  @CSOURCEDB	= @CTEMPDBNAME
		, @CSOURCETABLE = @CTEMPMASTERTABLENAME
		, @CDESTDB		= ''
		, @CDESTTABLE	= @CMASTERTABLENAME
		, @CKEYFIELD1	= @CKEYFIELD1
		,@BALWAYSUPDATE = 1
	    , @lUpdatexns = @lINSERTONLY
        ,@CFILTERCONDITION=@CWHERECLAUSE
		, @LUPDATEONLY = @LUPDATEONLY
		, @LINSERTONLY =  @lINSERTONLY
		
	   -- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE  
	SET @cStep = 110  -- UPDATING TRANSACTION TABLE  
	     
	     
	-- UPDATING ROW_ID IN TEMP TABLES - CMD01106  
	SET @CCMD = N'UPDATE rps_rps_det_upload WITH (ROWLOCK)  SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())  
			WHERE SP_ID='''+LTRIM(RTRIM((@NSPID))) +''' AND LEFT(ROW_ID,5) = ''LATER'''  
	EXEC SP_EXECUTESQL @CCMD  
	   
	SET @cStep = 112
	
	-- UPDATING ROW_ID IN TEMP TABLES - CMD01106  
	SET @CCMD = N'UPDATE rps_rps_det_upload WITH (ROWLOCK)  SET BASIC_DISCOUNT_PERCENTAGE=DISCOUNT_PERCENTAGE,BASIC_DISCOUNT_AMOUNT=DISCOUNT_AMOUNT
				  WHERE SP_ID='''+LTRIM(RTRIM((@NSPID))) +''' AND DISCOUNT_PERCENTAGE<>0 AND MANUAL_DISCOUNT=1 AND ISNULL(CARD_DISCOUNT_PERCENTAGE,0)=0 
				  AND ISNULL(BASIC_DISCOUNT_PERCENTAGE,0)=0'  
	EXEC SP_EXECUTESQL @CCMD 
	
		
		SET @cStep = 116  
	-- UPDATING ROW_ID IN TEMP TABLES - CMD01106  
	SET @CCMD = N'UPDATE rps_rps_det_upload WITH (ROWLOCK) 
	SET EMP_CODE=(CASE WHEN ISNULL(EMP_CODE,'''')='''' THEN ''0000000'' ELSE EMP_CODE END),
	EMP_CODE1=(CASE WHEN ISNULL(EMP_CODE1,'''')=''''   THEN ''0000000'' ELSE EMP_CODE1 END),
	EMP_CODE2=(CASE WHEN ISNULL(EMP_CODE2,'''')=''''   THEN ''0000000'' ELSE EMP_CODE2 END)
	WHERE SP_ID='''+LTRIM(RTRIM((@NSPID))) +''''  
	EXEC SP_EXECUTESQL @CCMD  
			     
	 
	SElect @LUPDATEONLY=0,@cUpdatestr=''

	IF @NUPDATEMODE=2 
	BEGIN
	
	   -- INSERTING/UPDATING THE ENTRIES IN PRD_JID TABLE FROM TEMPTABLE  
		SET @cStep = 118  -- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES  
	     
		SELECT @cUpdatestr=updatestr FROM  savetran_updcols_updatestr (NOLOCK) WHERE sp_id=@nSpId and  tablename='rps_det'
		
		SELECT TOP 1 @cMissingRowId=b.row_id FROM 
		(SELECT row_id  FROM RPS_RPS_DET_UPLOAD (NOLOCK) WHERE SP_id=(LEFT(@nSpId,38)+@cLocationId)) A
		RIGHT OUTER JOIN 
		(SELECT row_id FROM RPS_RPS_DET_UPLOAD (NOLOCK) WHERE SP_id=@nSPId) b ON 
		a.row_id=b.row_id WHERE a.row_id IS NULL

		IF ISNULL(@cMissingRowId,'')='' 
			SET @lUpdateonly=1
	END

	SET @cStep = 272.7		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES
	EXEC SP_CHKXNSAVELOG 'WSL',@cStep,0,@nSpId,'',1
			
	DECLARE @CWHERECLAUSEUpdate VARCHAR(500)

	EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN
			@CSOURCEDB	= @CTEMPDBNAME
		, @CSOURCETABLE = @CTEMPDETAILTABLENAME
		, @CDESTDB		= ''
		, @CDESTTABLE	= @CDETAILTABLENAME
		, @CKEYFIELD1	= 'ROW_ID'
		, @BALWAYSUPDATE = 1
		, @LINSERTONLY =  @LINSERTONLY
		, @LUPDATEXNS =  @LINSERTONLY
		, @lUpdateonly = @lUpdateonly
		, @CFILTERCONDITION=@CWHERECLAUSE
	     
	SET @cStep = 119  

	   -- UPDATING STOCK OF PMT W.R.T. CURRENT MEMO  
	SET @cStep = 130  -- UPDATING PMT TABLE  
	   
	
	EXEC SP3S_UPDATE_PMTSTOCK_RPS
			@nUpdatemode=@nUpdatemode,
			@nSpId=@nSpId,
			@bRevertFlag=0,
			@BALLOWNEGSTOCK=@BALLOWNEGSTOCK,
			@BNEGSTOCKFOUND=@BNEGSTOCKFOUND OUTPUT,
			@CERRORMSG=@CERRORMSG OUTPUT

	IF ISNULL(@cErrormsg,'')<>''
		GOTO END_PROC
		        
    ---- VALIDATING ENTRIES   
    SET @cStep = 155  -- VALIDATING ENTRIES  
	    
    EXEC VALIDATEXN  
		 @CXNTYPE = 'RPS'  
	   , @CXNID = @CKEYFIELDVAL1  
	   , @NUPDATEMODE = @NUPDATEMODE  
	   , @CCMD  = @CCMDOUTPUT OUTPUT  
	  , @CUSERCODE = @CWIZAPPUSERCODE
	  
    IF @CCMDOUTPUT <> ''  
    BEGIN  
	   SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(@cStep)) + ' DATA VALIDATION FAILED : ' + @CCMDOUTPUT + '...'  
	   GOTO END_PROC  
    END  
	
	SET @cStep = 157
	DECLARE @cSearchDetMemoId VARCHAR(50)

	select top 1 @cSearchDetMemoId=CM_ID from  rps_det (NOLOCK) WHERE cm_id=@CKEYFIELDVAL1

	IF @cSearchDetMemoId IS NULL
	BEGIN
		SET @CERRORMSG='Blank memo details cannot be saved...Please check'
		GOTO END_PROC
	END
	
	    
    -- AFTER SUCCESSFUL SAVING , JUST DROP THE TEMP TABLES CREATED BY APPLICATION  
    SET @cStep = 160  
	    
lblUPDATEDATE:  

    IF @NUPDATEMODE = 4  
    BEGIN  
		   SET @cStep = 170    
		   UPDATE RPS_MST SET CM_DT=@CMEMODT WHERE CM_ID=@CMEMOID  
		   SET @CKEYFIELDVAL1=@CMEMOID  
    END  
	  
    
END TRY  

BEGIN CATCH  
	  SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(@cStep)) + ' SQL ERROR: #' + LTRIM(RTRIM(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()  
	    
	  GOTO END_PROC  
END CATCH  
	   
END_PROC:  
	
	 UPDATE rps_mst WITH (ROWLOCk) SET last_update=getdate() WHERE cm_id=@CKEYFIELDVAL1

     PRINT 'ERROR AT LAT : '+ISNULL(@CERRORMSG,'') + ISNULL(@CCMDOUTPUT,'') + STR(ISNULL(@BNEGSTOCKFOUND,0))
	   
	 IF @@TRANCOUNT>0  
	 BEGIN  
		  IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')='' AND ISNULL(@BNEGSTOCKFOUND,0)=0  
		  BEGIN
		    

			COMMIT TRANSACTION
			DELETE A  FROM XNTYPE_CHECKSUM_MST A  WITH (ROWLOCK)  WHERE SP_ID=@NSPID
	        UPDATE rps_mst WITH (ROWLOCk) SET HO_SYNCH_LAST_UPDATE=''
			WHERE cm_id=@CKEYFIELDVAL1 

		  END	
		  ELSE		
		  begin
			ROLLBACK  
			DELETE A  FROM XNTYPE_CHECKSUM_MST A  WITH (ROWLOCK)  WHERE SP_ID=@NSPID
		  end
	 END  
	 
	 DELETE A  FROM XNTYPE_CHECKSUM_MST A  WITH (ROWLOCK)  WHERE SP_ID=@NSPID	   

	 IF ISNULL(@BNEGSTOCKFOUND,0)=0  
	 BEGIN  
		  INSERT @OUTPUT ( ERRMSG, MEMO_ID)  
		   VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,''))  
		  
		  SELECT * FROM @OUTPUT   
	 END   
	
	     
	   
	DELETE FROM RPS_RPS_MST_UPLOAD WITH (ROWLOCK) WHERE SP_ID=@NSPID	
	DELETE FROM RPS_RPS_DET_UPLOAD WITH (ROWLOCK) WHERE SP_ID=@NSPID	
	   
END     
------------------------------------------------------ END OF PROCEDURE SAVETRAN_RPS