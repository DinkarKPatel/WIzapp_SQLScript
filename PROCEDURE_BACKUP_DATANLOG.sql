CREATE PROCEDURE BACKUP_DATANLOG    
(    
  @CDBNAME VARCHAR(1000)    
 ,@CBACKUPPATH VARCHAR(1000)    
 ,@NBACKUPTYPE NUMERIC(1)    
)    
--WITH ENCRYPTION    
AS    
BEGIN    
	
	  -- No need to take Backup on Cloud datatabase as it is already taken through other Application 
	  IF EXISTS (SELECT TOP 1 'U'  FROM MASTER.INFORMATION_SCHEMA.TABLES (NOLOCK) WHERE TABLE_NAME='CLOUD_DBINFO')
	  BEGIN
			RETURN
	  END
	 

	 SET NOCOUNT ON       
	 DECLARE @CBACKUPFILENAME VARCHAR(1000),@CBACKUPFILE VARCHAR(MAX),@CGRPCODE VARCHAR(5),    
	   @CPASSWORD VARCHAR(10),@CDAYNAME VARCHAR(20),@CCMD NVARCHAR(MAX),@CLOGNAME VARCHAR(200),    
	   @NDBID INT,@CERRORMSG VARCHAR(MAX),@CBACKUP_TYPE CHAR(1),@CRFSOURCE VARCHAR(5),    
	   @CRFDBNAME VARCHAR(200),@NRFDBID INT,@CRFLOGNAME VARCHAR(200),@NLOOPCNT INT,    
	   @CCURLOCID CHAR(2),@CHOLOCID CHAR(2),@BBUILDRFOPT BIT,@CDBNAME_PARA VARCHAR(1000)    
	   ,@IS_ALREADY_SHRINK BIT=0   
     
	 DECLARE @tError TABLE (errmsg VARCHAR(MAX))

	 DECLARE @tOutput TABLE (file_name VARCHAR(500),backup_path VARCHAR(2000),errmsg VARCHAR(MAX))
	 
	 SET @CDAYNAME=DATENAME(WEEKDAY,GETDATE())    
	 SET @CPASSWORD=''    
	 IF RIGHT(LTRIM(RTRIM(@CBACKUPPATH)),1)='\'    
		SET @CBACKUPPATH=LEFT(LTRIM(RTRIM(@CBACKUPPATH)),LEN(LTRIM(RTRIM(@CBACKUPPATH)))-1)    
    
	 SET @CDBNAME_PARA=@CDBNAME    
     
	 SET @NLOOPCNT = 1    
    
	 SELECT TOP 1 @CCURLOCID=VALUE FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID'    
	 SELECT TOP 1 @CHOLOCID=VALUE FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'    
      
LBLSTART:    

BEGIN TRY
    SET @IS_ALREADY_SHRINK=0 
      
        
	 IF @NBACKUPTYPE=1    
	 BEGIN
		GOTO BACKUP_DATA    
	 END
	 ELSE IF @NBACKUPTYPE=2   
    
	  GOTO BACKUP_LOG    
	 ELSE     
	  GOTO END_PROC    
    
    
BACKUP_DATA:    
	 ---SHRINKING LOG FILE    
	 SELECT @NDBID=DATABASE_ID FROM MASTER.SYS.DATABASES WHERE NAME=@CDBNAME    
	 SELECT @CLOGNAME=NAME FROM MASTER.SYS.MASTER_FILES WHERE DATABASE_ID=@NDBID AND TYPE=1--LOG FILE NAME    
    
	  --BACKING UP THE DATABASE    
	 SET @CBACKUPFILENAME = @CDBNAME +'_FULL.BAK'      
	 SET @CBACKUPFILE = @CBACKUPPATH +'\'+@CBACKUPFILENAME    
     
	 
	 begin try
		EXEC SP3S_SHRINKLOG_forcly @nMode=1
	 end try
	 
	 begin catch
		goto lblFullBak
	 end catch
	 
lblFullBak:	
	  
	 EXEC BACKUPDATA @CDBNAME,@CBACKUPFILE,@CPASSWORD,@CERRORMSG OUTPUT  

	 IF ISNULL(@cErrormsg,'')<>''
			goto end_proc

	 SET @CCMD=N'USE '+@CDBNAME+';ALTER DATABASE '+@CDBNAME+' SET RECOVERY FULL'
	 PRINT  @CCMD    
	 EXEC SP_EXECUTESQL @CCMD  
     
	 EXEC CREATEBACKUPINFO @CDBNAME,@CERRORMSG,@CBACKUP_TYPE    
        
  
        
	 GOTO END_PROC    
    
    
    
BACKUP_LOG:    
	  

	 SET @CBACKUPFILENAME = @CDBNAME+'_LOG_'+CONVERT(VARCHAR(20),GETDATE(),112)+REPLACE(CONVERT(VARCHAR(20),GETDATE(),108),':','') +'.TRN'    
	 SET @CBACKUPFILE = @CBACKUPPATH +'\'+@CBACKUPFILENAME    
      
	 BEGIN TRY    
	  SET @CERRORMSG=''    
	  EXEC BACKUPTRAN @CDBNAME,@CBACKUPFILE,@CERRORMSG OUTPUT
	  
END TRY    
     
BEGIN CATCH    
	  SET @CBACKUP_TYPE='L'    
	  SET @CERRORMSG='ERROR MESSAGE - ' + ERROR_MESSAGE()    
	  PRINT @CERRORMSG    
END CATCH    
     
	 EXEC CREATEBACKUPINFO @CDBNAME,@CERRORMSG,@CBACKUP_TYPE    
      
	 GOTO END_PROC    


 END TRY    
     
BEGIN CATCH    
	SET @CERRORMSG='ERROR MESSAGE - ' + ERROR_MESSAGE()    
	SET @CBACKUP_TYPE='D'    
END CATCH    
      
      
END_PROC:    
	
	 INSERT @tOutput
	 SELECT @CBACKUPFILENAME AS FILENAME  ,@CBACKUPFILE AS BACKUP_PATH,ISNULL(@cErrormsg,'') as errmsg

	 DECLARE @cPmtDbName VARCHAR(500)
	 IF @NBACKUPTYPE=1     
	 BEGIN  
		EXEC  SP_SHRINKLOGFILE  @CDBNAME=@CDBNAME 

		IF @NLOOPCNT=1
		BEGIN
			SET @cPmtDbName=@CDBNAME+'_PMT'

			EXEC  SP_SHRINKLOGFILE  @CDBNAME=@cPmtDbName 
		END		

		IF @CDBNAME_PARA NOT LIKE '%PMT' OR @CDBNAME_PARA NOT LIKE '%IMAGE'    
			SET @NLOOPCNT = @NLOOPCNT+1    

		IF @NLOOPCNT = 2    
		BEGIN    
			SET @CDBNAME=@CDBNAME_PARA+'_IMAGE'     
			IF EXISTS(SELECT NAME FROM sys.databases WHERE name =@CDBNAME)
				GOTO LBLSTART  
			SET @NLOOPCNT = @NLOOPCNT+1     
		END    
	 END    
	 SET NOCOUNT OFF    


	 SELECT * FROM @tOutput
END 