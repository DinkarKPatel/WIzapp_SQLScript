CREATE PROCEDURE SAVETRAN_TRANSFER_TO_TRADING
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				varchar(50),
	@CMEMONOPREFIX		VARCHAR(50)='',
	@CFINYEAR			VARCHAR(10)='',
	@CMEMOID			VARCHAR(40)='',
	@BGETBARCODE BIT=0
)
----WITH ENCRYPTION
AS
BEGIN
	--changes by Dinkar in location id varchar(4)..
				

	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME1		VARCHAR(100),
			@CDETAILTABLENAME2		VARCHAR(100),
			@CDETAILTABLENAME3		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME1	VARCHAR(100),
			@CTEMPDETAILTABLENAME2	VARCHAR(100),
			@CTEMPDETAILTABLENAME3	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE1		VARCHAR(100),
			@CTEMPDETAILTABLE2		VARCHAR(100),
			@CTEMPDETAILTABLE3		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(4),
			@CLOCATIONID			VARCHAR(4),
			@CHODEPTID				VARCHAR(4),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@NSUBTOTAL NUMERIC(20,2),
			@BNEGSTOCKFOUND BIT,
			@CWSLINVOICEID	VARCHAR(22),
			@BPURTHROUGHIMPORT	BIT,@CMSG VARCHAR(200),@NTAX NUMERIC(20,2),@CLOCID	VARCHAR(4)
			
			DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	BEGIN TRY
		
		BEGIN TRANSACTION
			SET @NSTEP = 10	-- SETTTING UP ENVIRONMENT
		-- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List			
			SET @CTEMPDBNAME = ''

			SET @CMASTERTABLENAME	= 'TRANSFER_TO_TRADING_MST'
			SET @CDETAILTABLENAME	= 'TRANSFER_TO_TRADING_DET'
			SET @CDETAILTABLENAME1	= 'TRANSFER_TO_TRADING_SUB_DET'
			SET @CDETAILTABLENAME2	= 'TRANSFER_TO_TRADING_JOBS'
			SET @CDETAILTABLENAME3	= 'TRANSFER_TO_TRADING_BOM'
			
			SET @CTEMPMASTERTABLENAME	= 'TTM_TRANSFER_TO_TRADING_MST_UPLOAD'
			SET @CTEMPDETAILTABLENAME	= 'TTM_TRANSFER_TO_TRADING_DET_UPLOAD'
			SET @CTEMPDETAILTABLENAME1	= 'TTM_TRANSFER_TO_TRADING_SUB_DET_UPLOAD'
			SET @CTEMPDETAILTABLENAME2	= 'TTM_TRANSFER_TO_TRADING_JOBS_UPLOAD'
			SET @CTEMPDETAILTABLENAME3	= 'TTM_TRANSFER_TO_TRADING_BOM_upload'
			
			SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
			SET @CTEMPDETAILTABLE	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME
			SET @CTEMPDETAILTABLE1	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME1
			SET @CTEMPDETAILTABLE2	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME2
			SET @CTEMPDETAILTABLE3	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME3
			
			SET @CERRORMSG			= ''
			SET @CKEYFIELD1			= 'MEMO_ID'
			SET @CMEMONO			= 'MEMO_NO'
			SET @NMEMONOLEN			= 10
			SET @NSTEP = 20
			
			SELECT @CLOCID=LOCATION_CODE FROM TTM_TRANSFER_TO_TRADING_MST_UPLOAD (nolock) WHERE SP_ID=@NSPID  
			
			IF ISNULL(@CLOCID,'')=''
				SELECT @CLOCATIONID		=DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 
			ELSE
				SELECT @CLOCATIONID=@CLOCID
			
		
			IF @NUPDATEMODE = 3 --CALLED FROM CANCELLATION
			BEGIN

				SET @CCMD=N'UPDATE '+@CMASTERTABLENAME+' SET CANCELLED=1,LAST_UPDATE=GETDATE() WHERE MEMO_ID='''+@CMEMOID+''''
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD
				
				  IF (SELECT COUNT(*) FROM   SNC_MST A  (NOLOCK) WHERE TTM_MEMO_ID =@CMEMOID )>0
				  BEGIN
	    
					  print 'Exec SP3S_GENERATE_SNC'
					  exec SP3S_GENERATE_SNC
					  @nUpdateMode=@nUpdateMode,
					  @CMEMO_ID=@CMEMOID,
					  @clocid=@CLOCID,
					  @CERRORMSG=@CERRORMSG output 

					  if isnull(@CERRORMSG,'')<>''
						 goto End_proc
				  END
   
				
				EXEC UPDATEPMT_TRANSFER_TO_TRADING 
				  @CXNTYPE			= 'TTM'  
				, @CXNNO			= ''
				, @CXNID			= @CMEMOID
				, @NREVERTFLAG		= 1
				, @NALLOWNEGSTOCK	= 0
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= @NUPDATEMODE				
				, @CCMD				= @CCMDOUTPUT OUTPUT
				
				IF @CCMDOUTPUT <> ''
				BEGIN
					PRINT @CCMDOUTPUT
					
					SET @NSTEP = 30
					SET @CKEYFIELDVAL1=	@CMEMOID
					SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'
					SET @BNEGSTOCKFOUND=1				
					EXEC SP_EXECUTESQL @CCMDOUTPUT
					
				END
				SET @CKEYFIELDVAL1=@CMEMOID

				  UPDATE A SET TTM=0 FROM  JOBWORK_PMT A (nolock)
				  JOIN TRANSFER_TO_TRADING_DET B (nolock) ON A.PRODUCT_CODE =B.PRODUCT_CODE 
				  WHERE B.MEMO_ID=@CKEYFIELDVAL1
      

				GOTO END_PROC
				
			END
			
			
			IF @NUPDATEMODE = 1 -- ADDMODE	
			BEGIN	

			IF ISNULL(@CLOCATIONID,'')=''
			 BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
				GOTO END_PROC    
			 END

				SET @CCMD = 'SELECT @CKEYFIELDVAL1 = MEMO_ID FROM '+@CTEMPMASTERTABLE +' where sp_id='''+@NSPID +''' '
				EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT', 
								  @CKEYFIELDVAL1 OUTPUT
				--SELECT @CKEYFIELDVAL1				  
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
				BEGIN
					PRINT 'GENERATING NEW KEY'
					SET @NSAVETRANLOOP=0
					WHILE @NSAVETRANLOOP=0
					BEGIN
						SET @NSTEP=40
						EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
										@CFINYEAR,0, @CMEMONOVAL OUTPUT   
						
						PRINT @CMEMONOVAL
						
						SET @NSTEP=50
						SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
												WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
												AND FIN_YEAR = '''+@CFINYEAR+''' )
										SET @NLOOPOUTPUT=0
									ELSE
										SET @NLOOPOUTPUT=1'
						PRINT @CCMD
						EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
					END
					PRINT 'GENERATING NEW KEY... START'			

					SET @NSTEP = 60		-- GENERATING NEW ID

					-- GENERATING NEW MRR ID
					SET @CKEYFIELDVAL1 = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
					
					IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
					BEGIN
						  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
						  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
						  GOTO END_PROC
					END
					


					
					SET @NSTEP = 70
					
					-- RECHECKING IF ID IS STILL LATER
					IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
					BEGIN
						SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
						GOTO END_PROC
					END	
					SET @NSTEP = 80		-- UPDATING NEW ID INTO TEMP TABLES

					-- UPDATING NEWLY GENERATED MRR NO AND MRR ID IN PIM AND PID TEMP TABLES
					SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
								@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' where sp_id='''+@NSPID +''''
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD
				
					SET @NSTEP = 90		-- UPDATING NEW ID INTO TEMP TABLES
					
					SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' where sp_id='''+@NSPID +''''
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD
				
					
					SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' where sp_id='''+@NSPID +''''
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD
					
					SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE2 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' where sp_id='''+@NSPID +''''
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD
					
					SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE3 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' where sp_id='''+@NSPID +''''
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD			
				END
			END
			ELSE --CALLED FROM EDIT MODE
			BEGIN
				SET @NSTEP = 100		-- GETTING ID INFO FROM TEMP TABLE

				-- GETTING MRR_ID WHICH IS BEING EDITED
				SET @CCMD = 'SELECT @CKEYFIELDVAL1 = MEMO_ID, @CMEMONOVAL = MEMO_NO FROM '+@CTEMPMASTERTABLE +' where sp_id='''+@NSPID +''''
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
								   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
				IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
					  GOTO END_PROC  		
				END
				
				EXEC UPDATEPMT_TRANSFER_TO_TRADING 
				  @CXNTYPE			= 'TTM'  
				, @CXNNO			= @CMEMONOVAL
				, @CXNID			= @CKEYFIELDVAL1
				, @NREVERTFLAG		= 1
				, @NALLOWNEGSTOCK	= 0
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= @NUPDATEMODE				
				, @CCMD				= @CCMDOUTPUT OUTPUT
				
				IF @CCMDOUTPUT <> ''
				BEGIN
					PRINT @CCMDOUTPUT
					SET @NSTEP = 110
					SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'
					SET @BNEGSTOCKFOUND=1				
					EXEC SP_EXECUTESQL @CCMDOUTPUT
					GOTO END_PROC
				END
			END
			
			SET @NSTEP = 120

			-- RECHECKING IF ID IS STILL LATER
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
				GOTO END_PROC
			END				
			
			SET @NSTEP=130				
			
			 DECLARE @CWHERECLAUSE VARCHAR(1000)
		     SET @CWHERECLAUSE='  SP_ID='''+ LTRIM(RTRIM((@NSPID)))+''''		 
			
			EXEC UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPMASTERTABLENAME
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CMASTERTABLENAME
				, @CKEYFIELD1	= @CKEYFIELD1
				, @BALWAYSUPDATE = 1
				,@CFILTERCONDITION=@CWHERECLAUSE
			
			SET @NSTEP = 140		-- UPDATING TRANSACTION TABLE
          
   --         SET @CCMD = N'ALTER TABLE ' + @CTEMPDETAILTABLE + ' ADD OLD_ROW_ID VARCHAR(40) '
			--EXEC SP_EXECUTESQL @CCMD
	    IF ISNULL(@BGETBARCODE,0)<>1 
	     BEGIN   	
		
					-- UPDATING ROW_ID IN TEMP TABLES
					SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET OLD_ROW_ID=ROW_ID, ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
								  WHERE LEFT(ROW_ID,5) = ''LATER'' and sp_id='''+@NSPID+''' '
					EXEC SP_EXECUTESQL @CCMD
			
					SET @CCMD = N'UPDATE B SET REF_ROW_ID=A.ROW_ID FROM ' + @CTEMPDETAILTABLE + ' A
					JOIN  ' + @CTEMPDETAILTABLE1 + ' B ON A.OLD_ROW_ID=B.REF_ROW_ID and a.sp_id=b.sp_id 
					where a.sp_id = '''+@NSPID+''' '
					EXEC SP_EXECUTESQL @CCMD
						SET @NSTEP = 145
		    
					SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
								  WHERE LEFT(ROW_ID,5) = ''LATER''  and sp_id = '''+@NSPID+''' '
					EXEC SP_EXECUTESQL @CCMD
			
					
					-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
					SET @NSTEP = 160		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES

					SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + ' 
								WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
								AND ROW_ID IN 
								(
									SELECT A.ROW_ID 
									FROM ' + @CDETAILTABLENAME + ' A 
									LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B ON A.ROW_ID = B.ROW_ID and sp_id = '''+@NSPID+'''
									WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
									AND B.ROW_ID IS NULL
								)'
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD	
			
			
					SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME1 + ' 
								WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
								AND ROW_ID IN 
								(
									SELECT A.ROW_ID 
									FROM ' + @CDETAILTABLENAME1 + ' A 
									LEFT OUTER JOIN ' + @CTEMPDETAILTABLE1 + ' B ON A.ROW_ID = B.ROW_ID and sp_id = '''+@NSPID+'''
									WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
									AND B.ROW_ID IS NULL
								)'
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD
					-- INSERTING/UPDATING THE ENTRIES IN PID01106 TABLE FROM TEMPTABLE
					SET @NSTEP = 170		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES


			END
SET @NSTEP = 145			
 IF  ISNULL(@BGETBARCODE,0)=1 
 BEGIN
    
	

	  UPDATE  B SET OH_COST_PERCENTAGE=A.OH_COST_PERCENTAGE,
                    OH_COST_AMOUNT=A.OH_COST_AMOUNT,
                    WS_PRICE=A.WS_PRICE,
					MRP=A.MRP
	  FROM TTM_TRANSFER_TO_TRADING_DET_UPLOAD A (NOLOCK)
	  JOIN TRANSFER_TO_TRADING_UPLOAD B (NOLOCK) ON A.ARTICLE_CODE =B.ARTICLE_CODE AND A.PARA1_CODE =B.PARA1_CODE AND A.PARA2_CODE =B.PARA2_CODE AND A.SP_ID =B.SP_ID 
	  WHERE A.SP_ID =@NSPID
	   
	  
	   EXEC SP3S_GET_TRANSFER_TO_TRADING_DATA @NSPID,@CLOCID ,@CKEYFIELDVAL1,@CERRORMSG OUTPUT 


	   IF ISNULL (@CERRORMSG,'')<>''
	      GOTO END_PROC


 END
 ELSE
 BEGIN


			EXEC UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPDETAILTABLENAME
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CDETAILTABLENAME
				, @CKEYFIELD1	= 'ROW_ID'
				, @BALWAYSUPDATE = 1
				,@CFILTERCONDITION=@CWHERECLAUSE

			
		
			SET @NSTEP = 175
			EXEC UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPDETAILTABLENAME1
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CDETAILTABLENAME1
				, @CKEYFIELD1	= 'ROW_ID'
				, @BALWAYSUPDATE = 1
				,@CFILTERCONDITION=@CWHERECLAUSE
	END		

	 
	IF NOT EXISTS (SELECT TOP 1'U' FROM TRANSFER_TO_TRADING_DET  WHERE MEMO_ID =@CKEYFIELDVAL1)
	BEGIN
	   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' BLANK BARCODE NOT SAVE....'
	    GOTO END_PROC
	END


	         SET @NSTEP = 180
			EXEC UPDATEPMT_TRANSFER_TO_TRADING 
				  @CXNTYPE			= 'TTM'  
				, @CXNNO			= @CMEMONOVAL
				, @CXNID			= @CKEYFIELDVAL1
				, @NREVERTFLAG		= 0
				, @NALLOWNEGSTOCK	= 0
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= @NUPDATEMODE				
				, @CCMD				= @CCMDOUTPUT OUTPUT
				
			IF @CCMDOUTPUT <> ''
				BEGIN
					PRINT @CCMDOUTPUT
					SET @NSTEP = 200
					SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'
					SET @BNEGSTOCKFOUND=1				
					EXEC SP_EXECUTESQL @CCMDOUTPUT
					GOTO END_PROC
				END	
				
			SET @NSTEP = 210	
		   
		    IF EXISTS (SELECT TOP 1 'U' FROM TRANSFER_TO_TRADING_DET WHERE MEMO_ID =@CKEYFIELDVAL1 AND ISNULL(MRP,0)=0)
		    BEGIN
		        SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MRP CAN NOT BE ZERO PLEASE CHECK'
		        GOTO END_PROC
		    END
			
	 IF  ISNULL(@BGETBARCODE,0)=0
	 BEGIN		
			DELETE FROM TRANSFER_TO_TRADING_JOBS WHERE MEMO_ID =@CKEYFIELD1	
			DELETE FROM TRANSFER_TO_TRADING_BOM WHERE MEMO_ID =@CKEYFIELD1
			

	       SET @NSTEP = 200
			EXEC UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPDETAILTABLENAME2
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CDETAILTABLENAME2
				, @CKEYFIELD1	= 'ROW_ID'
				, @BALWAYSUPDATE = 1
				,@CFILTERCONDITION=@CWHERECLAUSE
				
	    SET @NSTEP = 200
			EXEC UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPDETAILTABLENAME3
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CDETAILTABLENAME3
				, @CKEYFIELD1	= 'ROW_ID'
				, @BALWAYSUPDATE = 1
				,@CFILTERCONDITION=@CWHERECLAUSE
		

		END

		
		
		 
	  UPDATE A SET SUBTOTAL = ISNULL( B.SUBTOTAL ,0 )
	  FROM TRANSFER_TO_TRADING_MST  A 
	  JOIN  
	  (    
		   SELECT MEMO_ID , SUM(ROUND(QUANTITY*PURCHASE_PRICE,2)) AS SUBTOTAL 
		   FROM TRANSFER_TO_TRADING_DET    
		   WHERE MEMO_ID = @CKEYFIELDVAL1  
		   GROUP BY MEMO_ID    
	  ) B ON  A.MEMO_ID = B.MEMO_ID    
	  WHERE A.MEMO_ID = @CKEYFIELDVAL1  
	  
	  UPDATE TRANSFER_TO_TRADING_MST SET ROUNDOFF=ROUND(SUBTOTAL,0)-(SUBTOTAL),
	  NET_AMOUNT=ROUND(SUBTOTAL,0)
      WHERE MEMO_ID=@CKEYFIELDVAL1  
      
      
      UPDATE S SET MRP =A.MRP ,
      PARA1_CODE =A.PARA1_CODE ,
      PARA2_CODE =A.PARA2_CODE ,
      PARA3_CODE =A.PARA3_CODE ,
      PARA4_CODE =A.PARA4_CODE ,
      PARA5_CODE =A.PARA5_CODE ,
      PARA6_CODE =A.PARA6_CODE ,
      WS_PRICE =A.WS_PRICE ,
      PURCHASE_PRICE =A.PURCHASE_PRICE+ISNULL(A.OH_Cost_Amount,0) ,
      AC_CODE=A.AC_CODE,
	  inv_dt =mst.MEMO_DT ,
	  receipt_dt =mst.MEMO_DT ,
	  FIX_MRP =isnull(a.FIX_MRP ,0)
      FROM TRANSFER_TO_TRADING_DET A (NOLOCK)
	  join TRANSFER_TO_TRADING_MST mst (nolock) on A.MEMO_ID =mst.MEMO_ID 
      JOIN SKU S (NOLOCK) ON A.PRODUCT_CODE =S.PRODUCT_CODE 
      WHERE a.MEMO_ID=@CKEYFIELDVAL1 

	  UPDATE A SET TTM=1 FROM  JOBWORK_PMT A (nolock)
	  JOIN TRANSFER_TO_TRADING_DET B (nolock) ON A.PRODUCT_CODE =B.PRODUCT_CODE 
	  WHERE B.MEMO_ID=@CKEYFIELDVAL1
      

	  --as discuss with sir (20230616) fix and Lot code Create Split & combined
	  

	  IF (SELECT COUNT(*) FROM   TRANSFER_TO_TRADING_DET A  (NOLOCK)
	  JOIN JOBWORK_PMT  B (NOLOCK) ON A.PRODUCT_CODE =B.PRODUCT_CODE
	  WHERE MEMO_ID=@CKEYFIELDVAL1 AND  isnull(b.Trading_Product_code,'')<>'')>0
	  BEGIN
	      
		  print 'Exec SP3S_GENERATE_SNC'
		  exec SP3S_GENERATE_SNC
		  @nUpdateMode=@nUpdateMode,
		  @CMEMO_ID=@CKEYFIELDVAL1,
		  @clocid=@CLOCID,
		  @CERRORMSG=@CERRORMSG output 

		  if isnull(@CERRORMSG,'')<>''
		     goto End_proc

	  END
     

	
		
END TRY
BEGIN CATCH
	SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
	--SELECT 'ERROR',@CERRORMSG	
	GOTO END_PROC
END CATCH
	
END_PROC:
	
	IF @@TRANCOUNT>0
	BEGIN
		
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
		BEGIN
			UPDATE TRANSFER_TO_TRADING_MST SET LAST_UPDATE=GETDATE() WHERE MEMO_ID=@CKEYFIELDVAL1
			UPDATE TRANSFER_TO_TRADING_MST SET HO_SYNCH_LAST_UPDATE='' WHERE MEMO_ID=@CKEYFIELDVAL1
			commit TRANSACTION
			DELETE A FROM TRANSFER_TO_TRADING_UPLOAD A where sp_id=@NSPID

			EXEC SP3S_UPDATE_SKUNAMES @CKEYFIELDVAL1,'TTT','','Memo_id',@NUPDATEMODE  

		END
		ELSE
			ROLLBACK
	END


	
		INSERT @OUTPUT ( ERRMSG, MEMO_ID)
				VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )

		SELECT * FROM @OUTPUT	


		DELETE A FROM TTM_TRANSFER_TO_TRADING_MST_UPLOAD A (NOLOCK) WHERE SP_ID =@NSPID
		DELETE A FROM TTM_TRANSFER_TO_TRADING_DET_UPLOAD A (NOLOCK) WHERE SP_ID =@NSPID
		DELETE A FROM TTM_TRANSFER_TO_TRADING_SUB_DET_UPLOAD A (NOLOCK) WHERE SP_ID =@NSPID
		DELETE A FROM TTM_TRANSFER_TO_TRADING_JOBS_UPLOAD A (NOLOCK) WHERE SP_ID =@NSPID
		DELETE A FROM TTM_TRANSFER_TO_TRADING_BOM_upload A (NOLOCK) WHERE SP_ID =@NSPID
		

		

		
END

