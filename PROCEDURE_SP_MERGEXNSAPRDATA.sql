CREATE PROCEDURE SP_MERGEXNSAPRDATA
(
	@NSPID INT
)
--WITH ENCRYPTION
AS
BEGIN  
 BEGIN TRY   
  BEGIN TRANSACTION 
   
  --(dinkar) Replace  left(memoid,2) to Location_code     
  DECLARE @CERRORMSG VARCHAR(1000),@CCURDEPTID CHAR(4),@CHODEPTID CHAR(4),@CCMD NVARCHAR(MAX),  
    @CXNMASTERTABLENAME VARCHAR(100),@BPROCEED BIT,@CTABLENAME VARCHAR(100),@CMASTERKEYFIELD VARCHAR(100),  
    @CKEYFIELD VARCHAR(100),@CPARENTTABLENAME VARCHAR(100),@CPARENTPARANAME VARCHAR(100),@CCHILDPARANAME VARCHAR(100),  
    @CWHERECLAUSE VARCHAR(100),@CJOINSTR VARCHAR(1000),@CMEMOID VARCHAR(100),@CFINYEAR VARCHAR(100),  
    @NGRPCHARS INT,@NSERIESCHARS INT,@BSERIESBROKEN BIT,@CPREVMEMOID VARCHAR(40),@CMERGETABLENAME VARCHAR(50),  
    @CFIRSTMEMOID VARCHAR(40),@NPREVMEMOID INT,@NMEMONOLEN INT,@CRETCMD NVARCHAR(MAX),  
    @CDELCHILDTABLENAME VARCHAR(100),@CDELCHILDPARANAME VARCHAR(100),@CDELPARENTPARANAME VARCHAR(100),  
    @CORIGINALTABLENAME VARCHAR(100),@NLOCTYPE INT,@BDONOTMERGE BIT,@CRFXNTYPE VARCHAR(10),@BHOLOC BIT,  
    @BINSERTONLY BIT,@BLINKEDMASTER BIT,@BPURLOC BIT,@CSOURCELOCID CHAR(2),@BSOURCEPURLOC BIT,  
    @COUT VARCHAR(100),@CGRPCODE VARCHAR(40),@CMISSINGCMID VARCHAR(40),@BRETVAL BIT,@NPREVNO INT,  
    @CPREVNO VARCHAR(7),@CTABLEPREFIX VARCHAR(100),@CFILTERCONDITION VARCHAR(500),@BEMPHEADSUPDATED BIT,  
    @CTEMPMASTERTABLENAME VARCHAR(200),@BADDTEMPCOL BIT,@NPAYMODE INT,@NSUMRFNET NUMERIC(10,2),  
    @CTEMPCMDTABLENAME VARCHAR(200),@BCREATEAUDITLOGENTRY BIT,@CMEMOLOCID CHAR(2),@NXNSSENDINGORDER INT,  
    @NXNSMERGINGORDER INT,@NSTEP INT,@CUNQCOLUMNNAME1 VARCHAR(100),@CUNQCOLUMNNAME2 VARCHAR(100),@BTABLEEXISTS BIT,
    @CTEMPCUSTTABLE VARCHAR(200),@CTEMPEMPTABLE VARCHAR(200),@CTEMPPAYMODETABLE VARCHAR(200),@CTEMPPAYMODEGRPTABLE VARCHAR(200) 
    
  DECLARE @TRETMSG TABLE  (MEMO_ID VARCHAR(40),ERRMSG VARCHAR(MAX))  
     
  SET @CTABLEPREFIX='TMP_XNSAPR'
    
  SET @NSTEP=10  
    
  SET @BEMPHEADSUPDATED=0  
    
  SELECT TOP 1 @CGRPCODE=ISNULL(VALUE,'') FROM CONFIG (NOLOCK) WHERE  CONFIG_OPTION='GRP_CODE'
    
  DECLARE @TPREVMEMOID TABLE (MEMO_ID VARCHAR(40),ERRMSG VARCHAR(1000))  
    
  SELECT @CERRORMSG='',@BPROCEED=1,@NMEMONOLEN=10,@CRETCMD='',@CMEMOID='',@CMISSINGCMID=''  
    
  SET @NSTEP=20  
    
  SELECT @CCURDEPTID = VALUE FROM CONFIG (NOLOCK) WHERE CONFIG_OPTION='LOCATION_ID'  
  SELECT @CHODEPTID = VALUE FROM CONFIG (NOLOCK) WHERE CONFIG_OPTION='HO_LOCATION_ID'    
    
  IF @CCURDEPTID=@CHODEPTID  
   SET @BHOLOC=1  
      
  SELECT @NLOCTYPE=LOC_TYPE,@BPURLOC=PUR_LOC FROM LOCATION (NOLOCK) WHERE DEPT_ID=@CCURDEPTID  
     
  SELECT @CXNMASTERTABLENAME='APPROVAL_RETURN_MST',@CMASTERKEYFIELD='MEMO_ID'  
    
  SET @NSTEP=30
    
  SET @CTEMPMASTERTABLENAME=@CTABLEPREFIX+'_' + @CXNMASTERTABLENAME + '_' + LTRIM(RTRIM(STR(@NSPID)))  
  SET @CTEMPCMDTABLENAME=''
    
  SET @CCMD=N'IF NOT EXISTS(SELECT NAME FROM SYSOBJECTS WHERE NAME='''+@CTEMPMASTERTABLENAME+''')  
      SET @BPROCEEDOUT=0'  
     
  PRINT @CCMD  
  EXEC SP_EXECUTESQL @CCMD,N'@BPROCEEDOUT BIT OUTPUT',@BPROCEEDOUT=@BPROCEED OUTPUT  
    
  SET @NSTEP=40      
    
  IF @BPROCEED=0  
  BEGIN
	SET @CERRORMSG='MASTER TABLE NOT FOUND....PLEASE CHECK'
	GOTO LBLLAST			
  END	
     
  SET @CCMD=N'SELECT @CMEMOIDOUT='+@CMASTERKEYFIELD+' FROM '+@CTEMPMASTERTABLENAME  
  PRINT ISNULL(@CCMD,'NULLCMD')+' MEMO ID :'+@CMEMOID  
    
  EXEC SP_EXECUTESQL @CCMD,N'@CMEMOIDOUT VARCHAR(40) OUTPUT',  
         @CMEMOIDOUT=@CMEMOID OUTPUT  

  SET @NSTEP=50
  IF @CERRORMSG = ''  
  BEGIN  

  LBLDELENTRIES:  
	
  IF CURSOR_STATUS('GLOBAL','ABC') IN (0,1)  
  BEGIN  
	   CLOSE ABC  
	   DEALLOCATE ABC
  END      
  --- FIRSTLY, DELETE OLDER ENTRIES FROM THE TRANSACTIONS  
  DECLARE ABC CURSOR FOR   
  SELECT DISTINCT TABLENAME, KEYFIELD,XNS_SENDING_ORDER FROM XNSINFO (NOLOCK)   
  WHERE XN_TYPE = 'XNSAPR'  
  AND   MASTERTABLE = 0   
  AND   XNS_MERGING_ORDER <> 99   
  AND   LINKED_MASTER = 0  
  ORDER BY XNS_SENDING_ORDER DESC  
    
  OPEN ABC  
  FETCH NEXT FROM ABC INTO @CTABLENAME,@CKEYFIELD,@NXNSSENDINGORDER  
  WHILE @@FETCH_STATUS=0  
  BEGIN  
   SET @NSTEP=60
     
   SET @CCMD=N'IF EXISTS (SELECT NAME FROM SYSOBJECTS WHERE NAME='''+@CTABLEPREFIX+'_' + @CTABLENAME + '_' + LTRIM(RTRIM(STR(@NSPID)))+''')
			   DELETE A FROM '+@CTABLENAME +' A JOIN '+@CTABLEPREFIX+'_' + @CTABLENAME + '_' + LTRIM(RTRIM(STR(@NSPID)))  	
			  +' B ON A.'+@CKEYFIELD+'=B.'+@CKEYFIELD	
  
   PRINT @CCMD  
   EXEC SP_EXECUTESQL @CCMD  
     
   SET @NSTEP=70
     
   LBLDELNEXT:  
       
   FETCH NEXT FROM ABC INTO @CTABLENAME,@CKEYFIELD,@NXNSSENDINGORDER  
  END  
  CLOSE ABC  
  DEALLOCATE ABC  
    
 LBLMERGE:  
  
  IF CURSOR_STATUS('GLOBAL','MERGECUR') IN (0,1)  
  BEGIN  
	   CLOSE MERGECUR  
	   DEALLOCATE MERGECUR
  END  

  IF CURSOR_STATUS('GLOBAL','MERGECUR') IN (0,1)  
  BEGIN  
	   CLOSE MERGECUR  
	   DEALLOCATE MERGECUR
  END      
  
  --- NOW, UPDATE TRANSACTIONS DATA ONE BY ONE  
  DECLARE MERGECUR CURSOR FOR   
  SELECT DISTINCT TABLENAME, KEYFIELD,LINKED_MASTER,XNS_MERGING_ORDER  
  FROM XNSINFO (NOLOCK)   
  WHERE XN_TYPE = 'XNSAPR'  
  AND   XNS_MERGING_ORDER <> 99  
  ORDER BY XNS_MERGING_ORDER  
    
  OPEN MERGECUR  
  FETCH NEXT FROM MERGECUR INTO @CTABLENAME,@CKEYFIELD,@BLINKEDMASTER,@NXNSMERGINGORDER    
  WHILE @@FETCH_STATUS=0  
  BEGIN  
     
   SET @NSTEP=80
     
   LBLSTARTMERGE:  
   SET @BPROCEED=1  
     
   SET @CCMD=N'IF NOT EXISTS (SELECT NAME FROM SYSOBJECTS WHERE NAME='''+@CTABLEPREFIX+'_' + @CTABLENAME + '_' + LTRIM(RTRIM(STR(@NSPID)))+''')  
       SET @BPROCEEDOUT=0'  
     
   PRINT @CCMD  
   EXEC SP_EXECUTESQL @CCMD,N'@BPROCEEDOUT BIT OUTPUT',@BPROCEEDOUT=@BPROCEED OUTPUT  
     
   IF @BPROCEED=0  
    GOTO LBLMERGENEXT  
   
   SET @NSTEP=90
     
   SET @BINSERTONLY=0  
        
   IF @BLINKEDMASTER=1  
    SET @BINSERTONLY=1  
   ELSE  
    SET @BINSERTONLY=0     
     
   SET @NSTEP=100
         
    SET @CFILTERCONDITION=''  
   
   SET @NSTEP=110    
   
   SET @CCMD='EXEC UPDATEMASTERXN_MERGING '''','''+@CTABLEPREFIX+'_' + @CTABLENAME + '_' + LTRIM(RTRIM(STR(@NSPID)))+''','''',  
        '''+@CTABLENAME+''','''+@CKEYFIELD+''','''','''','+(CASE WHEN @BINSERTONLY=1 THEN '1' ELSE '0' END)+',0,1,'''+@CFILTERCONDITION+''',@CERRORMSGOUT OUTPUT'  
   PRINT @CCMD  
   EXEC SP_EXECUTESQL @CCMD,N'@CERRORMSGOUT VARCHAR(1000) OUTPUT',@CERRORMSGOUT=@CERRORMSG OUTPUT  
     
   SET @NSTEP=120  
     
   IF @CERRORMSG<>''  
    BREAK  
     
LBLMERGENEXT:  
  FETCH NEXT FROM MERGECUR INTO @CTABLENAME,@CKEYFIELD,@BLINKEDMASTER,@NXNSMERGINGORDER    
  END  
  CLOSE MERGECUR  
  DEALLOCATE MERGECUR  
    
  SET @NSTEP=130
    
  IF ISNULL(@CERRORMSG,'')<>''      
   GOTO LBLLAST  
     
  SET @NSTEP=140  
    
  SET @CRETCMD='SELECT '''+@CMEMOID+''' AS MEMO_ID,'''+@CERRORMSG+''' AS ERRMSG'   
    
 LBLLAST:  
  IF @CRETCMD=''  
   SET @CRETCMD='SELECT '''' AS MEMO_ID,'''+@CERRORMSG+''' AS ERRMSG'  
    
  PRINT 'RETURN VALUE : '+ISNULL(@CRETCMD,'NULL RETCMD')  
  EXEC SP_EXECUTESQL @CRETCMD  
    
  SET @NSTEP=150  
    
  --- ON SUCCESSFUL MERGING , DELETE ENTRY FROM XN HISTORY     
  IF @CERRORMSG=''  
  BEGIN  
   DELETE FROM XN_HISTORY WHERE XN_TYPE='XNSAPR' AND MEMO_ID=@CMEMOID  
   
   IF @@TRANCOUNT>0  
	COMMIT TRANSACTION  

  END  
  ELSE  
  BEGIN  
   IF @@TRANCOUNT>0  
    ROLLBACK    
  END   
    
  SET @NSTEP=160  
    
  EXEC SP_DROPTEMPTABLES_XNS 'XNSAPR',@NSPID,'',@CTABLEPREFIX  
 END
 END TRY  
   
 BEGIN CATCH  
    
	  PRINT 'UNTRAPPED ERROR'    
	  SELECT @CERRORMSG='PROCEDURE : '+ISNULL(ERROR_PROCEDURE(),'NULL P')+'STEP :'+STR(ISNULL(@NSTEP,0))+ ' LINE NO. :'+  
	  ISNULL(LTRIM(RTRIM(STR(ERROR_LINE()))),'NULL LINE')+'MSG :'+ISNULL(ERROR_MESSAGE(),'NULL MSG')  
	    
	  SET @CRETCMD='SELECT '''' AS MEMO_ID,'''+@CERRORMSG+''' AS ERRMSG'  
	    
	  PRINT 'RETURN VALUE : '+ISNULL(@CRETCMD,'NULL RETCMD')+@CMEMOID  
	  --EXEC SP_EXECUTESQL @CRETCMD  
	    
	  IF @@TRANCOUNT>0  
	   ROLLBACK    
	    
	    
	  INSERT @TRETMSG  
	  SELECT @CMEMOID,@CERRORMSG  
	    
	    
	  SELECT * FROM @TRETMSG  
	  
	  
	  IF CURSOR_STATUS('GLOBAL','MERGECUR') IN (0,1)  
	  BEGIN  
	   CLOSE MERGECUR  
	   DEALLOCATE MERGECUR  
	  END  
	  
	  IF CURSOR_STATUS('GLOBAL','ABC') IN (0,1)  
	  BEGIN  
	   CLOSE ABC  
	   DEALLOCATE ABC  
	  END  
	    
	  -- DELETING FROM TEMP TABLES  
	  EXEC SP_DROPTEMPTABLES_XNS 'XNSAPR',@NSPID,'',@CTABLEPREFIX  
    
 END CATCH  
END  
--- END OF CREATING PROCEDURE SP_MERGEXNSAPRDATA
