CREATE PROCEDURE SAVETRAN_PRD_JOB_RATE_MST
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CMEMONOPREFIX		VARCHAR(50),
	@CFINYEAR			VARCHAR(10),
	@CMEMOID			VARCHAR(40)='',
	@CLOCID				VARCHAR(2)=''
)
--WITH ENCRYPTION
AS
BEGIN
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(2),
			@CLOCATIONID			VARCHAR(2),
			@CHODEPTID				VARCHAR(2),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSTEP					INT,
			@LENABLETEMPDATABASE	BIT,@BNEGSTOCKFOUND BIT,
			@BPURTHROUGHIMPORT	BIT,@CMSG VARCHAR(200)
			
			DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	BEGIN TRY
		
		BEGIN TRANSACTION
			SET @NSTEP = 10	-- SETTTING UP ENVIRONMENT

			SELECT @LENABLETEMPDATABASE = CAST([VALUE] AS BIT) FROM CONFIG WHERE CONFIG_OPTION = 'ENABLE_TEMP_DATABASE'
			IF @LENABLETEMPDATABASE IS NULL
				SET @LENABLETEMPDATABASE = 0

			-- CHECK TEMPORARY DATABASE TO HOLD TEMP TABLES 
			-- IF CONFIG SETTING SAYS TO DO SO
			IF @LENABLETEMPDATABASE = 1
				SET @CTEMPDBNAME = DB_NAME() + '_TEMP.DBO.'
			ELSE
				SET @CTEMPDBNAME = ''

			SET @CMASTERTABLENAME	= 'PRD_JOB_RATE_MST'
			SET @CDETAILTABLENAME	= 'PRD_JOB_RATE_DET'
			
			SET @CTEMPMASTERTABLENAME	= 'TEMP_PRD_JOB_RATE_MST_'+LTRIM(RTRIM(STR(@NSPID)))
			SET @CTEMPDETAILTABLENAME	= 'TEMP_PRD_JOB_RATE_DET_'+LTRIM(RTRIM(STR(@NSPID)))
			
			SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
			SET @CTEMPDETAILTABLE	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME
			
			SET @CERRORMSG			= ''
			SET @CKEYFIELD1			= 'JOB_CODE'
			
			IF ISNULL(@CLOCID,'')=''
				SELECT @CLOCATIONID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID'
			ELSE
				SELECT @CLOCATIONID=@CLOCID
				 
			
			EXEC UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPMASTERTABLENAME
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CMASTERTABLENAME
				, @CKEYFIELD1	= @CKEYFIELD1
				, @BALWAYSUPDATE = 1
			
			SET @NSTEP = 140		-- UPDATING TRANSACTION TABLE

			-- UPDATING ROW_ID IN TEMP TABLES
			SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
						WHERE ROW_ID IN('''',''LATER'')  '
			EXEC SP_EXECUTESQL @CCMD
					
			
			-- DELETING EXISTING ENTRIES 
			SET @NSTEP = 160		

		   --DELETE FROM 	PRD_JOB_RATE_DET WHERE JOB_CODE=@CMEMOID
			

			-- INSERTING/UPDATING THE ENTRIES IN PID01106 TABLE FROM TEMPTABLE
			SET @NSTEP = 170		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

			EXEC UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPDETAILTABLENAME
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CDETAILTABLENAME
				, @CKEYFIELD1	= 'ROW_ID'
				, @BALWAYSUPDATE = 1
			
				
		END TRY
		BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'
		SELECT 'ERROR',@CERRORMSG	
		GOTO END_PROC
		END CATCH
	
END_PROC:

	IF @@TRANCOUNT>0
	BEGIN
		
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
		BEGIN
			COMMIT TRANSACTION
		END
		ELSE
			ROLLBACK
	END
	
		INSERT @OUTPUT ( ERRMSG, MEMO_ID)
				VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )

		SELECT * FROM @OUTPUT	

  
	
	SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPDETAILTABLE + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPDETAILTABLE
	EXEC SP_EXECUTESQL @CCMD
	

    SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPMASTERTABLE + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPMASTERTABLE
	EXEC SP_EXECUTESQL @CCMD
		
END
