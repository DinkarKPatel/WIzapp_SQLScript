CREATE PROCEDURE SP3S_RECON_FILTER
(
	 @CREP_ID VARCHAR(10)=''
	,@CBIN_ID VARCHAR(4)=''
	,@CUSER_CODE VARCHAR(7)=''
	,@DDATE DATETIME=''
	,@CFILTER VARCHAR(MAX)=''
	,@CTITLE VARCHAR(50)=''
	,@CFINYEAR VARCHAR(5)=''
	,@CMEMO_ID VARCHAR(20)=''
	,@NMODE NUMERIC(1)=1 ,
	 @CMULTI_BIN_ID VARCHAR(max)='',
	 @cLOC varchar(5)='',
	 @NSTOPMODE NUMERIC(1)=1  --1 FOR STOP  2 For STOP AND Settle
)
--WITH ENCRYPTION 
AS 
BEGIN
	DECLARE @CERRMSG VARCHAR(500),@CCMD NVARCHAR(MAX),@CDEPT_ID VARCHAR(5),@CNEWKEYVAL VARCHAR(20),
	@CBINFILTER VARCHAR(MAX),@cStep varchar(10),@ccurDeptid varchar(5),@chodeptid varchar(5),@ccomputerStock varchar(1000)
	
	
BEGIN TRY
BEGIN TRANSACTION 
	
	SET @cStep='10'

	SET @CBINFILTER=''
	DECLARE @TOUTPUT TABLE(PRODUCT_CODE VARCHAR(50),QUANTITY NUMERIC(10,3),ERRMSG VARCHAR(500),MEMO_ID VARCHAR(10))
	

	SELECT @ccurDeptid=VALUE FROM CONFIG WHERE CONFIG_OPTION ='LOCATION_ID' 
	SELECT @chodeptid=VALUE FROM CONFIG WHERE CONFIG_OPTION ='ho_LOCATION_ID' 

	IF @cLOC='' 
	  	SELECT TOP 1 @CDEPT_ID=DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 
	ELSE
	
	 SELECT @CDEPT_ID= @cLOC
	
	
    SET @cStep='20'
    IF @CMULTI_BIN_ID<>''
    SET @CBINFILTER=' AND BIN_ID IN ('+@CMULTI_BIN_ID+')'
	
--	SELECT @CMULTI_BIN_ID
	IF @NMODE=1 /*RECONCILLATION PROCESS IS STARTED*/
	BEGIN
	     
	     IF EXISTS (SELECT TOP 1 'U' FROM STMH01106 (NOLOCK) WHERE  STM_TITLE=@CTITLE)
	     BEGIN
	          SET @cStep='25'
			SET @CERRMSG='Title Already Exists.'
			
			INSERT @TOUTPUT(PRODUCT_CODE,QUANTITY,ERRMSG)
			SELECT '',0,@CERRMSG
			GOTO END_PROC
	     END
	     
		 SET @cStep='30'
		 CREATE TABLE #PRODUCTLIST(PRODUCT_CODE VARCHAR(50))  
		 --GET THE PRODUCT CODES FOR RECONCILLATION BASED ON FILTER CRITERIA 
		 SET @CCMD=N'SELECT DISTINCT sku.PRODUCT_CODE 
					 FROM SKU (NOLOCK) 
					 JOIN pmt01106 pmt (NOLOCK) ON pmt.product_code=sku.product_code
					 JOIN ARTICLE (NOLOCK) ON SKU.ARTICLE_CODE = ARTICLE.ARTICLE_CODE
					 JOIN SECTIOND (NOLOCK) ON ARTICLE.SUB_SECTION_CODE = SECTIOND.SUB_SECTION_CODE
					 JOIN SECTIONM (NOLOCK) ON SECTIOND.SECTION_CODE = SECTIONM.SECTION_CODE
					 JOIN PARA1 (NOLOCK) ON SKU.PARA1_CODE = PARA1.PARA1_CODE
					 JOIN PARA2 (NOLOCK) ON SKU.PARA2_CODE = PARA2.PARA2_CODE
					 JOIN PARA3 (NOLOCK) ON SKU.PARA3_CODE = PARA3.PARA3_CODE
					 JOIN PARA4 (NOLOCK) ON SKU.PARA4_CODE = PARA4.PARA4_CODE
					 JOIN PARA5 (NOLOCK) ON SKU.PARA5_CODE = PARA5.PARA5_CODE
					 JOIN PARA6 (NOLOCK) ON SKU.PARA6_CODE = PARA6.PARA6_CODE
					 JOIN LMV01106 (NOLOCK) ON SKU.AC_CODE = LMV01106.AC_CODE
					 LEFT OUTER JOIN ARTICLE_FIX_ATTR ATTR  (NOLOCK) ON ARTICLE.ARTICLE_CODE = ATTR.ARTICLE_CODE 
					LEFT OUTER JOIN ATTR1_MST AT1 (NOLOCK) ON AT1.ATTR1_KEY_CODE=ATTR.ATTR1_KEY_CODE
					LEFT OUTER JOIN ATTR2_MST AT2 (NOLOCK) ON AT2.ATTR2_KEY_CODE=ATTR.ATTR2_KEY_CODE
					LEFT OUTER JOIN ATTR3_MST AT3 (NOLOCK) ON AT3.ATTR3_KEY_CODE=ATTR.ATTR3_KEY_CODE
					LEFT OUTER JOIN ATTR4_MST AT4 (NOLOCK) ON AT4.ATTR4_KEY_CODE=ATTR.ATTR4_KEY_CODE
					LEFT OUTER JOIN ATTR5_MST AT5 (NOLOCK) ON AT5.ATTR5_KEY_CODE=ATTR.ATTR5_KEY_CODE
					LEFT OUTER JOIN ATTR6_MST AT6 (NOLOCK) ON AT6.ATTR6_KEY_CODE=ATTR.ATTR6_KEY_CODE
					LEFT OUTER JOIN ATTR7_MST AT7 (NOLOCK) ON AT7.ATTR7_KEY_CODE=ATTR.ATTR7_KEY_CODE
					LEFT OUTER JOIN ATTR8_MST AT8 (NOLOCK) ON AT8.ATTR8_KEY_CODE=ATTR.ATTR8_KEY_CODE
					LEFT OUTER JOIN ATTR9_MST AT9 (NOLOCK) ON AT9.ATTR9_KEY_CODE=ATTR.ATTR9_KEY_CODE
					LEFT OUTER JOIN ATTR10_MST AT10 (NOLOCK) ON AT10.ATTR10_KEY_CODE=ATTR.ATTR10_KEY_CODE
					LEFT OUTER JOIN ATTR11_MST AT11 (NOLOCK) ON AT11.ATTR11_KEY_CODE=ATTR.ATTR11_KEY_CODE
					LEFT OUTER JOIN ATTR12_MST AT12 (NOLOCK) ON AT12.ATTR12_KEY_CODE=ATTR.ATTR12_KEY_CODE
					LEFT OUTER JOIN ATTR13_MST AT13 (NOLOCK) ON AT13.ATTR13_KEY_CODE=ATTR.ATTR13_KEY_CODE
					LEFT OUTER JOIN ATTR14_MST AT14 (NOLOCK) ON AT14.ATTR14_KEY_CODE=ATTR.ATTR14_KEY_CODE
					LEFT OUTER JOIN ATTR15_MST AT15 (NOLOCK) ON AT15.ATTR15_KEY_CODE=ATTR.ATTR15_KEY_CODE
					LEFT OUTER JOIN ATTR16_MST AT16 (NOLOCK) ON AT16.ATTR16_KEY_CODE=ATTR.ATTR16_KEY_CODE
					LEFT OUTER JOIN ATTR17_MST AT17 (NOLOCK) ON AT17.ATTR17_KEY_CODE=ATTR.ATTR17_KEY_CODE
					LEFT OUTER JOIN ATTR18_MST AT18 (NOLOCK) ON AT18.ATTR18_KEY_CODE=ATTR.ATTR18_KEY_CODE
					LEFT OUTER JOIN ATTR19_MST AT19 (NOLOCK) ON AT19.ATTR19_KEY_CODE=ATTR.ATTR19_KEY_CODE
					LEFT OUTER JOIN ATTR20_MST AT20 (NOLOCK) ON AT20.ATTR20_KEY_CODE=ATTR.ATTR20_KEY_CODE
					LEFT OUTER JOIN ATTR21_MST AT21 (NOLOCK) ON AT21.ATTR21_KEY_CODE=ATTR.ATTR21_KEY_CODE
					LEFT OUTER JOIN ATTR22_MST AT22 (NOLOCK) ON AT22.ATTR22_KEY_CODE=ATTR.ATTR22_KEY_CODE
					LEFT OUTER JOIN ATTR23_MST AT23 (NOLOCK) ON AT23.ATTR23_KEY_CODE=ATTR.ATTR23_KEY_CODE
					LEFT OUTER JOIN ATTR24_MST AT24 (NOLOCK) ON AT24.ATTR24_KEY_CODE=ATTR.ATTR24_KEY_CODE
					LEFT OUTER JOIN ATTR25_MST AT25(NOLOCK) ON AT25.ATTR25_KEY_CODE=ATTR.ATTR25_KEY_CODE
					 JOIN BIN (NOLOCK) ON 1=1
					 WHERE   ARTICLE.STOCK_NA=0 AND pmt.dept_id='''+@CDEPT_ID+''''
					 +(CASE WHEN ISNULL(@CFILTER,'')='' THEN '' ELSE ' AND '+@CFILTER END)
		PRINT @CCMD			 
		
		INSERT #PRODUCTLIST
		EXEC SP_EXECUTESQL @CCMD
		

		
		IF NOT EXISTS(SELECT TOP 1 'U' FROM #PRODUCTLIST)
		BEGIN
			SET @cStep='40'
			SET @CERRMSG='PRODUCT CODE NOT FOUND FOR THE GIVEN FILTER CRITERIA.'
			
			INSERT @TOUTPUT(PRODUCT_CODE,QUANTITY,ERRMSG)
			SELECT '',0,@CERRMSG
			
			GOTO END_PROC
		END
		
		IF ISNULL(@CMULTI_BIN_ID,'')<>''
		BEGIN
			SET @cStep='50'
			SET @CCMD=N'IF NOT EXISTS(SELECT TOP 1 ''U'' FROM BIN WHERE BIN_ID IN ('+@CMULTI_BIN_ID+'))
			BEGIN
				SET @CERRMSG=''INVALID BIN...''
	
			END'
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD, N'@CERRMSG VARCHAR(500) OUTPUT', @CERRMSG OUTPUT
		
		END
		
		IF ISNULL(@CERRMSG,'')<>''
		BEGIN
		    SET @cStep='60'
			INSERT @TOUTPUT(PRODUCT_CODE,QUANTITY,ERRMSG)
			SELECT '',0,@CERRMSG
			GOTO END_PROC
		END
		
		IF ISNULL(@CTITLE,'')=''
		BEGIN
			SET @cStep='70'
			SET @CERRMSG='RECONCILLATION TITLE CANNOT BE BLANK.CANNOT PROCEED'
			
			INSERT @TOUTPUT(PRODUCT_CODE,QUANTITY,ERRMSG)
			SELECT '',0,@CERRMSG
			
			GOTO END_PROC
		END
		
		
		SET @cStep='80'
		SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM PMT01106 A JOIN #PRODUCTLIST B ON A.PRODUCT_CODE=B.PRODUCT_CODE
				  WHERE A.DEPT_ID='''+@CDEPT_ID+'''   AND ISNULL(A.REP_ID,'''')<>'''' AND A.REP_ID<>'''+@CREP_ID+'''
				  '+@CBINFILTER+')
		BEGIN
			SET @CERRMSG=''SELECTED PRODUCTS ARE ALREADY UNDER RECONCILLATION PROCESS.CANNOT PROCEED.''
			
		END'	
		PRINT @CCMD
	    EXEC SP_EXECUTESQL @CCMD, N'@CERRMSG VARCHAR(500) OUTPUT', @CERRMSG OUTPUT
	    
		
		IF ISNULL(@CERRMSG,'')<>''
		BEGIN
			SET @cStep='90'
			INSERT @TOUTPUT(PRODUCT_CODE,QUANTITY,ERRMSG)
			SELECT '',0,@CERRMSG
			GOTO END_PROC
		END	  
		
		
			SET @cStep='100'
			CREATE TABLE #tReconpmtXns (errmsg varchar(max))

			EXEC SP3S_UPDATEPMT_WITHXNSRPT_LOC
			@CDEPT_ID=@CDEPT_ID,
			@CERRORMSG=@CERRMSG OUTPUT 
			

			IF isnull(@cErrmsg,'')<>''
			BEGIN
			
				INSERT @TOUTPUT(PRODUCT_CODE,QUANTITY,ERRMSG)
			    SELECT '',0,@CERRMSG
				GOTO END_PROC
			END

			SET @cStep='110'
			IF EXISTS(SELECT TOP 1 'U' FROM PMT01106 A 
					  JOIN #PRODUCTlist B ON A.PRODUCT_CODE=B.PRODUCT_CODE
					  WHERE A.BIN_ID=@CBIN_ID AND A.QUANTITY_IN_STOCK<0 and a.dept_id =@CDEPT_ID)
			BEGIN
				SET @CERRMSG='NEGATIVE STOCK'
				INSERT @TOUTPUT(PRODUCT_CODE,QUANTITY,ERRMSG)
				SELECT A.PRODUCT_CODE,A.QUANTITY_IN_STOCK,'NEGATIVE STOCK' FROM PMT01106 A 
				JOIN #PRODUCTlist B ON A.PRODUCT_CODE=B.PRODUCT_CODE
				WHERE A.BIN_ID=@CBIN_ID AND A.QUANTITY_IN_STOCK<0 and a.dept_id =@CDEPT_ID

			END		  
			ELSE
			BEGIN
			     
			  SET @cStep='120' 
			     
			        
					SET @CCMD=N'UPDATE A SET REP_ID='''+@CREP_ID+''',STOCK_RECO_QUANTITY_IN_STOCK=a.QUANTITY_IN_STOCK,QUANTITY_IN_STOCK=0,PhysicalScanQty=0
					FROM PMT01106 A 
					JOIN #PRODUCTLIST B ON A.PRODUCT_CODE=B.PRODUCT_CODE
					WHERE a.bin_id not in(''999'',''888'',''777'') AND  A.DEPT_ID='''+@CDEPT_ID+''' '+@CBINFILTER
					PRINT @CCMD
			        EXEC SP_EXECUTESQL @CCMD
			        
			        

				SELECT @ccomputerStock=ISNULL(@ccomputerStock+',','')+ cast(SUM(STOCK_RECO_QUANTITY_IN_STOCK) as varchar(100)) +' '+B.UOM +' '+
					   cast(COUNT (DISTINCT A.PRODUCT_CODE) as varchar(100))+' THANN'
				FROM PMT01106 A (NOLOCK)
				JOIN SKU_NAMES B (NOLOCK) ON A.PRODUCT_CODE =B.PRODUCT_CODE 
				WHERE STOCK_RECO_QUANTITY_IN_STOCK > 0 
				AND ISNULL(a.REP_ID,'')= @CREP_ID
				GROUP BY B.UOM

			        
				LBL_GENKEY:	

				
			   SET @cStep='130'				
				    DECLARE @PREFIX VARCHAR(10)
				    SET @PREFIX= @CDEPT_ID+@CFINYEAR
				    
				    
					EXEC GETNEXTKEY 
						  @CTABLENAME='STMH01106'
						 ,@CCOLNAME='MEMO_ID'
						 ,@NWIDTH=10
						 ,@CPREFIX=@PREFIX
						 ,@NLZEROS=1
						 ,@CFINYEAR=@CFINYEAR
						 ,@NROWCOUNT=2
						 ,@CNEWKEYVAL=@CNEWKEYVAL OUTPUT
					
					IF ISNULL(@CNEWKEYVAL,'')=''
					BEGIN
						SET @CERRMSG='ERROR GENERATING MEMO_ID..'
						
						INSERT @TOUTPUT(PRODUCT_CODE,QUANTITY,ERRMSG)
						SELECT '',0,@CERRMSG
						
						GOTO END_PROC
					END
					
					

				
				SET @cStep='140'
				
					IF EXISTS(SELECT TOP 1 'U' FROM STMH01106 WHERE MEMO_ID=@CNEWKEYVAL)
						GOTO LBL_GENKEY
					ELSE
					BEGIN
						INSERT STMH01106(STM_TITLE,STM_START_DT, STM_END_DT, RECONCILED, MEMO_ID, DEPT_ID, SETTLED, REP_ID, RECON_BIN_ID,LAST_UPDATE,
						                MULTI_BIN_ID,filterDetail,computerStock,LOCATION_CODE)  
						SELECT @CTITLE AS STM_TITLE,@DDATE AS STM_START_DT,'' AS STM_END_DT,0 AS RECONCILED,@CNEWKEYVAL AS MEMO_ID
							  ,@CDEPT_ID AS DEPT_ID,0 AS SETTLED,@CREP_ID AS REP_ID,'000' AS RECON_BIN_ID,GETDATE(),@CMULTI_BIN_ID ,
							  @CFILTER filterDetail,@ccomputerStock as computerStock,@CDEPT_ID as LOCATION_CODE
					END	
					INSERT @TOUTPUT(PRODUCT_CODE,QUANTITY,ERRMSG,MEMO_ID)
					SELECT '',0,'',@CNEWKEYVAL
			END
	END
	---END OF MODE 1
	ELSE IF @NMODE=2
	BEGIN
		DECLARE @TERRMSG TABLE(ERRMSG VARCHAR(500))
		
		SET @cStep='150'	
		INSERT @TERRMSG
		EXEC SP_STOCK_RECON_HIST  @MEMO_ID=@CMEMO_ID
								 ,@DEPT_ID=@CDEPT_ID
								 ,@USER_CODE=@CUSER_CODE
								 ,@C_DATE=@DDATE
								 ,@NSTOPMODE=@NSTOPMODE

							 
		IF EXISTS(SELECT TOP 1 'U' FROM @TERRMSG WHERE ISNULL(ERRMSG,'')<>'')
		BEGIN
			SELECT  ERRMSG FROM @TERRMSG WHERE ISNULL(ERRMSG,'')<>''
		END
		ELSE
		BEGIN
			SET @cStep='160'
			
			
			
			UPDATE STMH01106 SET RECONCILED=1,STM_END_DT=@DDATE WHERE MEMO_ID=@CMEMO_ID
			UPDATE PMT01106 SET REP_ID='' WHERE REP_ID=@CREP_ID 
			
			SET @CERRMSG=''
			
			IF @NSTOPMODE =1
			BEGIN 
			
				EXEC SP3S_UPDATEPMT_WITHXNSRPT_LOC
				@CDEPT_ID=@CDEPT_ID,
				@CERRORMSG=@CERRMSG OUTPUT 
			
			END 
			
	
			 SELECT @CERRMSG AS ERRMSG
		END
	END

	GOTO END_PROC

END TRY

BEGIN CATCH
	SET @cErrmsg = 'Error in Procedure SP3S_RECON_FILTER at Step#'+@cStep+' '+error_message()
	GOTO END_PROC
END CATCH

END_PROC:	
	
	IF @@TRANCOUNT>0 
	BEGIN
		IF ISNULL(@cErrmsg,'')=''
			commit
		ELSE
			ROLLBACK
	END
	
	IF @NMODE=1
	BEGIN
		SELECT * FROM @TOUTPUT
	END	

	
END
--END OF PROCEDURE - SP3S_RECON_FILTER
