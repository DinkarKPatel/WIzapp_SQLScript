-- PROCEDURE TO SAVE A RETAIL SALE APPROVAL MEMO
CREATE PROCEDURE SAVETRAN_APR
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				VARCHAR(40),
	@CFINYEAR			VARCHAR(10),
	@CMACHINENAME		VARCHAR(100)='',
	@CWINDOWUSERNAME	VARCHAR(100)='',
	@CWIZAPPUSERCODE	VARCHAR(10)='0000000',
	@CMEMOID			VARCHAR(40)='',
	@BCALLEDFROMSLS		BIT=0,
	@BALLOWNEGSTOCK		 BIT=0,
	@CMEMOIDOUTPUT	 VARCHAR(40) OUTPUT,
	@CERRORMSG VARCHAR(MAX) OUTPUT
)
--WITH ENCRYPTION
AS
BEGIN

	-- @NUPDATEMODE:	1- NEW APPROVAL MEMO ADDED, 
	--					2- EDITING OF APPROVAL MEMO, 
	--					3- CURRENT STOCK ADJUSTMENT MEMO CANCELLED, 
	--					4- TAKE RETURN OF APPROVAL ITEMS
	--					5- TAKE RETURN OF APPROVAL ITEMS AGAINST BILL RAISED FROM APPROVAL

	print 'enter apr'
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(300),
			@CTEMPDETAILTABLE		VARCHAR(300),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CLOCATIONID			VARCHAR(4),
			@CHODEPTID				VARCHAR(4),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@LENABLETEMPDATABASE	BIT,@BNEGSTOCKFOUND BIT,
			@CUSERALIAS	VARCHAR(5),@CMEMONOPREFIX VARCHAR(10),
			@CEXPRERRORMSG	VARCHAR(MAX),@cWhereClause VARCHAR(400),@cFilterCondition varchar(400),
			@CLOCID	VARCHAR(4)		

	SET @NSTEP = 0		-- SETTTING UP ENVIRONMENT

	SET @cWhereClause = ' where sp_id= '''+@nSpId+''''

	SET @CMASTERTABLENAME	= 'APPROVAL_RETURN_MST'
	SET @CDETAILTABLENAME	= 'APPROVAL_RETURN_DET'

	SET @CTEMPMASTERTABLENAME	= 'apr_APPROVAL_RETURN_MST_UPLOAD'
	SET @CTEMPDETAILTABLENAME	= 'apr_APPROVAL_RETURN_DET_UPLOAD'

	SET @CTEMPMASTERTABLE	=  @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE	=  @CTEMPDETAILTABLENAME

	
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'MEMO_ID'
	SET @CMEMONO			= 'MEMO_NO'
	SET @NMEMONOLEN			= 10
	
	
    select @CLOCID=location_code from apr_APPROVAL_RETURN_MST_UPLOAD where SP_ID=@NSPID 
	
    SELECT @CLOCATIONID=@CLOCID
	
	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		

	SET @NSTEP = 10		-- GETTING DEPTID INFO FROM TEMP TABLE
	
		
	
	BEGIN TRY

		IF OBJECT_ID('TEMPDB..#TMPPMT','U') IS NOT NULL
			DROP TABLE #TMPPMT
		
		SELECT PRODUCT_CODE INTO #TMPPMT FROM SKU WHERE 1=2

		IF OBJECT_ID('TEMPDB..#TMPXNSTK','U') IS NOT NULL
			DROP TABLE #TMPXNSTK						   
		
		SELECT PRODUCT_CODE,QUANTITY_IN_STOCK AS XN_STOCK INTO #TMPXNSTK FROM PMT01106 WHERE 1=2
		
		IF @BCALLEDFROMSLS=0
			BEGIN TRANSACTION

				
		IF @NUPDATEMODE<>3
		BEGIN
			EXEC SP_VALIDATEXN_BEFORESAVE 'APR',@NSPID,'0000000',@NUPDATEMODE,@CCMDOUTPUT OUTPUT,@BNEGSTOCKFOUND OUTPUT
			IF ISNULL(@CCMDOUTPUT,'') <> ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION ON TEMP DATA FAILED : ' + @CCMDOUTPUT + '...'
				GOTO END_PROC
			END
			IF ISNULL(@CERRORMSG,'')<>''
				GOTO END_PROC
		END
		
		IF @NUPDATEMODE = 3 AND ISNULL(@CMEMOID,'') = ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED IF CALLED FROM CANCELLATION'
			GOTO END_PROC  		
		END
		
		IF @BCALLEDFROMSLS=0
			SELECT @BALLOWNEGSTOCK =VALUE FROM USER_ROLE_DET A (NOLOCK)
			JOIN USERS B (NOLOCK) ON A.ROLE_ID=B.ROLE_ID 
			WHERE USER_CODE=@CWIZAPPUSERCODE 
			AND FORM_NAME='FRMSALE' 
			AND FORM_OPTION='ALLOW_NEG_STOCK'		
	
	SET @BALLOWNEGSTOCK =ISNULL(@BALLOWNEGSTOCK,0)

		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	
			
			SET @NSTEP=15
			
			SET @CCMD=N'SELECT @CUSERALIASOUT=USER_ALIAS FROM USERS (NOLOCK) WHERE  USER_CODE='''+ @CWIZAPPUSERCODE+''''
			EXEC SP_EXECUTESQL @CCMD,N'@CUSERALIASOUT VARCHAR(5) OUTPUT',@CUSERALIASOUT=@CUSERALIAS OUTPUT
			
			SET @CUSERALIAS=(CASE WHEN ISNULL(@CUSERALIAS,'')='' THEN @CLOCATIONID ELSE @CUSERALIAS  END)
			
			SET @CMEMONOPREFIX=@CLOCATIONID+@CUSERALIAS+'R-'
			
		
			SET @NSTEP = 20		-- GENERATING NEW KEY
			
			-- GENERATING NEW MEMO NO		
			SET @NSAVETRANLOOP=0
			WHILE @NSAVETRANLOOP=0
			BEGIN
				EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1, 
								@CFINYEAR,0, @CMEMONOVAL OUTPUT   
				
				PRINT @CMEMONOVAL
				SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' (NOLOCK)
										WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
										AND FIN_YEAR = '''+@CFINYEAR+''' )
								SET @NLOOPOUTPUT=0
							ELSE
								SET @NLOOPOUTPUT=1'
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
			END

			IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
				  GOTO END_PROC  		
			END

			SET @NSTEP = 30		-- GENERATING NEW ID

			-- GENERATING NEW JOB ORDER ID
			SET @CKEYFIELDVAL1 = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
				  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
				  GOTO END_PROC
			END

			SET @NSTEP = 35		-- UPDATING NEW ID INTO TEMP TABLES
			-- UPDATING NEWLY GENERATED JOB ORDER NO AND JOB ORDER ID IN PIM AND PID TEMP TABLES
			SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' WITH (ROWLOCK) SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
						@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''+@cWhereClause
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 42		
			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''+@cWhereClause
						PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD

			SET @NSTEP = 44
			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET EMP_CODE =''0000000'' '+@cWhereClause+' AND ISNULL(EMP_CODE,'''')='''' '
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD

			SET @NSTEP = 46
			SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' WITH (ROWLOCK) SET FIN_YEAR ='''+@CFINYEAR+'''  WHERE FIN_YEAR='''' AND SP_ID='''+@NSPID+''' '
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD

		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
		
			SET @NSTEP = 50		-- GETTING ID INFO FROM TEMP TABLE

			
			-- GETTING MEMO ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ' + @CKEYFIELD1 + ', @CMEMONOVAL = ' + @CMEMONO + ' FROM '
						+ (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME + ' WHERE MEMO_ID = ''' + @CMEMOID + ''''
								ELSE @CTEMPMASTERTABLE+@cWhereClause END )
			
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
							   
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  GOTO END_PROC  		
			END

			
			IF @NUPDATEMODE = 3			
			BEGIN
				SET @NSTEP = 60
				-- UPDATING SENTTOHO FLAG
				SET @CCMD = N'UPDATE ' + @CMASTERTABLENAME + ' SET CANCELLED = 1,LAST_UPDATE=GETDATE() ' + 
							N' WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + ''''
				EXEC SP_EXECUTESQL @CCMD
			END
			
			ELSE
			BEGIN

				SET @NSTEP = 65		-- UPDATING SENT_TO_HO FLAG TEMP TABLE
				-- UPDATING SENTTOHO FLAG
				SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' WITH (ROWLOCK) SET LAST_UPDATE=GETDATE()'+@cWhereClause
				EXEC SP_EXECUTESQL @CCMD
				
				
				-- ENTRY IN AUDIT TRAIL (ONLY WHEN USER EXPLICITLY CLICKED ON EDIT BUTTON)
				SET @NSTEP = 70		-- AUDIT TRIAL ENTRY

				EXEC AUDITLOGENTRY
					  @CXNTYPE		= 'APR'
					, @CXNID		= @CKEYFIELDVAL1
					, @CDEPTID		= @CLOCATIONID
					, @CCOMPUTERNAME= @CMACHINENAME
					, @CWINUSERNAME = @CWINDOWUSERNAME
					, @CWIZUSERCODE = @CWIZAPPUSERCODE
			END

			-- REVERTING BACK THE STOCK OF PMT W.R.T CURRENT ISSUE
			SET @NSTEP = 80		-- REVERTING STOCK

			EXEC UPDATEPMT 
				  @CXNTYPE			= 'APR' 
				, @CXNNO			= @CMEMONOVAL
				, @CXNID			= @CKEYFIELDVAL1
				, @NREVERTFLAG		= 1
				, @nAllowNegstock	= @BALLOWNEGSTOCK
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= @NUPDATEMODE				
				, @CCMD				= @CCMDOUTPUT OUTPUT
			
			IF (@NUPDATEMODE = 3) 
			BEGIN
				IF @CCMDOUTPUT <> ''
				BEGIN
					SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'
					SET @BNEGSTOCKFOUND=1					
					EXEC SP_EXECUTESQL @CCMDOUTPUT
				END	

			EXEC SP3S_upd_qty_lastupdate
			@nUpdateMode=3,
			@cXnType='APR',
			@cMasterTable='APPROVAL_RETURN_MST',
			@cMemoIdCol='Memo_id',
			@cMemoId=@CKEYFIELDVAL1,
			@CERRORMSG=@CERRORMSG OUTPUT

			GOTO END_PROC


				GOTO END_PROC
			END
		END					-- END OF EDITMODE

		SET @NSTEP = 95
		
		-- RECHECKING IF ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR GETTING NEXT MEMO ID....'
			GOTO END_PROC
		END

		IF @NUPDATEMODE <> 3
		BEGIN
			
			SET @cFilterCondition = ' sp_id= '''+@nSpId+''''
			SET @NSTEP=100
			
			SET @CCMD=N'UPDATE '+@CTEMPMASTERTABLE+' SET AC_CODE=(CASE WHEN MODE=1 THEN ''0000000000'' ELSE AC_CODE END), 			
						CUSTOMER_CODE=(CASE WHEN MODE=2 THEN ''000000000000'' ELSE CUSTOMER_CODE END)'

			EXEC SP_EXECUTESQL @CCMD						


			  DECLARE @CFILTERSPID VARCHAR(100)

		 	SET @CFILTERSPID=' AND SP_ID='''+ LTRIM(RTRIM((@NSPID)))+''''

			PRINT 'NOW VALIDATE SECTION ITEM TYPE'

			EXEC SP3S_VALIDATEXN_ITEMTYPE
			@CTEMPMASTERTABLE='APR_APPROVAL_RETURN_MST_UPLOAD',
			@CTEMPDETAILTABLE='APR_APPROVAL_RETURN_DET_UPLOAD',
			@CWHERECLAUSE=@CFILTERSPID,
			@CERRORMSG=@CERRORMSG OUTPUT


			IF ISNULL(@CERRORMSG,'')<>''
				GOTO END_PROC

			IF @NUPDATEMODE IN (1,2)
			BEGIN
				SET @nSTEP = 102
				UPDATE a SET total_quantity=b.total_quantity FROM apr_APPROVAL_RETURN_MST_UPLOAD A WITH (ROWLOCK) 
				JOIN (SELECT sp_id,sum(quantity) as total_quantity FROM apr_APPROVAL_RETURN_det_UPLOAD b (NOLOCK)  
						WHERE sp_id=@nSpId GROUP BY sp_id) b ON a.sp_id=b.sp_id

				EXEC SP3S_upd_qty_lastupdate
				@nUpdateMode=@NUPDATEMODE,
				@nSpId=@nSpid,
				@cXnType='APR',
				@cMasterTable='APPROVAL_RETURN_MST',
				@cMemoIdCol='Memo_id',
				@cMemoId=@CKEYFIELDVAL1,
				@cXnDtCol='memo_dt',
				@CERRORMSG=@CERRORMSG OUTPUT

			END		
			 
			SET @NSTEP = 105		-- UPDATING MASTER TABLE

			EXEC UPDATEMASTERXN_OPT 
			  @CSOURCEDB	= ''
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			, @LINSERTONLY  = 0
			, @BALWAYSUPDATE = 1				
			, @CFILTERCONDITION=@cFilterCondition

			-- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE
			SET @NSTEP = 112		-- UPDATING TRANSACTION TABLE

				-- UPDATING ROW_ID IN TEMP TABLES
				SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' WITH (ROWLOCK) SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
							  '+@cWhereClause+' AND LEFT(ROW_ID,5) = ''LATER'''
				EXEC SP_EXECUTESQL @CCMD

				-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
				SET @NSTEP = 114		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES

				SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + ' 
							WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
							AND ROW_ID IN 
							(
								SELECT A.ROW_ID 
								FROM ' + @CDETAILTABLENAME + ' A 
								LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B ON A.ROW_ID = B.ROW_ID AND b.sp_id='''+@nSpId+'''
								WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
								AND   B.ROW_ID IS NULL
							)'
				EXEC SP_EXECUTESQL @CCMD

				-- INSERTING/UPDATING THE ENTRIES IN PRD_JID TABLE FROM TEMPTABLE
				SET @NSTEP = 116		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

				EXEC UPDATEMASTERXN_OPT 
				  @CSOURCEDB	= ''
				, @CSOURCETABLE = @CTEMPDETAILTABLENAME
				, @CDESTDB		= ''
				, @CDESTTABLE	= 'approval_return_det'
				, @CKEYFIELD1	= 'row_id'
				, @LINSERTONLY  = 0
				, @BALWAYSUPDATE = 1				
				, @CFILTERCONDITION=@cFilterCondition


			-- UPDATING STOCK OF PMT W.R.T. CURRENT MEMO
			SET @NSTEP = 130		-- UPDATING PMT TABLE

			EXEC UPDATEPMT 
				  @CXNTYPE			= 'APR' 
				, @CXNNO			= @CMEMONOVAL
				, @CXNID			= @CKEYFIELDVAL1
				, @NREVERTFLAG		= 0
				, @nALLOWNEGSTOCK	= @BALLOWNEGSTOCK
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= @NUPDATEMODE				
				, @CCMD				= @CCMDOUTPUT OUTPUT
			
			IF @CCMDOUTPUT <> ''
			BEGIN
				PRINT @CCMDOUTPUT
				
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'
				SET @BNEGSTOCKFOUND=1				
				EXEC SP_EXECUTESQL @CCMDOUTPUT
				GOTO END_PROC
			END
		END
		
		SET @NSTEP = 130	
		IF EXISTS (SELECT TOP 1 'U'  FROM APPROVAL_RETURN_DET A (NOLOCK)
		JOIN APPROVAL_RETURN_MST B (NOLOCK) ON A.MEMO_ID=B.MEMO_ID
		JOIN APD01106 APD(NOLOCK) ON APD.ROW_ID=A.APD_ROW_ID 
		JOIN APM01106 APM (NOLOCK) ON APD.MEMO_ID =APM.MEMO_ID
		WHERE A.MEMO_ID =@CKEYFIELDVAL1 AND APM.CANCELLED=0
		AND apm.MEMO_DT >b.MEMO_DT)
		BEGIN
		   
		   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' approval return date can not be Less than approval issue Date'
		   GOTO END_PROC
		END
				

		UPDATE A SET MRP=B.MRP ,
					 DISCOUNT_PERCENTAGE=B.DISCOUNT_PERCENTAGE,
					 DISCOUNT_AMOUNT=( ((B.MRP*A.QUANTITY)*B.DISCOUNT_PERCENTAGE)/100)
		FROM  APPROVAL_RETURN_DET A (NOLOCK)
		JOIN APD01106 B (NOLOCK) ON A.APD_ROW_ID =B.ROW_ID 
		WHERE a.memo_id =@CKEYFIELDVAL1
		
		
				
		UPDATE  A SET RFNET=(A.MRP*A.QUANTITY)-A.DISCOUNT_AMOUNT
		FROM APPROVAL_RETURN_DET A (NOLOCK)
		WHERE a.memo_id =@CKEYFIELDVAL1

		
		-- VALIDATING ENTRIES 
		SET @NSTEP = 150		-- VALIDATING ENTRIES

		EXEC VALIDATEXN
			  @CXNTYPE	= 'APR'  
			, @CXNID	= @CKEYFIELDVAL1
			, @NUPDATEMODE = @NUPDATEMODE			
			, @CCMD		= @CCMDOUTPUT OUTPUT

		IF @CCMDOUTPUT <> ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION FAILED : ' + @CCMDOUTPUT + '...'
			GOTO END_PROC
		END

	END TRY
	
	BEGIN CATCH
		PRINT 'ENTER CATCH BLOCK OF SAVETRAN_APR'
		SET @CERRORMSG = 'PROCEDURE SAVETRAN_APR: STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'
		
		PRINT 'ERROR IN CATCH BLOCK OF SAVETRAN_APR'+@CERRORMSG
		GOTO END_PROC
	END CATCH
	
END_PROC:
	UPDATE approval_return_mst WITH (ROWLOCk) SET last_update=getdate(),reconciled=0,HO_SYNCH_LAST_UPDATE='' WHERE memo_id=@CKEYFIELDVAL1
	
	IF @@TRANCOUNT>0 AND @BCALLEDFROMSLS=0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')='' AND ISNULL(@BNEGSTOCKFOUND,0)=0
		BEGIN
			COMMIT TRANSACTION
		END	
		ELSE
			ROLLBACK
	END
	
	SELECT @CERRORMSG=ISNULL(@CERRORMSG,''),@CMEMOIDOUTPUT=ISNULL(@CKEYFIELDVAL1,'') 

	EXEC SP_DELETEUPLOADTABLES  'APR',@NSPID
	
END		
------------------------------------------------------ END OF PROCEDURE SAVETRAN_APR