CREATE PROCEDURE SP_STOCKRECON_PRINT_NEW--(LocId 3 digit change by Sanjay:06-11-2024)
(
 @IQUERYID INT,
 @CDEPTID VARCHAR(10),
 @CREPID  VARCHAR(20),
 @MEMOID VARCHAR(50)
)
--WITH ENCRYPTION

AS
BEGIN
     
     
     DECLARE @DFM_DT DATETIME,@DTO_DT DATETIME 
     
     SELECT  TOP 1 @DFM_DT=STM_START_DT,@DTO_DT=STM_END_DT 
     FROM STMH01106  (NOLOCK) WHERE MEMO_ID  =@MEMOID
    

DECLARE @CCMD NVARCHAR(MAX)
IF @IQUERYID= 1
GOTO LBL1
ELSE IF @IQUERYID= 2
GOTO LBL2
ELSE IF @IQUERYID= 3
GOTO LBL3
ELSE IF @IQUERYID= 4
GOTO LBL4


LBL1:

IF OBJECT_ID('TEMPDB..#TMPPMTSHORTAGE','U') IS NOT NULL
	DROP TABLE #TMPPMTSHORTAGE
	
SELECT a.PRODUCT_CODE,a.BIN_ID ,mrp ,SUM(ISNULL(A.COMPUTER_QTY,0) )AS STK_QTY , 
	   SUM(ISNULL(A.SCAN_QTY,0)) AS SCAN_QTY,
       SUM(ISNULL(a.Excess_Qty,0))AS EX_QTY, 
       SUM(a.SHORTAGE_QTY )AS SH_QTY
INTO #TMPPMTSHORTAGE 
FROM stockReconDetails  A (NOLOCK)
WHERE  A.Memo_Id =@MEMOID
GROUP BY  a.PRODUCT_CODE,a.BIN_ID ,mrp
HAVING(NOT (SUM(A.SHORTAGE_QTY )) = 0)
     
     
--SHORTAGE
SET @CCMD=N'SELECT D.SECTION_NAME,C.SUB_SECTION_NAME ,ARTICLE_NO,P1.PARA1_NAME ,P2.PARA2_NAME ,
				P3.PARA3_NAME,P4.PARA4_NAME,P5.PARA5_NAME,P6.PARA6_NAME ,PMT.MRP,PMT.BIN_ID,A.WS_PRICE,A.PRODUCT_CODE ,
				P2.PARA2_ORDER,SUM(STK_QTY) AS STK_QTY ,SUM(SCAN_QTY) AS SCAN_QTY,
				SUM(EX_QTY) AS EX_QTY,SUM(SH_QTY) AS SH_QTY,UOM.UOM_NAME,
				CONVERT(NUMERIC(10,2),SUM(ISNULL(CMD.SLS_QTY,0))) AS SLS_QTY_RECON_PERIOD
			    FROM #TMPPMTSHORTAGE PMT (NOLOCK) 
				JOIN SKU A ON PMT.PRODUCT_CODE = A.PRODUCT_CODE 
				JOIN ARTICLE  B (NOLOCK) ON A.ARTICLE_CODE= B.ARTICLE_CODE
				JOIN SECTIOND  C (NOLOCK) ON B.SUB_SECTION_CODE= C.SUB_SECTION_CODE
				JOIN SECTIONM  D (NOLOCK) ON C.SECTION_CODE= D.SECTION_CODE
				JOIN PARA1  P1 (NOLOCK) ON A.PARA1_CODE= P1.PARA1_CODE 
				JOIN PARA2  P2 (NOLOCK) ON A.PARA2_CODE= P2.PARA2_CODE 
				JOIN PARA3  P3 (NOLOCK) ON A.PARA3_CODE= P3.PARA3_CODE 
				JOIN PARA4  P4 (NOLOCK) ON A.PARA4_CODE= P4.PARA4_CODE 
				JOIN PARA5  P5 (NOLOCK) ON A.PARA5_CODE= P5.PARA5_CODE 
				JOIN PARA6  P6 (NOLOCK) ON A.PARA6_CODE= P6.PARA6_CODE
				JOIN UOM (NOLOCK) ON UOM.UOM_CODE=B.UOM_CODE
				LEFT JOIN 
				(
				SELECT A.PRODUCT_CODE ,SUM(QUANTITY) AS SLS_QTY 
				FROM CMD01106 A (NOLOCK)
				JOIN CMM01106 B (NOLOCK) ON A.cm_id =B.cm_id 
				WHERE B.CANCELLED =0 AND CM_DT BETWEEN '''+CONVERT(VARCHAR(10),@DFM_DT,121)+''' AND '''+CONVERT(VARCHAR(10),@DTO_DT ,121)+'''
				GROUP BY A.PRODUCT_CODE
				) CMD ON A.PRODUCT_CODE=CMD.PRODUCT_CODE
			    GROUP BY  
				D.SECTION_NAME,C.SUB_SECTION_NAME ,ARTICLE_NO,P1.PARA1_NAME ,P2.PARA2_NAME ,
				P3.PARA3_NAME, P4.PARA4_NAME, P5.PARA5_NAME, P6.PARA6_NAME, pmt.MRP,PMT.BIN_ID, A.WS_PRICE,A.PRODUCT_CODE, 
				P2.PARA2_ORDER,UOM.UOM_NAME
			    ORDER BY  
				D.SECTION_NAME,C.SUB_SECTION_NAME ,ARTICLE_NO,P1.PARA1_NAME ,P2.PARA2_ORDER,
				P2.PARA2_NAME,P3.PARA3_NAME, P4.PARA4_NAME, P5.PARA5_NAME, P6.PARA6_NAME, 
				pmt.MRP,PMT.BIN_ID, A.PRODUCT_CODE'

EXEC SP_EXECUTESQL @CCMD


GOTO LAST

LBL2:


IF OBJECT_ID('TEMPDB..#TMPPMTEXCESS','U') IS NOT NULL
	DROP TABLE #TMPPMTEXCESS
	
SELECT a.PRODUCT_CODE,a.BIN_ID ,a.mrp  ,SUM(isnull(A.COMPUTER_QTY,0)  )AS STK_QTY , 
       SUM(ISNULL(A.SCAN_QTY ,0)) AS SCAN_QTY,
       SUM(A.Excess_Qty)AS EX_QTY,  
       SUM(a.SHORTAGE_QTY ) AS SH_QTY
INTO #TMPPMTEXCESS 
FROM stockReconDetails  A (NOLOCK) 
WHERE  A.Memo_Id =@MEMOID
GROUP BY  a.PRODUCT_CODE,a.BIN_ID ,a.mrp
HAVING(NOT (SUM(a.Excess_Qty) = 0))

SET @CCMD=N'SELECT D.SECTION_NAME,C.SUB_SECTION_NAME ,ARTICLE_NO,P1.PARA1_NAME ,P2.PARA2_NAME ,
			   P3.PARA3_NAME,P4.PARA4_NAME,P5.PARA5_NAME,P6.PARA6_NAME ,pmt.MRP,pmt.bin_id,A.WS_PRICE,A.PRODUCT_CODE ,
			   P2.PARA2_ORDER,SUM(STK_QTY) AS STK_QTY ,SUM(SCAN_QTY) AS SCAN_QTY,
			   SUM(EX_QTY) AS EX_QTY,SUM(SH_QTY) AS SH_QTY ,UOM.UOM_NAME,
			   CONVERT(NUMERIC(10,2),SUM(ISNULL(CMD.SLS_QTY,0))) AS SLS_QTY_RECON_PERIOD      
			    FROM #TMPPMTEXCESS  PMT (NOLOCK) 
				JOIN SKU A ON PMT.PRODUCT_CODE = A.PRODUCT_CODE 
				JOIN ARTICLE  B (NOLOCK) ON A.ARTICLE_CODE= B.ARTICLE_CODE
				JOIN SECTIOND  C (NOLOCK) ON B.SUB_SECTION_CODE= C.SUB_SECTION_CODE
				JOIN SECTIONM  D (NOLOCK) ON C.SECTION_CODE= D.SECTION_CODE
				JOIN PARA1  P1 (NOLOCK) ON A.PARA1_CODE= P1.PARA1_CODE 
				JOIN PARA2  P2 (NOLOCK) ON A.PARA2_CODE= P2.PARA2_CODE 
				JOIN PARA3  P3 (NOLOCK) ON A.PARA3_CODE= P3.PARA3_CODE 
				JOIN PARA4  P4 (NOLOCK) ON A.PARA4_CODE= P4.PARA4_CODE 
				JOIN PARA5  P5 (NOLOCK) ON A.PARA5_CODE= P5.PARA5_CODE 
				JOIN PARA6  P6 (NOLOCK) ON A.PARA6_CODE= P6.PARA6_CODE
				JOIN UOM (NOLOCK) ON UOM.UOM_CODE=B.UOM_CODE
				LEFT JOIN 
				(
				SELECT A.PRODUCT_CODE ,SUM(QUANTITY) AS SLS_QTY 
				FROM CMD01106 A (NOLOCK)
				JOIN CMM01106 B (NOLOCK) ON A.cm_id =B.cm_id 
				WHERE B.CANCELLED =0 AND CM_DT BETWEEN '''+CONVERT(VARCHAR(10),@DFM_DT,121)+''' AND '''+CONVERT(VARCHAR(10),@DTO_DT ,121)+'''
				GROUP BY A.PRODUCT_CODE
				) CMD ON A.PRODUCT_CODE=CMD.PRODUCT_CODE
			GROUP BY  
				D.SECTION_NAME,C.SUB_SECTION_NAME ,ARTICLE_NO,P1.PARA1_NAME ,P2.PARA2_NAME ,
				P3.PARA3_NAME, P4.PARA4_NAME, P5.PARA5_NAME, P6.PARA6_NAME, pmt.MRP,pmt.bin_id,A.WS_PRICE, 
				A.PRODUCT_CODE, P2.PARA2_ORDER,UOM.UOM_NAME
			ORDER BY  
				D.SECTION_NAME,C.SUB_SECTION_NAME ,ARTICLE_NO,P1.PARA1_NAME ,P2.PARA2_ORDER,
				P2.PARA2_NAME ,P3.PARA3_NAME, P4.PARA4_NAME, P5.PARA5_NAME, P6.PARA6_NAME, pmt.MRP, 
				A.PRODUCT_CODE'

EXEC SP_EXECUTESQL @CCMD

GOTO LAST


LBL3:

--DEPT_ID = '''+@CDEPTID+'''  AND REP_ID ='''+ @CREPID+'''

SET @CCMD=N'SELECT PRODUCT_CODE,
            SUM(A.Excess_Qty)AS QTY,BIN_ID,mrp
		FROM stockReconDetails a (NOLOCK)
		WHERE A.MEMO_ID='''+@MEMOID+'''
		GROUP BY PRODUCT_CODE,BIN_ID,mrp
		HAVING NOT (SUM(A.Excess_Qty)=0)
		ORDER BY PRODUCT_CODE,BIN_ID,mrp
'

EXEC SP_EXECUTESQL @CCMD

GOTO LAST

LBL4:
-- DEPT_ID = '''+@CDEPTID+'''  AND REP_ID ='''+ @CREPID+'''
SET @CCMD=N'SELECT PRODUCT_CODE,
			SUM(A.SHORTAGE_QTY) AS QTY, BIN_ID,mrp
FROM stockReconDetails A (NOLOCK)
WHERE A.MEMO_ID='''+@MEMOID+'''
GROUP BY PRODUCT_CODE,BIN_ID,mrp
HAVING NOT (SUM(A.SHORTAGE_QTY)=0)
ORDER BY PRODUCT_CODE'

EXEC SP_EXECUTESQL @CCMD

GOTO LAST

LAST:

END
--END OF PROCEDURE - SP_STOCKRECON_PRINT_NEW
