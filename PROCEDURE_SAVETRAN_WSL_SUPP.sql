-- PROCEDURE TO SAVE A WHOLESALE SUPP INVOICE FROM TEMPORARY TABLES TO ACTUAL TABLES
CREATE PROCEDURE SAVETRAN_WSL_SUPP
(
	@NUPDATEMODE		NUMERIC(2,0),
	@NSPID				INT=0,
	@CMEMONOPREFIX		VARCHAR(50)='',
	@CFINYEAR			VARCHAR(10)='',
	@CMACHINENAME		VARCHAR(100)='',
	@CWINDOWUSERNAME	VARCHAR(100)='',
	@CWIZAPPUSERCODE	VARCHAR(10)='0000000',
	@CMEMOID			VARCHAR(40)='',
	@NBOXNO				NUMERIC(3,0)=0,
	@CPRODUCTCODE		VARCHAR(50)='',
	@NAPPROVEMODE		NUMERIC(1,0)=0,
	@CCOMPUTERIP		VARCHAR(20)='',
	@CPSNO				VARCHAR(50)='',
	@EDIT_CLICKED	    BIT=0
)
--WITH ENCRYPTION
AS
BEGIN
	--changes by Dinkar in location id varchar(4)..
	-- @NUPDATEMODE:	1- NEW WHOLESALE BOX ADDED, 
	--					2- EDIT A GIVEN BOX
	--					3- CURRENT MEMO CANCELLED, 
	--					4- DELETE AN EXISTING BOX
	--					5- DELETE AN EXISTING ITEM IN ALL BOXES
	--					10- DELETE A SELECTED CREDIT NOTE FROM WHOLESALE INVOICE
	--                  15 - INSERT DATA INTO UPLOAD XNS AND DOC TABLES 
	IF @CMEMOID NOT LIKE '%LATER%'
	   RETURN
	IF @NUPDATEMODE<>1
	   RETURN   
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME1		VARCHAR(100),
			@CDETAILTABLENAME2		VARCHAR(100),		
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME1	VARCHAR(100),
			@CTEMPDETAILTABLENAME2	VARCHAR(100),			
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE1		VARCHAR(100),
			@CTEMPDETAILTABLE2		VARCHAR(100),			
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(4),
			@CLOCATIONID			VARCHAR(4),
			@CHODEPTID				VARCHAR(4),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					NUMERIC(10,2),
			@BNEGSTOCKFOUND BIT,
			@CMSG					VARCHAR(MAX),
			@BPURLOC BIT,
			@CPSID					VARCHAR(40),
			@CREFAPPMEMOID			VARCHAR(40),
			@CAPRMEMOID VARCHAR(40),
			@BGENERATEAUTOSERIES    BIT,
			@CTARGETLOCID			CHAR(2),
			@CDEPT_ID CHAR(4),
			@NTARGETLOCTYPE			INT	,@BGSTBILL BIT,
			@NSOURCELOCTYPE INT,
			@NMODE INT,@BTARGETPURLOC BIT
			,@DSTARTDT DATETIME
			,@CMEMOPREFIXDEFINED VARCHAR(20),
			@BUSERPREFIXASINITIAL BIT
			,@BENFORCEBILLINGRULES BIT
			,@NTOTALCUSTOMDUTY NUMERIC(10,2),
			@CDETAILTABLENAME3 VARCHAR(100)
			,@CTEMPDETAILTABLENAME3 VARCHAR(100),@CTEMPDETAILTABLE3 VARCHAR(100),
			@CDETAILTABLENAME5 VARCHAR(100),@CTEMPDETAILTABLENAME5 VARCHAR(100),@CTEMPDETAILTABLE5 VARCHAR(100),
			@BALLOWNEGSTOCK BIT,@CHKSTOCKUSERCODE VARCHAR(25),@DINVDT DATETIME,
			@NENTRYMODE NUMERIC(1),@BIS_BIN_TRANSFER BIT,@CTARGET_BIN VARCHAR(3),@DSTARTTIME DATETIME,
			@CTEMPDETAILTABLE4 VARCHAR(100),@CTEMPDETAILTABLENAME4 VARCHAR(100),
			@BDEBUGMODE BIT,@CPREFIXYEARCODESISLOC VARCHAR(2),@BTARGETSISLOC BIT,@NCUSTOMRATETYPE INT,
			@CGSTCUTOFFDATE VARCHAR(20),@CPARTYSTATECODE VARCHAR(5),@BGROUPINV BIT,@CERRPRODUCTCODE VARCHAR(50),
			@CPARTYCODE CHAR(10),@ERP_CONFIG VARCHAR(10),@BDONOTSENDCHALLANWITHOUTDISPATCH BIT,
			@NLOCREGISTER NUMERIC(5,0),@COL VARCHAR(MAX),@CLOCID VARCHAR(4)
			
	SET @DSTARTTIME=GETDATE()
	
	SET @BDEBUGMODE=0
				
	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	SET @NSTEP = 0		-- SETTTING UP ENVIRONMENT
	EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,1,@NSPID,@BDEBUGMODE
	

	SET @CREFAPPMEMOID=''
	
	SELECT @ERP_CONFIG =VALUE FROM CONFIG WHERE CONFIG_OPTION='ENABLE_ERP_INTEGRATION'
	SET @ERP_CONFIG=ISNULL(@ERP_CONFIG,'')  
	
	SELECT @CGSTCUTOFFDATE=VALUE FROM CONFIG WHERE CONFIG_OPTION ='GST_CUT_OFF_DATE'
	
	-- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
	SET @CTEMPDBNAME = ''

	SET @CMASTERTABLENAME	= 'INMSUPP'--'INM01106'
	SET @CDETAILTABLENAME1	= 'INDSUPP'--'IND01106'
	--SET @CDETAILTABLENAME2	= 'PAYMODE_XN_DET'
	--SET @CDETAILTABLENAME5	= 'INV_ATTR_MST'

	SET @CTEMPMASTERTABLENAME	= 'TEMP_INMSUPP_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME1	= 'TEMP_INDSUPP_'+LTRIM(RTRIM(STR(@NSPID)))
	--SET @CTEMPDETAILTABLENAME2	= 'TEMP_PAYMODE_XN_DET_'+LTRIM(RTRIM(STR(@NSPID)))
	--SET @CTEMPDETAILTABLENAME4	= 'TEMP_MBO_WSR_WSL_LINK_'+LTRIM(RTRIM(STR(@NSPID)))
	--SET @CTEMPDETAILTABLENAME5	= 'TEMP_INV_ATTR_MST_'+LTRIM(RTRIM(STR(@NSPID)))

	SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE1	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME1
	--SET @CTEMPDETAILTABLE2	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME2
	--SET @CTEMPDETAILTABLE3  = @CTEMPDBNAME + @CTEMPDETAILTABLENAME3	
	--SET @CTEMPDETAILTABLE4  = @CTEMPDBNAME + @CTEMPDETAILTABLENAME4
	--SET @CTEMPDETAILTABLE5  = @CTEMPDBNAME + @CTEMPDETAILTABLENAME5
	
	SET @CCMD='UPDATE ['+@CTEMPDETAILTABLE1+'] SET EMP_CODE='''+@CWIZAPPUSERCODE+''' WHERE ISNULL(EMP_CODE,'''')='''''
	EXEC(@CCMD)
	SET @CCMD='UPDATE ['+@CTEMPDETAILTABLE1+'] SET EMP_CODE1='''+@CWIZAPPUSERCODE+''' WHERE ISNULL(EMP_CODE1,'''')='''''
	EXEC(@CCMD)
	SET @CCMD='UPDATE ['+@CTEMPDETAILTABLE1+'] SET EMP_CODE2='''+@CWIZAPPUSERCODE+''' WHERE ISNULL(EMP_CODE2,'''')='''''
	EXEC(@CCMD)
	SET @CCMD='UPDATE ['+@CTEMPDETAILTABLE1+'] SET ROW_ID=LEFT(NEWID(),40)'
	EXEC(@CCMD)
	
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'INV_ID'
	SET @CMEMONO			= 'INV_NO'
	--14 MAR 2018	
	IF OBJECT_ID('TEMPDB..#AGAINST_ID') IS NOT NULL
	   DROP TABLE #AGAINST_ID
	CREATE TABLE #AGAINST_ID(INV_ID VARCHAR(100))   
	SET @CCMD='SELECT DISTINCT INV_ID FROM ['+@CTEMPDETAILTABLENAME1+']'
	INSERT #AGAINST_ID(INV_ID)
	EXEC(@CCMD)
	--SELECT DISTINCT INV_ID FROM ##INDINV
	--DROP TABLE ##INDINV
	SET @CCMD=''
	--14 MAR 2018
	--SET @NMEMONOLEN = 10
	
	SET @CCMD = 'SELECT @CLOCID = location_code FROM ' + @CTEMPMASTERTABLE
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD, N'@CLOCID VARCHAR(4) OUTPUT',@CLOCID OUTPUT



	IF ISNULL(@CLOCID,'')=''
		SELECT @CLOCATIONID = DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 
	ELSE
		SELECT @CLOCATIONID=@CLOCID
	
	SELECT @CHODEPTID = [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		


	IF ISNULL(@CLOCATIONID,'')=''
	 BEGIN
		SET @CERRORMSG =' LOCATION ID CAN NOT BE BLANK  '  
		GOTO END_PROC    
	 END
	
	SELECT @BDONOTSENDCHALLANWITHOUTDISPATCH=ISNULL(DONOTSENDCHALLANWITHOUTDISPATCH,0)
	,@NLOCREGISTER=REGISTERED_GST 
	FROM LOCATION WHERE DEPT_ID=@CLOCATIONID 
	

    IF @NUPDATEMODE<>3
		SET @CCMD =N'SELECT TOP 1 @CHKSTOCKUSERCODE=USER_CODE FROM '+ @CTEMPMASTERTABLE +''
    ELSE
		SET @CCMD =N'SELECT TOP 1 @CHKSTOCKUSERCODE=USER_CODE FROM INMSUPP WHERE INV_ID='''+@CMEMOID+''''
    
    EXEC SP_EXECUTESQL @CCMD,N'@CHKSTOCKUSERCODE VARCHAR(20) OUTPUT',@CHKSTOCKUSERCODE OUTPUT
    
    SELECT @BALLOWNEGSTOCK=VALUE 
    FROM USER_ROLE_DET A (NOLOCK)
	JOIN USERS B (NOLOCK) ON A.ROLE_ID=B.ROLE_ID
	WHERE USER_CODE=@CHKSTOCKUSERCODE 
	AND FORM_NAME='FRMWSLINVOICE' 
	AND FORM_OPTION='ALLOW_NEG_STOCK' --AND @CHKSTOCKUSERCODE<>'0000000'	
	
	SET @BALLOWNEGSTOCK =ISNULL(@BALLOWNEGSTOCK,0) 
	
	--FOR SUPER USER NEGATIVE STOCK CANNOT BE ALLOWED...
	--IF @CHKSTOCKUSERCODE='0000000'
	--	SET @BALLOWNEGSTOCK=0

	SET @NSTEP = 5		-- GETTING DEPTID INFO FROM TEMP TABLE
	EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
	

	BEGIN TRANSACTION
	
	BEGIN TRY
	
	  
		/*
		--14 MAR 2018
		SET @CCMD = N'IF OBJECT_ID('''+@CTEMPDETAILTABLE5+''',''U'') IS  NULL
				BEGIN
					 SELECT * INTO '+@CTEMPDETAILTABLE5+' FROM INV_ATTR_MST WHERE 1=2
				END	'
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD
		
	
		SET @CCMD = N'IF OBJECT_ID('''+@CTEMPDETAILTABLE3+''',''U'') IS NOT NULL
				BEGIN
					ALTER TABLE '+@CTEMPDETAILTABLE1+'	ADD TEMP_ROW_ID VARCHAR(50)
					ALTER TABLE '+@CTEMPDETAILTABLE3+'	ADD TEMP_ROW_ID VARCHAR(50) 
				END	'
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD
		
		SET @NSTEP = 7	
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
		
		SET @CCMD = N'IF OBJECT_ID('''+@CTEMPDETAILTABLE3+''',''U'') IS NOT NULL
				BEGIN
					UPDATE '+@CTEMPDETAILTABLE1+' SET TEMP_ROW_ID = ROW_ID
					UPDATE  '+@CTEMPDETAILTABLE3+' SET TEMP_ROW_ID = WSL_ROW_ID 
				END	'
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD


			
		IF @NUPDATEMODE=6
		   GOTO LBLAPPROVEWSLGENINV
		ELSE IF @NUPDATEMODE=7
		        GOTO LBLUPDATEDISPATCHDETAILS
		ELSE IF @NUPDATEMODE=9
		 	    GOTO LBLUPDATEWSLORDERS
		--14 MAR 2018
		*/
		
					
		IF OBJECT_ID('TEMPDB..#TMPPMT','U') IS NOT NULL
		   DROP TABLE #TMPPMT
		
		SELECT PRODUCT_CODE INTO #TMPPMT FROM SKU WHERE 1=2

		IF OBJECT_ID('TEMPDB..#TMPXNSTK','U') IS NOT NULL
			DROP TABLE #TMPXNSTK						   
		
		SELECT PRODUCT_CODE,QUANTITY_IN_STOCK AS XN_STOCK INTO #TMPXNSTK FROM PMT01106 WHERE 1=2
		
		/*STOCK UPDATE CHANGES*/
		IF OBJECT_ID('TEMPDB..#BACODES','U') IS NOT NULL
			DROP TABLE #BACODES

		SELECT DEPT_ID,BIN_ID,PRODUCT_CODE,QUANTITY_IN_STOCK AS XN_QTY INTO #BACODES FROM PMT01106 WHERE 1=2
		/*STOCK UPDATE CHANGES*/
		IF @NUPDATEMODE IN (3,4,5,8)			
		BEGIN
			SET @NSTEP = 10
			EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
			
			IF ISNULL(@CMEMOID,'') = ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED .....CANNOT PROCEED'
				GOTO END_PROC  		
			END
			
			SET @CKEYFIELDVAL1=@CMEMOID
			
			SET @NSTEP = 13
			
			EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
						
			IF @NUPDATEMODE=4 AND ISNULL(@NBOXNO,0)=0
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' BOX NO. REQUIRED .....CANNOT PROCEED'
				GOTO END_PROC  		
			END

			SET @NSTEP = 15
						
			IF @NUPDATEMODE=5 AND ISNULL(@CPRODUCTCODE,'')=''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' BAR CODE NO. REQUIRED .....CANNOT PROCEED'
				GOTO END_PROC  		
			END

			SET @NSTEP = 16
			IF @NUPDATEMODE=8 AND ISNULL(@CPSNO,'')=''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' PACK SLIP NO. REQUIRED .....CANNOT PROCEED'
				GOTO END_PROC  		
			END
			
			EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
			
			/*STOCK UPDATE CHANGES*/
			--FOR UPDATE MODES 3,4,5,8, GETTING THE BARCODES FOR STOCK REVERSAL
			INSERT #BACODES(DEPT_ID,BIN_ID,PRODUCT_CODE,XN_QTY)
			SELECT A.DEPT_ID,A.BIN_ID,A.PRODUCT_CODE,-A.QUANTITY
			FROM INDSUPP A (NOLOCK)
			WHERE A.INV_ID=@CKEYFIELDVAL1
			/*STOCK UPDATE CHANGES*/
			
			/*NO NEED TO CALL THIS PROCEDURE AS STOCK WILL BE UPDATED BY SAVETRAN			
			SET @NSTEP = 17
			
			EXEC UPDATEPMT 
				  @CXNTYPE			= 'WSL_SUPP'  
				, @CXNNO			= @CMEMONOVAL
				, @CXNID			= @CKEYFIELDVAL1
				, @NREVERTFLAG		= 1
				, @NALLOWNEGSTOCK	= @BALLOWNEGSTOCK
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= @NUPDATEMODE				
				, @CCMD				= @CCMDOUTPUT OUTPUT
			
			IF @CCMDOUTPUT <> ''
			BEGIN
				PRINT @CCMDOUTPUT
				
				SET @NSTEP = 19
					
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'
				SET @BNEGSTOCKFOUND=1				
				EXEC SP_EXECUTESQL @CCMDOUTPUT
				GOTO END_PROC
			END
			*/
			
			IF @NUPDATEMODE=3
			BEGIN
				SET @NSTEP = 19
				EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
				
				SELECT @NENTRYMODE=ENTRY_MODE FROM INMSUPP WHERE INV_ID=@CMEMOID
				
				-- UPDATING SENTTOHO FLAG
				--DELETE FROM WSL_BO_REF WITH (ROWLOCK)WHERE INV_ID=@CMEMOID--14 MAR 2018
				
				
				IF @NENTRYMODE=5
					DELETE FROM MBO_WSR_WSL_LINK WITH (ROWLOCK) WHERE INV_ID=@CMEMOID
					AND 1=2--14 MAR 2018
				
				SET @NSTEP = 21
				EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
				IF OBJECT_ID('TEMPDB..#BARCODE_NETQTY1','U') IS NOT NULL
					DROP TABLE #BARCODE_NETQTY1
			
				--GETTING THE NET QUANTITY TO UPDATED FOR EACH BARCODE EXCLUDING THE STOCK NA ARTICLES
				SELECT A.DEPT_ID,A.BIN_ID,A.PRODUCT_CODE,SUM(A.XN_QTY) AS XN_QTY 
				INTO #BARCODE_NETQTY1 
				FROM #BACODES A 
				JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE
				JOIN ARTICLE C ON B.ARTICLE_CODE=C.ARTICLE_CODE
				WHERE C.STOCK_NA=0 AND ISNULL(A.PRODUCT_CODE,'')<>''
				GROUP BY A.DEPT_ID,A.BIN_ID,A.PRODUCT_CODE
				HAVING SUM(A.XN_QTY)<>0
				
				EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
				
			   IF @NENTRYMODE<>2 /*NO NEED TO UPDATE STOCK FOR ENTRY MODE 2 AS IT IS THRU PACKSLIP*/
			   BEGIN   
				  SET @NSTEP = 23 
				  EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
				  --CHECK IF THE BARCODES TO BE UPDATED ARE NOT PART OF STOCK RECONCILLATION PROCESS	
				   IF EXISTS(
								SELECT TOP 1 A.MEMO_ID 
								FROM STMH01106 A 
								JOIN PMT01106 B ON A.REP_ID=B.REP_ID AND B.BIN_ID=A.RECON_BIN_ID
								JOIN #BARCODE_NETQTY1 C ON C.PRODUCT_CODE=B.PRODUCT_CODE AND C.BIN_ID=B.BIN_ID
								WHERE 1=2--14 MAR 2018
							)
					BEGIN
							SELECT DISTINCT C.PRODUCT_CODE,0 AS QUANTITY_IN_STOCK,'FOLLOWING BAR CODES ARE PART OF STOCK RECONCILIATION' AS ERRMSG
							FROM STMH01106 A JOIN PMT01106 B ON A.REP_ID=B.REP_ID
							AND B.BIN_ID=A.RECON_BIN_ID
							JOIN #BARCODE_NETQTY1 C ON C.PRODUCT_CODE=B.PRODUCT_CODE AND C.BIN_ID=B.BIN_ID
						    
							SET @BNEGSTOCKFOUND=1
							GOTO END_PROC
					END	  	
					
				   --UPDATING STOCK IN PMT01106
				   UPDATE A
				   SET QUANTITY_IN_STOCK=QUANTITY_IN_STOCK-XN_QTY
				   FROM PMT01106 A WITH (ROWLOCK)
				   JOIN #BARCODE_NETQTY1 B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID
				   WHERE 1=2--14 MAR 2018
			   END
				
				--SELECT @BIS_BIN_TRANSFER=BIN_TRANSFER,@CTARGET_BIN=TARGET_BIN_ID FROM INM01106 WHERE INV_ID=@CMEMOID
				SELECT @BIS_BIN_TRANSFER=BIN_TRANSFER,@CTARGET_BIN=TARGET_BIN_ID FROM INMSUPP WHERE INV_ID=@CMEMOID
			   /*
					IF THE INVOICE IS MARKED AS BIN TRANSFER, THE STOCK ADDED TO THE TARGET BIN SHOULD BE REDUCED
					AND NEGATIVE STOCK SHOULD BE CHECKED FOR THE TARGET BIN. INVOICE SHOULD NOT BE ALLOWED TO 
					GET CANCELLED IF THE TARGET BIN HAS CONSUMED THE STOCK.
			   */	
			   IF @BIS_BIN_TRANSFER=1
			   BEGIN
				  SET @NSTEP=25
				  EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
			      --INVOICE MARKED AS BIN_TRANSFER
				  UPDATE #BARCODE_NETQTY1 SET BIN_ID=@CTARGET_BIN
					
					--CHECK IF THE BARCODES TO BE UPDATED ARE NOT PART OF STOCK RECONCILLATION PROCESS	
				   IF EXISTS(
								SELECT TOP 1 A.MEMO_ID 
								FROM STMH01106 A 
								JOIN PMT01106 B ON A.REP_ID=B.REP_ID AND B.BIN_ID=A.RECON_BIN_ID
								JOIN #BARCODE_NETQTY1 C ON C.PRODUCT_CODE=B.PRODUCT_CODE AND C.BIN_ID=B.BIN_ID
								WHERE 1=2 --14 MAR 2018
							)
					BEGIN
							SELECT DISTINCT C.PRODUCT_CODE,0 AS QUANTITY_IN_STOCK,'FOLLOWING BAR CODES ARE PART OF STOCK RECONCILIATION' AS ERRMSG
							FROM STMH01106 A JOIN PMT01106 B ON A.REP_ID=B.REP_ID
							AND B.BIN_ID=A.RECON_BIN_ID
							JOIN #BARCODE_NETQTY1 C ON C.PRODUCT_CODE=B.PRODUCT_CODE AND C.BIN_ID=B.BIN_ID
						    
							SET @BNEGSTOCKFOUND=1
							GOTO END_PROC
					END	  	
					
					SET @NSTEP=27
					EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
					
					--UPDATING STOCK IN PMT01106
					UPDATE A
					SET QUANTITY_IN_STOCK=QUANTITY_IN_STOCK+XN_QTY
					FROM PMT01106 A WITH (ROWLOCK)
					JOIN #BARCODE_NETQTY1 B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID
					WHERE 1=2--14 MAR 2018
					
					/*CHECKING IF TARGET BIN STOCK IS NOT GOING NEGATIVE, IF GOING NEGATIVE, CANCELLATION OF 
					  MEMO SHOULD NOT BE ALLOWED.*/
					IF @BALLOWNEGSTOCK=0
					--CHECKING FOR NEGATIVE STOCK
					BEGIN
				    IF EXISTS(SELECT TOP 1 'U' 
							  FROM PMT01106 A 
							  JOIN #BARCODE_NETQTY1 B ON A.PRODUCT_CODE=B.PRODUCT_CODE
							  AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID AND A.QUANTITY_IN_STOCK<0
							  AND 1=2--14 MAR 2018
							  )
					BEGIN	
							  SELECT DISTINCT A.PRODUCT_CODE,A.QUANTITY_IN_STOCK,'STOCK GOING NEGATIVE FOR TARGET BIN.' AS ERRMSG
							  FROM PMT01106 A
							  JOIN #BARCODE_NETQTY1 B ON A.PRODUCT_CODE=B.PRODUCT_CODE 
							  AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID 
							  JOIN IND01106 C (NOLOCK) ON C.PRODUCT_CODE=A.PRODUCT_CODE
							  WHERE C.INV_ID=@CKEYFIELDVAL1 AND A.QUANTITY_IN_STOCK<0 AND C.QUANTITY>0
							  AND 1=2--14 MAR 2018
							  
							  SET @BNEGSTOCKFOUND=1
							  GOTO END_PROC
					END
				    END
			   END
				
	
				SET @NSTEP=29
				EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

				SET @CCMD = N'UPDATE ' + @CMASTERTABLENAME + ' WITH (ROWLOCK) SET CANCELLED = 1,SENT_TO_HO=0,LAST_UPDATE=GETDATE(),
							  UPLOADED_TO_ACTIVSTREAM=0 WHERE ' + @CKEYFIELD1 + ' = ''' + @CMEMOID + ''''
				EXEC SP_EXECUTESQL @CCMD
				
				--IF @NUPDATEMODE=3
				   --EXEC SP3S_CAPTURE_AUDIT_TRAIL 'WSL_SUPP',@CMEMOID,@CTEMPMASTERTABLE,@CTEMPDETAILTABLE1,@NSPID,@CMACHINENAME,@CWINDOWUSERNAME,@CWIZAPPUSERCODE,1,'1900-01-01',@EDIT_CLICKED
				
				GOTO END_PROC
			END
			
			ELSE IF @NUPDATEMODE=4
				 BEGIN
					SET @NSTEP = 31
					EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

					IF EXISTS(SELECT TOP 1 BOX_NO FROM INDSUPP WHERE INV_ID=@CMEMOID AND BOX_NO=@NBOXNO)
					   BEGIN
						 SET @CCMD = N'DELETE FROM INDSUPP WITH (ROWLOCK) WHERE INV_ID = ''' +@CMEMOID + ''' AND
								  BOX_NO='+LTRIM(RTRIM(STR(@NBOXNO)))
						 PRINT @CCMD			  
						 EXEC SP_EXECUTESQL @CCMD
					
					     SET @CCMD = N'UPDATE INMSUPP WITH (ROWLOCK) SET LAST_UPDATE = GETDATE() WHERE INV_ID = ''' +@CMEMOID + ''''
					     PRINT @CCMD
					     EXEC SP_EXECUTESQL @CCMD
					   END
					ELSE
					   BEGIN
						 SET @CERRORMSG='INVALID BOX NO. PROVIDED.....PLEASE CHECK'
						 GOTO END_PROC
					   END	
				 END--@NUPDATEMODE=4			
				
			ELSE IF @NUPDATEMODE=5
			     BEGIN
				    SET @NSTEP = 33
					EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
				
					SET @CCMD = N'DELETE FROM INDSUPP WITH (ROWLOCK) WHERE INV_ID = ''' +@CMEMOID + ''' AND
							  PRODUCT_CODE='''+@CPRODUCTCODE+''''
					EXEC SP_EXECUTESQL @CCMD
				
					SET @CCMD = N'UPDATE INMSUPP WITH(ROWLOCK) SET LAST_UPDATE = GETDATE() WHERE INV_ID = ''' +@CMEMOID + ''''
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD
				 END--@NUPDATEMODE=5						
				 
			ELSE IF @NUPDATEMODE=8
				 BEGIN
					SET @NSTEP = 35
					EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
				
					IF EXISTS (SELECT TOP 1 PS_NO FROM INDSUPP A JOIN WPS_MST B ON A.PS_ID=B.PS_ID WHERE INV_ID=@CMEMOID AND PS_NO=@CPSNO)
						BEGIN
							SELECT TOP 1 @CPSID=A.PS_ID FROM INDSUPP A JOIN WPS_MST B ON A.PS_ID=B.PS_ID WHERE INV_ID=@CMEMOID AND PS_NO=@CPSNO
							SET @NSTEP = 35
							SET @CCMD = N'DELETE FROM INDSUPP WITH (ROWLOCK) WHERE INV_ID = ''' +@CMEMOID + ''' AND PS_ID='''+@CPSID+''''
							EXEC SP_EXECUTESQL @CCMD
						END
					ELSE
						BEGIN
							SET @NSTEP = 38
							SET @CERRORMSG='INVALID PACKING SLIP NO PROVIDED.....PLEASE CHECK'
							GOTO END_PROC
						END	
				 END--@NUPDATEMODE=8
				 
			GOTO LBLUPDATESTOCK
		END
		
		SET @NSTEP = 38.1
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
		
		SET @CCMD=N'IF EXISTS(SELECT TOP 1 * FROM '+@CTEMPMASTERTABLE+' WHERE ENTRY_MODE NOT IN (3,4))
				BEGIN
					UPDATE '+@CTEMPDETAILTABLE1+' WITH (ROWLOCK) 
					SET PICKLIST_ARTICLE_CODE = NULL,
						PICKLIST_PARA1_CODE = NULL,
						PICKLIST_PARA2_CODE = NULL,
						PICK_LIST_ID=NULL,
						ORDER_ID=NULL
				END'
		PRINT @CCMD
		EXEC SP_EXECUTESQL 	@CCMD	
		
		
		SET @NSTEP = 38.2
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
		SET @CCMD=N'IF EXISTS(SELECT TOP 1 * FROM '+@CTEMPMASTERTABLE+' WHERE ENTRY_MODE IN (3))
					BEGIN
						UPDATE '+@CTEMPDETAILTABLE1+' WITH (ROWLOCK) SET PICK_LIST_ID=NULL
					END'
		PRINT @CCMD
		EXEC SP_EXECUTESQL 	@CCMD	
		
		
		SET @NSTEP = 38.3
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
		SET @CCMD=N'IF EXISTS(SELECT TOP 1 * FROM '+@CTEMPMASTERTABLE+' WHERE ENTRY_MODE IN (4))
					BEGIN
						UPDATE '+@CTEMPDETAILTABLE1+' WITH (ROWLOCK) SET ORDER_ID=NULL
					END'
		PRINT @CCMD
		EXEC SP_EXECUTESQL 	@CCMD	
        

		SET @NSTEP=38.5
		SET @BGSTBILL=0
		IF ISNULL(@CGSTCUTOFFDATE,'')<>''
		BEGIN
			SET @CCMD=N'SELECT TOP 1 @DINVDT=INV_DT FROM '+@CTEMPMASTERTABLE		
			EXEC SP_EXECUTESQL @CCMD,N'@DINVDT DATETIME OUTPUT',@DINVDT OUTPUT
			IF @DINVDT>=CONVERT(DATE,@CGSTCUTOFFDATE)
				SET @BGSTBILL=1
		END
		
		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	
			SET @NSTEP=40
			EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
		
			SELECT @BGENERATEAUTOSERIES=0,@BENFORCEBILLINGRULES=0
			
			SET @CCMD=N'SELECT @NMODE=INV_MODE,@CTARGETLOCID=PARTY_DEPT_ID,@CMEMOPREFIXDEFINED=MEMO_PREFIX,@DINVDT=INV_DT FROM '+@CTEMPMASTERTABLE
			EXEC SP_EXECUTESQL @CCMD,N'@NMODE INT OUTPUT,@CTARGETLOCID CHAR(4) OUTPUT,@CMEMOPREFIXDEFINED VARCHAR(20) OUTPUT,@DINVDT DATETIME OUTPUT',
			@NMODE OUTPUT,@CTARGETLOCID OUTPUT,@CMEMOPREFIXDEFINED OUTPUT,@DINVDT OUTPUT
				
			IF ISNULL(@CMEMOPREFIXDEFINED,'')<>''
			   BEGIN
				  SELECT @BUSERPREFIXASINITIAL=USE_PREFIX_AS_INITIAL FROM MEMO_SERIES 
				  WHERE PREFIX=@CMEMOPREFIXDEFINED AND XN_TYPE='WSL_SUPP'
				  IF @BUSERPREFIXASINITIAL=1 
					SELECT @CMEMONOPREFIX=@CMEMOPREFIXDEFINED+@CLOCATIONID+'-'
					
			   END
			--CHANGES FOR PREFIX
			--IF LEN(@CMEMONOPREFIX)<=4
			--SET @NMEMONOLEN=10
			--ELSE
			

			IF @NMODE=2
			   BEGIN
			   	  SET @NSTEP=42
				  EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
				
				  SELECT @CPREFIXYEARCODESISLOC = [VALUE] FROM CONFIG WHERE  CONFIG_OPTION='PREFIX_YEARCODE_SISCHALLANS'
				  
				  SELECT @BTARGETPURLOC=PUR_LOC,@BTARGETSISLOC=SIS_LOC FROM LOCATION	WHERE DEPT_ID=@CTARGETLOCID
				  SELECT @BPURLOC=PUR_LOC FROM LOCATION WHERE DEPT_ID=@CLOCATIONID
				
				  IF @BTARGETSISLOC=1 AND ISNULL(@CPREFIXYEARCODESISLOC,'')='1' --- SPECIAL PROVISION DONE FOR JASHN ON 09-06-2016
					 SELECT @CMEMONOPREFIX=@CLOCATIONID+@CTARGETLOCID+'-'+RIGHT(LTRIM(RTRIM(STR(YEAR(@DINVDT)))),2)
				  ELSE
				     BEGIN	
					    SELECT TOP 1 @BGENERATEAUTOSERIES=GENERATE_AUTO_SERIES FROM LOCATION WHERE DEPT_ID=@CLOCATIONID
					    IF @BGENERATEAUTOSERIES=1 
						   SELECT @CMEMONOPREFIX=@CLOCATIONID+@CTARGETLOCID+'-'
				     END	
			   END--@NMODE=2
			
			SET @NMEMONOLEN	= LEN(@CMEMONOPREFIX)+6
			-- GENERATING NEW JOB ORDER NO		
			SET @NSAVETRANLOOP=0
			
			WHILE @NSAVETRANLOOP=0
			   BEGIN
			      SET @NSTEP = 47		-- GENERATING NEW KEY
				  EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
				  --SET @CMEMONOPREFIX='LATER'	
				  EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO,@NMEMONOLEN,@CMEMONOPREFIX,1,@CFINYEAR,0, @CMEMONOVAL OUTPUT   
			      SET @NSTEP = 50
				  PRINT @CMEMONOVAL
				  SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
										WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
										AND FIN_YEAR = '''+@CFINYEAR+''' )
								SET @NLOOPOUTPUT=0
							ELSE
								SET @NLOOPOUTPUT=1'
				  PRINT @CCMD
				  EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
			   END

			IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'  
			   BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
				  GOTO END_PROC  		
			   END
			--PRINT 'SUPP MEMO NO '+ISNULL(@CMEMONO,'NULL')

			SET @NSTEP = 55		-- GENERATING NEW ID
			EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

            --SELECT @CLOCATIONID,@CFINYEAR,@CLOCATIONID,@CMEMONOVAL
			--GENERATING NEW JOB ORDER ID
			SET @CKEYFIELDVAL1 = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
			
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			   BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
				  GOTO END_PROC
			   END
			--PRINT 'SUPP MEMO ID '+ISNULL(@CKEYFIELDVAL1,'NULL')
			
			SET @NSTEP = 60		-- UPDATING NEW ID INTO TEMP TABLES
			EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

			-- UPDATING NEWLY GENERATED JOB ORDER NO AND JOB ORDER ID IN PIM AND PID TEMP TABLES
			SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' WITH (ROWLOCK)  SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + @CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD

			SET @NSTEP = 65
			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE1 + ' WITH (ROWLOCK)  SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 66
			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE1 + ' WITH (ROWLOCK)  SET ITEM_FORM_ID = ''0000000'' WHERE ISNULL(ITEM_FORM_ID,'''')='''''
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
			/*
			--14 MAR 2018
			SET @NSTEP = 67
			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE2 + ' WITH (ROWLOCK)  SET MEMO_ID = '''+@CKEYFIELDVAL1+''''
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 68
			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE5 + ' WITH (ROWLOCK)  SET MEMO_ID = '''+@CKEYFIELDVAL1+''''
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
			*/
			SET @NSTEP = 70
			EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
			-- GETTING DEPT_ID FROM TEMP MASTER TABLE
			SET @CCMD = 'SELECT @CMEMODEPTID = LEFT(INV_NO,4),@NENTRYMODE=ENTRY_MODE FROM ' + @CTEMPMASTERTABLE --MANISH
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(4) OUTPUT,@NENTRYMODE INT OUTPUT',@CMEMODEPTID OUTPUT,@NENTRYMODE OUTPUT

			IF (@CMEMODEPTID IS NULL)
			   BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'
				  GOTO END_PROC  		
			   END
			
			IF @NENTRYMODE=5
			   BEGIN
				 SET @CCMD=N'UPDATE '+@CTEMPDETAILTABLE4+' WITH (ROWLOCK)  SET INV_ID='''+@CKEYFIELDVAL1+''''
				 EXEC SP_EXECUTESQL @CCMD
			   END
						
			SET @NSTEP = 73
			EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
			
			SET @CCMD=N'SELECT TOP 1 @CREFAPPMEMOIDOUT = REF_INV_ID FROM ' + @CTEMPMASTERTABLE + ' A 
						JOIN APM01106 B ON A.REF_INV_ID=B.MEMO_ID WHERE ISNULL(REF_INV_ID,'''')<>'''''
			--EXEC SP_EXECUTESQL @CCMD,N'@CREFAPPMEMOIDOUT VARCHAR(40) OUTPUT',@CREFAPPMEMOIDOUT=@CREFAPPMEMOID OUTPUT
		END-- END OF ADDMODE
		
/*		
--14 MAR 2018
		ELSE				-- CALLED FROM EDITMODE
		   BEGIN				-- START OF EDITMODE
		     SET @NSTEP = 75		-- GETTING ID INFO FROM TEMP TABLE
			 EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
			 -- GETTING DEPT_ID FROM TEMP MASTER TABLE
			 SET @CCMD = 'SELECT @CMEMODEPTID = LEFT(INV_NO,2) FROM ' + @CMASTERTABLENAME 
			
			 EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT',@CMEMODEPTID OUTPUT
							   
			 IF (@CMEMODEPTID IS NULL)
			     BEGIN
				   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'
				   GOTO END_PROC  		
			     END

			SET @NSTEP = 78
			EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

			
			-- GETTING MEMO ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ' + @CKEYFIELD1 + ', @CMEMONOVAL = ' + @CMEMONO + ',@NENTRYMODE=ENTRY_MODE FROM '
						+ (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME + ' WHERE INV_ID = ''' + @CMEMOID + '''' --MANISH
								ELSE @CTEMPMASTERTABLE END)
			
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT,@NENTRYMODE INT OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT,@NENTRYMODE OUTPUT
							   
			IF (@CKEYFIELDVAL1 IS NULL) OR (@CMEMONOVAL IS NULL)
			    BEGIN
				   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				   GOTO END_PROC  		
			    END
			
			SET @NSTEP = 80		-- STORING OLD STATUS OF BARCODES 
			EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' WITH (ROWLOCK)  SET SENT_TO_HO = 0, POSTEDINAC = 0,LAST_UPDATE=GETDATE(),UPLOADED_TO_ACTIVSTREAM=0 '
			EXEC SP_EXECUTESQL @CCMD
			
			
			SET @NSTEP = 82
			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE1 + ' WITH (ROWLOCK)  SET ITEM_FORM_ID = ''0000000'' WHERE ISNULL(ITEM_FORM_ID,'''')='''''
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE5 + ' WITH (ROWLOCK)  SET MEMO_ID = '''+@CMEMOID+''''
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 85
			EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
			DELETE FROM WSL_BO_REF WITH (ROWLOCK) WHERE INV_ID=@CKEYFIELDVAL1
			-- ENTRY IN AUDIT TRAIL (ONLY WHEN USER EXPLICITLY CLICKED ON EDIT BUTTON)

			SET @NSTEP = 87		-- AUDIT TRIAL ENTRY
            
			/*
			EXEC AUDITLOGENTRY
				  @CXNTYPE		= 'WSL_SUPP'
				, @CXNID		= @CKEYFIELDVAL1
				, @CDEPTID		= @CMEMODEPTID
				, @CCOMPUTERNAME= @CMACHINENAME
				, @CWINUSERNAME = @CWINDOWUSERNAME
				, @CWIZUSERCODE = @CWIZAPPUSERCODE
			*/
			-- REVERTING BACK THE STOCK OF PMT W.R.T CURRENT ISSUE

			SET @NSTEP = 90		-- REVERTING STOCK
			EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

			/*STOCK UPDATE CHANGES*/
			--FOR UPDATE MODES 2 GETTING THE BARCODES FOR STOCK REVERSAL
			INSERT #BACODES(DEPT_ID,BIN_ID,PRODUCT_CODE,XN_QTY)
			SELECT A.DEPT_ID,A.BIN_ID,A.PRODUCT_CODE,-A.QUANTITY
			FROM IND01106 A
			WHERE A.INV_ID=@CKEYFIELDVAL1
			/*STOCK UPDATE CHANGES*/
			
			/*NO NEED TO CALL THIS PROCEDURE AS STOCK WILL BE UPDATED BY SAVETRAN
			EXEC UPDATEPMT 
				  @CXNTYPE			= 'WSL_SUPP'  
				, @CXNNO			= @CMEMONOVAL
				, @CXNID			= @CKEYFIELDVAL1
				, @NREVERTFLAG		= 1
				, @NALLOWNEGSTOCK	= @BALLOWNEGSTOCK
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= @NUPDATEMODE				
				, @CCMD				= @CCMDOUTPUT OUTPUT
			
			IF @CCMDOUTPUT <> ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'
				SET @BNEGSTOCKFOUND=1					
				EXEC SP_EXECUTESQL @CCMDOUTPUT
				GOTO END_PROC
			END	
			*/
			
			SET @NSTEP=92
			EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
			
			IF @NENTRYMODE=5
			BEGIN
				DELETE FROM MBO_WSR_WSL_LINK WITH (ROWLOCK) WHERE INV_ID=@CKEYFIELDVAL1
				DELETE FROM IND01106 WITH (ROWLOCK)WHERE INV_ID=@CKEYFIELDVAL1
			END	
		END					-- END OF EDITMODE
--14 MAR 2018		
*/

		SET @NSTEP=94
		SET @CCMD=N'UPDATE A SET PARTY_STATE_CODE=(CASE WHEN INV_MODE=2 THEN ISNULL(LEFT(B.LOC_GST_NO,2),'''')
														ELSE  ISNULL(LEFT(C.AC_GST_NO,2),'''') 
												   END) FROM '+@CTEMPMASTERTABLE+' A WITH (ROWLOCK) 
					LEFT OUTER JOIN LOCATION B ON A.PARTY_DEPT_ID=B.DEPT_ID
					LEFT OUTER JOIN LMP01106 C ON A.AC_CODE=C.AC_CODE'
		
		--PRINT '94'+@CCMD
		EXEC SP_EXECUTESQL @CCMD


		SET @NSTEP = 96

		EXEC SP_VALIDATEXN_BEFORESAVE 'WSL_SUPP',@NSPID,'0000000',@NUPDATEMODE,@CCMDOUTPUT OUTPUT,@BNEGSTOCKFOUND OUTPUT
		
		IF (@BALLOWNEGSTOCK=1 AND @BNEGSTOCKFOUND=1)
		   BEGIN
		  	 SET @BNEGSTOCKFOUND=0
			 SET @CCMDOUTPUT=''
		   END
		
		IF ISNULL(@CCMDOUTPUT,'') <> ''
		   BEGIN
			 SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION ON TEMP DATA FAILED : ' + @CCMDOUTPUT + '...'
			 GOTO END_PROC
		   END
        
        DECLARE @COUNTRY VARCHAR(10)
          
		SET @NSTEP = 98
        SET @CCMD=N'UPDATE A SET PARTY_STATE_CODE= (CASE WHEN 1<>'+(CASE WHEN @BGSTBILL=1 THEN '1' ELSE '0' END)+
					' THEN ''00'' WHEN INV_MODE=2 THEN ISNULL(L.GST_STATE_CODE,'''') ELSE  ISNULL(B.AC_GST_STATE_CODE,'''') END)   
        FROM '+@CTEMPMASTERTABLE+' A WITH (ROWLOCK) 
        LEFT JOIN LMP01106 B ON A.AC_CODE=B.AC_CODE
        LEFT JOIN LOCATION L ON L.DEPT_ID=A.PARTY_DEPT_ID'
		
		EXEC SP_EXECUTESQL @CCMD
		
	
		SET @CCMD=N'SELECT TOP 1 @COUNTRY=ISNULL(CON.COUNTRY_CODE,'''')
		FROM '+@CTEMPMASTERTABLE+' A 
		JOIN LMP01106 B ON A.AC_CODE=B.AC_CODE 
		LEFT OUTER JOIN AREA AR ON AR.AREA_CODE =B.AREA_CODE 
		LEFT OUTER JOIN CITY CT ON CT.CITY_CODE =AR.CITY_CODE 
		LEFT OUTER JOIN STATE ST ON ST.STATE_CODE =CT.STATE_CODE 
		LEFT OUTER JOIN REGIONM R ON R.REGION_CODE =ST.REGION_CODE
		LEFT OUTER JOIN COUNTRY CON ON CON.COUNTRY_CODE=R.COUNTRY_CODE '
	    EXEC SP_EXECUTESQL @CCMD,N'@COUNTRY VARCHAR(10) OUTPUT',@COUNTRY OUTPUT

	    
	    IF ISNULL(@COUNTRY,'') NOT IN('0000000','')
	       BEGIN
	          SET @CCMD=N'UPDATE A SET PARTY_STATE_CODE=''00'' FROM '+@CTEMPMASTERTABLE+' A WHERE ISNULL(PARTY_STATE_CODE,'''')='''''
	          EXEC SP_EXECUTESQL @CCMD
	       END

	    SET @CCMD=N'SELECT TOP 1 @CPARTYSTATECODE=PARTY_STATE_CODE FROM '+@CTEMPMASTERTABLE
	    EXEC SP_EXECUTESQL @CCMD,N'@CPARTYSTATECODE CHAR(2) OUTPUT',@CPARTYSTATECODE OUTPUT
        SET @CPARTYSTATECODE=ISNULL(@CPARTYSTATECODE,'')
        
        IF @CPARTYSTATECODE IN ('') OR (@BGSTBILL=1 AND @CPARTYSTATECODE='00' AND ISNULL(@COUNTRY,'')  IN('0000000',''))
		   BEGIN
			 SET @CERRORMSG='900- INVALID PARTY STATE CODE...PLEASE CHECK'
			 GOTO END_PROC
		   END

		IF @BGSTBILL=0
		   BEGIN
			 SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' WITH (ROWLOCK) SET HSN_CODE=''0000000000'',GST_PERCENTAGE=0,IGST_AMOUNT=0,CGST_AMOUNT=0,SGST_AMOUNT=0,XN_VALUE_WITHOUT_GST=0,XN_VALUE_WITH_GST=0 '  
			 EXEC SP_EXECUTESQL @CCMD   
		   END


		SET @NSTEP = 101
		SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' WITH (ROWLOCK)  SET  FREIGHT_HSN_CODE=''0000000000'',
						OTHER_CHARGES_HSN_CODE=''0000000000'',
						INSURANCE_HSN_CODE=''0000000000'',
						PACKING_HSN_CODE=''0000000000'''
		EXEC SP_EXECUTESQL @CCMD
		
		
		SET @NSTEP = 102
		SET @CCMD = N'  UPDATE A SET  TOTAL_QUANTITY=B.INVOICE_QUANTITY  
					   FROM ' + @CTEMPMASTERTABLE + ' A  WITH (ROWLOCK) 
					   LEFT OUTER JOIN  
					   (    
						   SELECT INV_ID, SUM(QUANTITY) AS INVOICE_QUANTITY
						   FROM ' + @CTEMPDETAILTABLE1 + '   
						   GROUP BY INV_ID    
					  ) B ON  A.INV_ID = B.INV_ID '
		EXEC SP_EXECUTESQL @CCMD
		  	
		  		
		SET @NSTEP = 103		-- UPDATING MASTER TABLE
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
		
		
		SET @NSTEP = 104
		EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			--14 MAR 2018
			--, @BALWAYSUPDATE = 1
			, @LINSERTONLY=1
			--14 MAR 2018

		-- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE
		SET @NSTEP = 105		-- UPDATING TRANSACTION TABLE
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

		-- UPDATING ROW_ID IN TEMP TABLES
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' WITH (ROWLOCK)  SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE LEFT(ROW_ID,5) = ''LATER'''
		EXEC SP_EXECUTESQL @CCMD
			
		SET @NSTEP = 111
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
		
/*		--14 MAR 2018
		SET @CCMD = N'IF OBJECT_ID('''+@CTEMPDETAILTABLE3+''',''U'') IS NOT NULL
						BEGIN
							UPDATE A SET A.WSL_ROW_ID = B.ROW_ID FROM 
							'+@CTEMPDETAILTABLE3+' A WITH (ROWLOCK)  JOIN '+@CTEMPDETAILTABLE1+' B
							ON A.TEMP_ROW_ID = B.TEMP_ROW_ID
						END	'
		PRINT @CCMD
		EXEC SP_EXECUTESQL 	@CCMD	

		
		SET @NSTEP = 112
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE2 + ' WITH (ROWLOCK) SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE LEFT(ROW_ID,5) = ''LATER'''
		EXEC SP_EXECUTESQL @CCMD
		
		
		SET @NSTEP = 114
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
		SET @CCMD = N'IF OBJECT_ID('''+@CTEMPDETAILTABLE3+''',''U'') IS NOT NULL
					BEGIN	
						DELETE ' +@CDETAILTABLENAME3+ ' WITH (ROWLOCK) WHERE WSL_ROW_ID IN (SELECT ROW_ID FROM IND01106 (NOLOCK) WHERE INV_ID = '''+@CMEMOID+''')
					END'
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD
	
		
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE5 + ' WITH (ROWLOCK) SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE LEFT(ROW_ID,5) = ''LATER'''
		EXEC SP_EXECUTESQL @CCMD
		
*/			
		
		IF @NENTRYMODE<>2
		BEGIN
			SET @NSTEP=115
			SET @CCMD = ' UPDATE ' +@CTEMPDETAILTABLE1+ ' WITH (ROWLOCK) SET REF_WPS_DET_ROWID=NULL'
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD				
		END
		
		-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
		SET @NSTEP = 116		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

		SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME1 + ' WITH (ROWLOCK) 
					WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
					AND ROW_ID IN 
					(
						SELECT A.ROW_ID 
						FROM ' + @CDETAILTABLENAME1 + ' A (NOLOCK)
						LEFT OUTER JOIN ' + @CTEMPDETAILTABLE1 + ' B (NOLOCK) ON A.ROW_ID = B.ROW_ID
						WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
						AND   B.ROW_ID IS NULL
					)'
		--EXEC SP_EXECUTESQL @CCMD

		-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
		SET @NSTEP = 118		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
/* --14 MAR 2018
		SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME2 + ' WITH (ROWLOCK) 
					WHERE MEMO_ID = ''' + @CKEYFIELDVAL1 + ''' AND XN_TYPE=''WSL_SUPP''
					AND ROW_ID IN 
					(
						SELECT A.ROW_ID 
						FROM ' + @CDETAILTABLENAME2 + ' A (NOLOCK) 
						LEFT OUTER JOIN ' + @CTEMPDETAILTABLE2 + ' B (NOLOCK) ON A.ROW_ID = B.ROW_ID
						WHERE A.MEMO_ID = ''' + @CKEYFIELDVAL1 + ''' AND A.XN_TYPE=''WSL_SUPP''
						AND   B.ROW_ID IS NULL
					)'
		EXEC SP_EXECUTESQL @CCMD
*/		
		
		DELETE FROM INV_ATTR_MST WITH (ROWLOCK) WHERE XN_TYPE= 'WSL_SUPP' AND MEMO_ID= @CKEYFIELDVAL1
		
		--SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME5 + ' 
		--			WHERE MEMO_ID = ''' + @CKEYFIELDVAL1 + ''' AND XN_TYPE=''WSL_SUPP''
		--			AND ROW_ID IN 
		--			(
		--				SELECT A.ROW_ID 
		--				FROM ' + @CDETAILTABLENAME5 + ' A 
		--				LEFT OUTER JOIN ' + @CTEMPDETAILTABLE5 + ' B ON A.ROW_ID = B.ROW_ID
		--				WHERE A.MEMO_ID = ''' + @CKEYFIELDVAL1 + ''' AND A.XN_TYPE=''WSL_SUPP''
		--				AND   B.ROW_ID IS NULL
		--			)'
		--EXEC SP_EXECUTESQL @CCMD


		SET @NSTEP = 120		-- UPDATING TRANSACTION TABLE
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE


		SET @CCMD=N'UPDATE '+@CTEMPDETAILTABLE1+' WITH (ROWLOCK) SET DISCOUNT_PERCENTAGE=(DISCOUNT_AMOUNT*100/(INVOICE_QUANTITY*RATE))
					WHERE MANUAL_DISCOUNT=1'
		EXEC SP_EXECUTESQL @CCMD
		
		SET @NSTEP = 122
		SET @CCMD=N'UPDATE A SET HSN_CODE=B.HSN_CODE FROM '+@CTEMPDETAILTABLE1+' A WITH (ROWLOCK) 
					JOIN SKU B WITH (NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE
					JOIN ARTICLE C WITH (NOLOCK) ON C.ARTICLE_CODE=B.ARTICLE_CODE
					JOIN SECTIOND D WITH (NOLOCK) ON D.SUB_SECTION_CODE=C.SUB_SECTION_CODE'
		EXEC SP_EXECUTESQL @CCMD


		SET @NSTEP = 122		-- UPDATING TRANSACTION TABLE
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

		-- UPDATING PS ID COLUMN AS NULL TO AVOID FOREIGN KEY CONSTRAINT IF INVOICE IS THRU BOX ENTRY
		SET @CCMD = N'IF EXISTS (SELECT INV_ID FROM '+@CTEMPMASTERTABLE+' WHERE ENTRY_MODE IN (1,3,4,5))
						 UPDATE ' + @CTEMPDETAILTABLE1 + ' WITH (ROWLOCK) SET PS_ID=NULL'
		EXEC SP_EXECUTESQL @CCMD
		
		
		-- INSERTING/UPDATING THE ENTRIES IN PRD_JID TABLE FROM TEMPTABLE
		SET @NSTEP = 124		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

		EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME1
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME1
			, @CKEYFIELD1	= 'ROW_ID'
			--14 MAR 2018
			--,@BALWAYSUPDATE = 1
			,@LINSERTONLY=1
			--14 MAR 2018

		SET @NSTEP = 126
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

/*		--14 MAR 2018
		EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME3
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME3
			, @CKEYFIELD1	= 'PICKLIST_ROW_ID'
			, @CKEYFIELD2   = 'WSL_ROW_ID'
			, @LINSERTONLY  = 1		

		SET @NSTEP = 128		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

		EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME2
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME2
			, @CKEYFIELD1	= 'ROW_ID'
			,@BALWAYSUPDATE = 1
			
		EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME5
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME5
			, @CKEYFIELD1	= 'MEMO_ID'
			,@BALWAYSUPDATE = 1
		
		SET @NSTEP=130	--INSERTING ENTRIES IN MBO_WSR_WSL_LINK FOR ENTRY MODE 5
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
		
		IF @NENTRYMODE=5
		   BEGIN
			EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPDETAILTABLE4
				, @CDESTDB		= ''
				, @CDESTTABLE	= 'MBO_WSR_WSL_LINK'
				, @CKEYFIELD1	= 'INV_ID'
				, @LINSERTONLY  = 1
		   END

		IF ISNULL(@CREFAPPMEMOID,'')<>''
		BEGIN
			SET @NSTEP = 132
			EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

			SELECT TOP 1 @CDEPT_ID=DEPT_ID FROM APD01106 WHERE MEMO_ID=@CREFAPPMEMOID
						
			SET @CCMD=N'IF OBJECT_ID(''TEMP_APPROVAL_RETURN_MST_'+LTRIM(RTRIM(STR(@NSPID)))+''',''U'') IS NOT NULL
							DROP TABLE TEMP_APPROVAL_RETURN_MST_'+LTRIM(RTRIM(STR(@NSPID)))+'
						
						IF OBJECT_ID(''TEMP_APPROVAL_RETURN_DET_'+LTRIM(RTRIM(STR(@NSPID)))+''',''U'') IS NOT NULL
							DROP TABLE TEMP_APPROVAL_RETURN_DET_'+LTRIM(RTRIM(STR(@NSPID)))+'
						
			SELECT CONVERT(VARCHAR(40),''LATER'') AS MEMO_ID,CONVERT(CHAR(10),''LATER'') AS MEMO_NO,INV_DT AS MEMO_DT,
			''000000000000'' AS CUSTOMER_CODE,AC_CODE,2 AS MODE,0 AS SENT_FOR_RECON,LAST_UPDATE,0 AS CANCELLED
			,USER_CODE,FIN_YEAR,'''' AS REMARKS,'''+@CDEPT_ID+''' AS DEPT_ID,BIN_ID
			INTO TEMP_APPROVAL_RETURN_MST_'+LTRIM(RTRIM(STR(@NSPID)))+' FROM '+@CTEMPMASTERTABLE+' 
			
			SELECT CONVERT(VARCHAR(40),''LATER'') AS MEMO_ID,B.QUANTITY-ISNULL(C.RET_QTY,0) AS QUANTITY
				  ,CONVERT(VARCHAR(40),''LATER'') AS ROW_ID,B.EMP_CODE,'''' AS REMARKS
				  ,B.ROW_ID AS APD_ROW_ID,CONVERT(NUMERIC(3),0) AS AUTO_SRNO,A.BIN_ID
			INTO  TEMP_APPROVAL_RETURN_DET_'+LTRIM(RTRIM(STR(@NSPID)))+'   
			FROM APM01106 A WITH (NOLOCK)    
			JOIN APD01106 B WITH (NOLOCK) ON A.MEMO_ID = B.MEMO_ID     
			LEFT OUTER JOIN     
			(
				SELECT APD_ROW_ID,SUM(A.QUANTITY) AS RET_QTY 
				FROM APPROVAL_RETURN_DET A WITH (NOLOCK)
				JOIN APPROVAL_RETURN_MST MST WITH (NOLOCK) ON A.MEMO_ID=MST.MEMO_ID   
				JOIN APD01106 B WITH (NOLOCK) ON A.APD_ROW_ID=B.ROW_ID 
				JOIN APM01106 C WITH (NOLOCK) ON C.MEMO_ID=B.MEMO_ID    
				WHERE C.CANCELLED=0 AND MST.CANCELLED=0
				GROUP BY APD_ROW_ID
			) C ON C.APD_ROW_ID=B.ROW_ID     
			WHERE A.MEMO_ID='''+@CREFAPPMEMOID+''' AND A.CANCELLED=0
			AND (B.QUANTITY-ISNULL(C.RET_QTY,0)) > 0
			
			DECLARE @CSNO VARCHAR(3)
			SET @CSNO=0
			UPDATE TEMP_APPROVAL_RETURN_DET_'+LTRIM(RTRIM(STR(@NSPID)))+' 
			SET ROW_ID=''LATER''+@CSNO,AUTO_SRNO=@CSNO,@CSNO=@CSNO+1'
			
			PRINT ISNULL(@CCMD,'NULL ARM COMMAND')
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 135
			EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
			
			EXEC SAVETRAN_APR
			@NUPDATEMODE=1,
			@NSPID=@NSPID,
			@CFINYEAR=@CFINYEAR,
			@BCALLEDFROMSLS=1,
			@CMEMOIDOUTPUT=@CAPRMEMOID OUTPUT,
			@CERRORMSG=@CERRORMSG OUTPUT
			
			IF ISNULL(@CERRORMSG,'')<>''
				GOTO END_PROC
			
		END
*/		
		
		
	LBLUPDATESTOCK:
		-- UPDATING STOCK OF PMT W.R.T. CURRENT MEMO
		SET @NSTEP = 137		-- UPDATING PMT TABLE
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
		
		/*STOCK UPDATE CHANGES*/
		--FOR UPDATE MODES 2 GETTING THE BARCODES FOR STOCK REVERSAL
		INSERT #BACODES(DEPT_ID,BIN_ID,PRODUCT_CODE,XN_QTY)
		SELECT A.DEPT_ID,A.BIN_ID,A.PRODUCT_CODE,A.QUANTITY
		FROM INDSUPP A (NOLOCK)
		WHERE A.INV_ID=@CKEYFIELDVAL1
		AND 1=2--14 MAR 2018
		/*STOCK UPDATE CHANGES*/
		
		SET @NSTEP = 139
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
		
		IF OBJECT_ID('TEMPDB..#BARCODE_NETQTY','U') IS NOT NULL
			DROP TABLE #BARCODE_NETQTY
		
		--GETTING THE NET QUANTITY TO UPDATED FOR EACH BARCODE EXCLUDING THE STOCK NA ARTICLES
		SELECT A.DEPT_ID,A.BIN_ID,A.PRODUCT_CODE,SUM(A.XN_QTY) AS XN_QTY 
		INTO #BARCODE_NETQTY 
		FROM #BACODES A 
		JOIN SKU B (NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE
		JOIN ARTICLE C (NOLOCK) ON B.ARTICLE_CODE=C.ARTICLE_CODE
		WHERE C.STOCK_NA=0 AND ISNULL(A.PRODUCT_CODE,'')<>''
		GROUP BY A.DEPT_ID,A.BIN_ID,A.PRODUCT_CODE
		HAVING SUM(A.XN_QTY)<>0
		AND 1=2--14 MAR 2018
		
	   SELECT @NENTRYMODE=ENTRY_MODE FROM INMSUPP WHERE INV_ID=@CKEYFIELDVAL1
	   
	   IF @NENTRYMODE<>2 /*NO NEED TO UPDATE STOCK FOR ENTRY MODE 2 AS IT IS THRU PACKSLIP*/
	   BEGIN   
			SET @NSTEP = 142
			EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
		   
		  --CHECK IF THE BARCODES TO BE UPDATED ARE NOT PART OF STOCK RECONCILLATION PROCESS	
		   IF EXISTS(
						SELECT TOP 1 A.MEMO_ID FROM STMH01106 A JOIN PMT01106 B ON A.REP_ID=B.REP_ID
																		 AND B.BIN_ID=A.RECON_BIN_ID
						JOIN #BARCODE_NETQTY C ON C.PRODUCT_CODE=B.PRODUCT_CODE AND C.BIN_ID=B.BIN_ID
						WHERE 1=2--14 MAR 2018
					)
			BEGIN
					SELECT DISTINCT C.PRODUCT_CODE,0 AS QUANTITY_IN_STOCK,'FOLLOWING BAR CODES ARE PART OF STOCK RECONCILIATION' AS ERRMSG
				    FROM STMH01106 A (NOLOCK) JOIN PMT01106 B (NOLOCK) ON A.REP_ID=B.REP_ID
				    AND B.BIN_ID=A.RECON_BIN_ID
				    JOIN #BARCODE_NETQTY C ON C.PRODUCT_CODE=B.PRODUCT_CODE AND C.BIN_ID=B.BIN_ID
				    
				    SET @BNEGSTOCKFOUND=1
				    GOTO END_PROC
			END	  	

		   SET @NSTEP = 145
		   EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
			
		   --UPDATING STOCK IN PMT01106
		   UPDATE A
		   SET QUANTITY_IN_STOCK=QUANTITY_IN_STOCK-XN_QTY
		   FROM PMT01106 A WITH (ROWLOCK)
		   JOIN #BARCODE_NETQTY B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID
		   WHERE 1=2 --14 MAR 2018
			
		   IF @BALLOWNEGSTOCK=0
		   --CHECKING FOR NEGATIVE STOCK
		   BEGIN
		   IF EXISTS(SELECT TOP 1 'U' FROM PMT01106 A JOIN #BARCODE_NETQTY B ON A.PRODUCT_CODE=B.PRODUCT_CODE
					 AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID AND A.QUANTITY_IN_STOCK<0
					 WHERE 1=2--14 MAR 2018
					)
			   BEGIN	
					  SELECT A.PRODUCT_CODE,A.QUANTITY_IN_STOCK,'STOCK GOING NEGATIVE' AS ERRMSG
					  FROM PMT01106 A WITH (NOLOCK)
					  JOIN #BARCODE_NETQTY B ON A.PRODUCT_CODE=B.PRODUCT_CODE 
					  AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID 
					  AND A.QUANTITY_IN_STOCK<0
					  
					  SET @BNEGSTOCKFOUND=1
				      GOTO END_PROC
			   END
		   END
		   	
	   END	

	   
	   SELECT @BIS_BIN_TRANSFER=BIN_TRANSFER,@CTARGET_BIN=TARGET_BIN_ID FROM INM01106 WHERE INV_ID=@CKEYFIELDVAL1
	   /*
			IF THE INVOICE IS MARKED AS BIN TRANSFER, THE STOCK NEEDS TO BE UPDATED FOR THE TARGET BIN ALSO.
	   */	
		IF @BIS_BIN_TRANSFER=1
		BEGIN
			SET @NSTEP = 148
			EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
		
		--INVOICE MARKED AS BIN_TRANSFER
			UPDATE #BARCODE_NETQTY SET BIN_ID=@CTARGET_BIN
			
			--CHECK IF THE BARCODES TO BE UPDATED ARE NOT PART OF STOCK RECONCILLATION PROCESS	
		   IF EXISTS(
						SELECT TOP 1 A.MEMO_ID FROM STMH01106 A JOIN PMT01106 B ON A.REP_ID=B.REP_ID
																		 AND B.BIN_ID=A.RECON_BIN_ID
						JOIN #BARCODE_NETQTY C ON C.PRODUCT_CODE=B.PRODUCT_CODE AND C.BIN_ID=B.BIN_ID
						WHERE 1=2--14 MAR 2018
					)
			BEGIN
					SELECT DISTINCT C.PRODUCT_CODE,0 AS QUANTITY_IN_STOCK,'FOLLOWING BAR CODES ARE PART OF STOCK RECONCILIATION' AS ERRMSG
					FROM STMH01106 A WITH (NOLOCK) JOIN PMT01106 B WITH (NOLOCK) ON A.REP_ID=B.REP_ID
					AND B.BIN_ID=A.RECON_BIN_ID
					JOIN #BARCODE_NETQTY C ON C.PRODUCT_CODE=B.PRODUCT_CODE AND C.BIN_ID=B.BIN_ID
				    
					SET @BNEGSTOCKFOUND=1
					GOTO END_PROC
			END	  	

			SET @NSTEP = 150
			EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
			
			SET @NSTEP = 151
			INSERT PMT01106(LAST_UPDATE,REP_ID,PRODUCT_CODE,QUANTITY_IN_STOCK,DEPT_ID,BIN_ID) 
			SELECT GETDATE(),'' AS REP_ID,A.PRODUCT_CODE,0 AS QUANTITY_IN_STOCK,A.DEPT_ID,A.BIN_ID
			FROM #BARCODE_NETQTY A
			LEFT JOIN PMT01106 B WITH (NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID
			WHERE B.PRODUCT_CODE IS NULL
			AND 1=2 --14 MAR 2018

			SET @NSTEP = 152
			EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
			
			--UPDATING STOCK IN PMT01106
			UPDATE A
			SET QUANTITY_IN_STOCK=QUANTITY_IN_STOCK+XN_QTY
			FROM PMT01106 A WITH (ROWLOCK)
			JOIN #BARCODE_NETQTY B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID
			AND 1=2 --14 MAR 2018
			
			/*CHECKING IF TARGET BIN STOCK IS NOT GOING NEGATIVE, IF GOING NEGATIVE, SAVING OF 
			  MEMO SHOULD NOT BE ALLOWED.*/
			IF @BALLOWNEGSTOCK=0
			--CHECKING FOR NEGATIVE STOCK
			BEGIN
				SET @NSTEP = 155
				EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
			
			   IF EXISTS(SELECT TOP 1 'U' FROM PMT01106 A JOIN #BARCODE_NETQTY B ON A.PRODUCT_CODE=B.PRODUCT_CODE
					     AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID AND A.QUANTITY_IN_STOCK<0)
					     AND 1=2 --14 MAR 2018
			   BEGIN	
					  SELECT A.PRODUCT_CODE,A.QUANTITY_IN_STOCK,'STOCK GOING NEGATIVE FOR TARGET BIN.' AS ERRMSG
					  FROM PMT01106 A WITH (NOLOCK)
					  JOIN #BARCODE_NETQTY B ON A.PRODUCT_CODE=B.PRODUCT_CODE 
					  AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID 
					  AND A.QUANTITY_IN_STOCK<0
					  
					  SET @BNEGSTOCKFOUND=1
					  GOTO END_PROC
			   END
			END
		END
		
		
		SET @NSTEP = 160	
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
		
		DECLARE @NSUBTOTAL NUMERIC(14,2),@NTAX NUMERIC(14,4)

		-- UPDATING TOTALS IN PIM TABLE---CHANGES ON 29012015
		UPDATE A SET SUBTOTAL = ISNULL( B.SUBTOTAL ,0 ),SUBTOTAL_MRP =ISNULL( B.SUBTOTAL_MRP ,0 )
		FROM INMSUPP A WITH (ROWLOCK)
		LEFT OUTER JOIN
		( 	
			SELECT	INV_ID, SUM(INVOICE_QUANTITY*NET_RATE) AS SUBTOTAL,SUM(INVOICE_QUANTITY*MRP) AS SUBTOTAL_MRP
			FROM INDSUPP WITH (NOLOCK)
			WHERE INV_ID = @CKEYFIELDVAL1
			GROUP BY INV_ID  
		) B ON  A.INV_ID = B.INV_ID  
		WHERE A.INV_ID = @CKEYFIELDVAL1

		SET @NSTEP = 165
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
		
		UPDATE A SET EXCISE_ACCESSIBLE_AMOUNT = ISNULL(B.ITEM_EXCISE_ACCESSIBLE_AMOUNT,0),
					 EXCISE_DUTY_AMOUNT = ISNULL(B.ITEM_EXCISE_DUTY_AMOUNT,0),
					 EXCISE_EDU_CESS_AMOUNT=ISNULL(B.ITEM_EXCISE_EDU_CESS_AMOUNT,0),
					 EXCISE_HEDU_CESS_AMOUNT=ISNULL(B.ITEM_EXCISE_HEDU_CESS_AMOUNT,0)
		FROM INMSUPP A WITH (ROWLOCK)
		LEFT OUTER JOIN
		( 	
			SELECT	INV_ID, SUM(ITEM_EXCISE_ACCESSIBLE_AMOUNT) AS ITEM_EXCISE_ACCESSIBLE_AMOUNT
			, SUM(ITEM_EXCISE_DUTY_AMOUNT) AS ITEM_EXCISE_DUTY_AMOUNT
			, SUM(ITEM_EXCISE_EDU_CESS_AMOUNT) AS ITEM_EXCISE_EDU_CESS_AMOUNT
			, SUM(ITEM_EXCISE_HEDU_CESS_AMOUNT) AS ITEM_EXCISE_HEDU_CESS_AMOUNT
			FROM INDSUPP WITH (NOLOCK)
			WHERE INV_ID = @CKEYFIELDVAL1
			GROUP BY INV_ID  
		) B ON  A.INV_ID = B.INV_ID  
		WHERE A.INV_ID = @CKEYFIELDVAL1
			
		SET @NSTEP = 170
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

		UPDATE INMSUPP WITH (ROWLOCK) SET DISCOUNT_PERCENTAGE=(DISCOUNT_AMOUNT*100/(SUBTOTAL))
		WHERE INV_ID= @CKEYFIELDVAL1 AND MANUAL_DISCOUNT=1
		
		UPDATE INMSUPP WITH (ROWLOCK) SET DISCOUNT_AMOUNT = ROUND(SUBTOTAL*DISCOUNT_PERCENTAGE/100,2)
		WHERE INV_ID= @CKEYFIELDVAL1 AND MANUAL_DISCOUNT=0

		SET @NSTEP = 175
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
	    
	 --   --FOR MANNUAL DISCOUNT---------
		UPDATE INMSUPP WITH (ROWLOCK) SET DISCOUNT_AMOUNT = ROUND(SUBTOTAL_MRP*DISCOUNT_PERCENT_MRP/100,2)
		WHERE INV_ID= @CKEYFIELDVAL1 AND MANUAL_DISCOUNT=1  AND DISCOUNT_PERCENT_MRP<>0
		
		UPDATE INMSUPP WITH (ROWLOCK) SET DISCOUNT_PERCENTAGE=(DISCOUNT_AMOUNT*100/(SUBTOTAL))
		WHERE INV_ID= @CKEYFIELDVAL1 AND MANUAL_DISCOUNT=1 AND DISCOUNT_PERCENT_MRP<>0
		
		---------
		
		SET @NSTEP = 178
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

		UPDATE INMSUPP WITH (ROWLOCK) SET OCTROI_PERCENTAGE = (OCTROI_AMOUNT*100/(SUBTOTAL-DISCOUNT_AMOUNT))
		WHERE INV_ID= @CKEYFIELDVAL1 AND MANUAL_OCTROI=1
		
		UPDATE INMSUPP WITH (ROWLOCK) SET OCTROI_AMOUNT = (OCTROI_PERCENTAGE/100*(SUBTOTAL-DISCOUNT_AMOUNT))
		WHERE INV_ID = @CKEYFIELDVAL1 AND MANUAL_OCTROI=0
		
		SET @NSTEP = 180
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
		
		DECLARE @NTAXFLAG NUMERIC(1,0),@NOHGST NUMERIC(10,2)
	
		SELECT @NTAXFLAG=BILL_LEVEL_TAX_METHOD,@NCUSTOMRATETYPE=ISNULL(B.CUSTOM_RATE_TYPE,0) 
		FROM INMSUPP A WITH (NOLOCK)
		LEFT OUTER JOIN LMP01106 B WITH (NOLOCK) ON A.AC_CODE=B.AC_CODE
		WHERE INV_ID=@CKEYFIELDVAL1				
		
		SET @NSTEP = 500
		--RECALCULATE BILL LEVEL DISCOUNT AMOUNT IN ITEM LEVEL
	    
	   DECLARE @NTOTAL_DISCOUNT_AMOUNT NUMERIC(10,2)
	   SELECT   @NTOTAL_DISCOUNT_AMOUNT= ISNULL(DISCOUNT_AMOUNT,0) FROM INM01106  WHERE INV_ID =@CKEYFIELDVAL1
	   
	   SET @NSTEP = 510
	   
	   --DISTRIBUTE BILL LEVEL DISCOUNT AMOUNT IN ALL ITEMS
	   IF ISNULL(@NTOTAL_DISCOUNT_AMOUNT,0)<>0
	   BEGIN
	       	UPDATE A SET INMDISCOUNTAMOUNT=ROUND((CASE WHEN B.SUBTOTAL=0 THEN 0 ELSE (B.DISCOUNT_AMOUNT/B.SUBTOTAL)*(A.NET_RATE*A.INVOICE_QUANTITY) END),2)
			FROM INDSUPP  A
			JOIN INMSUPP  B ON A.INV_ID =B.INV_ID 
			WHERE B.INV_ID =@CKEYFIELDVAL1
	    
		   EXEC SP3S_REPROCESS_BILL_DISCOUNT 'WSL_SUPP',@CKEYFIELDVAL1,@NSPID,@CERRORMSG OUTPUT 
		   IF ISNULL(@CERRORMSG,'')<>''
		   GOTO END_PROC  
	   
	   END  
		--
		SET @NSTEP = 183
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
				
	    --CALL BELOW PROCEDURE ON 15-MAY-2017
		------ WE NEED TO DO THIS PROCESS TO VERIFY DISCOUNT AMOUNT CALCULATION
		EXEC SP3S_REPROCESS_DISCOUNT_AMOUNT_CALCULATION
		@INV_ID=@CKEYFIELDVAL1,
		@ERRMSG=@CERRORMSG OUTPUT
	

		IF ISNULL(@CERRORMSG,'')<>''
		  GOTO END_PROC
		
		SET @NSTEP = 185
		UPDATE INDSUPP WITH (ROWLOCK) SET ITEM_ROUND_OFF=(NET_RATE-(RATE-(DISCOUNT_AMOUNT/INVOICE_QUANTITY)))
		WHERE INV_ID=@CKEYFIELDVAL1 AND ITEM_ROUND_OFF<>(NET_RATE-(RATE-(DISCOUNT_AMOUNT/INVOICE_QUANTITY)))
		
		IF @BGSTBILL=1
		BEGIN
			SET @NSTEP=187
			DELETE FROM GST_TAXINFO_CALC WITH (ROWLOCK) WHERE SP_ID=@NSPID
			DELETE FROM GST_TAXINFO_CALC_OH WITH (ROWLOCK) WHERE SP_ID=@NSPID
			
			DECLARE @NFREIGHT NUMERIC(10,2),@NPACKING NUMERIC(10,2),@NINSURANCE NUMERIC(10,2),@NOC NUMERIC(10,2)
		
			INSERT GST_TAXINFO_CALC	WITH (ROWLOCK) ( PRODUCT_CODE, SP_ID ,NET_VALUE,TAX_METHOD,ROW_ID,QUANTITY,TARGET_DEPT_ID,SOURCE_DEPT_ID,MRP)  
			SELECT PRODUCT_CODE,@NSPID AS SP_ID,
			--ROUND(((A.NET_RATE*A.INVOICE_QUANTITY)
			---(CASE WHEN B.SUBTOTAL<>0 THEN (B.DISCOUNT_AMOUNT/B.SUBTOTAL)*(A.NET_RATE*A.INVOICE_QUANTITY) 
			--	   ELSE 0 END)),2) AS NET_VALUE
			ROUND(((A.NET_RATE*A.INVOICE_QUANTITY)
			-(ISNULL(A.INMDISCOUNTAMOUNT,0) )),2) AS NET_VALUE
            ,B.BILL_LEVEL_TAX_METHOD AS TAX_METHOD,
			ROW_ID,INVOICE_QUANTITY,B.PARTY_DEPT_ID,B.DEPT_ID,A.MRP 
			FROM INDSUPP A
			JOIN INMSUPP B ON A.INV_ID=B.INV_ID WHERE A.INV_ID=@CKEYFIELDVAL1

			DECLARE @CPARTY_GSTN_NO VARCHAR(20),@BREGISTERED BIT
			
			SELECT TOP 1 @CPARTY_GSTN_NO=AC_GST_NO,@CPARTYSTATECODE=PARTY_STATE_CODE,
			@BGROUPINV=(CASE WHEN INV_MODE=2 THEN 1 ELSE 0 END),@NFREIGHT=FREIGHT,@NOC=OTHER_CHARGES,
			@NPACKING=PACKING,@NINSURANCE=INSURANCE
			FROM INMSUPP A JOIN LMP01106 B ON A.AC_CODE=B.AC_CODE WHERE INV_ID=@CKEYFIELDVAL1	
			
			IF (@NFREIGHT+@NOC+@NPACKING+@NINSURANCE)<>0
				INSERT GST_TAXINFO_CALC_OH	( SP_ID,FREIGHT,OTHER_CHARGES,PACKING,INSURANCE,OH_TAX_METHOD ,DO_NOT_CALC_GST_OH)
				SELECT @NSPID,FREIGHT,OTHER_CHARGES,PACKING,INSURANCE,OH_TAX_METHOD,DO_NOT_CALC_GST_OH FROM INMSUPP
				WHERE INV_ID=@CKEYFIELDVAL1	
				
			SET @NSTEP=190
			IF @BGROUPINV=1
				SELECT @BREGISTERED=ISNULL(REGISTERED_GST,0) FROM LOCATION A WITH (NOLOCK) JOIN INMSUPP B WITH (NOLOCK) ON A.DEPT_ID=B.PARTY_DEPT_ID
				WHERE INV_ID=@CKEYFIELDVAL1
			ELSE
				SELECT @BREGISTERED=ISNULL(REGISTERED_GST_DEALER,0) FROM LMP01106 A WITH (NOLOCK) JOIN INMSUPP B WITH (NOLOCK) ON A.AC_CODE=B.AC_CODE
				WHERE INV_ID=@CKEYFIELDVAL1							
			
		
			
			IF ISNULL(@COUNTRY,'')  IN('0000000','')
			  BEGIN
			
			   EXEC SP3S_GST_TAX_CAL
				 @CXN_TYPE='WSL_SUPP',
				 @CMEMO_ID='',
				 @DMEMO_DT=@DINVDT,
				 @NSPID=@NSPID,
				 @CPARTYSTATE_CODE=@CPARTYSTATECODE,
				 @BPARTYREGISTERED=@BREGISTERED,
				 @CPARTY_GSTN_NO=@CPARTY_GSTN_NO,
				 @CERRMSG=@CERRORMSG OUTPUT
			
			     IF ISNULL(@CERRORMSG,'')<>''
				    GOTO END_PROC
			  END
			ELSE
			  BEGIN
			      UPDATE A SET HSN_CODE='0000000000',GST_PERCENTAGE=0,IGST_AMOUNT=0,
			      CGST_AMOUNT=0,SGST_AMOUNT=0,
			      XN_VALUE_WITHOUT_GST=A.NET_VALUE,XN_VALUE_WITH_GST=A.NET_VALUE    
			      FROM GST_TAXINFO_CALC A
			      WHERE SP_ID=@NSPID
			      
			      UPDATE A SET FREIGHT_TAXABLE_VALUE=ISNULL(FREIGHT,0),
			                   OTHER_CHARGES_TAXABLE_VALUE=ISNULL(OTHER_CHARGES,0),
			                   INSURANCE_TAXABLE_VALUE=ISNULL(INSURANCE,0),
			                   PACKING_TAXABLE_VALUE=ISNULL(PACKING,0),
			                   FREIGHT_GST_AMOUNT=0,
			                   OTHER_CHARGES_GST_AMOUNT=0,
			                   INSURANCE_GST_AMOUNT=0,
			                   PACKING_GST_AMOUNT=0
			      FROM GST_TAXINFO_CALC_OH A
			      WHERE SP_ID=@NSPID
			  END
			  
			SET @NSTEP=195
			
			UPDATE INDSUPP WITH (ROWLOCK) SET HSN_CODE=B.HSN_CODE,GST_PERCENTAGE=B.GST_PERCENTAGE,IGST_AMOUNT=B.IGST_AMOUNT,
			CGST_AMOUNT=B.CGST_AMOUNT,SGST_AMOUNT=B.SGST_AMOUNT,
			XN_VALUE_WITHOUT_GST=B.XN_VALUE_WITHOUT_GST,XN_VALUE_WITH_GST=B.XN_VALUE_WITH_GST
			FROM GST_TAXINFO_CALC B WHERE B.ROW_ID=INDSUPP.ROW_ID	AND INDSUPP.INV_ID=@CKEYFIELDVAL1
			AND B.SP_ID=@NSPID
			
			SET @NSTEP=200
			UPDATE A SET  FREIGHT_HSN_CODE=ISNULL(B.FREIGHT_HSN_CODE,'0000000000'),
			OTHER_CHARGES_HSN_CODE=ISNULL(B.OTHER_CHARGES_HSN_CODE,'0000000000'),
			INSURANCE_HSN_CODE=ISNULL(B.INSURANCE_HSN_CODE,'0000000000'),
			PACKING_HSN_CODE=ISNULL(B.PACKING_HSN_CODE,'0000000000'),
			FREIGHT_GST_PERCENTAGE=ISNULL(B.FREIGHT_GST_PERCENTAGE,0),OTHER_CHARGES_GST_PERCENTAGE=ISNULL(B.OTHER_CHARGES_GST_PERCENTAGE,0),
			INSURANCE_GST_PERCENTAGE=ISNULL(B.INSURANCE_GST_PERCENTAGE,0),PACKING_GST_PERCENTAGE=ISNULL(B.PACKING_GST_PERCENTAGE,0),
			
			FREIGHT_TAXABLE_VALUE=B.FREIGHT_TAXABLE_VALUE,
			FREIGHT_IGST_AMOUNT=(CASE WHEN ISNULL(ISIGST,0)=1 THEN B.FREIGHT_GST_AMOUNT ELSE 0 END),
			FREIGHT_CGST_AMOUNT=(CASE WHEN ISNULL(ISIGST,0)=0 THEN B.FREIGHT_GST_AMOUNT/2 ELSE 0 END),
			FREIGHT_SGST_AMOUNT=(CASE WHEN ISNULL(ISIGST,0)=0 THEN B.FREIGHT_GST_AMOUNT/2 ELSE 0 END),
			
			OTHER_CHARGES_TAXABLE_VALUE=B.OTHER_CHARGES_TAXABLE_VALUE,
			OTHER_CHARGES_IGST_AMOUNT=(CASE WHEN ISNULL(ISIGST,0)=1 THEN B.OTHER_CHARGES_GST_AMOUNT ELSE 0 END),
			OTHER_CHARGES_CGST_AMOUNT=(CASE WHEN ISNULL(ISIGST,0)=0 THEN B.OTHER_CHARGES_GST_AMOUNT/2 ELSE 0 END),
			OTHER_CHARGES_SGST_AMOUNT=(CASE WHEN ISNULL(ISIGST,0)=0 THEN B.OTHER_CHARGES_GST_AMOUNT/2 ELSE 0 END),
			
			INSURANCE_TAXABLE_VALUE=B.INSURANCE_TAXABLE_VALUE,
			INSURANCE_IGST_AMOUNT=(CASE WHEN ISNULL(ISIGST,0)=1 THEN B.INSURANCE_GST_AMOUNT ELSE 0 END),
			INSURANCE_CGST_AMOUNT=(CASE WHEN ISNULL(ISIGST,0)=0 THEN B.INSURANCE_GST_AMOUNT/2 ELSE 0 END),
			INSURANCE_SGST_AMOUNT=(CASE WHEN ISNULL(ISIGST,0)=0 THEN B.INSURANCE_GST_AMOUNT/2 ELSE 0 END),
			
			PACKING_TAXABLE_VALUE=B.PACKING_TAXABLE_VALUE,
			PACKING_IGST_AMOUNT=(CASE WHEN ISNULL(ISIGST,0)=1 THEN B.PACKING_GST_AMOUNT ELSE 0 END),
			PACKING_CGST_AMOUNT=(CASE WHEN ISNULL(ISIGST,0)=0 THEN B.PACKING_GST_AMOUNT/2 ELSE 0 END),
			PACKING_SGST_AMOUNT=(CASE WHEN ISNULL(ISIGST,0)=0 THEN B.PACKING_GST_AMOUNT/2 ELSE 0 END)									
			
			FROM INMSUPP A WITH (ROWLOCK)
			LEFT OUTER JOIN
			(SELECT @CKEYFIELDVAL1	AS INV_ID,* FROM  GST_TAXINFO_CALC_OH (NOLOCK) WHERE SP_ID=@NSPID) B ON A.INV_ID=B.INV_ID
			WHERE A.INV_ID=@CKEYFIELDVAL1	
			
			
			SET @NSTEP=205

			--VALIDATING HSN CODE
			
		IF ISNULL(@NLOCREGISTER,0)=1 AND ISNULL(@COUNTRY,'')  IN('0000000','')
		BEGIN			
			SELECT TOP 1 @CERRPRODUCTCODE=PRODUCT_CODE FROM  INDSUPP WHERE INV_ID=@CKEYFIELDVAL1
			AND ISNULL(HSN_CODE,'') IN ('','0000000000')

			IF ISNULL(@CERRPRODUCTCODE,'')<>'' 
			BEGIN
				SET @CERRORMSG='ITEM CODE: '+@CERRPRODUCTCODE +'...HSN CODE SHOULD NOT BE BLANK..... CANNOT PROCEED'
				GOTO END_PROC
			END
			
			--VALIDATING GST AMOUNT COLUMNS
			SELECT TOP 1 @CERRPRODUCTCODE=PRODUCT_CODE FROM INDSUPP WHERE INV_ID=@CKEYFIELDVAL1
			AND 		((ISNULL(IGST_AMOUNT,0)<>0 AND (ISNULL(CGST_AMOUNT,0)<>0 OR ISNULL(SGST_AMOUNT,0)<>0))
						OR (ISNULL(CGST_AMOUNT,0)<>0 AND ISNULL(SGST_AMOUNT,0)=0)
						OR (ISNULL(SGST_AMOUNT,0)<>0 AND ISNULL(CGST_AMOUNT,0)=0))
						
			IF ISNULL(@CERRPRODUCTCODE,'')<>''
			BEGIN
				SET @CERRORMSG='ITEM CODE: '+@CERRPRODUCTCODE +'...INVALID VALUES IN GST AMOUNT..... CANNOT PROCEED'
				GOTO END_PROC
			END	
		END
		END
		
		SET @NSTEP=210
					
						
		------ WE NEED TO DO THIS PROCESS TO VERIFY TAX CALCULATION		
		IF @BGSTBILL=0	
			EXEC SP3S_REPROCESS_TAX_CALCULATION @INV_ID=@CKEYFIELDVAL1, @ERRMSG=@CERRORMSG OUTPUT
		ELSE
			EXEC SP3S_REPROCESS_GST_CALCULATION @CMEMOID=@CKEYFIELDVAL1,@CXNTYPE='WSL_SUPP',@CERRORMSG=@CERRORMSG OUTPUT
		
		
		IF ISNULL(@CERRORMSG,'')<>''
		   GOTO END_PROC
			
		SELECT @NSUBTOTAL=SUBTOTAL FROM INMSUPP WHERE INV_ID= @CKEYFIELDVAL1
		
		UPDATE INMSUPP WITH (ROWLOCK) SET SUBTOTAL=B.SUBTOTAL 
		FROM (SELECT INV_ID,SUM(NET_RATE*QUANTITY) AS SUBTOTAL FROM INDSUPP WITH (NOLOCK) WHERE INV_ID=@CKEYFIELDVAL1 GROUP BY INV_ID) B
		WHERE B.INV_ID=INMSUPP.INV_ID
		
		IF NOT EXISTS (SELECT TOP 1 PRODUCT_CODE FROM INDSUPP WHERE INV_ID= @CKEYFIELDVAL1) 
		BEGIN
			SET @NSTEP = 212
			EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

			UPDATE INMSUPP WITH (ROWLOCK) SET OTHER_CHARGES=0,EXCISE_DUTY_AMOUNT=0,FREIGHT=0,EXCISE_EDU_CESS_AMOUNT=0,
			EXCISE_HEDU_CESS_AMOUNT=0,OCTROI_AMOUNT=0	
			WHERE INV_ID= @CKEYFIELDVAL1
		END

		SET @NSTEP = 215
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

		SET @NTAXFLAG = (CASE WHEN ISNULL(@NTAXFLAG,0)=0 THEN 1 ELSE ISNULL(@NTAXFLAG,0) END)
					
		SELECT @NTAX=SUM(ITEM_TAX_AMOUNT+ISNULL(IGST_AMOUNT,0)+ISNULL(CGST_AMOUNT,0)+ISNULL(SGST_AMOUNT,0)),@NTOTALCUSTOMDUTY=SUM(TOTAL_CUSTOM_DUTY_AMT)
		FROM INDSUPP WHERE INV_ID=@CKEYFIELDVAL1

		SELECT @NTAX=ISNULL(@NTAX,0)
		
		SELECT @NOHGST=ISNULL(FREIGHT_IGST_AMOUNT,0)+ISNULL(FREIGHT_CGST_AMOUNT,0)+ISNULL(FREIGHT_SGST_AMOUNT,0)
		+ISNULL(OTHER_CHARGES_IGST_AMOUNT,0)+ISNULL(OTHER_CHARGES_CGST_AMOUNT,0)+ISNULL(OTHER_CHARGES_SGST_AMOUNT,0)
		+ISNULL(INSURANCE_IGST_AMOUNT,0)+ISNULL(INSURANCE_CGST_AMOUNT,0)+ISNULL(INSURANCE_SGST_AMOUNT,0)
		+ISNULL(PACKING_IGST_AMOUNT,0)+ISNULL(PACKING_CGST_AMOUNT,0)+ISNULL(PACKING_SGST_AMOUNT,0)
		FROM INMSUPP WHERE INV_ID=@CKEYFIELDVAL1

		
		SET @NTOTALCUSTOMDUTY=ISNULL(@NTOTALCUSTOMDUTY,0)
		
		SET @NSTEP = 217
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

		UPDATE INMSUPP WITH (ROWLOCK) SET ROUND_OFF=ROUND((SUBTOTAL + (CASE WHEN @NTAXFLAG=1 THEN ISNULL(@NTAX,0) ELSE 0 END)+
		(CASE WHEN OH_TAX_METHOD=2 THEN 0 ELSE ISNULL(@NOHGST,0) END)
		+OTHER_CHARGES+EXCISE_DUTY_AMOUNT+EXCISE_EDU_CESS_AMOUNT+EXCISE_HEDU_CESS_AMOUNT+FREIGHT+INSURANCE+@NTOTALCUSTOMDUTY ) - DISCOUNT_AMOUNT,0)-
	    (SUBTOTAL+(CASE WHEN @NTAXFLAG=1 THEN ISNULL(@NTAX,0) ELSE 0 END)+OTHER_CHARGES+FREIGHT+
	    (CASE WHEN OH_TAX_METHOD=2 THEN 0 ELSE ISNULL(@NOHGST,0) END) +
		EXCISE_DUTY_AMOUNT+EXCISE_EDU_CESS_AMOUNT+EXCISE_HEDU_CESS_AMOUNT+@NTOTALCUSTOMDUTY-DISCOUNT_AMOUNT+INSURANCE)
		WHERE INV_ID=@CKEYFIELDVAL1 AND MANUAL_ROUNDOFF=0
		
		SET @NSTEP = 219
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
		
		UPDATE INMSUPP WITH (ROWLOCK) SET NET_AMOUNT=(SUBTOTAL +(CASE WHEN @NTAXFLAG=1 THEN ISNULL(@NTAX,0) ELSE 0 END) +
		(CASE WHEN OH_TAX_METHOD=2 THEN 0 ELSE ISNULL(@NOHGST,0) END) +  OTHER_CHARGES + FREIGHT+EXCISE_DUTY_AMOUNT+
		EXCISE_EDU_CESS_AMOUNT+EXCISE_HEDU_CESS_AMOUNT+ROUND_OFF+OCTROI_AMOUNT+@NTOTALCUSTOMDUTY) - DISCOUNT_AMOUNT+INSURANCE
		WHERE INV_ID=@CKEYFIELDVAL1

		SET @NSTEP = 221
	    UPDATE A SET GST_ROUND_OFF=(NET_AMOUNT-(ISNULL(OTHER_CHARGES_TAXABLE_VALUE,0)+ISNULL(OTHER_CHARGES_IGST_AMOUNT,0)+ 
		ISNULL(OTHER_CHARGES_CGST_AMOUNT,0)+ISNULL(OTHER_CHARGES_SGST_AMOUNT,0)+
		ISNULL(FREIGHT_TAXABLE_VALUE,0)+ISNULL(FREIGHT_IGST_AMOUNT,0)+ 
		ISNULL(FREIGHT_CGST_AMOUNT,0)+ISNULL(FREIGHT_SGST_AMOUNT,0)+
		ISNULL(INSURANCE_TAXABLE_VALUE,0)+ISNULL(INSURANCE_IGST_AMOUNT,0)+ 
		ISNULL(INSURANCE_CGST_AMOUNT,0)+ISNULL(INSURANCE_SGST_AMOUNT,0)+OCTROI_AMOUNT+PACKING+EXCISE_DUTY_AMOUNT+
				EXCISE_EDU_CESS_AMOUNT+EXCISE_HEDU_CESS_AMOUNT+ROUND_OFF+B.NET_AMOUNT_GST))
		FROM INMSUPP A (NOLOCK)
		JOIN (SELECT A.INV_ID,SUM(XN_VALUE_WITHOUT_GST+IGST_AMOUNT+CGST_AMOUNT+SGST_AMOUNT) AS NET_AMOUNT_GST
			  FROM INDSUPP A (NOLOCK)
			  JOIN INMSUPP B ON A.INV_ID=B.INV_ID 
			  WHERE A.INV_ID=@CKEYFIELDVAL1 AND INV_MODE=1 AND B.INV_DT>='2017-07-01'
			  GROUP BY A.INV_ID
			 ) B ON A.INV_ID=B.INV_ID 
		 		
		--AUDIT_TRIAL REMOVED
		DECLARE @CCOUNT INT
		/*
		--14 MAR 2018
		SELECT @CCOUNT=COUNT(PAYMODE_CODE) 
		FROM PAYMODE_XN_DET A WITH (NOLOCK) 
		JOIN INMSUPP B WITH (NOLOCK) ON A.MEMO_ID=B.INV_ID
		WHERE INV_ID=@CKEYFIELDVAL1 AND XN_TYPE='WSL_SUPP'
		
		IF @CCOUNT = 1
		   BEGIN
			 UPDATE A SET AMOUNT=B.NET_AMOUNT 
			 FROM PAYMODE_XN_DET A WITH (ROWLOCK) 
			 JOIN INM01106 B WITH (NOLOCK) ON A.MEMO_ID=B.INV_ID
			 WHERE INV_ID=@CKEYFIELDVAL1 AND XN_TYPE='WSL_SUPP'
			 AND A.AMOUNT<>B.NET_AMOUNT
		   END
		*/
		SET @NSTEP = 223
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

		--EXEC UPDATERFNET 'WSL_SUPP',@CKEYFIELDVAL1--14 MAR 2018
		
		-- VALIDATING ENTRIES 
		SET @NSTEP = 225
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
		-- VALIDATING ENTRIES
		
		SET @NSTEP = 227
		IF @NUPDATEMODE NOT IN (3)
		   BEGIN
		      DECLARE @PS_ID VARCHAR(22),@WSLQTY NUMERIC(10,2),@PSQTY NUMERIC(10,2)
		      
		      SELECT TOP 1 @PS_ID=PS_ID,@WSLQTY=WSLQTY ,@PSQTY=PSQTY 
		      FROM (
					  SELECT A.PS_ID,SUM(QUANTITY) AS WSLQTY,PSQTY 
					  FROM INDSUPP A WITH (NOLOCK) 
					  JOIN (SELECT PS_ID,SUM(QUANTITY) AS PSQTY FROM WPS_DET WITH (NOLOCK) GROUP BY PS_ID)B ON A.PS_ID=B.PS_ID  
					  WHERE INV_ID=@CKEYFIELDVAL1
					  GROUP BY A.PS_ID,PSQTY
				   ) P WHERE WSLQTY <> PSQTY	
					
			  IF ISNULL(@PSQTY,0)>0 
		         BEGIN
		           IF ISNULL( @WSLQTY,0) <> ISNULL(@PSQTY,0)
				      BEGIN
				         SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MISMATCH BETWEEN PACK SLIP QTY AND WHOLESALE QTY  FRO THE PACK SLIP '+@PS_ID
				         EXEC SP_EXECUTESQL @CCMDOUTPUT
				         GOTO END_PROC
				      END
		         END	     
 		   END--@NUPDATEMODE NOT IN (3)

		--14 MAR 2018
		
		EXEC VALIDATEXN
			  @CXNTYPE	= 'WSL_SUPP'  
			, @CXNID	= @CKEYFIELDVAL1
			, @NUPDATEMODE = @NUPDATEMODE			
			, @CCMD		= @CCMDOUTPUT OUTPUT
			, @CUSERCODE = @CWIZAPPUSERCODE
			
		IF @CCMDOUTPUT <> ''
		   BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION FAILED : ' + @CCMDOUTPUT + '...'
			  GOTO END_PROC
		   END

		
		SET @NSTEP = 230
		EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

		
		IF EXISTS (SELECT * FROM INMSUPP WHERE INV_ID = @CKEYFIELDVAL1 AND ENTRY_MODE <> 4 )
		   BEGIN
			 INSERT WSL_BO_REF WITH (ROWLOCK) (INV_ID,ORDER_ID)
			 SELECT DISTINCT INV_ID,B.ORDER_ID 
			 FROM INDSUPP A WITH (NOLOCK) 
			 JOIN SKU_BO B WITH (NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE
			 WHERE INV_ID=@CKEYFIELDVAL1
			 AND 1=2--14 MAR 2018
		  END

		-- AFTER SUCCESSFUL SAVING , JUST DROP THE TEMP TABLES CREATED BY APPLICATION				
		GOTO END_PROC

LBLAPPROVEWSLGENINV:

LBLUPDATEDISPATCHDETAILS:

LBLUPDATEWSLORDERS:
	END TRY
	
	
	
	BEGIN CATCH
		SET @CERRORMSG = 'PROCEDURE SAVETRAN_WSL_SUPP: STEP- ' + LTRIM(STR(@NSTEP,10,2)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'
		
		GOTO END_PROC
	END CATCH
	
END_PROC:
	
	IF ISNULL(@CERRORMSG,'')=''
	   BEGIN
		 SET @NSTEP = 290
		 EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE

		 DECLARE @NRFUPDATEMODE INT
		 SET @NRFUPDATEMODE=(CASE WHEN @NUPDATEMODE>3 THEN 2 ELSE @NUPDATEMODE END)			
		 --14 MAR 2018
		 --EXEC SP3SBUILDWSL @CXNID=@CKEYFIELDVAL1 ,@NUPDATEMODE=@NRFUPDATEMODE ,@CERRMSG=@CERRORMSG OUTPUT  
	   END
    
	UPDATE inmsupp WITH (ROWLOCk) SET last_update=getdate() WHERE inv_id=@CKEYFIELDVAL1

	IF @@TRANCOUNT>0 
	   BEGIN
		  SET @NSTEP = 295
		  EXEC SP_CHKXNSAVELOG 'WSL_SUPP',@NSTEP,0,@NSPID,@BDEBUGMODE
	
		  IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')='' AND ISNULL(@BNEGSTOCKFOUND,0)=0
		     BEGIN
			   UPDATE INMSUPP WITH (ROWLOCK) SET LAST_UPDATE=GETDATE() WHERE INV_ID=@CKEYFIELDVAL1
			   UPDATE XNLOG   WITH (ROWLOCK) SET LAST_UPDATE=GETDATE() WHERE TABLENAME='INMSUPP'
			
			   --IF @EDIT_CLICKED=1
                  --EXEC SP3S_CAPTURE_AUDIT_TRAIL 'POSWSL',@CMEMOID,'','',@NSPID,@CMACHINENAME,@CWINDOWUSERNAME,@CWIZAPPUSERCODE,0,'1900-01-01',@EDIT_CLICKED
			   
			   --14 MAR 2018
			   DECLARE @CMD VARCHAR(MAX)
			   SET @CMD='SELECT DISTINCT INV_ID,'''+@CKEYFIELDVAL1+''',0,GETDATE() FROM #AGAINST_ID'
			   INSERT INM_SUPP_MAPPING(INM_INV_ID,SUPP_INV_ID,CANCELLED,LAST_UPDATED)
			   EXEC(@CMD)
			   --14 MAR 2018
			   
			   COMMIT TRANSACTION
		     END	
		  ELSE
			ROLLBACK
	   END--@@TRANCOUNT=0

	IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')='' AND @NUPDATEMODE IN (4,5,8)
	   BEGIN
		  IF @NUPDATEMODE=4
			SET @CMSG='BOX NO. : '+LTRIM(RTRIM(STR(@NBOXNO)))+' DELETED SUCCESSFULLY......PLEASE ACKNOWLEDGE'	
		  ELSE IF @NUPDATEMODE=5
			SET @CMSG='BARCODE NO. : '+@CPRODUCTCODE+' DELETED SUCCESSFULLY......PLEASE ACKNOWLEDGE'		
		  ELSE
			SET @CMSG='PACKING SLIP NO. : '+@CPSNO+' DELETED SUCCESSFULLY......PLEASE ACKNOWLEDGE'					
		  SELECT @CMSG AS SUCCESSMSG	
	   END
	ELSE IF ISNULL(@BNEGSTOCKFOUND,0)=0
	        BEGIN
		       INSERT @OUTPUT ( ERRMSG, MEMO_ID) VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )
  			   SELECT * FROM @OUTPUT	
	        END	
	
	EXEC SP_DROPTEMPTABLES_XNS 'WSL_SUPP',@NSPID,1	
	
	
-------------------------------------------	
	--LOG STARTTIME/END-TIME
	IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')='' AND ISNULL(@BNEGSTOCKFOUND,0)=0
		EXEC SP3S_LOGPROCESSTIME 'WSL_SUPP','SAVETRAN EXECUTION',@CKEYFIELDVAL1,@NSPID,1,@DSTARTTIME,@NUPDATEMODE
END						-- SAVETRAN_WSL_SUPP
------------------------------------------------------ END OF PROCEDURE SAVETRAN_WSL_SUPP
