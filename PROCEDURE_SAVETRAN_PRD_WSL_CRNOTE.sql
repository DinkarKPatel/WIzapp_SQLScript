CREATE PROCEDURE SAVETRAN_PRD_WSL_CRNOTE
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT=0,
	@CMEMONOPREFIX		VARCHAR(50)='',
	@CFINYEAR			VARCHAR(10)='',
	@CMACHINENAME		VARCHAR(100)='',
	@CWINDOWUSERNAME	VARCHAR(100)='',
	@CWIZAPPUSERCODE	VARCHAR(10)='0000000',
	@CMEMOID			VARCHAR(40)='',
	@BTHROUGHIMPORT		BIT = 0,
	@CRMID				VARCHAR(40)='',
	@DRECEIPTDT			DATETIME = '',
	@CLOCID				VARCHAR(2)=''
)
--WITH ENCRYPTION
AS
BEGIN
	-- @NUPDATEMODE:	1- NEW STOCK ADJUSTMENT MEMO ADDED, 
	--					2- NOT APPLICABLE, 
	--					3- CURRENT STOCK ADJUSTMENT MEMO CANCELLED, 
	--					4- EXISTING STOCK ADJUSTMENT MEMO EDITED

	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(2),
			@CLOCATIONID			VARCHAR(2),
			@CHODEPTID				VARCHAR(2),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@BNEGSTOCKFOUND BIT

	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	SET @NSTEP = 0		-- SETTTING UP ENVIRONMENT
	SET @CTEMPDBNAME = ''

	SET @CMASTERTABLENAME	= 'PRD_CNM01106'
	SET @CDETAILTABLENAME	= 'PRD_CND01106'
	
	SET @CTEMPMASTERTABLENAME	= 'TEMP_PRD_CNM01106_'+LTRIM(RTRIM(STR(@NSPID)))--MANISH
	SET @CTEMPDETAILTABLENAME	= 'TEMP_PRD_CND01106_'+LTRIM(RTRIM(STR(@NSPID)))--MANISH

	SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME
	
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'CN_ID'
	SET @CMEMONO			= 'CN_NO'
	SET @NMEMONOLEN			= 10
	
	IF ISNULL(@CLOCID,'')=''
		SELECT @CLOCATIONID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID'
	ELSE
		SELECT @CLOCATIONID=@CLOCID
	
	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		

	SET @NSTEP = 10		-- GETTING DEPTID INFO FROM TEMP TABLE
	
	BEGIN TRANSACTION
	
	BEGIN TRY
		
		IF @NUPDATEMODE = 6
			GOTO LBLUPDATERECEIPTDATE

		IF OBJECT_ID('TEMPDB..#TMPPMT','U') IS NOT NULL
			DROP TABLE #TMPPMT
		
		SELECT PRODUCT_CODE INTO #TMPPMT FROM SKU WHERE 1=2

		IF OBJECT_ID('TEMPDB..#TMPXNSTK','U') IS NOT NULL
			DROP TABLE #TMPXNSTK						   
		
		SELECT PRODUCT_UID,QUANTITY_IN_STOCK AS XN_STOCK INTO #TMPXNSTK FROM PRD_PMT WHERE 1=2

		IF @NUPDATEMODE = 3 AND ISNULL(@CMEMOID,'') = ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED IF CALLED FROM CANCELLATION'
			GOTO END_PROC  		
		END



		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	

			SET @NSTEP = 20		-- GENERATING NEW KEY
			
			-- GENERATING NEW JOB ORDER NO		
			SET @NSAVETRANLOOP=0
			WHILE @NSAVETRANLOOP=0
			BEGIN
				EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,  --MANISH
								@CFINYEAR,0, @CMEMONOVAL OUTPUT   
				
				PRINT @CMEMONOVAL
				SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
										WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
										AND FIN_YEAR = '''+@CFINYEAR+''' )
								SET @NLOOPOUTPUT=0
							ELSE
								SET @NLOOPOUTPUT=1'
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
			END

			IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
				  GOTO END_PROC  		
			END

			SET @NSTEP = 30		-- GENERATING NEW ID

			-- GENERATING NEW JOB ORDER ID
			SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+ REPLICATE('0', 10-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL)) --MANISH
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
				  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
				  GOTO END_PROC
			END

			SET @NSTEP = 40		-- UPDATING NEW ID INTO TEMP TABLES

			-- UPDATING NEWLY GENERATED JOB ORDER NO AND JOB ORDER ID IN PIM AND PID TEMP TABLES
			SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
						@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 42
			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
			
			
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 44
			-- GETTING DEPT_ID FROM TEMP MASTER TABLE
			SET @CCMD = 'SELECT @CMEMODEPTID = LEFT(CN_NO,2) FROM ' + @CTEMPMASTERTABLE --MANISH
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT', 
							   @CMEMODEPTID OUTPUT
			IF (@CMEMODEPTID IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'
				  GOTO END_PROC  		
			END
			
			
		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
		
			SET @NSTEP = 50		-- GETTING ID INFO FROM TEMP TABLE

			-- GETTING DEPT_ID FROM TEMP MASTER TABLE
			SET @CCMD = 'SELECT @CMEMODEPTID = LEFT(CN_NO,2) FROM ' + @CMASTERTABLENAME --MANISH
			
			EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT', 
							   @CMEMODEPTID OUTPUT
							   
			IF (@CMEMODEPTID IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'
				  GOTO END_PROC  		
			END

			-- GETTING MEMO ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ' + @CKEYFIELD1 + ', @CMEMONOVAL = ' + @CMEMONO + ' FROM '
						+ (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME + ' WHERE CN_ID = ''' + @CMEMOID + '''' --MANISH
								ELSE @CTEMPMASTERTABLE END )
			
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
							   
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  GOTO END_PROC  		
			END
			
			SET @NSTEP = 55		-- STORING OLD STATUS OF BARCODES 

			
			IF @NUPDATEMODE = 3			
			BEGIN
				SET @NSTEP = 60
				-- UPDATING SENTTOHO FLAG
				SET @CCMD = N'UPDATE ' + @CMASTERTABLENAME + ' SET CANCELLED = 1,LAST_UPDATE=GETDATE() ' + 
							N' WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + ''''
				EXEC SP_EXECUTESQL @CCMD
			END
			
			ELSE
			BEGIN

				SET @NSTEP = 65		-- UPDATING SENT_TO_HO FLAG TEMP TABLE
				-- UPDATING SENTTOHO FLAG
				SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET SENT_TO_HO = 0,LAST_UPDATE=GETDATE()'
				EXEC SP_EXECUTESQL @CCMD
				
				-- ENTRY IN AUDIT TRAIL (ONLY WHEN USER EXPLICITLY CLICKED ON EDIT BUTTON)
				--SET @NSTEP = 70		-- AUDIT TRIAL ENTRY

				--EXEC AUDITLOGENTRY
				--	  @CXNTYPE		= 'WSR'
				--	, @CXNID		= @CKEYFIELDVAL1
				--	, @CDEPTID		= @CMEMODEPTID
				--	, @CCOMPUTERNAME= @CMACHINENAME
				--	, @CWINUSERNAME = @CWINDOWUSERNAME
				--	, @CWIZUSERCODE = @CWIZAPPUSERCODE
			END

			-- REVERTING BACK THE STOCK OF PMT W.R.T CURRENT ISSUE
			SET @NSTEP = 80		-- REVERTING STOCK

			EXEC UPDATEPMT_PRD 
				  @CXNTYPE			= 'WSR'  --MANISH
				, @CXNNO			= @CMEMONOVAL
				, @CXNID			= @CKEYFIELDVAL1
				, @NREVERTFLAG		= 1
				, @NALLOWNEGSTOCK	= 0
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= @NUPDATEMODE				
				, @CCMD				= @CCMDOUTPUT OUTPUT
			
			IF (@NUPDATEMODE = 3) 
			BEGIN
				IF ISNULL(@CCMDOUTPUT,'') <> ''
				BEGIN
					PRINT 'ERROR FOUND IN STOCK UPDATE'
					PRINT @CCMDOUTPUT
					
					SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'
					SET @BNEGSTOCKFOUND=1		
					
									
					EXEC SP_EXECUTESQL @CCMDOUTPUT
				END	
				GOTO END_PROC
			END
		END					-- END OF EDITMODE

		SET @NSTEP = 95
		
		-- RECHECKING IF ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END

		IF @NUPDATEMODE <> 3
		BEGIN
		
			-- UPDATING MASTER TABLE (PIM01106) FROM TEMP TABLE
			SET @NSTEP = 100		-- UPDATING MASTER TABLE
						
			EXEC UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPMASTERTABLENAME
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CMASTERTABLENAME
				, @CKEYFIELD1	= @CKEYFIELD1
				,@BALWAYSUPDATE = 1

			-- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE
			SET @NSTEP = 110		-- UPDATING TRANSACTION TABLE

				-- UPDATING ROW_ID IN TEMP TABLES
				SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
							  WHERE LEFT(ROW_ID,5) = ''LATER'''
				EXEC SP_EXECUTESQL @CCMD

				-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
				SET @NSTEP = 114		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES

				SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + ' 
							WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
							AND ROW_ID IN 
							(
								SELECT A.ROW_ID 
								FROM ' + @CDETAILTABLENAME + ' A 
								LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B ON A.ROW_ID = B.ROW_ID
								WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
								AND   B.ROW_ID IS NULL
							)'
				EXEC SP_EXECUTESQL @CCMD

				-- INSERTING/UPDATING THE ENTRIES IN PRD_JID TABLE FROM TEMPTABLE
				SET @NSTEP = 116		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

				EXEC UPDATEMASTERXN 
					  @CSOURCEDB	= @CTEMPDBNAME
					, @CSOURCETABLE = @CTEMPDETAILTABLENAME
					, @CDESTDB		= ''
					, @CDESTTABLE	= @CDETAILTABLENAME
					, @CKEYFIELD1	= 'ROW_ID'
					,@BALWAYSUPDATE = 1

			-- UPDATING STOCK OF PMT W.R.T. CURRENT MEMO
			SET @NSTEP = 130		-- UPDATING PMT TABLE

			EXEC UPDATEPMT_PRD 
				  @CXNTYPE			= 'WSR'  --MANISH
				, @CXNNO			= @CMEMONOVAL
				, @CXNID			= @CKEYFIELDVAL1
				, @NREVERTFLAG		= 0
				, @NALLOWNEGSTOCK	= 0
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= @NUPDATEMODE				
				, @CCMD				= @CCMDOUTPUT OUTPUT
			
			IF @CCMDOUTPUT <> ''
			BEGIN
				PRINT @CCMDOUTPUT
				
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'
				SET @BNEGSTOCKFOUND=1				
				EXEC SP_EXECUTESQL @CCMDOUTPUT
				GOTO END_PROC
			END
		END
		
		SET @NSTEP = 140	
				


		SET @NSTEP = 145
		DECLARE @NSUBTOTAL NUMERIC(14,2),@NTAX NUMERIC(10,2)

		-- UPDATING TOTALS IN PIM TABLE
		UPDATE A SET SUBTOTAL = ISNULL( B.SUBTOTAL ,0 )
		FROM PRD_CNM01106 A LEFT OUTER JOIN
		( 	
			SELECT	CN_ID, SUM(QUANTITY*NET_RATE) AS SUBTOTAL
			FROM PRD_CND01106 
			WHERE CN_ID = @CKEYFIELDVAL1
			GROUP BY CN_ID  
		) B ON  A.CN_ID = B.CN_ID  
		WHERE A.CN_ID = @CKEYFIELDVAL1
				
		UPDATE PRD_CNM01106 SET DISCOUNT_AMOUNT = SUBTOTAL*DISCOUNT_PERCENTAGE/100
		WHERE CN_ID= @CKEYFIELDVAL1
		
		SET @NSTEP = 150
		SELECT @NSUBTOTAL=SUBTOTAL FROM PRD_CNM01106 WHERE CN_ID= @CKEYFIELDVAL1
							
				
		UPDATE PRD_CND01106 SET ITEM_TAX_PERCENTAGE=B.TAX_PERCENTAGE 
		FROM FORM B 
		WHERE B.FORM_ID=PRD_CND01106.ITEM_FORM_ID
		
		SET @NSTEP = 155
		
		UPDATE PRD_CND01106 SET ITEM_TAX_AMOUNT = ((NET_RATE*QUANTITY)-(NET_RATE*QUANTITY*
		B.DISCOUNT_PERCENTAGE/100)+(((EXCISE_DUTY_AMOUNT+EXCISE_EDU_CESS_AMOUNT+EXCISE_HEDU_CESS_AMOUNT)
		/@NSUBTOTAL)*NET_RATE*QUANTITY))*PRD_CND01106.ITEM_TAX_PERCENTAGE/100
		FROM PRD_CNM01106 B WHERE B.CN_ID=PRD_CND01106.CN_ID AND PRD_CND01106.CN_ID= @CKEYFIELDVAL1 AND NET_RATE<>0
		AND QUANTITY<>0
		
		IF NOT EXISTS (SELECT TOP 1 PRODUCT_UID FROM PRD_CND01106 WHERE CN_ID= @CKEYFIELDVAL1)
		BEGIN
			SET @NSTEP = 160
			UPDATE PRD_CNM01106 SET OTHER_CHARGES=0,EXCISE_DUTY_AMOUNT=0,FREIGHT=0,EXCISE_EDU_CESS_AMOUNT=0,
			EXCISE_HEDU_CESS_AMOUNT=0
			WHERE CN_ID= @CKEYFIELDVAL1
		END
		
		DECLARE @NTAXFLAG NUMERIC(1,0)
	
		SELECT @NTAXFLAG=BILL_LEVEL_TAX_METHOD FROM PRD_CNM01106 WHERE CN_ID=@CKEYFIELDVAL1
		
		SET @NTAXFLAG = (CASE WHEN ISNULL(@NTAXFLAG,0)=0 THEN 1 ELSE ISNULL(@NTAXFLAG,0) END)
		
		SELECT @NTAX=SUM(ITEM_TAX_AMOUNT) FROM PRD_CND01106 WHERE CN_ID=@CKEYFIELDVAL1
		
		SET @NSTEP = 165		
		
							 	  
		UPDATE PRD_CNM01106 SET ROUND_OFF=ROUND((SUBTOTAL + (CASE WHEN @NTAXFLAG=1 THEN ISNULL(@NTAX,0) ELSE 0 END) +  OTHER_CHARGES + 
					 EXCISE_DUTY_AMOUNT+EXCISE_EDU_CESS_AMOUNT+EXCISE_HEDU_CESS_AMOUNT+FREIGHT ) - DISCOUNT_AMOUNT,0)-
					 (SUBTOTAL+ (CASE WHEN @NTAXFLAG=1 THEN ISNULL(@NTAX,0) ELSE 0 END)+OTHER_CHARGES+FREIGHT+
					  EXCISE_DUTY_AMOUNT+EXCISE_EDU_CESS_AMOUNT+EXCISE_HEDU_CESS_AMOUNT-DISCOUNT_AMOUNT)
		WHERE CN_ID=@CKEYFIELDVAL1
		
		SET @NSTEP=170
		
		UPDATE PRD_CNM01106 SET TOTAL_AMOUNT=(SUBTOTAL +(CASE WHEN @NTAXFLAG=1 THEN ISNULL(@NTAX,0)  ELSE 0 END) +  OTHER_CHARGES + 
					 FREIGHT+EXCISE_DUTY_AMOUNT+EXCISE_EDU_CESS_AMOUNT+EXCISE_HEDU_CESS_AMOUNT+ROUND_OFF) - DISCOUNT_AMOUNT
		WHERE CN_ID=@CKEYFIELDVAL1
		
		SET @NSTEP = 173
		EXEC UPDATERFNET_PRD 'WSR',@CKEYFIELDVAL1
				
		-- VALIDATING ENTRIES 
		SET @NSTEP = 175		-- VALIDATING ENTRIES

		EXEC VALIDATEXN_WSR_PRD			
			 @CXNID	= @CKEYFIELDVAL1
			, @NUPDATEMODE = @NUPDATEMODE			
			, @CERRORMSG		= @CCMDOUTPUT OUTPUT

		IF @CCMDOUTPUT <> ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION FAILED : ' + @CCMDOUTPUT + '...'
			GOTO END_PROC
		END
		
		-- AFTER SUCCESSFUL SAVING , JUST DROP THE TEMP TABLES CREATED BY APPLICATION
		SET @NSTEP = 180

	LBLUPDATERECEIPTDATE:
	IF @NUPDATEMODE = 6
	BEGIN
		UPDATE PRD_CNM01106 SET RECEIPT_DT = @DRECEIPTDT,LAST_UPDATE=GETDATE() WHERE CN_ID = @CMEMOID 	

		
		EXEC UPDATEPMT_PRD 
			  @CXNTYPE			= 'WSR'
			, @CXNNO			= ''
			, @CXNID			= @CMEMOID
			, @NREVERTFLAG		= 0
			, @NALLOWNEGSTOCK	= 0
			, @NCHKDELBARCODES	= 1
			, @NUPDATEMODE		= 6				
			, @CCMD				= @CCMDOUTPUT OUTPUT
		
		IF @CCMDOUTPUT <> ''
		BEGIN
			PRINT @CCMDOUTPUT
			
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'
			SET @BNEGSTOCKFOUND=1				
			EXEC SP_EXECUTESQL @CCMDOUTPUT
			GOTO END_PROC
		END
		
	END
		
		
	
	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'
		
		GOTO END_PROC
	END CATCH
	
END_PROC:
	
	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
			COMMIT TRANSACTION
		ELSE
			ROLLBACK
	END
	
	IF ISNULL(@BNEGSTOCKFOUND,0)=0
	BEGIN
		INSERT @OUTPUT ( ERRMSG, MEMO_ID)
				VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )

		SELECT * FROM @OUTPUT	
	END	
	
	
	SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPDETAILTABLENAME + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPDETAILTABLENAME
	EXEC SP_EXECUTESQL @CCMD
	

    SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPMASTERTABLE + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPMASTERTABLE
	EXEC SP_EXECUTESQL @CCMD	
	
END
