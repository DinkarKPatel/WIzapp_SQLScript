create PROCEDURE SP3S_TILL_SHIFTS
(
	 @NQUERYID NUMERIC(2)
	,@CSHIFTID VARCHAR(15)=''
	,@CUSERCODE VARCHAR(10)=''
	,@CTILLID VARCHAR(10)=''
	,@CDEPT_ID	VARCHAR(10)=''
)
AS 
BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

DECLARE @BFIRST_OPENING BIT,@NPHYOP NUMERIC(18,2),@NCOMPOP NUMERIC(18,2),@CERRMSG VARCHAR(500)
	   ,@CUSER_CODE VARCHAR(7),@BCONSIDERPHYCLASOP BIT--,@CDEPT_ID VARCHAR(2)

if ISNULL(@CDEPT_ID,'')=''
	SELECT TOP 1 @CDEPT_ID=DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 	   

IF @NQUERYID=1
	GOTO LBL_GETSHIFTMASTER
IF @NQUERYID=2
	GOTO LBL_GETSHIFTDETAIL
IF @NQUERYID=3
	GOTO LBL_USERTILLS
IF @NQUERYID=4
	GOTO LBL_OPENSHIFTS
IF @NQUERYID=5
	GOTO LBL_DENOLIST	
IF @NQUERYID=6
	GOTO LBL_OPENBAL
ELSE 
	GOTO END_PROC
	
LBL_GETSHIFTMASTER:
	
SELECT 	
	 A.*
	,(CASE WHEN ISNULL(A.CLOSE_DATE,'')='' THEN 1 ELSE 2 END) SHIFT_OPEN_STATUS  
	,B.TILL_NAME
	,C.USERNAME
FROM TILL_SHIFT_MST A
JOIN TILL_MST B ON A.TILL_ID=B.TILL_ID
JOIN USERS C ON A.USER_CODE=C.USER_CODE	
WHERE A.SHIFT_ID=@CSHIFTID
	
GOTO END_PROC
	
LBL_GETSHIFTDETAIL:
	
	SELECT * 
	FROM TILL_SHIFT_DET
	WHERE SHIFT_ID=@CSHIFTID
	ORDER BY DENO_NAME DESC
	
	GOTO END_PROC			
	
LBL_USERTILLS:
	
	SELECT B.*
	FROM TILL_USERS A 
	JOIN TILL_MST B ON A.TILL_ID=B.TILL_ID
	WHERE B.INACTIVE=0 AND A.USER_CODE=@CUSERCODE
	
	GOTO END_PROC				

LBL_OPENSHIFTS:
	/*CHECK IF THE PASSED USER HAS ANY OF THE SHIFTS OPEN..IF IT IS OPEN RETURN THE SHIFT ID WITH THE ALERT MESSAGE TO 
	  THE APPLICATION SO THAT IT CAN DISPLAY THE RESULT TO USER*/
	  
	SELECT TOP 1 SHIFT_ID,'SHIFT NO. ('+SHIFT_ID+') IS ALREADY OPEN BY '+USERNAME+'. PLEASE CLOSE IT FIRST.' AS ERRMSG
	FROM TILL_SHIFT_MST  A (NOLOCK)
	JOIN USERS B (NOLOCK) ON A.USER_CODE=B.USER_CODE
	WHERE  ISNULL(CLOSE_DATE,'')='' 
	AND A.LOCATION_CODE=@CDEPT_ID 
	AND (ISNULL(@CUSERCODE,'')='' OR B.USER_CODE=@CUSERCODE)
	
	GOTO END_PROC				
	
LBL_DENOLIST:

	SELECT * FROM TILL_DENO_MST 
	WHERE INACTIVE=0
	ORDER BY DENO_NAME DESC
	GOTO END_PROC				
	
LBL_OPENBAL:
	/*
		BEFORE RETURNING THE OPENING BALANCE JUST CHECK IF THE CURRENT TILL IS CURRENTLY NOT OPEN,IF IT IS OPEN
		SET THE ERROR MESSAGE. 
		
		IF THE TILL IS BEING OPENED FOR THE FIRST TIME, SET @BFIRST_OPENING TO TRUE ELSE FALSE
	*/

IF EXISTS(SELECT TOP 1 'U' FROM TILL_SHIFT_MST WHERE TILL_ID=@CTILLID AND ISNULL(CLOSE_DATE,'')='' AND LOCATION_CODE =@CDEPT_ID)	
BEGIN
	SELECT TOP 1 @CUSERCODE=USER_CODE FROM TILL_SHIFT_MST WHERE TILL_ID=@CTILLID AND ISNULL(CLOSE_DATE,'')='' AND LOCATION_CODE=@CDEPT_ID
	
	SET @CERRMSG='TILL IS CURRENTLY OPEN USER - '+(SELECT TOP 1 USERNAME FROM USERS WHERE USER_CODE=@CUSERCODE)
END
	
IF NOT EXISTS(SELECT TOP 1 'U' FROM TILL_SHIFT_MST WHERE TILL_ID=@CTILLID AND LOCATION_CODE=@CDEPT_ID)
	SET @BFIRST_OPENING=1

SELECT TOP 1 @NCOMPOP=COMP_CL,@NPHYOP=PHY_CL FROM TILL_SHIFT_MST	
WHERE TILL_ID=@CTILLID AND LOCATION_CODE=@CDEPT_ID
ORDER BY SHIFT_ID DESC

SELECT @BCONSIDERPHYCLASOP=VALUE FROM CONFIG WHERE CONFIG_OPTION='CONSIDER_TILL_PHY_CBS_AS_OPS'

SET @BCONSIDERPHYCLASOP=ISNULL(@BCONSIDERPHYCLASOP,0)
	
SELECT ISNULL(@BFIRST_OPENING,0) AS FIRST_OPENING
	  ,(CASE WHEN @BCONSIDERPHYCLASOP=1 THEN @NPHYOP ELSE @NCOMPOP END) AS COMP_OP,@NPHYOP AS PHY_OP
	  ,ISNULL(@CERRMSG,'') AS ERRMSG
	
GOTO END_PROC

END_PROC:	
END
