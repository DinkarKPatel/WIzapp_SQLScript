-- PROCEDURE TO SAVE A GV TRANSFER MEMO FROM TEMPORARY TABLES TO ACTUAL TABLES
create PROCEDURE SAVETRAN_GVXFR
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CFINYEAR			VARCHAR(10)='',
	@CMACHINENAME		VARCHAR(100)='',
	@CWINDOWUSERNAME	VARCHAR(100)='',
	@CWIZAPPUSERCODE	VARCHAR(10)='0000000',
	@CMEMOID			VARCHAR(40)='',
	@DRECEIPTDT			DATETIME=''
)
--WITH ENCRYPTION
AS
BEGIN
	-- @NUPDATEMODE:	1- NEW MEMO ADDED, 
	--					2- EDIT MEMO, 
	--					3- CURRENT MEMO CANCELLED, 
	--					4- CHALLAN RECEIVED FROM GIT
	-- @CMEMOID:		MEMOID IS REQUIRED IF @NUPDATEMODE IS 3 (FROM CANCELLATION)
	
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CKEYFIELD1_DETAIL2		VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(4),
			@CTARGETLOCID			VARCHAR(4),
			@CLOCATIONID			VARCHAR(4),
			@CHODEPTID				VARCHAR(4),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@BNEGSTOCKFOUND			BIT,
			@CVALUSERARC			CHAR(4),
			@CMEMONOPREFIX			VARCHAR(5),
			@CLOCID				VARCHAR(4)
			

	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	SET @NSTEP = 0		-- SETTTING UP ENVIRONMENT
	SET @CTEMPDBNAME = ''
	
	
	
			
	SET @CMASTERTABLENAME	= 'GV_STKXFER_MST'
	--SET @CDETAILTABLENAME	= ''
	SET @CDETAILTABLENAME	= 'GV_STKXFER_DET'

	SET @CTEMPMASTERTABLENAME	= 'TEMP_GV_STKXFER_MST_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME	= 'TEMP_GV_STKXFER_DET_'+LTRIM(RTRIM(STR(@NSPID)))

	SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME
	
	SET @CERRORMSG			= ''
	--SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'MEMO_ID'

	SET @CMEMONO			= 'MEMO_NO'
	SET @NMEMONOLEN			= 10
	
	if @NUPDATEMODE <>3	
	begin
	SET @CCMD = 'SELECT @CLOCID = Location_code,@CTARGETLOCID=TARGET_DEPT_ID FROM '+@CTEMPMASTERTABLE+' ' 
		EXEC SP_EXECUTESQL @CCMD, N'@CLOCID VARCHAR(4) OUTPUT,@CTARGETLOCID VARCHAR(4) OUTPUT',@CLOCID OUTPUT,@CTARGETLOCID  OUTPUT
	
	end					   
		SET @CLOCATIONID=@CLOCID
		
	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		

	SET @NSTEP = 10		-- GETTING DEPTID INFO FROM TEMP TABLE
	BEGIN TRY
		
		IF @NUPDATEMODE IN (2,3)
		BEGIN
			SET @CERRORMSG='EDIT/CANCEL OF STOCK TRANSFER IS NOT ALLOWED...'
			GOTO END_PROC
		END	
		
		BEGIN TRANSACTION			

		IF @NUPDATEMODE  IN (3,4) AND ISNULL(@CMEMOID,'') = ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED IF CALLED FROM '+
			(CASE WHEN @NUPDATEMODE=3 THEN ' CANCELLATION ' ELSE ' GIT RECEIPT' END)
			GOTO END_PROC  		
		END
		
		IF @NUPDATEMODE  IN (3,4)
			SET @CKEYFIELDVAL1=@CMEMOID	
				
		IF @NUPDATEMODE=4
			GOTO LBLUPDATERECEIPTDATE
		
		IF @NUPDATEMODE<>3
		BEGIN
			EXEC SP_VALIDATEXN_BEFORESAVE 'GVCHO',@NSPID,'0000000',@NUPDATEMODE,@CCMDOUTPUT OUTPUT,@BNEGSTOCKFOUND OUTPUT
			IF ISNULL(@CCMDOUTPUT,'') <> ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION ON TEMP DATA FAILED : ' + @CCMDOUTPUT + '...'
				GOTO END_PROC
			END
		END
		
		-- GETTING DEPT_ID FROM TEMP MASTER TABLE
		SET @CCMD = 'SELECT @CMEMODEPTID = Location_code,@CTARGETLOCID=TARGET_DEPT_ID FROM ' 
					+ (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME ELSE @CTEMPMASTERTABLE END )
		EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(4) OUTPUT,@CTARGETLOCID VARCHAR(4) OUTPUT', 
						   @CMEMODEPTID OUTPUT,@CTARGETLOCID OUTPUT
		IF (@CMEMODEPTID IS NULL )
		BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'
			  GOTO END_PROC  		
		END

		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	
			
			 IF ISNULL(@CLOCATIONID,'')=''
			 BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
				GOTO END_PROC    
			 END
			SET @NSTEP = 20		-- GENERATING NEW KEY
			
			SET @CMEMONOPREFIX=@CLOCATIONID+@CTARGETLOCID+'-'
			
			-- GENERATING NEW JOB ORDER NO		
			SET @NSAVETRANLOOP=0
			WHILE @NSAVETRANLOOP=0
			BEGIN
				EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
								@CFINYEAR,0, @CMEMONOVAL OUTPUT   
				
				PRINT @CMEMONOVAL
				SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
										WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
										AND FIN_YEAR = '''+@CFINYEAR+''' )
								SET @NLOOPOUTPUT=0
							ELSE
								SET @NLOOPOUTPUT=1'
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
			END

			IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
				  GOTO END_PROC  		
			END

			SET @NSTEP = 30		-- GENERATING NEW ID

			-- GENERATING NEW JOB ORDER ID
			SET @CKEYFIELDVAL1 = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
			
			
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
				  GOTO END_PROC
			END

			SET @NSTEP = 40		-- UPDATING NEW ID INTO TEMP TABLES

			-- UPDATING NEWLY GENERATED JOB ORDER NO AND JOB ORDER ID IN PIM AND PID TEMP TABLES
			SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
						@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''',
						USER_CODE=(CASE WHEN USER_CODE='''' THEN '''+@CWIZAPPUSERCODE+''' ELSE USER_CODE END)'
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
		
			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
		
			SET @NSTEP = 50		-- GETTING ID INFO FROM TEMP TABLE

			-- GETTING JOB ORDER ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ' + @CKEYFIELD1 + ', @CMEMONOVAL = ' + @CMEMONO + ' FROM '
						+ (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME + ' WHERE MEMO_ID = ''' + @CMEMOID + '''' 
								ELSE @CTEMPMASTERTABLE END )
			
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  GOTO END_PROC  		
			END

			IF @NUPDATEMODE = 3			
			BEGIN
				IF EXISTS (SELECT TOP 1 MEMO_ID FROM GV_STKXFER_MST WHERE MEMO_ID=@CKEYFIELDVAL1 AND CANCELLED=1)
				BEGIN
					SET @CERRORMSG='THIS MEMO IS ALREADY CANCELLED...CAN NOT CANCEL AGAIN'
					GOTO END_PROC
				END
			END			
			
			SET @NSTEP = 55		-- STORING OLD STATUS OF BARCODES 
			EXEC UPDATEPMT_GV   
			   @CXNTYPE   = 'GVCHO'    
			 , @CXNID   = @CKEYFIELDVAL1  
			 , @NREVERTFLAG = 1
			 , @NUPDATEMODE = @NUPDATEMODE
			 , @CCMD    = @CCMDOUTPUT OUTPUT  
		 	
		 			 			
			IF @NUPDATEMODE = 3			
			BEGIN

				IF @CCMDOUTPUT <> ''  
				BEGIN  
					 PRINT @CCMDOUTPUT  
				       
					 SET @NSTEP = 60
				        
					 SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'  
					 SET @BNEGSTOCKFOUND=1      
					 EXEC SP_EXECUTESQL @CCMDOUTPUT  
					 GOTO END_PROC  
				END  
				
				SET @NSTEP = 70
				-- UPDATING SENTTOHO FLAG
				SET @CCMD = N'UPDATE ' + @CMASTERTABLENAME + ' SET CANCELLED = 1,LAST_UPDATE=GETDATE() ' + 
							N' WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + ''''
				EXEC SP_EXECUTESQL @CCMD
				
				GOTO END_PROC				
			END
			ELSE
			BEGIN
				SET @NSTEP = 80		-- UPDATING SENT_TO_HO FLAG TEMP TABLE

				-- UPDATING SENTTOHO FLAG
				SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET LAST_UPDATE=GETDATE() ,
							  EDT_USER_CODE=(CASE WHEN EDT_USER_CODE='''' THEN '''+@CWIZAPPUSERCODE+''' ELSE EDT_USER_CODE END)'+
							N' WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + ''''
				EXEC SP_EXECUTESQL @CCMD
							
			END

		END					-- END OF EDITMODE

		SET @NSTEP = 95
		
		-- RECHECKING IF ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END

		-- UPDATING MASTER TABLE (PIM01106) FROM TEMP TABLE
		SET @NSTEP = 100		-- UPDATING MASTER TABLE

		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			, @BALWAYSUPDATE = 1
			

		-- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE
		SET @NSTEP = 110		-- UPDATING TRANSACTION TABLE

		-- UPDATING ROW_ID IN TEMP TABLES - PAYMODE_XN_DET
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE LEFT(ROW_ID,5) = ''LATER'' OR ISNULL(ROW_ID,'''')='''''
		EXEC SP_EXECUTESQL @CCMD
		SET @NSTEP = 115

		-- PAYMODE_XN_DET
		SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + ' 
					WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
					AND ROW_ID IN 
					(
						SELECT A.ROW_ID 
						FROM ' + @CDETAILTABLENAME + ' A 
						LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B ON A.ROW_ID = B.ROW_ID
						WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
						AND   B.ROW_ID IS NULL
					)'
		EXEC SP_EXECUTESQL @CCMD

		-- INSERTING/UPDATING THE ENTRIES IN PRD_JID TABLE FROM TEMPTABLE
		SET @NSTEP = 117		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

		-- PAYMODE_XN_DET
		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME
			, @CKEYFIELD1	= 'ROW_ID'
			, @BALWAYSUPDATE = 1
		
		
		SET @NSTEP = 120
		EXEC UPDATEPMT_GV   
		   @CXNTYPE   = 'GVCHO'    
		 , @CXNID   = @CKEYFIELDVAL1  
		 , @CCMD    = @CCMDOUTPUT OUTPUT  
	      
		IF @CCMDOUTPUT <> ''  
		BEGIN  
			 PRINT @CCMDOUTPUT  
		       
			 SET @NSTEP = 130
		        
			 SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'  
			 SET @BNEGSTOCKFOUND=1      
			 EXEC SP_EXECUTESQL @CCMDOUTPUT  
			 GOTO END_PROC  
		END  


		-- VALIDATING ENTRIES 
		SET @NSTEP = 150		-- VALIDATING ENTRIES

		EXEC VALIDATEXN
			  @CXNTYPE	= 'GVCHO'
			, @CXNID	= @CKEYFIELDVAL1
			, @NUPDATEMODE = @NUPDATEMODE			
			, @CCMD		= @CCMDOUTPUT OUTPUT

		IF @CCMDOUTPUT <> ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION FAILED : ' + @CCMDOUTPUT + '...'
			GOTO END_PROC
		END
	
		-- AFTER SUCCESSFUL SAVING , JUST DROP THE TEMP TABLES CREATED BY APPLICATION
		SET @NSTEP = 160

LBLUPDATERECEIPTDATE:  

	  IF @NUPDATEMODE = 4  
	  BEGIN  
			PRINT 'UPDATE RECEIPT DT'
			UPDATE GV_STKXFER_MST SET RECEIPT_DT = @DRECEIPTDT,LAST_UPDATE=GETDATE(),HO_SYNCH_LAST_UPDATE=''
			WHERE MEMO_ID = @CMEMOID
			
			PRINT 'UPDATE STOCK'
			EXEC UPDATEPMT_GV   
			   @CXNTYPE   = 'GVCHI'    
			 , @CXNID   = @CMEMOID  
			 , @CCMD    = @CCMDOUTPUT OUTPUT  
		      
			IF @CCMDOUTPUT <> ''  
			BEGIN  
				 PRINT @CCMDOUTPUT  
			       
				 SET @NSTEP = 170
			        
				 SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'  
				 SET @BNEGSTOCKFOUND=1      
				 EXEC SP_EXECUTESQL @CCMDOUTPUT  
				 GOTO END_PROC  
			END  
	  END  
		
	
	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'
		
		GOTO END_PROC
	END CATCH
	
END_PROC:

	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
		BEGIN
			commit TRANSACTION
		END	
		ELSE
			ROLLBACK
	END
	
	IF ISNULL(@BNEGSTOCKFOUND,0)=0
	BEGIN
		INSERT @OUTPUT ( ERRMSG, MEMO_ID)
			VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )

		SELECT * FROM @OUTPUT	
	END	

	EXEC SP_DROPTEMPTABLES_XNS 'XNSGVXFR',@NSPID	
	
END		
------------------------------------------------------ END OF PROCEDURE SAVETRAN_GVXFR
