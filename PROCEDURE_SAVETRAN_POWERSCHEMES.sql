CREATE PROCEDURE SAVETRAN_POWERSCHEMES  
(  
 @NUPDATEMODE NUMERIC(1,0),  
 @NSPID NUMERIC(5,0),  
 @CMEMONOPREFIX VARCHAR(50),  
 @CFINYEAR VARCHAR(10),   
 @CTEMPDBNAME VARCHAR(50)  ,
 @clocid varchar(2)=''
)  
--WITH ENCRYPTION
AS  
BEGIN  

BEGIN TRY     
	LBLBEGINSAVETRAN:  
	  
	   
	 DECLARE @CMASTERTABLENAME VARCHAR(100),  
	   @CDETAILTABLENAME VARCHAR(100),  
	   @CTEMPMASTERTABLENAME VARCHAR(100),  
	   @CTEMPDETAILTABLENAME VARCHAR(100),  
	   @CTEMPMASTERTABLE VARCHAR(100),  
	   @CTEMPDETAILTABLE VARCHAR(100),  
	   @CCMD NVARCHAR(4000),  
	   @CCMDOUTPUT NVARCHAR(1000),  
	   @CPREFIX VARCHAR(20),  
	   @NNEXTKEYVALUE NUMERIC(20,0),  
	   @CNEXTKEYVALUE VARCHAR(40),  
	   @NNEXTROWID NUMERIC(20,0),  
	   @NMEMONOLEN NUMERIC(20,0),  
	   @NROWIDCOUNT NUMERIC(20,0),  
	   @CTABLENAME VARCHAR(50),  
	   @PARMDEFINITION NVARCHAR(500),  
	   @NNEWROWID NUMERIC(20,0),  
	   @CMEMONO VARCHAR(50),  
	   @CMEMONOVAL VARCHAR(50),  
	   @LRETVAL BIT ,  
	   @CROWIDVAL VARCHAR(40),  
	   @CERRORMSG VARCHAR(1000),  
	   @CEXPRERRORMSG NVARCHAR(1000),  
	   @NLOOPCNT NUMERIC(2,0),  
	   @NSAVETRANLOOP NUMERIC(2,0),  
	   @CKEYFIELD VARCHAR(60),  
	   @CKEYFIELDVAL VARCHAR(40),  
	   @CLOCATIONID CHAR(2),  
	   @CRETCMD NVARCHAR(1000),
	   @NSTEP INT
	
	 SET @NSTEP = 5
	 	        
	 BEGIN TRANSACTION       
	    
	 SELECT @CERRORMSG='',@CEXPRERRORMSG=''  
	  if @clocid=''
	 SELECT TOP 1 @CLOCATIONID=DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 
	 else
	 set @CLOCATIONID=@clocid

	 SET @NMEMONOLEN=7  

	 DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))
	 
	 SET @NSTEP  = 10
	  
	 SET @CMASTERTABLENAME = 'BUNDLEM'  
	 SET @CMEMONO='BUNDLE_ID'  
	 SET @CKEYFIELD='BUNDLE_ID'  
	 
	 SET @CTEMPDBNAME=''
	   
	 SET @CTEMPMASTERTABLENAME = 'TEMP_'+@CMASTERTABLENAME+'_'+LTRIM(RTRIM(STR(@NSPID)))  
	 SET @CTEMPMASTERTABLE = @CTEMPDBNAME+@CTEMPMASTERTABLENAME  
	 SET @CDETAILTABLENAME= 'BUNDLED'  
	 SET @CTEMPDETAILTABLENAME='TEMP_'+@CDETAILTABLENAME+'_'+LTRIM(RTRIM(STR(@NSPID)))  
	 SET @CTEMPDETAILTABLE = @CTEMPDBNAME+@CTEMPDETAILTABLENAME  
	    
	 SET @NROWIDCOUNT=0   
	 
	 SET @NSTEP  = 20 
	  
	 IF @CERRORMSG<>''  
		  GOTO END_PROC
	    
	   --- START UPDATING XN TABLES   
	 IF @NUPDATEMODE = 1 -- ADDMODE   
	 BEGIN   

	      IF ISNULL(@CLOCATIONID,'')=''
		 BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
			GOTO END_PROC    
		 END

		  SET @NSAVETRANLOOP=0  
		  WHILE @NSAVETRANLOOP=0  
		  BEGIN  
			   SET @NSTEP  = 30	
			   EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,  
				   @CFINYEAR,1, @CMEMONOVAL OUTPUT     
			  
				
			   SET @NSTEP  = 40		
			   PRINT @CMEMONOVAL  
			   SET @CCMD=N'IF EXISTS (SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''')  
				   SET @NLOOPOUTPUT=0  
				  ELSE  
				   SET @NLOOPOUTPUT=1'  
			   PRINT @CCMD  
			   EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT  
		  END  
		  
		  SET @NSTEP  = 50	
		  IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
		  BEGIN  
			 SET @CERRORMSG = 'ERROR CREATING NEXT MEMO NO....'   
			 GOTO END_PROC  
		  END  
		  
		  SET @NSTEP  = 60	
		  SET @CKEYFIELDVAL = @CMEMONOVAL  
		  
		  
		  SET @CCMD = 'UPDATE '+@CTEMPDBNAME+@CTEMPMASTERTABLENAME+' SET '+@CKEYFIELD+' = '''+@CKEYFIELDVAL+''''  
		  PRINT @CCMD  
		  		  
		  EXEC SP_EXECUTESQL @CCMD,N'@LRETVALOUTPUT BIT OUTPUT', @LRETVALOUTPUT=@LRETVAL OUTPUT  
		  IF @LRETVAL<>0  
		  BEGIN  
			 SET @CERRORMSG = 'ERROR UPDATING MEMO ID/NO. IN MASTER TABLE....'  
		  
			 GOTO END_PROC
		  END  
		  
		  SET @NSTEP  = 70	
		  SET @CCMD = 'UPDATE '+@CTEMPDBNAME+@CTEMPDETAILTABLENAME+' SET '+@CKEYFIELD+' = '''+@CKEYFIELDVAL+''''  
		  PRINT @CCMD  
		  
		  EXEC SP_EXECUTESQL @CCMD,N'@LRETVALOUTPUT BIT OUTPUT', @LRETVALOUTPUT=@LRETVAL OUTPUT  
		  IF @LRETVAL<>0  
		  BEGIN  
			 SET @NSTEP  = 80	
			 
			 SET @CERRORMSG = 'ERROR UPDATING MEMO ID IN DETAIL TABLE....'  
		  
			 GOTO END_PROC
		  END  
	   
	  END  
	     
	 ELSE  
	 BEGIN  
		  SET @NSTEP  = 90	
		  SET @CCMD = 'SELECT @CKEYFIELDVALOUTPUT = '+@CKEYFIELD+' FROM '+@CTEMPDBNAME+@CTEMPMASTERTABLENAME  
		  EXEC SP_EXECUTESQL @CCMD,N'@CKEYFIELDVALOUTPUT VARCHAR(50) OUTPUT', @CKEYFIELDVALOUTPUT = @CKEYFIELDVAL OUTPUT  
	 END  
	  
	 SET @NSTEP  = 100	 
	 
	 EXEC UPDATEMASTERXN @CTEMPDBNAME,@CTEMPMASTERTABLENAME,'',@CMASTERTABLENAME,@CKEYFIELD  
	        
	 IF @CERRORMSG<>''  
		  GOTO END_PROC
	 
	 SET @NSTEP  = 110	 
	 ---- GENERATE MULTIPLE ROW ID'S IN THE TRANSACTION DETAIL TABLE   
	 SET @CCMD = N'IF EXISTS (SELECT ROW_ID FROM '+@CTEMPDETAILTABLE+' WHERE LEFT(ROW_ID,5)=''LATER'' OR ROW_ID='''')  
     SELECT @NROWIDCOUNTOUTPUT = COUNT(ROW_ID) FROM '+@CTEMPDETAILTABLE+' WHERE LEFT(ROW_ID,5)=''LATER'' OR ROW_ID='''''  
    
	 PRINT @CCMD    
	 EXEC SP_EXECUTESQL @CCMD, N'@NROWIDCOUNTOUTPUT NUMERIC OUTPUT', @NROWIDCOUNTOUTPUT = @NROWIDCOUNT OUTPUT  
  
	 IF @NROWIDCOUNT>0    
	 BEGIN  
	   SET @NSTEP  = 120	
	   
	   SET @CPREFIX=@CLOCATIONID+@CFINYEAR  
	      
	   EXEC GETNEXTKEY @CDETAILTABLENAME, 'ROW_ID', 40,@CPREFIX, 0,  
		 @CFINYEAR,@NROWIDCOUNT,@CROWIDVAL OUTPUT     
	  
	   SET @NSTEP  = 130
	   
	   PRINT ISNULL(@CROWIDVAL,'NULLCROWID')  
	   SELECT @NNEXTKEYVALUE = CONVERT(NUMERIC(20),RIGHT(LTRIM(RTRIM(@CROWIDVAL)),LEN(LTRIM(RTRIM(@CROWIDVAL)))-2))  
	      
	   SET @NNEXTROWID=@NNEXTKEYVALUE        
	   
	   SET @NSTEP  = 140  
	   
	   SET @CCMD = N'IF EXISTS (SELECT NAME FROM '+@CTEMPDBNAME+'SYSOBJECTS WHERE NAME='''+@CTEMPDETAILTABLENAME+'_TMP'')  
			DROP TABLE '+@CTEMPDETAILTABLE+'_TMP  
	             
			   SELECT * INTO '+@CTEMPDETAILTABLE+'_TMP FROM '+ @CTEMPDETAILTABLE+'  
			   WHERE (LEFT(ROW_ID,5)=''LATER'' OR ROW_ID='''')   
			   DELETE FROM '+@CTEMPDETAILTABLE+' WHERE LEFT(ROW_ID,5)=''LATER'' OR ROW_ID='''''  
	   PRINT @CCMD  
	   EXEC SP_EXECUTESQL @CCMD  
	     
	   SET @NSTEP  = 150  
	   
	   SET @CCMD = N'UPDATE '+@CTEMPDETAILTABLE+'_TMP SET '+@CKEYFIELD+' = '''+@CKEYFIELDVAL+''''  
	   PRINT 'UPDATE MEMO ID-'+@CCMD  
	   EXEC SP_EXECUTESQL @CCMD  
	  
	  
	   SET @NSTEP  = 160
	  
	   SET @PARMDEFINITION = N'@NNEWROWID NUMERIC(20,0)';  
	   SET @CCMD=N'UPDATE '+@CTEMPDETAILTABLE+'_TMP SET ROW_ID='''+@CLOCATIONID+@CFINYEAR+'''+LTRIM(RTRIM(STR(@NNEWROWID)))  
		  ,@NNEWROWID=@NNEWROWID+1'  
	   PRINT @CCMD  
	   EXECUTE SP_EXECUTESQL @CCMD, @PARMDEFINITION,  
			@NNEWROWID = @NNEXTROWID;  
	     
	   SET @NSTEP  = 170      
		
	   SET @CTABLENAME = @CTEMPDETAILTABLENAME+'_TMP'  
	   EXEC UPDATEMASTERXN @CTEMPDBNAME,@CTABLENAME,@CTEMPDBNAME,@CTEMPDETAILTABLENAME,'ROW_ID'  
	       
	   IF @CERRORMSG<>''  
			GOTO END_PROC
	END
	    
LBLUPDATEDETAILTABLE:  

	  ----- DELETE THE ROWS FROM TARGET TABLE WHICH ARE DELETED BY USER THRU APPLICATION  
	  ----- AND AFTER THAT DELETE FROM TEMPORARY TABLE ALSO  
	 IF @NUPDATEMODE=1  
	 BEGIN  
		   SET @NSTEP  = 180
		   SET @CCMD = N'UPDATE '+@CTEMPDETAILTABLE+' SET '+@CKEYFIELD+' = '''+@CKEYFIELDVAL+''''  
		   EXEC SP_EXECUTESQL @CCMD   
	 END   
	 ELSE  
	 BEGIN  
		   SET @NSTEP  = 190
		   SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + '   
			  WHERE ' + @CKEYFIELD + ' = ''' + @CKEYFIELDVAL + '''  
			  AND ROW_ID IN   
			  (  
			   SELECT A.ROW_ID   
			   FROM ' + @CDETAILTABLENAME + ' A   
			   LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B ON A.ROW_ID = B.ROW_ID  
			   WHERE A.' + @CKEYFIELD + ' = ''' + @CKEYFIELDVAL + '''  
			   AND   B.ROW_ID IS NULL  
			  )'  
		   PRINT @CCMD  
		   EXEC SP_EXECUTESQL @CCMD  
	 END  
	    
	 SET @NSTEP  = 200      
	  ----- UPDATE/INSERT THE ROWS INTO TARGET DATABASE TABLE FROM SOURCE TEMPORARY TABLE  
	 EXEC UPDATEMASTERXN @CTEMPDBNAME,@CTEMPDETAILTABLENAME,'',@CDETAILTABLENAME,'ROW_ID'  
	       
	 IF @CERRORMSG<>''  
	    GOTO END_PROC  
	   
	   
LBLVALIDATEXN:  
	 IF ISNULL(@CERRORMSG,'')=''  
	 BEGIN   
		  PRINT 'CALL VALIDATEXN : '+@CKEYFIELDVAL  
		  SET @NSTEP  = 210 
		  EXEC VALIDATEXN  
			 @CXNTYPE = 'UEXSCH'  
		   , @CXNID = @CKEYFIELDVAL  
		   , @NUPDATEMODE = @NUPDATEMODE
		   , @CCMD  = @CCMDOUTPUT OUTPUT  
		  
		  IF @CCMDOUTPUT <> ''  
			SET @CERRORMSG = ' DATA VALIDATION FAILED : ' + @CCMDOUTPUT + '...'  
		  
		  IF @CERRORMSG<>''  
			 GOTO END_PROC	
	 END  
	   
	 GOTO END_PROC
END TRY

BEGIN CATCH
	SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
	
	GOTO END_PROC
END CATCH
  
END_PROC:

	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')=''
			COMMIT TRANSACTION
		ELSE
			ROLLBACK
	END

	INSERT @OUTPUT ( ERRMSG, MEMO_ID)
	VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL,'') )

	SELECT * FROM @OUTPUT	
        
    EXEC SP_DROPTEMPTABLES_XNS 'MSTSCH',@NSPID	
END
------------------------------------------------------ END OF PROCEDURE SAVETRAN_POWERSCHEMES
