create PROCEDURE SP3S_CUSTOMERBALANCE --(LocId 3 digit change by Sanjay:04-11-2024)
(
	----LIST OF INPUT PARAMETERS WITH DESCRIPTION
	 @DFROM_DT DATETIME='' 
	,@DTO_DT DATETIME=''
	,@BORDER_XN BIT=0
	,@CCUS_CODE VARCHAR(12)='' --PASEED MOBILE NUMBER
	,@NMODE NUMERIC(1)=1 --@NMODE : 1 FOR SUMMARY AND 2 FOR DETAIL
	,@NRETURNCBS NUMERIC(1)=0 
	,@NPENDING NUMERIC(1)=1 -- 1 FOR ALL; 2 FOR PENDING 
	/*@NRETURNCBS : 
	  FOR VALUE 1,THE PROCEDURE WILL RETURN CLOSING BALANCE AT @TO_DT FOR A CUSTOMER.
	  FOR VALUE 2,THE PROCEDURE WILL RETURN A CUSTOMER'S ALL TRANSACTIONS WITH CUMULATIVE CLOSING BALANCE.
	  FOR VALUE 3,THE PROCEDURE WILL RETURN POPULATE #EMP_CUST_BAL FOR CUSTOMER BALANCE - SALE PERSONWISE REPORT.*/
	,@BCZB CHAR(1)=0 
	,@CDEPT_ID VARCHAR(5)= '' 
	,@iMode int=0  --1 For loc  0= group
	/*@BCZB :
		THIS PARAMETER(@BCZB - CONSIDER ZERO BALANCE) WOULD BE OPERATIONAL FOR CUSTOMER TRIAL REPORT.
		1 : IF VALUE OF THIS PARAMETER IS SET TO 1,INCLUDE CUSTOMERS WHOSE CURRENT BALANCE IS ZERO. 
		0 : IF VALUE OF THIS PARAMETER IS SET TO 0,EXCLUDE THOSE CUSTOMERS WHOSE CURRENT BALANCE IS ZERO.
	*/	
)
--WITH ENCRYPTION
AS
/*
--WITH SALEPERSON SUMMARY
EXEC SP3S_CUSTOMERBALANCE
	 @DFROM_DT='2015-09-20'
	,@DTO_DT='2015-09-20'
	,@BORDER_XN=1
	,@CCUS_CODE=''
	,@NMODE=2
	,@NRETURNCBS=0
	,@BCZB=1

AUTHOR		  : 
CREATION DATE :
DESCRIPTION	  :
TRANSACTION ORDER : INCASE OF SAME DATE, THE TRANSACTION SHOULD BE ORDER HAVE FOLLOWING ORDERS.
				 	1. BUYERS ORDER
					2. SALES
					3. OTHERS
MODIFICATION HISTORY
MODIFIED BY	  :
MODIFIED DATE :
DESCRIPTION	  :

MODIFIED BY	  :
MODIFIED DATE :
DESCRIPTION	  :
*/
BEGIN
---DECLARE PROC VARIABLES



DECLARE @CERRMSG VARCHAR(500),@CSTEP VARCHAR(5),@NAGE_DAYS NUMERIC(10)	   
		,@DTSQL NVARCHAR(MAX),@Tran_dept_id varchar(4)
BEGIN TRY
SET NOCOUNT ON 

--select * from 
    DECLARE @cCustDetails TABLE(CUSTOMER_CODE VARCHAR(50),USER_CUSTOMER_CODE VARCHAR(50), MOBILE VARCHAR(50))	
   

	IF @CCUS_CODE<>''
	BEGIN

		INSERT INTO @CCUSTDETAILS(CUSTOMER_CODE,USER_CUSTOMER_CODE,MOBILE)
		SELECT CUSTOMER_CODE,USER_CUSTOMER_CODE, @CCUS_CODE MOBILE
		FROM CUSTDYM A (NOLOCK)
		WHERE( CUSTOMER_CODE=@CCUS_CODE OR  A.USER_CUSTOMER_CODE=@CCUS_CODE OR A.MOBILE =@CCUS_CODE)

	END 
	

set @Tran_dept_id=''

--CHANGE FOR CENTRALIZED LOCATION

DECLARE @CHO_DEPT_ID VARCHAR(4),@Cloc_id varchar(4)
SELECT TOP 1 @CHO_DEPT_ID=VALUE  FROM CONFIG WHERE CONFIG_OPTION ='HO_LOCATION_ID'
SELECT TOP 1 @Cloc_id=VALUE  FROM CONFIG WHERE CONFIG_OPTION ='LOCATION_ID'

IF ISNULL(@CHO_DEPT_ID,'')<>ISNULL(@Cloc_id,'')
SET @CDEPT_ID=''

	IF ISNULL(@CHO_DEPT_ID,'')=ISNULL(@Cloc_id,'')  and @iMode=1
		begin
		  
		   set @Tran_dept_id=@CDEPT_ID
		   set @CDEPT_ID=''
		end


	---GETTING SINGLE EMPLOYEE FOR A MEMO
	IF OBJECT_ID('TEMPDB..#SLS_EMPS','U') IS NOT NULL
		DROP TABLE #SLS_EMPS
	
	SELECT DISTINCT CMM.CM_ID
		  ,ISNULL((CASE WHEN EMP_CODE<>'0000000' THEN EMP_CODE
				 WHEN EMP_CODE1<>'0000000' THEN  EMP_CODE1
				 ELSE EMP_CODE2 END),'0000000') AS EMP_CODE
	INTO #SLS_EMPS				 
	FROM CMM01106 CMM (NOLOCK)
	LEFT JOIN CMD01106 CMD  (NOLOCK) ON CMD.CM_ID=CMM.CM_ID
	JOIN custdym cus (NOLOCK) ON cus.customer_code=cmm.CUSTOMER_CODE
	LEFT JOIN @CCUSTDETAILS TMP ON TMP.CUSTOMER_CODE =CMM.CUSTOMER_CODE 
	WHERE (ISNULL(@CCUS_CODE,'')='' OR tmp.CUSTOMER_CODE is not null )
	AND (@CDEPT_ID='' OR cus.location_id=@CDEPT_ID)
	AND (@TRAN_DEPT_ID='' OR cmm.location_code=@TRAN_DEPT_ID)
	--WHERE CMM.CM_DT<=@DTO_DT
		
	;WITH DUPEMP 
	AS
	(
		SELECT CM_ID,EMP_CODE,ROW_NUMBER() OVER(PARTITION BY CM_ID ORDER BY EMP_CODE DESC) AS DUP_CNT 
		FROM #SLS_EMPS
	)
	DELETE DUPEMP WHERE DUP_CNT>1

	---GETTING ALL TRANSACTION FOR ALL CUSTOMER 
	IF OBJECT_ID('TEMPDB..#CUST_XNS','U') IS NOT NULL
		DROP TABLE #CUST_XNS
	--GETTING CUSTOMER OPENING BALANCE
	SELECT  
	  A.CUSTOMER_CODE
	 ,'OPS' AS XN_TYPE
	 ,CAST('OPS AMT' AS varchar(max)) AS NARRATION
	 ,CAST('' AS varchar(30)) AS XN_NO
	 ,CAST('' AS varchar(40)) AS XN_ID
	 ,CONVERT(DATETIME,'') AS XN_DT,   
	  (CASE WHEN A.OPENING_BALANCE > 0 THEN A.OPENING_BALANCE ELSE 0 END) AS DR_AMOUNT,   
	  (CASE WHEN A.OPENING_BALANCE < 0 THEN ABS(A.OPENING_BALANCE) ELSE 0 END ) AS CR_AMOUNT
	  ,'' AS ADJ_BILL_NO
	  ,CONVERT(VARCHAR(7),'') AS EMP_CODE
	  ,CONVERT(NUMERIC(18,2),0) AS BILLAMT
	  ,0 AS RECEIVED_AMOUNT
	  ,0 AS DISCOUNT_AMOUNT
	  ,ABS(A.OPENING_BALANCE) AS XN_AMOUNT
	  ,1 AS XN_ORDER
	INTO #CUST_XNS
	FROM CUSTDYM A (NOLOCK) 
	LEFT JOIN @CCUSTDETAILS TMP ON TMP.CUSTOMER_CODE =a.CUSTOMER_CODE 
	WHERE A.OPENING_BALANCE <> 0  
	AND A.CUSTOMER_CODE <> '000000000000'
	AND (ISNULL(@CCUS_CODE,'')='' OR tmp.CUSTOMER_CODE is not null )
	AND (@CDEPT_ID='' OR a.location_id=@CDEPT_ID)
	AND (@TRAN_DEPT_ID='' OR location_id=@TRAN_DEPT_ID)

	---GETTING LIST OF ALL CUSTOMER ADVANCES AND PAYMENTS	
	INSERT #CUST_XNS (CUSTOMER_CODE,XN_TYPE,NARRATION,XN_NO,XN_ID,XN_DT,DR_AMOUNT,CR_AMOUNT
	  ,ADJ_BILL_NO,EMP_CODE,BILLAMT,RECEIVED_AMOUNT,DISCOUNT_AMOUNT,XN_AMOUNT,XN_ORDER)
	SELECT   A.CUSTOMER_CODE
		  , 'ARC' AS XN_TYPE
		  , (CASE WHEN A.ARC_TYPE=1 THEN 
					(CASE WHEN A.ARCT=1 THEN 
					         (CASE WHEN D.ADV_REC_ID IS NULL THEN  'O/S REC' 
							  ELSE 'O/S REC AGAINST HOLBACK  - '+RIGHT(D.MEMO_ID,10) END)
						  WHEN A.ARCT=2 THEN 
							(CASE WHEN C.ADV_REC_ID IS NULL  THEN 'ADV REVD.' 
								  ELSE 'ADV REC AGAINST ORD - '+RIGHT(C.ORDER_ID,10)+ ' Ref - '+ISNULL(C1.Ref_no,'') END)
						  WHEN A.ARCT=3 THEN 'REC AGAINST O/C' END) 
		    ELSE 'PAYMENT' END) AS NARRATION
		  , A.ADV_REC_NO AS XN_NO
		  , A.ADV_REC_ID AS XN_ID
		  , A.ADV_REC_DT AS XN_DT
		  , (CASE WHEN A.ARC_TYPE=2 THEN A.AMOUNT ELSE 0 END) AS DR_AMOUNT
		  , (CASE WHEN A.ARC_TYPE=1 THEN A.AMOUNT ELSE 0 END) AS CR_AMOUNT
		  ,	'' AS ADJ_BILL_NO
		  , A.EMP_CODE
		  , CONVERT(NUMERIC(18,4),0) AS BILLAMT
		  , 0 AS RECAMT
		  , A.DISCOUNT_AMOUNT
		  , A.NET_AMOUNT AS XN_AMOUNT    
		  , (CASE WHEN ((A.ARC_TYPE=1 AND A.ARCT=1) OR A.ARC_TYPE=2) THEN 6 ELSE 3 END) AS XN_ORDER
	FROM ARC01106 A (NOLOCK)
	LEFT JOIN WSL_ORDER_ADV_RECEIPT C (NOLOCK) ON A.ADV_REC_ID=C.ADV_REC_ID
	LEFT OUTER JOIN WSL_ORDER_MST C1 (NOLOCK) ON C1.order_id=C.order_id
	LEFT JOIN HBD_RECEIPT D (NOLOCK) ON A.ADV_REC_ID=D.ADV_REC_ID
	JOIN custdym cus (NOLOCK) ON cus.customer_code=a.CUSTOMER_CODE
	LEFT JOIN @CCUSTDETAILS TMP ON TMP.CUSTOMER_CODE =a.CUSTOMER_CODE 
	WHERE A.AMOUNT <> 0   
	AND A.CANCELLED = 0 AND A.CUSTOMER_CODE <> '000000000000'
	AND (ISNULL(@CCUS_CODE,'')='' OR tmp.CUSTOMER_CODE is not null )
	AND (A.ARCT=1 OR A.ARCT=2)
	AND (@CDEPT_ID='' OR cus.location_id=@CDEPT_ID)
	AND (@TRAN_DEPT_ID='' OR a.location_Code=@TRAN_DEPT_ID)
	--AND A.ADV_REC_DT<=@DTO_DT
	
	INSERT #CUST_XNS (CUSTOMER_CODE,XN_TYPE,NARRATION,XN_NO,XN_ID,XN_DT,DR_AMOUNT,CR_AMOUNT
	  ,ADJ_BILL_NO,EMP_CODE,BILLAMT,RECEIVED_AMOUNT,DISCOUNT_AMOUNT,XN_AMOUNT,XN_ORDER)
	--ADVANCE ADJUSTMENT IN OS RECEIPTS
	SELECT A.CUSTOMER_CODE
		  ,'ARC' AS XN_TYPE
		  ,'ADV ADJ IN O/S REC' AS NARRATION   
		  ,A.ADV_REC_NO AS XN_NO
		  ,A.ADV_REC_ID AS XN_ID
		  ,A.ADV_REC_DT AS XN_DT  
	      ,PAY.ADVANCE_AMOUNT_ADJUSTED AS DR_AMOUNT   
		  ,0 AS CR_AMOUNT   
		  ,'' AS ADJ_BILL_NO 
		  ,A.EMP_CODE
		  ,CONVERT(NUMERIC(18,2),0) AS BILLAMT
		  ,0 AS RECAMT      
		  ,0 AS DISCOUNT_AMOUNT
		  ,PAY.ADVANCE_AMOUNT_ADJUSTED AS XN_AMOUNT
		  ,6 AS XN_ORDER
	FROM ARC01106 A (NOLOCK) 
	JOIN VW_BILL_PAYMODE PAY (NOLOCK) ON PAY.MEMO_ID = A.ADV_REC_ID AND PAY.XN_TYPE = 'ARC' 
	JOIN custdym cus (NOLOCK) ON cus.customer_code=A.CUSTOMER_CODE
	LEFT JOIN @CCUSTDETAILS TMP ON TMP.CUSTOMER_CODE =a.CUSTOMER_CODE 
	WHERE PAY.ADVANCE_AMOUNT_ADJUSTED <> 0  AND A.ARC_TYPE=1 AND A.ARCT=1 --AND (A.ARCT=1 OR A.ARCT=2)
	AND A.CANCELLED = 0 AND A.CUSTOMER_CODE <> '000000000000'  
	AND (ISNULL(@CCUS_CODE,'')='' OR tmp.CUSTOMER_CODE is not null )
	AND (@CDEPT_ID='' OR cus.location_id=@CDEPT_ID)
	AND (@TRAN_DEPT_ID='' OR a.location_Code=@TRAN_DEPT_ID)
	AND ARC_TYPE<>2
	--AND A.ADV_REC_DT<=@DTO_DT

	--CREDIT NOTE ADJUSTMENT IN RECEIPTS/PAYMENTS	
	INSERT #CUST_XNS (CUSTOMER_CODE,XN_TYPE,NARRATION,XN_NO,XN_ID,XN_DT,DR_AMOUNT,CR_AMOUNT
	  ,ADJ_BILL_NO,EMP_CODE,BILLAMT,RECEIVED_AMOUNT,DISCOUNT_AMOUNT,XN_AMOUNT,XN_ORDER)
	SELECT A.CUSTOMER_CODE
		  ,'ARC' AS XN_TYPE
		  ,(CASE WHEN A.ARC_TYPE=1 THEN 'CN ADJ IN REC' 
				 ELSE 'CN ADJ IN PMT' END) AS NARRATION   
		  ,A.ADV_REC_NO AS XN_NO
		  ,A.ADV_REC_ID AS XN_ID
		  ,A.ADV_REC_DT AS XN_DT  
	      ,(CASE WHEN A.ARC_TYPE=1 THEN PAY.CN_AMOUNT ELSE 0 END) AS DR_AMOUNT   
		  ,(CASE WHEN A.ARC_TYPE=2 THEN PAY.CN_AMOUNT ELSE 0 END) AS CR_AMOUNT   
		  ,'' AS ADJ_BILL_NO 
		  ,A.EMP_CODE,CONVERT(NUMERIC(18,2),0) AS BILLAMT
		  ,0 AS RECAMT      
		  ,0 AS DISCOUNT_AMOUNT
		  ,PAY.CN_AMOUNT AS XN_AMOUNT
		  ,6 AS XN_ORDER
	FROM ARC01106 A (NOLOCK) 
	JOIN VW_BILL_PAYMODE PAY (NOLOCK) ON PAY.MEMO_ID = A.ADV_REC_ID AND PAY.XN_TYPE = 'ARC' 
	JOIN custdym cus (NOLOCK) ON cus.customer_code=a.CUSTOMER_CODE
	LEFT JOIN @CCUSTDETAILS TMP ON TMP.CUSTOMER_CODE =a.CUSTOMER_CODE 
	WHERE PAY.CN_AMOUNT <> 0   
	AND A.CANCELLED = 0 AND A.CUSTOMER_CODE <> '000000000000'  
	AND (ISNULL(@CCUS_CODE,'')='' OR tmp.CUSTOMER_CODE is not null )
	AND (A.ARCT=1 OR A.ARCT=2)
	AND (@CDEPT_ID='' OR cus.location_id=@CDEPT_ID)
	AND (@TRAN_DEPT_ID='' OR a.location_Code=@TRAN_DEPT_ID)
	AND ARC_TYPE<>2

	--LIST OF ADVANCE ADJUSTED IN RETAIL SALES			
	INSERT #CUST_XNS (CUSTOMER_CODE,XN_TYPE,NARRATION,XN_NO,XN_ID,XN_DT,DR_AMOUNT,CR_AMOUNT
	  ,ADJ_BILL_NO,EMP_CODE,BILLAMT,RECEIVED_AMOUNT,DISCOUNT_AMOUNT,XN_AMOUNT,XN_ORDER)
	SELECT 
		 A.CUSTOMER_CODE
	    ,'SLS' AS XN_TYPE   
	    ,'ADV ADJ IN SALE' AS NARRATION
	    ,A.CM_NO AS XN_NO
	    ,A.CM_ID AS XN_ID
	    ,A.CM_DT AS XN_DT
	    ,PAY.ADVANCE_AMOUNT_ADJUSTED AS DR_AMOUNT
	    ,0 AS CR_AMOUNT
	    ,'' AS ADJ_BILL_NO   
		,EMP.EMP_CODE AS EMP_CODE,A.NET_AMOUNT AS BILLAMT
		,ISNULL(CASH_AMOUNT,0)+ISNULL(CC_AMOUNT,0)
		+ISNULL(OTHER_DOC_AMOUNT,0)+ISNULL(BANK_CHARGES,0)+ISNULL(MISC_AMOUNT,0) AS RECAMT  
		,0 AS DISCOUNT_AMOUNT
		,PAY.ADVANCE_AMOUNT_ADJUSTED AS XN_AMOUNT
		,6 AS XN_ORDER
	FROM CMM01106 A (NOLOCK) 
	JOIN VW_BILL_PAYMODE PAY (NOLOCK) ON PAY.MEMO_ID = A.CM_ID AND PAY.XN_TYPE = 'SLS'
	JOIN #SLS_EMPS EMP (NOLOCK) ON A.CM_ID=EMP.CM_ID
	JOIN custdym cus (NOLOCK) ON cus.customer_code=a.CUSTOMER_CODE
	LEFT JOIN @CCUSTDETAILS TMP ON TMP.CUSTOMER_CODE =a.CUSTOMER_CODE 
	WHERE PAY.ADVANCE_AMOUNT_ADJUSTED > 0 AND A.CM_MODE = 1 --AND A.REF_CM_ID = ''  
	AND A.CANCELLED = 0 AND A.CUSTOMER_CODE <> '000000000000' 
	AND (ISNULL(@CCUS_CODE,'')='' OR tmp.CUSTOMER_CODE is not null )
	AND (@CDEPT_ID='' OR cus.location_id=@CDEPT_ID)
	AND (@TRAN_DEPT_ID='' OR a.location_Code=@TRAN_DEPT_ID)
	--AND A.CM_DT<=@DTO_DT
	
		
	---GETTING LIST BILLS WHICH HAS CREDIT ISSUE,CREDIT NOTE ISSUE AND SALE RETURN
	INSERT #CUST_XNS (CUSTOMER_CODE,XN_TYPE,NARRATION,XN_NO,XN_ID,XN_DT,DR_AMOUNT,CR_AMOUNT
	  ,ADJ_BILL_NO,EMP_CODE,BILLAMT,RECEIVED_AMOUNT,DISCOUNT_AMOUNT,XN_AMOUNT,XN_ORDER)
	SELECT A.CUSTOMER_CODE
    , 'SLS' AS XN_TYPE     
    , (CASE WHEN PAY.CREDIT_AMOUNT>0 THEN 'CR ISSUE IN SALE' ELSE   
      (CASE WHEN SUBSTRING(A.CM_NO,len(a.location_Code)+3,1)='N' THEN 'CN ISSUE' 
			WHEN PAY.CREDIT_REFUND_AMOUNT<>0 THEN 'CRF ISSUE' ELSE 'SALE RETURN' END ) END ) AS NARRATION     
	, A.CM_NO AS XN_NO
	, A.CM_ID AS XN_ID
	, A.CM_DT AS XN_DT
	, ( CASE WHEN (PAY.CREDIT_AMOUNT) > 0 THEN (PAY.CREDIT_AMOUNT) ELSE 0 END ) AS DR_AMOUNT   
    , ((CASE WHEN PAY.CREDIT_AMOUNT<0 THEN ABS(PAY.CREDIT_AMOUNT) ELSE 0 END) +ABS(PAY.CREDIT_REFUND_AMOUNT)) AS CR_AMOUNT
    ,'' AS ADJ_BILL_NO,EMP.EMP_CODE
	,A.NET_AMOUNT AS BILLAMT
	,ISNULL(CASH_AMOUNT,0)+ISNULL(CC_AMOUNT,0)
	+ISNULL(OTHER_DOC_AMOUNT,0)+ISNULL(BANK_CHARGES,0)+ISNULL(MISC_AMOUNT,0) AS RECEIVED_AMOUNT
	,0 AS DISCOUNT_AMOUNT
	,ABS(PAY.CREDIT_AMOUNT) AS XN_AMOUNT
	,(CASE WHEN PAY.CREDIT_AMOUNT>0 THEN 5 ELSE   
     (CASE WHEN SUBSTRING(A.CM_NO,len(a.location_Code)+3,1)='N' THEN 5 
		   ELSE 6 END) END) AS XN_ORDER
	FROM CMM01106 A (NOLOCK) 
	JOIN VW_BILL_PAYMODE PAY (NOLOCK) ON PAY.MEMO_ID = A.CM_ID AND PAY.XN_TYPE = 'SLS'
	JOIN #SLS_EMPS EMP ON A.CM_ID=EMP.CM_ID
	JOIN custdym cus (NOLOCK) ON cus.customer_code=a.CUSTOMER_CODE
	LEFT JOIN @CCUSTDETAILS TMP ON TMP.CUSTOMER_CODE =a.CUSTOMER_CODE 
	WHERE (PAY.CREDIT_AMOUNT <> 0 OR PAY.CREDIT_REFUND_AMOUNT<>0) AND A.CM_MODE = 1 --AND A.REF_CM_ID = ''  
	AND A.CANCELLED = 0 AND A.CUSTOMER_CODE <> '000000000000'
	AND (ISNULL(@CCUS_CODE,'')='' OR tmp.CUSTOMER_CODE is not null )
	AND (@CDEPT_ID='' OR cus.location_id=@CDEPT_ID)
	AND (@TRAN_DEPT_ID='' OR a.location_Code=@TRAN_DEPT_ID)
	
	
	-- CREDIT NOTE ADJUSTMENT IN SALES  
	INSERT #CUST_XNS (CUSTOMER_CODE,XN_TYPE,NARRATION,XN_NO,XN_ID,XN_DT,DR_AMOUNT,CR_AMOUNT
	  ,ADJ_BILL_NO,EMP_CODE,BILLAMT,RECEIVED_AMOUNT,DISCOUNT_AMOUNT,XN_AMOUNT,XN_ORDER)
	SELECT A.CUSTOMER_CODE
		  ,'SLS' AS XN_TYPE
		  ,'CN ADJ IN SALE' AS NARRATION   
		  ,A.CM_NO AS XN_NO
		  ,A.CM_ID AS XN_ID
		  ,A.CM_DT AS XN_DT
		  ,PAY.CN_AMOUNT AS DR_AMOUNT
		  ,0 AS CR_AMOUNT
		  ,'' AS ADJ_BILL_NO,EMP.EMP_CODE
		  ,A.NET_AMOUNT AS BILLAMT
		  ,ISNULL(CASH_AMOUNT,0)+ISNULL(CC_AMOUNT,0)
		   +ISNULL(OTHER_DOC_AMOUNT,0)+ISNULL(BANK_CHARGES,0)+ISNULL(MISC_AMOUNT,0) AS RECAMT
		  ,0 AS DISCOUNT_AMOUNT
		  ,PAY.CN_AMOUNT AS XN_AMOUNT 
		  ,6 AS XN_ORDER 
	FROM CMM01106 A (NOLOCK) 
	JOIN VW_BILL_PAYMODE PAY (NOLOCK) ON PAY.MEMO_ID = A.CM_ID AND PAY.XN_TYPE = 'SLS'
	JOIN #SLS_EMPS EMP ON A.CM_ID=EMP.CM_ID
	JOIN custdym cus (NOLOCK) ON cus.customer_code=a.CUSTOMER_CODE
	LEFT JOIN @CCUSTDETAILS TMP ON TMP.CUSTOMER_CODE =a.CUSTOMER_CODE 
	WHERE PAY.CN_AMOUNT > 0 AND A.CM_MODE = 1 --AND A.REF_CM_ID = ''  
	AND A.CANCELLED = 0 AND A.CUSTOMER_CODE <> '000000000000'  
	AND (ISNULL(@CCUS_CODE,'')='' OR tmp.CUSTOMER_CODE is not null )
	AND (@CDEPT_ID='' OR cus.location_id=@CDEPT_ID)
	AND (@TRAN_DEPT_ID='' OR a.location_Code=@TRAN_DEPT_ID)
	--AND A.CM_DT<=@DTO_DT
	
	---INCLUDE BUYER'S ORDER TRANSACTION IF REQUESTED
	IF @BORDER_XN=1
	BEGIN
		---CREDIT CUSTOMER FOR ORDER ITEMS AGAINST PO DELIEVED IN CASH MEMO
		IF OBJECT_ID('TEMPDB..#ORDDLV','U') IS NOT NULL
			DROP TABLE #ORDDLV

		SELECT A.CUSTOMER_CODE
			  ,A.CM_NO 
			  ,A.CM_ID 
			  ,A.CM_DT 
			  ,A.NET_AMOUNT 
			  ,B.RBO_product_code  PRODUCT_CODE   
			  ,B.QUANTITY
			  ,WOM.Ref_no,a.location_Code
		INTO #ORDDLV	  	  
		FROM CMM01106 A (NOLOCK) 
		JOIN CMD01106 B (NOLOCK) ON A.CM_ID=B.CM_ID
		JOIN WSL_ORDER_DET WOD (NOLOCK) ON B.RBO_product_code  =WOD.PRODUCT_CODE
							--(CASE WHEN WOD.ORDER_TYPE=0 THEN  ELSE WOD.REF_PRODUCT_CODE END)
		JOIN WSL_ORDER_MST WOM (NOLOCK) ON WOD.ORDER_ID=WOM.ORDER_ID AND A.CUSTOMER_CODE=WOM.CUSTOMER_CODE
		JOIN custdym cus (NOLOCK) ON cus.customer_code=a.CUSTOMER_CODE
		LEFT JOIN @CCUSTDETAILS TMP ON TMP.CUSTOMER_CODE =a.CUSTOMER_CODE 
		WHERE A.CM_MODE = 1 AND B.RFNET>0
		AND A.CANCELLED = 0 AND A.CUSTOMER_CODE <> '000000000000' AND WOM.CANCELLED=0 AND ISNULL(WOD.CANCELLED,0)=0
		AND (ISNULL(@CCUS_CODE,'')='' OR tmp.CUSTOMER_CODE is not null )
		AND (@CDEPT_ID='' OR cus.location_id=@CDEPT_ID)
		AND (@TRAN_DEPT_ID='' OR a.location_Code=@TRAN_DEPT_ID)
		
		/*
		DELETING THE SECOND AND ONWARDS DELIVERY OF ORDER ITEMS INCASE OF SALE RETURN AND AGAIN DELIVERY OF ITEMS.
		*/
		;WITH CTE_REMOVEDUP AS
		(
			SELECT ROW_NUMBER() OVER(PARTITION BY PRODUCT_CODE,CUSTOMER_CODE ORDER BY CM_DT ASC,CM_NO ASC) AS SNO
				  ,CUSTOMER_CODE
				  ,CM_NO
				  ,CM_ID
				  ,CM_DT
				  ,NET_AMOUNT
				  ,PRODUCT_CODE
				  ,QUANTITY
				  ,Ref_no
			FROM #ORDDLV	  
		)
		DELETE CTE_REMOVEDUP WHERE SNO<>1
		
		CREATE INDEX IX_ORDDLV_PRODUCT_CODE  ON #ORDDLV(PRODUCT_CODE)
		CREATE INDEX IX_ORDDLV_CUSTOMER_CODE ON #ORDDLV(CUSTOMER_CODE)
		CREATE INDEX IX_ORDDLV_CM_ID ON #ORDDLV(CM_ID)
		
		INSERT #CUST_XNS(CUSTOMER_CODE,XN_TYPE,NARRATION,XN_NO,XN_ID,XN_DT,DR_AMOUNT,CR_AMOUNT,ADJ_BILL_NO
						,EMP_CODE,BILLAMT,RECEIVED_AMOUNT,DISCOUNT_AMOUNT,XN_AMOUNT,XN_ORDER)
		---DEBIT CUSTOMER FOR ORDERS PLACED
		SELECT	 A.CUSTOMER_CODE
				,'BO' AS XN_TYPE 
				,'CUS ORD - '+A.order_no +' Ref - '+ A.ref_no AS NARRATION
				,A.ORDER_NO AS XN_NO
				,A.ORDER_ID AS XN_ID
				,A.ORDER_DT AS XN_DT
				,SUM(B.RFNET) AS DR_AMOUNT
				,0 AS CR_AMOUNT
				,'' AS ADJ_BILL_NO
				,A.EMP_CODE 
				,SUM(B.RFNET) AS BILLAMT
				,ISNULL(ADV.NET_AMOUNT,0) AS RECEIVED_AMOUNT
				,0 AS DISCOUNT_AMOUNT
				,SUM(B.RFNET) AS XN_AMOUNT
				,2 AS XN_ORDER
	    FROM WSL_ORDER_MST A  (NOLOCK)
	    JOIN WSL_ORDER_DET B (NOLOCK) ON A.ORDER_ID=B.ORDER_ID
	    LEFT JOIN
	    (
			SELECT AR.ORDER_ID,SUM(ARC.NET_AMOUNT) AS NET_AMOUNT
			FROM WSL_ORDER_ADV_RECEIPT AR (NOLOCK) 
			JOIN ARC01106 ARC (NOLOCK) ON AR.ADV_REC_ID=ARC.ADV_REC_ID AND ISNULL(ARC.CANCELLED,0)=0
			WHERE  (ARC.ARCT=1 OR ARC.ARCT=2)
			AND (@CDEPT_ID='' OR arc.location_Code=@CDEPT_ID)
			GROUP BY AR.ORDER_ID
		)ADV ON A.ORDER_ID=ADV.ORDER_ID
		JOIN custdym cus (NOLOCK) ON cus.customer_code=a.CUSTOMER_CODE
		LEFT JOIN @CCUSTDETAILS TMP ON TMP.CUSTOMER_CODE =a.CUSTOMER_CODE 
		WHERE A.CANCELLED = 0 AND ISNULL(B.CANCELLED,0)=0
		AND A.CUSTOMER_CODE <> '000000000000' 
		--AND A.ORDER_DT<=@DTO_DT
		AND (ISNULL(@CCUS_CODE,'')='' OR tmp.CUSTOMER_CODE is not null )
		AND (@CDEPT_ID='' OR cus.location_id=@CDEPT_ID)
		AND (@TRAN_DEPT_ID='' OR a.location_Code=@TRAN_DEPT_ID)
		GROUP BY A.CUSTOMER_CODE,A.ORDER_NO,A.ORDER_ID,A.ORDER_DT
				,A.EMP_CODE,ISNULL(ADV.NET_AMOUNT,0),A.Ref_no
		UNION ALL
		---CREDIT CUSTOMER FOR ORDER ITEMS AGAINST PO DELIEVED IN CASH MEMO
				SELECT A.CUSTOMER_CODE
			  ,'SLS' AS XN_TYPE
			  ,'ORD DLV AGAINST - '+WOM.ORDER_NO+' Ref - '+ISNULL(WOM.Ref_no,'') AS NARRATION   
			  ,A.CM_NO AS XN_NO
			  ,A.CM_ID AS XN_ID
			  ,A.CM_DT AS XN_DT
			  ,0 AS DR_AMOUNT
			  ,(SUM((WOD.RFNET/WOD.QUANTITY)*A.QUANTITY)) AS CR_AMOUNT
			  ,'' AS ADJ_BILL_NO
			  ,EMP.EMP_CODE
			  ,A.NET_AMOUNT AS BILLAMT
			  ,ISNULL(CASH_AMOUNT,0)+ISNULL(CC_AMOUNT,0)
			   +ISNULL(OTHER_DOC_AMOUNT,0)+ISNULL(BANK_CHARGES,0)+ISNULL(MISC_AMOUNT,0) AS RECAMT
			  ,0 AS DISCOUNT_AMOUNT
			  ,(SUM((WOD.RFNET/WOD.QUANTITY)*A.QUANTITY)) AS XN_AMOUNT 
			  ,4 AS XN_ORDER  
		FROM #ORDDLV A
		JOIN WSL_ORDER_DET WOD (NOLOCK) ON A.PRODUCT_CODE=WOD.PRODUCT_CODE
							--(CASE WHEN WOD.ORDER_TYPE=0 THEN WOD.PRODUCT_CODE ELSE WOD.REF_PRODUCT_CODE END)
		JOIN WSL_ORDER_MST WOM (NOLOCK) ON WOD.ORDER_ID=WOM.ORDER_ID AND A.CUSTOMER_CODE=WOM.CUSTOMER_CODE
		JOIN #SLS_EMPS EMP ON A.CM_ID=EMP.CM_ID
		JOIN VW_BILL_PAYMODE PAY (NOLOCK) ON PAY.MEMO_ID = A.CM_ID AND PAY.XN_TYPE = 'SLS'
		JOIN custdym cus (NOLOCK) ON cus.customer_code=wom.CUSTOMER_CODE
		LEFT JOIN @CCUSTDETAILS TMP ON TMP.CUSTOMER_CODE =a.CUSTOMER_CODE 
		WHERE WOM.CANCELLED=0 AND ISNULL(WOD.CANCELLED,0)=0
		AND (ISNULL(@CCUS_CODE,'')='' OR tmp.CUSTOMER_CODE is not null )
		AND (@TRAN_DEPT_ID='' OR a.location_Code=@TRAN_DEPT_ID)
		GROUP BY A.CUSTOMER_CODE,WOM.ORDER_NO,A.CM_NO,A.CM_ID,A.CM_DT,EMP.EMP_CODE,A.NET_AMOUNT 
			  ,ISNULL(CASH_AMOUNT,0)+ISNULL(CC_AMOUNT,0)
			   +ISNULL(OTHER_DOC_AMOUNT,0)+ISNULL(BANK_CHARGES,0)+ISNULL(MISC_AMOUNT,0),WOM.Ref_no
			   
	END
	
	-- HOLBACK DEBIT AMOUNT AND RECEIPT CREADIT AMOUNT

		INSERT #CUST_XNS(CUSTOMER_CODE,XN_TYPE,NARRATION,XN_NO,XN_ID,XN_DT,DR_AMOUNT,CR_AMOUNT,ADJ_BILL_NO
						,EMP_CODE,BILLAMT,RECEIVED_AMOUNT,DISCOUNT_AMOUNT,XN_AMOUNT,XN_ORDER)
		---DEBIT CUSTOMER FOR ORDERS PLACED
		SELECT	 A.CUSTOMER_CODE
				,'HBD' AS XN_TYPE 
				,'CUSTOMER HOLD ITEM' AS NARRATION
				,A.MEMO_NO AS XN_NO
				,A.MEMO_ID AS XN_ID
				,A.MEMO_DT AS XN_DT
				,A.TOTAL_AMOUNT AS DR_AMOUNT
				,0 AS CR_AMOUNT
				,'' AS ADJ_BILL_NO
				,'0000000' AS EMP_CODE 
				,A.TOTAL_AMOUNT AS BILLAMT
				,ISNULL(ADV.NET_AMOUNT,0) AS RECEIVED_AMOUNT
				,0 AS DISCOUNT_AMOUNT
				,A.TOTAL_AMOUNT AS XN_AMOUNT
				,7 AS XN_ORDER
	    FROM HOLD_BACK_DELIVER_MST A  (NOLOCK)
	    LEFT JOIN
	    (
			SELECT AR.MEMO_ID,SUM(ARC.NET_AMOUNT) AS NET_AMOUNT
			FROM HBD_RECEIPT AR (NOLOCK) 
			JOIN ARC01106 ARC (NOLOCK) ON AR.ADV_REC_ID=ARC.ADV_REC_ID AND ISNULL(ARC.CANCELLED,0)=0
			WHERE  (@CDEPT_ID='' OR arc.location_Code=@CDEPT_ID)
			AND ARC.cancelled=0
			GROUP BY AR.MEMO_ID
		)ADV ON A.MEMO_ID=ADV.MEMO_ID
		JOIN custdym cus (NOLOCK) ON cus.customer_code=a.CUSTOMER_CODE
		LEFT JOIN @CCUSTDETAILS TMP ON TMP.CUSTOMER_CODE =a.CUSTOMER_CODE 
		WHERE A.CANCELLED = 0 
		AND A.CUSTOMER_CODE <> '000000000000' 
		AND A.Entry_mode=2 
		AND ISNULL(A.TOTAL_AMOUNT,0)<>0
		AND (ISNULL(@CCUS_CODE,'')='' OR tmp.CUSTOMER_CODE is not null )
		AND (@CDEPT_ID='' OR cus.location_id=@CDEPT_ID)
		AND (@TRAN_DEPT_ID='' OR a.location_Code=@TRAN_DEPT_ID)
		GROUP BY A.CUSTOMER_CODE,A.MEMO_NO,A.MEMO_ID,A.MEMO_DT
				,ISNULL(ADV.NET_AMOUNT,0),A.TOTAL_AMOUNT
	
	DECLARE @CCUSTOMERCODE VARCHAR(100)
	IF @CCUS_CODE<>''
	BEGIN
	    
	    SELECT @CCUSTOMERCODE=A.customer_code  FROM custdym a (NOLOCK)
	    JOIN @CCUSTDETAILS B  ON A.customer_code =B.CUSTOMER_CODE 
	    ORDER BY (CASE WHEN A.MOBILE=@CCUS_CODE THEN 0 ELSE 1 END ),
	             (CASE WHEN A.user_customer_code =@CCUS_CODE THEN 0 ELSE 1 END )
	    
	    Update #CUST_XNS set customer_code =@CCUSTOMERCODE
	  
	
	END
	else 
	BEGIN

		INSERT INTO @CCUSTDETAILS(CUSTOMER_CODE,USER_CUSTOMER_CODE,MOBILE)
		SELECT a.CUSTOMER_CODE,USER_CUSTOMER_CODE,a.MOBILE
		FROM CUSTDYM A (NOLOCK)
		join #CUST_XNS b on a.customer_code =b.customer_code 
		
		;with cust as 
		(
		  select CUSTOMER_CODE, mobile ,1 as sr
		  from @CCUSTDETAILS
		  where mobile<>''
		  union 
		  select CUSTOMER_CODE, USER_CUSTOMER_CODE ,2 as sr
		  from @CCUSTDETAILS
		  where USER_CUSTOMER_CODE<>''
		 )
		 
		 SELECT *,SRNo=ROW_NUMBER () OVER(PARTITION BY MOBILE ORDER BY SR) 
		 into #tmpunqCust
		 FROM CUST 
		 
		 delete from #tmpunqCust where SRNo>1
		 
		 UPDATE A SET MOBILE =B.MOBILE  FROM @CCUSTDETAILS A
		 JOIN #TMPUNQCUST B ON (A.USER_CUSTOMER_CODE =B.MOBILE OR A.MOBILE =B.MOBILE )
	     WHERE A.MOBILE <>B.MOBILE 
	     
	     
	     Update a set customer_code =c.CUSTOMER_CODE  from #CUST_XNS A
	     join @CCUSTDETAILS b on a.customer_code =b.CUSTOMER_CODE 
	     join #tmpunqCust c on b.MOBILE =c.MOBILE 
	    
	

	END 
	
	
	
	
	IF ISNULL(@CCUS_CODE,'')<>'' AND @NRETURNCBS>0
	BEGIN
		IF @NRETURNCBS=1
		BEGIN
			--CURRENT CLOSING BALANCE OF A CUSTOMER(CALLED FROM CASH MEMO,PAYMENTS/RECEIPTS MODULES ETC.
			SELECT ISNULL((SUM(DR_AMOUNT)-SUM(CR_AMOUNT)),0) AS CLOSING_BALANCE
			FROM #CUST_XNS
			RETURN
			
		END
		ELSE IF @NRETURNCBS=2
		BEGIN
		--SELECT ISNULL(@CCUS_CODE,''), @NRETURNCBS
						
          

				--RETURN TRANSACTION WISE DETAILS OF BALANCE OF A CUSTOMER.
				IF OBJECT_ID('TEMPDB..#CUST_2','U') IS NOT NULL
					DROP TABLE #CUST_2
					
				IF OBJECT_ID('TEMPDB..#CUST_3','U') IS NOT NULL
					DROP TABLE #CUST_3	
					
					SELECT * INTO #CUST_2 
				    FROM #CUST_XNS
				    WHERE 1=2
			  		
				IF @NPENDING=1
				BEGIN					
				--FOR RUNNIG TOTAL CALCULATION
					INSERT INTO #CUST_2
					SELECT * 
					FROM #CUST_XNS
					ORDER BY XN_DT,XN_ORDER,XN_NO
				END
				ELSE
				BEGIN 
				   
				   IF @CDEPT_ID=''
				   SET @CDEPT_ID=@TRAN_DEPT_ID
					DECLARE   @TBLPENDINGCUS TABLE (NARRATION VARCHAR(100),XN_TYPE VARCHAR(10),MEMO_ID VARCHAR(50),MEMO_NO VARCHAR(20),MEMO_DT DATETIME,CUSTOMER_CODE VARCHAR(20) )
					INSERT INTO @TBLPENDINGCUS
					EXEC SP3S_CUSTOMERPENDINGLIST @CDEPT_ID,@CCUS_CODE,@DTO_DT,@BORDER_XN
					--DROP TABLE TMP1
					--SELECT * INTO TMP1 FROM @TBLPENDINGCUS
					
					--SELECT * INTO TMP2 FROM #CUST_XNS
					
					INSERT INTO #CUST_2
				   	SELECT A.* 
				    FROM #CUST_XNS A
				    JOIN @TBLPENDINGCUS B ON A.XN_ID=B.MEMO_ID AND A.CUSTOMER_CODE=B.CUSTOMER_CODE
				    AND A.NARRATION= CASE WHEN ISNULL(B.NARRATION,'')<>'' THEN ISNULL(B.NARRATION,'') ELSE A.NARRATION END 
				    ORDER BY XN_DT,XN_ORDER,XN_NO
				END 
				
				--ALTER TABLE #CUST_2 ADD ID INT IDENTITY
				ALTER TABLE #CUST_2 ADD  ID INT
				
				;WITH CTE AS
				(
				 SELECT *,row_number() over (order by XN_DT,XN_NO,DR_AMOUNT,CR_AMOUNT) AS SR  FROM #CUST_2
				)
				UPDATE  CTE SET ID=SR
				


				
				--SELECT * FROM #CUST_XNS
				SELECT   A.NARRATION AS XN_TYPE
						,A.XN_NO AS MEMO_NO
						,A.XN_ID AS MEMO_ID
						,A.XN_DT  AS MEMO_DT
						,A.CR_AMOUNT AS CR_AMT
						,A.DR_AMOUNT AS DR_AMT
						,(	
							SELECT SUM(DR_AMOUNT-CR_AMOUNT) 
							FROM #CUST_2 B 
							WHERE B.ID<=A.ID
						 )  AS NET
						 ,A.ID
				INTO #CUST_3		 
				FROM #CUST_2 A 
				UNION ALL
				SELECT   'BALANCE' AS XN_TYPE
						,'' AS MEMO_NO
						,'' AS MEMO_ID
						,'' AS MEMO_DT
						,SUM(A.CR_AMOUNT) AS CR_AMT
						,SUM(A.DR_AMOUNT) AS DR_AMT
						,SUM(A.DR_AMOUNT)-SUM(A.CR_AMOUNT) AS NET
						,100 AS ID
						FROM #CUST_2 A 
				
				SELECT XN_TYPE,MEMO_NO,MEMO_ID,MEMO_DT,CR_AMT,DR_AMT
					  ,(CASE WHEN NET>=0 THEN LTRIM(RTRIM(STR(NET,18,2)))+' DR' ELSE LTRIM(RTRIM(STR(ABS(NET),18,2)))+' CR' END) AS NET
					  ,id
				FROM #CUST_3
				order by id		 
						
				RETURN
		END
	END
	ELSE IF @NRETURNCBS=3
	BEGIN
		--PROCEDURE CALLED FROM SP3S_SALEPERSON_CUSBAL TO SHOW NET CLOSING BALANCE OF CUSTOMER
		INSERT #EMP_CUST_BAL(CUSTOMER_CODE,BALANCE)
		SELECT b.mobile  CUSTOMER_CODE,ISNULL((SUM(DR_AMOUNT)-SUM(CR_AMOUNT)),0) AS CLOSING_BALANCE
		FROM #CUST_XNS A
		join @CCUSTDETAILS b on a.customer_code =b.customer_code 
		WHERE XN_DT<=@DTO_DT
		GROUP BY b.mobile
		RETURN
	END
	

	---THIS TABLE WILL STORE CUSTOMERS WHO DOESNOT HAVE ZERO BALANCE
		IF OBJECT_ID('TEMPDB..#ZEROBALANCE','U') IS NOT NULL
			DROP TABLE #ZEROBALANCE
		
		SELECT a.CUSTOMER_CODE CUSTOMER_CODE 
		INTO #ZEROBALANCE
		FROM #CUST_XNS A
		WHERE XN_DT<=@DTO_DT
		GROUP BY a.CUSTOMER_CODE  
		HAVING SUM(DR_AMOUNT-CR_AMOUNT)<>0
						
		IF OBJECT_ID('TEMPDB..#CUST_SUM','U') IS NOT NULL	
			DROP TABLE #CUST_SUM		
			
		SELECT a.customer_code   CUSTOMER_CODE
			  ,SUM( CASE WHEN XN_DT < @DFROM_DT THEN (DR_AMOUNT-CR_AMOUNT) ELSE 0 END ) AS OPENING_AMOUNT 
			  ,SUM( CASE WHEN XN_DT BETWEEN @DFROM_DT AND @DTO_DT THEN (DR_AMOUNT) ELSE 0 END ) AS DR_AMOUNT 
			  ,SUM( CASE WHEN XN_DT BETWEEN  @DFROM_DT AND @DTO_DT THEN (CR_AMOUNT) ELSE 0 END ) AS CR_AMOUNT
			  ,SUM(DR_AMOUNT-CR_AMOUNT) AS BALANCE_AMOUNT
		INTO #CUST_SUM
		FROM #CUST_XNS A
		--join @CCUSTDETAILS b on a.customer_code =b.CUSTOMER_CODE 
		WHERE XN_DT<=@DTO_DT
		GROUP BY a.customer_code 
		HAVING (SUM( CASE WHEN XN_DT < @DFROM_DT THEN (DR_AMOUNT-CR_AMOUNT) ELSE 0 END ) <>0 OR
		SUM( CASE WHEN XN_DT BETWEEN @DFROM_DT AND @DTO_DT THEN (DR_AMOUNT) ELSE 0 END )<>0 OR
		SUM( CASE WHEN XN_DT BETWEEN  @DFROM_DT AND @DTO_DT THEN (CR_AMOUNT) ELSE 0 END )<>0)
					

		---CASE OF SINGLE CUSTOMER
		IF ISNULL(@CCUS_CODE,'')<>''
		BEGIN

			SET @DTSQL=N'SELECT  1 AS RESULT_TYPE,'''' AS SALES_PERSON
							,(CASE WHEN ISNULL(CUS.CUSTOMER_FNAME,'''')='''' THEN '''' ELSE CUS.CUSTOMER_FNAME+'' '' END)+
							ISNULL(CUS.CUSTOMER_LNAME,'''')+(CASE WHEN ISNULL(CUS.CUSTOMER_FNAME,'''')+ISNULL(CUS.CUSTOMER_LNAME,'''')<>'''' THEN CASE WHEN ISNULL(CUS.MOBILE,'''')<>'''' 
							THEN '' - ''+ISNULL(CUS.MOBILE,'''') ELSE '''' END ELSE ISNULL(CUS.MOBILE,'''') END) AS CUSTOMER_NAME
							,CUS.USER_CUSTOMER_CODE,CUS.MOBILE,''TOTAL'' AS XN_NO,CAST('''' AS DATETIME) AS XN_DT,0 AS BILL_AMOUNT
							,'''' AS NARRATION,0 AS RECEIVED_AMOUNT
							,ISNULL(DR_AMOUNT,0) AS DR_AMOUNT
							,ISNULL(CR_AMOUNT,0) AS CR_AMOUNT,BALANCE_AMOUNT 	
							,ISNULL(OPENING_AMOUNT,0) AS OPENING_BALANCE
							,0 AS DISCOUNT_AMOUNT,0 AS XN_AMOUNT
							,CONVERT(DATETIME,'''') AS DT
							,CONVERT(NUMERIC(1),0) AS XN_ORDER
							,'''' AS XN_ID
							,'''' AS DESCRIPTION
							,0 AS QUANTITY
							,0 AS MRP
							,0 AS DISCOUNT
							,0 AS NET
							,''BALANCE'' AS XN_TYPE
							,1 AS ID
							,CUS.CUSTOMER_CODE '+
							(CASE WHEN @NMODE=1 THEN ' ,CUS.ADDRESS0,CUS.ADDRESS1,CUS.ADDRESS2,CUS.ADDRESS9,
					          CAR.AREA_NAME,CCT.CITY,GM.GST_STATE_NAME ' ELSE '' END) +
							' FROM #CUST_SUM A '+
							(CASE WHEN @BCZB=0 THEN ' JOIN #ZEROBALANCE B ON A.CUSTOMER_CODE=B.CUSTOMER_CODE ' ELSE '' END) 
							+' JOIN custdym CUS ON A.CUSTOMER_CODE=CUS.CUSTOMER_CODE 
							'+
							(CASE WHEN @NMODE=1 THEN ' LEFT JOIN AREA CAR (NOLOCK) ON CAR.AREA_CODE=CUS.AREA_CODE
							LEFT JOIN CITY CCT (NOLOCK) ON CCT.CITY_CODE=CAR.CITY_CODE
							LEFT JOIN GST_STATE_MST GM (NOLOCK) ON GM.gst_state_code=CUS.cus_gst_state_code ' ELSE '' END) 
				
			    --CASE OF ONLY SUMMARY
				IF @NMODE=1
				BEGIN
					 SET @DTSQL=@DTSQL+N' ORDER BY CUSTOMER_NAME,RESULT_TYPE'
					 EXEC SP_EXECUTESQL @DTSQL
					 GOTO END_PROC
				END	
				--CASE OF SUMMARY WITH DETAILS
				ELSE
				BEGIN
					IF OBJECT_ID('TEMPDB..#CUSBAL','U') IS NOT NULL
						DROP TABLE #CUSBAL
						
				    CREATE TABLE #CUSBAL(RESULT_TYPE NUMERIC(1),SALES_PERSON VARCHAR(300),CUSTOMER_NAME VARCHAR(300)
									,USER_CUSTOMER_CODE VARCHAR(100),MOBILE VARCHAR(50),XN_NO VARCHAR(30)
									,XN_DT DATETIME,BILL_AMOUNT NUMERIC(18,2),NARRATION VARCHAR(300)
									,RECEIVED_AMOUNT NUMERIC(18,2),DR_AMOUNT NUMERIC(18,2),CR_AMOUNT NUMERIC(18,2)
									,BALANCE_AMOUNT NUMERIC(18,2),OPENING_BALANCE NUMERIC(18,2),DISCOUNT_AMOUNT NUMERIC(18,2)
									,XN_AMOUNT NUMERIC(18,2),DT DATETIME,XN_ORDER NUMERIC(2),XN_ID VARCHAR(50)
									,DESCRIPTION VARCHAR(500),QUANTITY NUMERIC(18,3),MRP NUMERIC(18,2)
									,DISCOUNT NUMERIC(18,2),NET NUMERIC(18,2),XN_TYPE VARCHAR(20),ID INT
								    ,CUSTOMER_CODE VARCHAR(20))	
									
					--CASE OF SINGLE CUSTOMER.....
				   IF OBJECT_ID('TEMPDB..#CUST_OPS','U') IS NOT NULL
						DROP TABLE #CUST_OPS
						
					SELECT CUSTOMER_CODE,		
						   (SUM(DR_AMOUNT)-SUM(CR_AMOUNT)) AS OPENING_AMOUNT
					INTO #CUST_OPS
					FROM #CUST_XNS
					WHERE XN_DT<@DFROM_DT
					GROUP BY CUSTOMER_CODE
						
					IF OBJECT_ID('TEMPDB..#CUST_1','U') IS NOT NULL
						DROP TABLE #CUST_1
			
					CREATE TABLE #CUST_1(ID INT IDENTITY(1,1),CUSTOMER_CODE VARCHAR(20),XN_TYPE VARCHAR(20),NARRATION VARCHAR(200)
						,XN_NO VARCHAR(20),XN_ID VARCHAR(50),XN_DT DATETIME,DR_AMOUNT NUMERIC(18,2),CR_AMOUNT NUMERIC(18,2)
						,ADJ_BILL_NO VARCHAR(50),EMP_CODE VARCHAR(20),BILLAMT NUMERIC(18,2)
						,RECEIVED_AMOUNT NUMERIC(18,2),DISCOUNT_AMOUNT NUMERIC(18,2),XN_AMOUNT NUMERIC(18,2),XN_ORDER NUMERIC(10,2))
					
					INSERT #CUST_1(CUSTOMER_CODE,XN_TYPE,NARRATION,XN_NO,XN_ID,XN_DT,DR_AMOUNT,CR_AMOUNT,ADJ_BILL_NO,EMP_CODE
								  ,BILLAMT,RECEIVED_AMOUNT,DISCOUNT_AMOUNT,XN_AMOUNT,XN_ORDER)
					SELECT CUSTOMER_CODE,XN_TYPE,NARRATION,XN_NO,XN_ID,XN_DT,DR_AMOUNT,CR_AMOUNT,ADJ_BILL_NO,EMP_CODE,BILLAMT
						  ,RECEIVED_AMOUNT,DISCOUNT_AMOUNT,XN_AMOUNT,XN_ORDER
					FROM #CUST_XNS
					WHERE XN_DT BETWEEN @DFROM_DT AND @DTO_DT
					ORDER BY XN_DT,XN_ORDER,XN_NO
					
				

					DECLARE @NOPBAL VARCHAR(20)
					SELECT @NOPBAL=ISNULL(OPENING_AMOUNT,0) FROM #CUST_OPS
					SET @NOPBAL=ISNULL(@NOPBAL,0)			
					
				
					SET @DTSQL=@DTSQL+N' UNION ALL
								SELECT  2 AS RESULT_TYPE,ISNULL(EMP.EMP_NAME,'''') AS SALES_PERSON
									   ,(CASE WHEN ISNULL(CUS.CUSTOMER_FNAME,'''')='''' THEN '''' ELSE CUS.CUSTOMER_FNAME+'' '' END)+
										 ISNULL(CUS.CUSTOMER_LNAME,'''')+(CASE WHEN ISNULL(CUS.CUSTOMER_FNAME,'''')+ISNULL(CUS.CUSTOMER_LNAME,'''')<>'''' THEN CASE WHEN ISNULL(CUS.MOBILE,'''')<>'''' 
										 THEN '' - ''+ISNULL(CUS.MOBILE,'''') ELSE '''' END ELSE ISNULL(CUS.MOBILE,'''') END) AS CUSTOMER_NAME
									   ,CUS.USER_CUSTOMER_CODE,CUS.MOBILE
									   ,XN_NO
									   ,XN_DT AS XN_DT
									   ,CONVERT(NUMERIC(18,2),BILLAMT) AS BILL_AMOUNT
									   ,NARRATION
									   ,RECEIVED_AMOUNT
									   ,A.DR_AMOUNT
									   ,A.CR_AMOUNT
									   ,(	
											SELECT ISNULL('+@NOPBAL+',0)+SUM(DR_AMOUNT-CR_AMOUNT) 
											FROM #CUST_1 B 
											WHERE B.ID<=A.ID
										)  AS BALANCE_AMOUNT
									   ,0 AS OPENING_BALANCE	
									   ,A.DISCOUNT_AMOUNT
									   ,A.XN_AMOUNT	
									   ,A.XN_DT AS DT
									   ,A.XN_ORDER					
									   ,A.XN_ID
									   ,'''' AS DESCRIPTION
									   ,0 AS QUANTITY
									   ,0 AS MRP
									   ,0 AS DISCOUNT
									   ,0 AS NET
									   ,A.XN_TYPE
									   ,A.ID
							           ,CUS.CUSTOMER_CODE
								FROM #CUST_1 A '
								+(CASE WHEN @BCZB=0 THEN ' JOIN #ZEROBALANCE B ON A.CUSTOMER_CODE=B.CUSTOMER_CODE ' ELSE '' END) 
								+' LEFT JOIN EMPLOYEE EMP ON A.EMP_CODE=EMP.EMP_CODE 
								LEFT JOIN CUSTDYM CUS ON A.CUSTOMER_CODE=CUS.CUSTOMER_CODE
								'
								PRINT @DTSQL

							
					   
					   INSERT #CUSBAL(RESULT_TYPE,SALES_PERSON,CUSTOMER_NAME,USER_CUSTOMER_CODE,MOBILE,XN_NO,XN_DT,BILL_AMOUNT
									 ,NARRATION,RECEIVED_AMOUNT,DR_AMOUNT,CR_AMOUNT,BALANCE_AMOUNT,OPENING_BALANCE,DISCOUNT_AMOUNT
									 ,XN_AMOUNT,DT,XN_ORDER,XN_ID,DESCRIPTION,QUANTITY,MRP,DISCOUNT,NET,XN_TYPE,ID,
									 CUSTOMER_CODE  )
					   EXEC SP_EXECUTESQL @DTSQL
					   
					   
					   IF OBJECT_ID('TEMPDB..#FINAL_CUSBAL','U') IS NOT NULL
							DROP TABLE #FINAL_CUSBAL
						
					   CREATE TABLE #FINAL_CUSBAL(RESULT_TYPE NUMERIC(1),SALES_PERSON VARCHAR(300),CUSTOMER_NAME VARCHAR(300)
									,USER_CUSTOMER_CODE VARCHAR(100),MOBILE VARCHAR(50),XN_NO VARCHAR(30)
									,XN_DT DATETIME,BILL_AMOUNT NUMERIC(18,2),NARRATION VARCHAR(300)
									,RECEIVED_AMOUNT NUMERIC(18,2),DR_AMOUNT NUMERIC(18,2),CR_AMOUNT NUMERIC(18,2)
									,BALANCE_AMOUNT NUMERIC(18,2),OPENING_BALANCE NUMERIC(18,2),DISCOUNT_AMOUNT NUMERIC(18,2)
									,XN_AMOUNT NUMERIC(18,2),DT DATETIME,XN_ORDER NUMERIC(2),XN_ID VARCHAR(50)
									,DESCRIPTION VARCHAR(500),QUANTITY NUMERIC(18,3),MRP NUMERIC(18,2)
									,DISCOUNT NUMERIC(18,2),NET NUMERIC(18,2),XN_TYPE VARCHAR(20),ID INT,CUSTOMER_CODE VARCHAR(15))	
					   
					   --INSERTING XNS OTHER THAN SLS AND BO, AS SLS AND BO ONLY HAVE PRODUCT_CODES
					   INSERT #FINAL_CUSBAL(RESULT_TYPE,SALES_PERSON,CUSTOMER_NAME,USER_CUSTOMER_CODE,MOBILE,XN_NO,XN_DT,BILL_AMOUNT
									 ,NARRATION,RECEIVED_AMOUNT,DR_AMOUNT,CR_AMOUNT,BALANCE_AMOUNT,OPENING_BALANCE,DISCOUNT_AMOUNT
									 ,XN_AMOUNT,DT,XN_ORDER,XN_ID,DESCRIPTION,QUANTITY,MRP,DISCOUNT,NET,XN_TYPE,ID,CUSTOMER_CODE)
					   SELECT RESULT_TYPE,SALES_PERSON,CUSTOMER_NAME,USER_CUSTOMER_CODE,MOBILE,XN_NO,XN_DT,BILL_AMOUNT
									 ,NARRATION,RECEIVED_AMOUNT,DR_AMOUNT,CR_AMOUNT,BALANCE_AMOUNT,OPENING_BALANCE,A.DISCOUNT_AMOUNT
									 ,XN_AMOUNT,DT,XN_ORDER,XN_ID
									 ,'' AS DESCRIPTION,0 AS QUANTITY
									 ,0 AS MRP
									 ,0 AS DISCOUNT,0 AS NET
									 ,A.XN_TYPE
									 ,A.ID
									 ,A.CUSTOMER_CODE
					   FROM #CUSBAL A 
					   WHERE A.XN_TYPE NOT IN ('SLS','BO')				 
					   
					   --INSERTING SALES DETAILS
					   INSERT #FINAL_CUSBAL(RESULT_TYPE,SALES_PERSON,CUSTOMER_NAME,USER_CUSTOMER_CODE,MOBILE,XN_NO,XN_DT,BILL_AMOUNT
									 ,NARRATION,RECEIVED_AMOUNT,DR_AMOUNT,CR_AMOUNT,BALANCE_AMOUNT,OPENING_BALANCE,DISCOUNT_AMOUNT
									 ,XN_AMOUNT,DT,XN_ORDER,XN_ID,DESCRIPTION,QUANTITY,MRP,DISCOUNT,NET,XN_TYPE,ID,CUSTOMER_CODE)
					   SELECT RESULT_TYPE,SALES_PERSON,CUSTOMER_NAME,USER_CUSTOMER_CODE,MOBILE,XN_NO,XN_DT,BILL_AMOUNT
									 ,NARRATION,RECEIVED_AMOUNT,DR_AMOUNT,CR_AMOUNT,BALANCE_AMOUNT,OPENING_BALANCE,A.DISCOUNT_AMOUNT
									 ,XN_AMOUNT,DT,XN_ORDER,XN_ID
									 ,B.PRODUCT_CODE+' '+F.SECTION_NAME+' '+E.SUB_SECTION_NAME AS DESCRIPTION,B.QUANTITY AS QUANTITY
									 ,B.MRP AS MRP
									 ,(B.DISCOUNT_AMOUNT+B.CMM_DISCOUNT_AMOUNT) AS DISCOUNT,B.NET
									 ,A.XN_TYPE
									 ,A.ID,A.CUSTOMER_CODE
					   FROM #CUSBAL A 
					   LEFT JOIN CMD01106 B ON A.XN_ID=B.CM_ID 
					   LEFT JOIN SKU C ON B.PRODUCT_CODE=C.PRODUCT_CODE 
					   LEFT JOIN ARTICLE D ON C.ARTICLE_CODE=D.ARTICLE_CODE
					   LEFT JOIN SECTIOND E ON D.SUB_SECTION_CODE=E.SUB_SECTION_CODE
					   LEFT JOIN SECTIONM F ON E.SECTION_CODE=F.SECTION_CODE
					   WHERE A.XN_TYPE='SLS'
					   
					   --INSERTING BUYERORDER DETAILS
					   INSERT #FINAL_CUSBAL(RESULT_TYPE,SALES_PERSON,CUSTOMER_NAME,USER_CUSTOMER_CODE,MOBILE,XN_NO,XN_DT,BILL_AMOUNT
									 ,NARRATION,RECEIVED_AMOUNT,DR_AMOUNT,CR_AMOUNT,BALANCE_AMOUNT,OPENING_BALANCE,DISCOUNT_AMOUNT
									 ,XN_AMOUNT,DT,XN_ORDER,XN_ID,DESCRIPTION,QUANTITY,MRP,DISCOUNT,NET,XN_TYPE,ID,CUSTOMER_CODE)
					   SELECT RESULT_TYPE,SALES_PERSON,CUSTOMER_NAME,USER_CUSTOMER_CODE,MOBILE,XN_NO,XN_DT,BILL_AMOUNT
									 ,NARRATION,RECEIVED_AMOUNT,DR_AMOUNT,CR_AMOUNT,BALANCE_AMOUNT,OPENING_BALANCE,A.DISCOUNT_AMOUNT
									 ,XN_AMOUNT,DT,XN_ORDER,XN_ID
									 ,B.PRODUCT_CODE+' '+F.SECTION_NAME+' '+E.SUB_SECTION_NAME AS DESCRIPTION,B.QUANTITY AS QUANTITY
									 ,B.GROSS_WSP AS MRP
									 ,(B.DISCOUNT_AMOUNT+ISNULL(B.ORD_MST_DISCOUNT_AMOUNT,0)) AS DISCOUNT
									 ,B.WS_PRICE AS NET,A.XN_TYPE,A.ID,A.CUSTOMER_CODE
					   FROM #CUSBAL A 
					   JOIN WSL_ORDER_DET B ON A.XN_ID=B.ORDER_ID
					   JOIN ARTICLE D ON B.ARTICLE_CODE=D.ARTICLE_CODE
					   JOIN SECTIOND E ON D.SUB_SECTION_CODE=E.SUB_SECTION_CODE
					   JOIN SECTIONM F ON E.SECTION_CODE=F.SECTION_CODE
					   WHERE A.XN_TYPE='BO'
					 
					   SELECT a.* ,
					   CUS.ADDRESS0,CUS.ADDRESS1,CUS.ADDRESS2,CUS.ADDRESS9,
					   CAR.AREA_NAME,CCT.CITY,GM.GST_STATE_NAME
					   FROM #FINAL_CUSBAL a
					   LEFT JOIN CUSTDYM CUS (NOLOCK) ON A.CUSTOMER_CODE =CUS.CUSTOMER_CODE 
					   LEFT JOIN AREA CAR (NOLOCK) ON CAR.AREA_CODE=cus.AREA_CODE
					   LEFT JOIN CITY CCT (NOLOCK) ON CCT.CITY_CODE=CAR.CITY_CODE
					   LEFT JOIN GST_STATE_MST GM (NOLOCK) ON GM.gst_state_code=cus.cus_gst_state_code
					   ORDER BY RESULT_TYPE desc,ID ASC
					    
					   GOTO END_PROC
				END
		END
		--CASE OF ALL CUSTOMERS
		ELSE
		BEGIN
			SET @DTSQL=N'SELECT  1 AS RESULT_TYPE,'''' AS SALES_PERSON
							,(CASE WHEN ISNULL(CUS.CUSTOMER_FNAME,'''')='''' THEN '''' ELSE CUS.CUSTOMER_FNAME+'' '' END)+
							ISNULL(CUS.CUSTOMER_LNAME,'''')+(CASE WHEN ISNULL(CUS.CUSTOMER_FNAME,'''')+ISNULL(CUS.CUSTOMER_LNAME,'''')<>'''' THEN CASE WHEN ISNULL(CUS.MOBILE,'''')<>'''' 
							THEN '' - ''+ISNULL(CUS.MOBILE,'''') ELSE '''' END ELSE ISNULL(CUS.MOBILE,'''') END) AS CUSTOMER_NAME
							,CUS.USER_CUSTOMER_CODE,CUS.MOBILE,''TOTAL'' AS XN_NO,CAST('''' as DATETIME) AS XN_DT,0 AS BILL_AMOUNT
							,'''' AS NARRATION,0 AS RECEIVED_AMOUNT
							,ISNULL(DR_AMOUNT,0) AS DR_AMOUNT
							,ISNULL(CR_AMOUNT,0) AS CR_AMOUNT,BALANCE_AMOUNT 	
							,ISNULL(OPENING_AMOUNT,0) AS OPENING_BALANCE
							,0 AS DISCOUNT_AMOUNT,0 AS XN_AMOUNT
							,CONVERT(DATETIME,'''') AS DT
							,CONVERT(NUMERIC(1),0) AS XN_ORDER
							,'''' AS XN_ID
							,'''' AS DESCRIPTION
							,0 AS QUANTITY
							,0 AS MRP
							,0 AS DISCOUNT
							,0 AS NET
							,''BALANCE'' AS XN_TYPE,
							CUS.ADDRESS0,CUS.ADDRESS1,CUS.ADDRESS2,CUS.ADDRESS9,
							CAR.AREA_NAME,
							CCT.CITY,
							GM.GST_STATE_NAME
							FROM #CUST_SUM A '+
							(CASE WHEN @BCZB=0 THEN ' JOIN #ZEROBALANCE B ON A.CUSTOMER_CODE=B.CUSTOMER_CODE ' ELSE '' END) 
							+' JOIN CUSTDYM CUS ON A.CUSTOMER_CODE=CUS.CUSTOMER_CODE 
							LEFT JOIN AREA CAR (NOLOCK) ON CAR.AREA_CODE=CUS.AREA_CODE
							LEFT JOIN CITY CCT (NOLOCK) ON CCT.CITY_CODE=CAR.CITY_CODE
							LEFT JOIN GST_STATE_MST GM (NOLOCK) ON GM.gst_state_code=CUS.cus_gst_state_code
							'
			
			--CASE OF ONLY SUMMARY
			IF @NMODE=1
			BEGIN
				 SET @DTSQL=@DTSQL+N' ORDER BY CUSTOMER_NAME,RESULT_TYPE'
				 EXEC SP_EXECUTESQL @DTSQL
				 
				 GOTO END_PROC
			END
			---ALL CUSTOMERS WITH ALL TRANSACTION DETAILS
			ELSE
			BEGIN

				SET @DTSQL=@DTSQL+N' UNION ALL 
							SELECT  2 AS RESULT_TYPE,EMP.EMP_NAME AS SALES_PERSON
						   ,(CASE WHEN ISNULL(CUS.CUSTOMER_FNAME,'''')='''' THEN '''' ELSE CUS.CUSTOMER_FNAME+'' '' END)+
					        ISNULL(CUS.CUSTOMER_LNAME,'''')+(CASE WHEN ISNULL(CUS.CUSTOMER_FNAME,'''')+ISNULL(CUS.CUSTOMER_LNAME,'''')<>'''' THEN CASE WHEN ISNULL(CUS.MOBILE,'''')<>'''' 
					        THEN '' - ''+ISNULL(CUS.MOBILE,'''') ELSE '''' END ELSE ISNULL(CUS.MOBILE,'''') END) AS CUSTOMER_NAME
						   ,CUS.USER_CUSTOMER_CODE,CUS.MOBILE
						   ,XN_NO
						   ,XN_DT AS XN_DT
						   ,CONVERT(NUMERIC(18,2),BILLAMT) AS BILL_AMOUNT
						   ,NARRATION,RECEIVED_AMOUNT,A.DR_AMOUNT,A.CR_AMOUNT,0  AS BALANCE_AMOUNT
						   ,0 AS OPENING_BALANCE
						   ,A.DISCOUNT_AMOUNT
						   ,A.XN_AMOUNT
						   ,A.XN_DT AS DT
						   ,A.XN_ORDER
						   ,A.XN_ID
						   ,'''' AS DESCRIPTION
						   ,0 AS QUANTITY
						   ,0 AS MRP
						   ,0 AS DISCOUNT
						   ,0 AS NET
						   ,A.XN_TYPE
						   ,CUS.ADDRESS0,CUS.ADDRESS1,CUS.ADDRESS2,CUS.ADDRESS9
						   ,CAR.AREA_NAME
						   ,CCT.CITY
						   ,GM.GST_STATE_NAME
					FROM #CUST_XNS A 
					JOIN #CUST_SUM B ON A.CUSTOMER_CODE=B.CUSTOMER_CODE '+
					+(CASE WHEN @BCZB=0 THEN ' JOIN #ZEROBALANCE B1 ON A.CUSTOMER_CODE=B1.CUSTOMER_CODE ' ELSE '' END) 
					+' LEFT JOIN EMPLOYEE EMP ON A.EMP_CODE=EMP.EMP_CODE 
					JOIN CUSTDYM CUS ON A.CUSTOMER_CODE=CUS.CUSTOMER_CODE
					LEFT JOIN AREA CAR (NOLOCK) ON CAR.AREA_CODE=CUS.AREA_CODE
					LEFT JOIN CITY CCT (NOLOCK) ON CCT.CITY_CODE=CAR.CITY_CODE
					LEFT JOIN GST_STATE_MST GM (NOLOCK) ON GM.gst_state_code=CUS.cus_gst_state_code
					WHERE XN_DT>='''+CONVERT(VARCHAR(15),@DFROM_DT,110)+''' 
					ORDER BY CUSTOMER_NAME,USER_CUSTOMER_CODE ASC,RESULT_TYPE DESC,DT,XN_ORDER,XN_NO'	
					
					PRINT @DTSQL 
					EXEC SP_EXECUTESQL @DTSQL
					


				
					
					GOTO END_PROC
			END
		END
END TRY
BEGIN CATCH
	SET @CERRMSG='PROCEDURE - SP3S_CUSTOMERBALANCE, STEP - '+@CSTEP+', MESSAGE - '+ERROR_MESSAGE()
END CATCH
END_PROC:
	IF ISNULL(@CERRMSG,'')<>''
		SELECT @CERRMSG AS ERRMSG 
END
--END OF PROCEDURE - SP3S_CUSTOMERBALANCE
