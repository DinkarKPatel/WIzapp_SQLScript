create PROCEDURE SP_MERGEMSTUSRDATA
(
	@NSPID INT
)
--WITH ENCRYPTION
AS
BEGIN
--(dinkar) Replace  left(memoid,2) to Location_code 
	
	BEGIN TRY
		
		DECLARE @CERRORMSG VARCHAR(1000),@CCURDEPTID CHAR(4),@CHODEPTID CHAR(4),@CCMD NVARCHAR(MAX),
				@CXNMASTERTABLENAME VARCHAR(100),@BPROCEED BIT,@CTABLENAME VARCHAR(100),@CMASTERKEYFIELD VARCHAR(100),
				@CKEYFIELD VARCHAR(100),@CPARENTTABLENAME VARCHAR(100),@CPARENTPARANAME VARCHAR(100),@CCHILDPARANAME VARCHAR(100),
				@CWHERECLAUSE VARCHAR(100),@CJOINSTR VARCHAR(1000),@CMEMOID VARCHAR(100),@CFINYEAR VARCHAR(100),
				@NGRPCHARS INT,@NSERIESCHARS INT,@BSERIESBROKEN BIT,@CPREVMEMOID VARCHAR(40),@CMERGETABLENAME VARCHAR(50),
				@CFIRSTMEMOID VARCHAR(40),@NPREVMEMOID INT,@NMEMONOLEN INT,@CRETCMD NVARCHAR(MAX),
				@CDELCHILDTABLENAME VARCHAR(100),@CDELCHILDPARANAME VARCHAR(100),@CDELPARENTPARANAME VARCHAR(100),
				@CORIGINALTABLENAME VARCHAR(100),@NLOCTYPE INT,@BDONOTMERGE BIT,@CRFXNTYPE VARCHAR(10),@BHOLOC BIT,
				@BINSERTONLY BIT,@BLINKEDMASTER BIT,@BPURLOC BIT,@CSOURCELOCID CHAR(2),@BSOURCEPURLOC BIT,
				@CMISSINGMEMOID VARCHAR(40),@CGRPCODE VARCHAR(20),@BRETVAL BIT,@NPREVNO INT,@CPREVNO VARCHAR(20),
				@BEMPHEADSUPDATED BIT,@CFILTERCONDITION VARCHAR(100),@CTABLEPREFIX VARCHAR(100),@CXNTYPE VARCHAR(10),
				@NXNSMERGINGORDER INT,@NSTEP INT,@CKEYFIELD2 VARCHAR(100),@BMIRRORINGENABLED BIT,@CUSERMERGINGTHRUWIZCOM VARCHAR(2)
		
		
		SET @NSTEP=10	
		
		DECLARE @TRETMSG TABLE  (MEMO_ID VARCHAR(40),ERRMSG VARCHAR(MAX))

				
		SELECT @CERRORMSG='',@BPROCEED=1,@NMEMONOLEN=10,@CRETCMD='',@CMEMOID='',@CXNTYPE='MSTUSRROLE',@BEMPHEADSUPDATED=0
		
		SET @CTABLEPREFIX='TMP_MSTUSRROLE'
		
		
		SET @NSTEP=20
		
		SELECT @CCURDEPTID = VALUE FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID'
		SELECT @CHODEPTID = VALUE FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		
		
		IF @CCURDEPTID=@CHODEPTID
			SET @BHOLOC=1

		IF EXISTS (SELECT TOP 1 CONFIG_OPTION FROM CONFIG WHERE 
				   CONFIG_OPTION='MIRROR_SERVER_IP' AND VALUE<>'')
			SET @BMIRRORINGENABLED=1
		ELSE
			SET @BMIRRORINGENABLED=0

		IF @BMIRRORINGENABLED=1
		BEGIN

			SELECT TOP 1 @CUSERMERGINGTHRUWIZCOM=VALUE FROM CONFIG WHERE CONFIG_OPTION='MSTUSR_THRU_WIZCOM'
			
			
			IF ISNULL(@CUSERMERGINGTHRUWIZCOM,'')<>'1'
			BEGIN
				SET @CERRORMSG='USER MASTER MERGING SHIFTED TO MIRRORSERVICE....'
				GOTO END_PROC
			END	
		END
				
		SELECT @NLOCTYPE=LOC_TYPE,@BPURLOC=PUR_LOC FROM LOCATION (NOLOCK) WHERE DEPT_ID=@CCURDEPTID
		
		SET @NSTEP=30		
		
		SELECT TOP 1 @CXNMASTERTABLENAME=TABLENAME,@CMASTERKEYFIELD=KEYFIELD FROM XNSINFO (NOLOCK) WHERE XN_TYPE=@CXNTYPE
		AND XNS_MERGING_ORDER NOT IN (0,99)  ORDER BY XNS_SENDING_ORDER

		SET @CXNMASTERTABLENAME=ISNULL(@CXNMASTERTABLENAME,'')
		
		SET @CMEMOID='MSTUSRROLE'
		
		SET @NSTEP=40
		
		LBLMERGEBEFORE:

		BEGIN TRANSACTION		
		
		IF @CERRORMSG = ''
		BEGIN
		
		    SET @NSTEP=50
			
			---- LOC_EMP--------- DELETE WHERE LOCATION DOES NOT EXISTS
			SET @CCMD=N'IF OBJECT_ID(''TMP_MSTUSRROLE_LOC_EMP_'+LTRIM(RTRIM(STR(@NSPID)))+''',''U'') IS NOT NULL	
							DELETE FROM TMP_MSTUSRROLE_LOC_EMP_'+LTRIM(RTRIM(STR(@NSPID)))+' WITH (ROWLOCK)
							WHERE DEPT_ID<>'''+@CCURDEPTID+''''
			PRINT @CCMD				
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP=5
		
		    SET @CCMD=N'IF OBJECT_ID(''TMP_MSTUSRROLE_EMPLOYEE_'+LTRIM(RTRIM(STR(@NSPID)))+''',''U'') IS NOT NULL	
		                    AND OBJECT_ID(''TMP_MSTUSRROLE_LOC_EMP_'+LTRIM(RTRIM(STR(@NSPID)))+''',''U'') IS NOT NULL
							DELETE A FROM TMP_MSTUSRROLE_EMPLOYEE_'+LTRIM(RTRIM(STR(@NSPID)))+' A WITH (ROWLOCK)
							LEFT JOIN TMP_MSTUSRROLE_LOC_EMP_'+LTRIM(RTRIM(STR(@NSPID)))+' B (NOLOCK) ON A.EMP_CODE=B.EMP_CODE
							WHERE ISNULL(B.DEPT_ID,'''')<>'''+@CCURDEPTID+''''
			PRINT @CCMD				
			EXEC SP_EXECUTESQL @CCMD	
			
			--SET @CCMD=N'IF OBJECT_ID(''TMP_MSTUSRROLE_EMPLOYEE_'+LTRIM(RTRIM(STR(@NSPID)))+''',''U'') IS NOT NULL
			--				AND OBJECT_ID(''TMP_MSTUSRROLE_LOC_EMP_'+LTRIM(RTRIM(STR(@NSPID)))+''',''U'') IS NOT NULL	
			--			DELETE FROM TMP_MSTUSRROLE_EMPLOYEE_'+LTRIM(RTRIM(STR(@NSPID)))+'
			--			WHERE EMP_CODE NOT IN (SELECT EMP_CODE FROM TMP_MSTUSRROLE_LOC_EMP_'+LTRIM(RTRIM(STR(@NSPID)))+'
			--			WHERE DEPT_ID='''+@CCURDEPTID+''') AND EMP_HEAD NOT IN (SELECT B.EMP_HEAD FROM TMP_MSTUSRROLE_LOC_EMP_'+LTRIM(RTRIM(STR(@NSPID)))+' A
			--			JOIN TMP_MSTUSRROLE_EMPLOYEE_'+LTRIM(RTRIM(STR(@NSPID)))+' B ON A.EMP_CODE=B.EMP_CODE
			--			WHERE DEPT_ID='''+@CCURDEPTID+''')'
			--PRINT @CCMD				
			--EXEC SP_EXECUTESQL @CCMD

			SET @NSTEP=30
		
		    SET @CCMD=N'IF OBJECT_ID(''TMP_MSTUSRROLE_EMPCATEGORY_'+LTRIM(RTRIM(STR(@NSPID)))+''',''U'') IS NOT NULL	
		                    AND OBJECT_ID(''TMP_MSTUSRROLE_EMPLOYEE_'+LTRIM(RTRIM(STR(@NSPID)))+''',''U'') IS NOT NULL
		                    AND OBJECT_ID(''TMP_MSTUSRROLE_LOC_EMP_'+LTRIM(RTRIM(STR(@NSPID)))+''',''U'') IS NOT NULL
							DELETE A FROM TMP_MSTUSRROLE_EMPCATEGORY_'+LTRIM(RTRIM(STR(@NSPID)))+' A WITH (ROWLOCK)
							LEFT JOIN TMP_MSTUSRROLE_EMPLOYEE_'+LTRIM(RTRIM(STR(@NSPID)))+'
							B WITH (ROWLOCK) ON A.CATEGORY_CODE=B.CATEGORY_CODE
							LEFT JOIN TMP_MSTUSRROLE_LOC_EMP_'+LTRIM(RTRIM(STR(@NSPID)))+'
							C (NOLOCK) ON C.EMP_CODE=B.EMP_CODE
							WHERE ISNULL(C.DEPT_ID,'''')<>'''+@CCURDEPTID+''''
			PRINT @CCMD				
			EXEC SP_EXECUTESQL @CCMD		
			
			SET @NSTEP=60
			
			SET @CCMD=N'IF OBJECT_ID(''TMP_MSTUSRROLE_LOCUSERS_'+LTRIM(RTRIM(STR(@NSPID)))+''',''U'') IS NOT NULL
							DELETE A FROM TMP_MSTUSRROLE_LOCUSERS_'+LTRIM(RTRIM(STR(@NSPID)))+' A WITH (ROWLOCK)
							LEFT OUTER JOIN LOCATION LOC (NOLOCK) ON LOC.DEPT_ID=A.DEPT_ID
							WHERE ISNULL(LOC.MAJOR_DEPT_ID,'''')<>'''+@CCURDEPTID+''''
			PRINT @CCMD				
			EXEC SP_EXECUTESQL @CCMD	
			
			SET @NSTEP=70
			
			SET @CCMD=N'IF OBJECT_ID(''TMP_MSTUSRROLE_LOCUSERS_'+LTRIM(RTRIM(STR(@NSPID)))+''',''U'') IS NOT NULL
							DELETE FROM TMP_MSTUSRROLE_USERS_'+LTRIM(RTRIM(STR(@NSPID)))+' WITH (ROWLOCK) 
							WHERE USER_CODE<>''0000000''
							AND USER_CODE NOT IN (SELECT USER_CODE FROM TMP_MSTUSRROLE_LOCUSERS_'+LTRIM(RTRIM(STR(@NSPID)))+')
							AND USER_CODE NOT IN (SELECT MAJOR_USER_CODE FROM TMP_MSTUSRROLE_LOCUSERS_'+
							LTRIM(RTRIM(STR(@NSPID)))+' A JOIN TMP_MSTUSRROLE_USERS_'+LTRIM(RTRIM(STR(@NSPID)))+
							' B ON A.USER_CODE=B.USER_CODE)'
			PRINT @CCMD				
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP=75
			SET @CCMD=N'IF OBJECT_ID(''TMP_MSTUSRROLE_BINUSERS_'+LTRIM(RTRIM(STR(@NSPID)))+''',''U'') IS NOT NULL
							DELETE FROM TMP_MSTUSRROLE_BINUSERS_'+LTRIM(RTRIM(STR(@NSPID)))+' WITH (ROWLOCK) WHERE USER_CODE<>''0000000''
							AND USER_CODE NOT IN (SELECT USER_CODE FROM TMP_MSTUSRROLE_LOCUSERS_'+LTRIM(RTRIM(STR(@NSPID)))+')'
							
			PRINT @CCMD				
			EXEC SP_EXECUTESQL @CCMD

			SET @NSTEP=80
			
			SET @CCMD=N'ALTER TABLE USERS DISABLE TRIGGER TRG_USERS_CHKPWD'
			PRINT @CCMD				
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP=90
			SET @CCMD=N'UPDATE A SET USER_ALIAS=(CASE WHEN USER_ALIAS='''' THEN  '''+@CCURDEPTID+''' ELSE USER_ALIAS END)
						FROM TMP_MSTUSRROLE_USERS_'+LTRIM(RTRIM(STR(@NSPID)))+' A WITH (ROWLOCK)'

			PRINT @CCMD				
			EXEC SP_EXECUTESQL @CCMD

			SET @NSTEP=95
			SET @CCMD=N'UPDATE A SET USER_ALIAS=B.USER_ALIAS
						FROM TMP_MSTUSRROLE_USERS_'+LTRIM(RTRIM(STR(@NSPID)))+' A WITH (ROWLOCK) JOIN USERS B (NOLOCK) ON A.USER_CODE=B.USER_CODE'
			PRINT @CCMD				
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP=97

			SET @CCMD=N'DELETE FROM TMP_MSTUSRROLE_MODULES_'+LTRIM(RTRIM(STR(@NSPID)))+' WITH (ROWLOCK) WHERE USER_CODE<>''0000000'''
			EXEC SP_EXECUTESQL @CCMD
						
			SET @NSTEP=100
			SET @CCMD=N'IF OBJECT_ID(''TMP_MSTUSRROLE_LOCUSERS_'+LTRIM(RTRIM(STR(@NSPID)))+''',''U'') IS NOT NULL
							UPDATE A SET USER_CODE = C.USER_CODE FROM TMP_MSTUSRROLE_LOCUSERS_'+LTRIM(RTRIM(STR(@NSPID)))+' A WITH (ROWLOCK)
							JOIN TMP_MSTUSRROLE_USERS_'+LTRIM(RTRIM(STR(@NSPID)))+' B (NOLOCK) ON A.USER_CODE=B.USER_CODE 
							JOIN USERS C (NOLOCK) ON C.USERNAME=B.USERNAME '

			PRINT @CCMD				
			EXEC SP_EXECUTESQL @CCMD			

			SET @NSTEP=105
			
			SET @CCMD=N'IF OBJECT_ID(''TMP_MSTUSRROLE_BINUSERS_'+LTRIM(RTRIM(STR(@NSPID)))+''',''U'') IS NOT NULL
							UPDATE A SET USER_CODE = C.USER_CODE FROM TMP_MSTUSRROLE_BINUSERS_'+LTRIM(RTRIM(STR(@NSPID)))+' A WITH (ROWLOCK)
							JOIN TMP_MSTUSRROLE_USERS_'+LTRIM(RTRIM(STR(@NSPID)))+' B (NOLOCK) ON A.USER_CODE=B.USER_CODE 
							JOIN USERS C (NOLOCK) ON C.USERNAME=B.USERNAME '

			PRINT @CCMD				
			EXEC SP_EXECUTESQL @CCMD			

			SET @NSTEP=120
			--SELECT * FROM TMP_MSTUSRROLE_MODULES_70 WHERE USER_CODE='0100042' AND VALUE=1
			
			SET @CCMD=N'IF OBJECT_ID(''TMP_MSTUSRROLE_LOCUSERS_'+LTRIM(RTRIM(STR(@NSPID)))+''',''U'') IS NOT NULL
							UPDATE TMP_MSTUSRROLE_LOCUSERS_'+LTRIM(RTRIM(STR(@NSPID)))+' WITH (ROWLOCK) SET LAST_UPDATE=GETDATE()'
			PRINT @CCMD				
			EXEC SP_EXECUTESQL @CCMD
	
			
			IF @BPURLOC=0
			BEGIN
				SET @NSTEP=130
				
				SET @CCMD=N' UPDATE TMP_MSTUSRROLE_USERS_'+LTRIM(RTRIM(STR(@NSPID)))+' WITH (ROWLOCK) SET PASSWD =
							 (CASE WHEN LOC_PASSWD<>'''' THEN LOC_PASSWD ELSE PASSWD END)
							 WHERE USER_CODE =''0000000'''
				PRINT @CCMD				
				EXEC SP_EXECUTESQL @CCMD
			END

			SET @NSTEP=140
			
			SET @CCMD=N' UPDATE A SET USER_CODE = B.USER_CODE FROM TMP_MSTUSRROLE_USERS_'+LTRIM(RTRIM(STR(@NSPID)))+
					   ' A WITH (ROWLOCK) JOIN USERS B (NOLOCK) ON B.USERNAME=A.USERNAME WHERE ISNULL(B.PASSWD,'''')<>'''' AND A.USER_CODE <>''0000000'''

			PRINT @CCMD				
			EXEC SP_EXECUTESQL @CCMD

			SET @NSTEP=150
			
			
			SET @CCMD=N'UPDATE A SET PASSWD=B.PASSWD FROM TMP_MSTUSRROLE_USERS_'+LTRIM(RTRIM(STR(@NSPID)))+ ' A WITH (ROWLOCK)
					    JOIN USERS B (NOLOCK) ON B.USER_CODE=A.USER_CODE
					    JOIN TMP_MSTUSRROLE_USER_ROLE_DET_'+LTRIM(RTRIM(STR(@NSPID)))+' C (NOLOCK) ON C.ROLE_ID=B.ROLE_ID
					    WHERE C.FORM_NAME=''FRMUSERS'' AND FORM_OPTION=''CHANGE_PASSWORD'' AND C.VALUE=''1'' 
					    AND A.USER_CODE <>''0000000'''

			PRINT @CCMD				
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP=160
			
			
			SET @CCMD=N'IF OBJECT_ID(''TMP_MSTUSRROLE_MODULES_'+LTRIM(RTRIM(STR(@NSPID)))+''',''U'') IS NOT NULL
							UPDATE TMP_MSTUSRROLE_MODULES_'+LTRIM(RTRIM(STR(@NSPID)))+' WITH (ROWLOCK) SET DEPT_ID='''+@CCURDEPTID+''''
			PRINT @CCMD				
			EXEC SP_EXECUTESQL @CCMD
			
			
			SET @NSTEP=180
			
			--SELECT * FROM TMP_MSTUSRROLE_MODULES_70 WHERE USER_CODE='0100002' AND VALUE=1

			SET @CCMD=N'IF OBJECT_ID(''TMP_MSTUSRROLE_LOCUSERS_'+LTRIM(RTRIM(STR(@NSPID)))+''',''U'') IS NOT NULL
							DELETE FROM TMP_MSTUSRROLE_LOCUSERS_'+LTRIM(RTRIM(STR(@NSPID)))+' WITH (ROWLOCK) WHERE 
							USER_CODE NOT IN (SELECT USER_CODE FROM TMP_MSTUSRROLE_USERS_'+LTRIM(RTRIM(STR(@NSPID)))+' (NOLOCK))'
			PRINT @CCMD				
			EXEC SP_EXECUTESQL @CCMD			
			
			SET @NSTEP=190
			
			SET @CCMD=N'IF OBJECT_ID(''TMP_MSTUSRROLE_LOCUSERS_'+LTRIM(RTRIM(STR(@NSPID)))+''',''U'') IS NOT NULL
							DELETE FROM TMP_MSTUSRROLE_LOCUSERS_'+LTRIM(RTRIM(STR(@NSPID)))+' WITH (ROWLOCK) WHERE TS<> 
							(SELECT TOP 1 TS FROM TMP_MSTUSRROLE_LOCUSERS_'+LTRIM(RTRIM(STR(@NSPID)))+' A (NOLOCK) WHERE
							USER_CODE=TMP_MSTUSRROLE_LOCUSERS_'+LTRIM(RTRIM(STR(@NSPID)))+'.USER_CODE AND
							DEPT_ID=TMP_MSTUSRROLE_LOCUSERS_'+LTRIM(RTRIM(STR(@NSPID)))+'.DEPT_ID)'
			PRINT @CCMD				
			EXEC SP_EXECUTESQL @CCMD
						
		END
				
		LBLDELENTRIES:
		
		--- FIRSTLY, DELETE OLDER ENTRIES FROM THE TRANSACTIONS
		SET @NSTEP=200
		
		DELETE FROM LOCUSERS WITH (ROWLOCK)
		DELETE FROM MODULES WITH (ROWLOCK)
		DELETE FROM BINUSERS WITH (ROWLOCK)
		DELETE FROM USER_ROLE_DET WITH (ROWLOCK)
		
	LBLMERGE:
		SET @NSTEP=210
		IF CURSOR_STATUS('GLOBAL','MERGECUR') IN (0,1)  
		BEGIN  
		   CLOSE MERGECUR  
		   DEALLOCATE MERGECUR
		END  
				
		--- NOW, UPDATE TRANSACTIONS DATA ONE BY ONE
		DECLARE MERGECUR CURSOR FOR 
		SELECT DISTINCT TABLENAME, KEYFIELD,LINKED_MASTER,XNS_MERGING_ORDER 
		FROM XNSINFO (NOLOCK) 
		WHERE XN_TYPE = @CXNTYPE 
		AND XNS_MERGING_ORDER <> 99 
		ORDER BY XNS_MERGING_ORDER
		
		OPEN MERGECUR
		FETCH NEXT FROM MERGECUR INTO @CTABLENAME,@CKEYFIELD,@BLINKEDMASTER,@NXNSMERGINGORDER		
		WHILE @@FETCH_STATUS=0
		BEGIN
			
			SET @NSTEP=220	
			
			LBLSTARTMERGE:
			SET @BPROCEED=1
			
			SET @CCMD=N'IF NOT EXISTS (SELECT NAME FROM SYSOBJECTS WHERE NAME=''TMP_' + @CXNTYPE + '_' + @CTABLENAME + '_' + LTRIM(RTRIM(STR(@NSPID)))+''')
							SET @BPROCEEDOUT=0'
			
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD,N'@BPROCEEDOUT BIT OUTPUT',@BPROCEEDOUT=@BPROCEED OUTPUT
			
			SET @NSTEP=230
			
			IF @BPROCEED=0
				GOTO LBLMERGENEXT
		
			SET @BINSERTONLY=0
			
			SET @NSTEP=240
			
			IF @CTABLENAME='EMPLOYEE' AND @BEMPHEADSUPDATED=0
				SET @CFILTERCONDITION=' B.EMP_CODE IN (SELECT EMP_HEAD FROM '+@CTABLEPREFIX+'_' + @CTABLENAME +
									  '_' + LTRIM(RTRIM(STR(@NSPID)))+')'
			ELSE
				SET @CFILTERCONDITION=''
			
		
			IF @CTABLENAME='LOCUSERS'
				SET @CKEYFIELD2='DEPT_ID'
			ELSE
			IF @CTABLENAME='BINUSERS'
				SET @CKEYFIELD2='BIN_ID'
			ELSE
				SET @CKEYFIELD2=''
				
					
			SET @NSTEP=250		
			
			SET @CCMD='EXEC UPDATEMASTERXN_MERGING '''','''+@CTABLEPREFIX+'_' + @CTABLENAME + '_' + LTRIM(RTRIM(STR(@NSPID)))+''','''',
					   '''+@CTABLENAME+''','''+@CKEYFIELD+''','''+@CKEYFIELD2+''','''','+
					   (CASE WHEN @BINSERTONLY=1 THEN '1' ELSE '0' END)+',0,1,'''+@CFILTERCONDITION+''',@CERRORMSGOUT OUTPUT'
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD,N'@CERRORMSGOUT VARCHAR(1000) OUTPUT',@CERRORMSGOUT=@CERRORMSG OUTPUT
			
			IF @CERRORMSG<>''
				BREAK
			
			SET @NSTEP=260
			
			IF @CTABLENAME='EMPLOYEE' AND @BEMPHEADSUPDATED=0
			BEGIN
				SET @BEMPHEADSUPDATED=1
				GOTO LBLSTARTMERGE
			END
					
			LBLMERGENEXT:
			
			FETCH NEXT FROM MERGECUR INTO @CTABLENAME,@CKEYFIELD,@BLINKEDMASTER,@NXNSMERGINGORDER		
		END
		CLOSE MERGECUR
		DEALLOCATE MERGECUR
				
		SET @NSTEP=270
		
		-- DELETING FROM TEMP TABLES
		
		EXEC SP_DROPTEMPTABLES_XNS @CXNTYPE,@NSPID,'','TMP_MSTUSR' 
		
		SET @NSTEP=280
			
		SET @CCMD=N'ALTER TABLE USERS ENABLE TRIGGER TRG_USERS_CHKPWD'
		PRINT @CCMD				
		EXEC SP_EXECUTESQL @CCMD
		
		SET @NSTEP=290	
		
	LBLLAST:
		
		SET @NSTEP=300
		
		--- ON SUCCESSFUL MERGING , DELETE ENTRY FROM XN HISTORY 		
		IF @CERRORMSG=''
		BEGIN
			DELETE FROM XN_HISTORY WITH (ROWLOCK) WHERE XN_TYPE=@CXNTYPE AND MEMO_ID=@CMEMOID
			
			IF @@TRANCOUNT>0
			BEGIN
				PRINT 'SUCCESS'
				COMMIT TRANSACTION
			END	
		END
		ELSE
		BEGIN
			IF @@TRANCOUNT>0
				ROLLBACK 	
		END	
		
		SET @NSTEP=310
		
		GOTO END_PROC
	END TRY

	BEGIN CATCH
		
		PRINT 'UNTRAPPED ERROR'		
		SELECT @CERRORMSG='PROCEDURE : '+ISNULL(ERROR_PROCEDURE(),'NULL P')+'STEP: '+STR(@NSTEP)+' LINE NO. :'+
		ISNULL(LTRIM(RTRIM(STR(ERROR_LINE()))),'NULL LINE')+'MSG :'+ISNULL(ERROR_MESSAGE(),'NULL MSG')
		
		SET @CRETCMD='SELECT '''' AS MEMO_ID,'''''+@CERRORMSG+''''' AS ERRMSG'
		
		PRINT 'RETURN VALUE : '+ISNULL(@CRETCMD,'NULL RETCMD')+@CMEMOID
		--EXEC SP_EXECUTESQL @CRETCMD
		
		IF @@TRANCOUNT>0
			ROLLBACK		

		IF CURSOR_STATUS('GLOBAL','MERGECUR') IN (0,1)
		BEGIN
			CLOSE MERGECUR
			DEALLOCATE MERGECUR
		END
		
		GOTO END_PROC
	END CATCH

END_PROC:

	INSERT @TRETMSG
	SELECT 'MSTUSRROLE',ISNULL(@CERRORMSG,'')
	
	SELECT * FROM @TRETMSG
	
		
END
--- 'END OF CREATING PROCEDURE SP_MERGEMSTUSRDATA'
