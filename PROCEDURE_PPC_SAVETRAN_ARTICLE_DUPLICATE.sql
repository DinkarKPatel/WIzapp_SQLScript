CREATE PROCEDURE PPC_SAVETRAN_ARTICLE_DUPLICATE
(
	 @NUPDATEMODE	NUMERIC(1,0)/*1: ADD MODE, 2 : EDIT MODE*/,  
	 @NSPID			INT=0,  
	 @CLOC_ID VARCHAR(2),
	 @COLDARTICLE_CODE VARCHAR(10)=11
)
----WITH ENCRYPTION
AS
BEGIN
DECLARE @CERRMSG VARCHAR(500),@CSTEP VARCHAR(10)
	   ,@CCMD NVARCHAR(MAX),@CNEWARTICLE_CODE VARCHAR(10),@BREFEXISTS BIT

DECLARE @TOUTPUT TABLE(ARTICLE_CODE VARCHAR(50),ERRMSG VARCHAR(500))

---LIST OF TABLES TO SAVE
DECLARE @TARTICLE VARCHAR(100)

--,@TSKU VARCHAR(100)


SET @TARTICLE='ART_ARTICLE_UPLOAD'

DECLARE @FILTER VARCHAR(MAX)
SET @FILTER=' B.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''

 IF @CLOC_ID=''
 SELECT TOP 1  @CLOC_ID=VALUE  FROM CONFIG  WHERE CONFIG_OPTION='LOCATION_ID'
     

BEGIN TRY
BEGIN TRANSACTION
		   SET @CSTEP=10
		     
		     IF ISNULL(@COLDARTICLE_CODE,'')=''
		     BEGIN
	         SET @CERRMSG='COPY ARTICLE NO CANNOT BE BLANK.'
	         GOTO END_PROC
	         END
	         
			SET @CSTEP=20
			--VALIDATION FOR BLANK ARTICLE_NO
			SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM '+@TARTICLE+' WHERE ISNULL(ARTICLE_NO,'''')='''' AND SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''')
					         SET @CERRMSG=''ARTICLE NO CANNOT BE BLANK.'' '
			PRINT @CCMD					        
			EXEC SP_EXECUTESQL @CCMD,N'@CERRMSG VARCHAR(500) OUTPUT',@CERRMSG OUTPUT
			
			IF ISNULL(@CERRMSG,'')<>''
				GOTO END_PROC
			
			SET @CSTEP=30
			--VALIDATION FOR UNIQUE ARTICLE_NO
			SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM '+@TARTICLE+' A JOIN ARTICLE B ON A.ARTICLE_NO=B.ARTICLE_NO
								  WHERE A.ARTICLE_CODE<>B.ARTICLE_CODE AND  A.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''')
					        SET @CERRMSG=''ARTICLE NO ALREADY EXISTS.'' '
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD,N'@CERRMSG VARCHAR(500) OUTPUT',@CERRMSG OUTPUT
			IF ISNULL(@CERRMSG,'')<>''
				GOTO END_PROC
				
			SET @CSTEP=40
			--VALIDATION FOR UNIQUE ALIAS
			SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM '+@TARTICLE+' A JOIN ARTICLE B ON A.ALIAS=B.ALIAS 
								  WHERE ISNULL(A.ALIAS,'''')<>'''' AND A.ARTICLE_CODE<>B.ARTICLE_CODE AND A.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''')
					        SET @CERRMSG=''ARTICLE ALIAS IS ALREADY USED BY ANOTHER ARTICLE.'' '
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD,N'@CERRMSG VARCHAR(500) OUTPUT',@CERRMSG OUTPUT	
			
			IF ISNULL(@CERRMSG,'')<>''
				GOTO END_PROC
			
			SET @CSTEP=50
			--VALIDATION OF VALID UOM
			SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM '+@TARTICLE+' A LEFT JOIN UOM B ON A.UOM_CODE=B.UOM_CODE
								  WHERE B.UOM_CODE IS NULL AND A.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''')
					       SET @CERRMSG=''INVALID UOM FOR THE ARTICLE.'' '
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD,N'@CERRMSG VARCHAR(500) OUTPUT',@CERRMSG OUTPUT	
			
			IF ISNULL(@CERRMSG,'')<>''
				GOTO END_PROC
				
			SET @CSTEP=60
			--VALIDATION OF VALID SUB SECTION
			SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM '+@TARTICLE+' A LEFT JOIN SECTIOND B ON A.SUB_SECTION_CODE=B.SUB_SECTION_CODE
								  WHERE B.SUB_SECTION_CODE IS NULL AND A.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''')
					        SET @CERRMSG=''INVALID SUB SECTION FOR THE ARTICLE.'' '
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD,N'@CERRMSG VARCHAR(500) OUTPUT',@CERRMSG OUTPUT	
			
			IF ISNULL(@CERRMSG,'')<>''
				GOTO END_PROC	
				

	IF @NUPDATEMODE=1 --NEW ARTICLE BEING ADDED
	BEGIN
			PRINT 'NEW ARTICLE BEING ADDED'
			
			SET @CSTEP=150
			LBL_GENARTKEY:
			EXEC GETNEXTKEY @CTABLENAME='ARTICLE'
							,@CCOLNAME='ARTICLE_CODE'
							,@NWIDTH='9'
							,@CPREFIX=@CLOC_ID 
							,@NLZEROS=1
							,@CFINYEAR=''
							,@NROWCOUNT=0
							,@CNEWKEYVAL=@CNEWARTICLE_CODE OUTPUT	
			
			IF ISNULL(@CNEWARTICLE_CODE,'')=''	
			BEGIN	
				SET @CERRMSG='ERROR GENERATING ARTICLE CODE.'
				GOTO END_PROC
			END	
			
			SET @CSTEP=160				
			IF EXISTS(SELECT TOP 1 'U' FROM ARTICLE WHERE ARTICLE_CODE=@CNEWARTICLE_CODE)
				GOTO LBL_GENARTKEY
			
			---UPDATE THE ARTICLE_CODE IN ALL TEMP TABLES
			SET @CSTEP=170
			---UPDATING ARTICLE_CODE IN ARTICLE
			SET @CCMD=N'UPDATE '+@TARTICLE+' SET ARTICLE_CODE='''+@CNEWARTICLE_CODE+''' WHERE LEFT(ARTICLE_CODE,5)=''LATER'' AND SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD 
	
	SET @CSTEP=260
	--UPDATING ARTICLE MASTER
	EXEC UPDATEMASTERXN 
			 @CSOURCEDB=''
			,@CSOURCETABLE=@TARTICLE
			,@CDESTDB=''
			,@CDESTTABLE='ARTICLE'
			,@CKEYFIELD1='ARTICLE_CODE'
			,@CKEYFIELD2=''
			,@CKEYFIELD3=''
			,@LINSERTONLY=0
			,@CFILTERCONDITION=@FILTER
			,@LUPDATEXNS=0
			,@CXNTYPE=''
			,@LUPDATEONLY=0
			,@CUSERID=''
			,@BALWAYSUPDATE=0
			
	--INSERT DUPLICATE ARTICLE FROM OLD ARTICLE
	--1 ART_PARA1
  
     INSERT ART_PARA1	( LAST_UPDATE, ARTICLE_CODE, PARA1_CODE, ROW_ID, PARA1_DESC )  
     SELECT 	GETDATE() AS  LAST_UPDATE, ARTICLE_CODE=@CNEWARTICLE_CODE, ISNULL(P1.PARA1_CODE,A.PARA1_CODE) AS PARA1_CODE, ROW_ID=CAST(NEWID() AS VARCHAR(40)), PARA1_DESC 
     FROM ART_PARA1 A
     JOIN ARTICLE ART ON ART.ARTICLE_CODE=@CNEWARTICLE_CODE
     LEFT JOIN PARA1 P1 ON P1.PARA1_NAME=ART.COLOR_NAME
     WHERE A.ARTICLE_CODE =@COLDARTICLE_CODE

  --2 ART_DET

	
	INSERT ART_DET	( ARTICLE_CODE, PARA2_CODE, MRP, ROW_ID, LAST_UPDATE, WS_PRICE, COMPANY_CODE, MRP_INC_AMT, MRP2, PARA1_CODE, PARA2_RATIO, PURCHASE_PRICE, CENTER_POINT, SIZEGROUP_CODE )  
	  SELECT 	  ARTICLE_CODE=@CNEWARTICLE_CODE, PARA2_CODE, MRP, ROW_ID=CAST(NEWID() AS VARCHAR(40)), LAST_UPDATE, WS_PRICE, COMPANY_CODE, MRP_INC_AMT, MRP2, 
	  PARA1_CODE, PARA2_RATIO, PURCHASE_PRICE, CENTER_POINT, SIZEGROUP_CODE 
	  FROM  ART_DET
	  WHERE ARTICLE_CODE =@COLDARTICLE_CODE

  --3.PPC_ART_DET_SIZEGROUP
    INSERT PPC_ART_DET_SIZEGROUP	( ARTICLE_CODE, SIZEGROUP_CODE, PARA2_CODE, MRP, ROW_ID, WS_PRICE, PURCHASE_PRICE ) 
      SELECT 	  ARTICLE_CODE=@CNEWARTICLE_CODE, SIZEGROUP_CODE, PARA2_CODE, MRP, ROW_ID=CAST(NEWID() AS VARCHAR(40)), WS_PRICE, PURCHASE_PRICE 
      FROM PPC_ART_DET_SIZEGROUP
      WHERE ARTICLE_CODE =@COLDARTICLE_CODE
   
   --4.ART_JOBS
	INSERT ART_JOBS	( ARTICLE_CODE, JOB_ORDER, JOB_REMARKS, ROW_ID, LAST_UPDATE, COMPANY_CODE, JOB_CODE, JOB_RATE, DAYS, HOURS, DEFAULT_BASIS, JOB_RATE_PCS, JOB_RATE_DAYS, JOB_RATE_HOURS )  
	   SELECT 	  ARTICLE_CODE=@CNEWARTICLE_CODE, JOB_ORDER, JOB_REMARKS, ROW_ID=CAST(NEWID() AS VARCHAR(40)), LAST_UPDATE, COMPANY_CODE, JOB_CODE, JOB_RATE, DAYS, 
	   HOURS, DEFAULT_BASIS, JOB_RATE_PCS, JOB_RATE_DAYS, JOB_RATE_HOURS 
	   FROM ART_JOBS
	   WHERE ARTICLE_CODE =@COLDARTICLE_CODE
    
    --5.PPC_ART_BOM
     INSERT PPC_ART_BOM	( ARTICLE_CODE, BOM_ARTICLE_CODE, AVG_QTY, ROW_ID, LAST_UPDATE, COMPANY_CODE, RATE, BOM_PARA1_CODE, USES, BOM_SIZEGROUP_CODE, ADD_AVG_QTY )  
     SELECT 	  ARTICLE_CODE=@CNEWARTICLE_CODE, BOM_ARTICLE_CODE, AVG_QTY, ROW_ID=CAST(NEWID() AS VARCHAR(40)), LAST_UPDATE, COMPANY_CODE, RATE, BOM_PARA1_CODE, USES, 
     BOM_SIZEGROUP_CODE, ADD_AVG_QTY 
     FROM PPC_ART_BOM 
     WHERE ARTICLE_CODE =@COLDARTICLE_CODE

	
	END
	

  GOTO END_PROC


			
		
END TRY
BEGIN CATCH 
	SET @CERRMSG='PPC_SAVETRAN_ARTICLE_DUPLICATE: STEP - '+ISNULL(@CSTEP,'')+', MESSAGE - '+ERROR_MESSAGE() 
END CATCH

END_PROC:

IF @@TRANCOUNT>0  
 BEGIN  
  IF ISNULL(@CERRMSG,'')='' 
   COMMIT TRANSACTION  
  ELSE  
   ROLLBACK  
 END  

--DROP TEMP TABLES

IF @CERRMSG=''
BEGIN
   DELETE FROM ART_ARTICLE_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))
   
END

INSERT @TOUTPUT(ARTICLE_CODE,ERRMSG)
SELECT @CNEWARTICLE_CODE,ISNULL(@CERRMSG,'')
SELECT * FROM @TOUTPUT

END
--END OF PROCEDURE - PPC_SAVETRAN_ARTICLE_DUPLICATE
