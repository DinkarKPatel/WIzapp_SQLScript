CREATE PROCEDURE SAVETRAN_PRD_WORKORDER
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CMEMONOPREFIX		VARCHAR(50),
	@CFINYEAR			VARCHAR(10),
	@CXNMEMOID			VARCHAR(40)='',
	@CCOMPUTERNAME		VARCHAR(500)='',
	@CWINUSERNAME		VARCHAR(500)='',
	@CWIZUSERCODE		CHAR(7)='',
	@CLOCID				VARCHAR(2)=''
)
--WITH ENCRYPTION
AS
BEGIN

	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME1		VARCHAR(100),
			@CDETAILTABLENAME2		VARCHAR(100),
			@CDETAILTABLENAME3		VARCHAR(100),
			@CDETAILTABLENAME4		VARCHAR(100),
			@CDETAILTABLENAME5		VARCHAR(100),
			@CDETAILTABLENAME6		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME1	VARCHAR(100),
			@CTEMPDETAILTABLENAME2	VARCHAR(100),
			@CTEMPDETAILTABLENAME3	VARCHAR(100),
			@CTEMPDETAILTABLENAME4	VARCHAR(100),
			@CTEMPDETAILTABLENAME5	VARCHAR(100),
			@CTEMPDETAILTABLENAME6	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE1		VARCHAR(100),
			@CTEMPDETAILTABLE2		VARCHAR(100),
			@CTEMPDETAILTABLE3		VARCHAR(100),
			@CTEMPDETAILTABLE4		VARCHAR(100),
			@CTEMPDETAILTABLE5		VARCHAR(100),
			@CTEMPDETAILTABLE6		VARCHAR(100),
			@CTEMPDETAILTABLE		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(2),
			@CLOCATIONID			VARCHAR(2),
			@CHODEPTID				VARCHAR(2),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@BLOOP					BIT,
			@NLOOPCNT	INT,@CROWKEYFIELD VARCHAR(50)

	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	SET @NSTEP = 0		-- SETTTING UP ENVIRONMENT

	SET @CTEMPDBNAME = ''
	
	SET @CMASTERTABLENAME	= 'PRD_WO_MST'
	SET @CDETAILTABLENAME1	= 'PRD_WO_DET'
	SET @CDETAILTABLENAME2	= 'PRD_WO_ORDERS'
	SET @CDETAILTABLENAME3	= 'PRD_WO_SUB_DET'
	SET @CDETAILTABLENAME4	= 'PRD_WO_ART_BOM'
	SET @CDETAILTABLENAME5	= 'PRD_WO_ART_JOBS'
	SET @CDETAILTABLENAME6	= 'PRD_WO_ARTICLE_SPECS'
	
	SET @CTEMPMASTERTABLENAME	= 'TEMP_'+@CMASTERTABLENAME+'_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME1	= 'TEMP_'+@CDETAILTABLENAME1+'_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME2	= 'TEMP_'+@CDETAILTABLENAME2+'_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME3	= 'TEMP_'+@CDETAILTABLENAME3+'_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME4	= 'TEMP_'+@CDETAILTABLENAME4+'_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME5	= 'TEMP_'+@CDETAILTABLENAME5+'_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME6	= 'TEMP_'+@CDETAILTABLENAME6+'_'+LTRIM(RTRIM(STR(@NSPID)))
	
	SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE1	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME1
	SET @CTEMPDETAILTABLE2	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME2
	SET @CTEMPDETAILTABLE3	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME3
	SET @CTEMPDETAILTABLE4	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME4
	SET @CTEMPDETAILTABLE5	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME5
	SET @CTEMPDETAILTABLE6	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME6
			
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'MEMO_ID'
	SET @CMEMONO			= 'MEMO_NO'
	SET @NMEMONOLEN			= 10
	
	IF ISNULL(@CLOCID,'')=''
		SELECT @CLOCATIONID	= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID'
	ELSE
		SELECT @CLOCATIONID = @CLOCID
		
	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		

	SET @NSTEP = 10		-- GETTING DEPTID INFO FROM TEMP TABLE

	BEGIN TRY
		BEGIN TRANSACTION
		--- IF PROCEDURE CALLED FROM CANCEL MEMO, THEN JUST DO RELATED VALIDATIONS BEFORE CANCEL
		--- AND THEN AFTER CANCELLING THE MEMO JUST PROCEED TOWARDS VALIDATIONS TO BE DONE AFTER CANCEL
		IF @NUPDATEMODE = 3
		BEGIN
		
				    
		 IF EXISTS (SELECT TOP 1 'U'  FROM PRD_STK_TRANSFER_DET A
		 JOIN PRD_STK_TRANSFER_MST B ON A.MEMO_ID =B.MEMO_ID 
		 WHERE B.CANCELLED =0 AND REF_WO_ID=@CXNMEMOID)
		 BEGIN
		     SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' WORK ORDER FOUND IN CUTTING PLEASE CHECK...'
			 GOTO END_PROC 
		 
		 END

		 IF EXISTS (SELECT TOP 1 'U' FROM PRD_STK_TRANSFER_DET_PENDING  A
		 JOIN PRD_STK_TRANSFER_MST_PENDING  B ON A.MEMO_ID =B.MEMO_ID 
		 WHERE B.CANCELLED =0 AND REF_WO_ID=@CXNMEMOID
		 )
		 BEGIN
		      SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' WORK ORDER FOUND IN CUTTING PLEASE CHECK...'
			  GOTO END_PROC 
		 
		 END
		 


			SET @NSTEP = 15
			EXEC SAVETRAN_CANCELXN 'WPL',@CDETAILTABLENAME1,@CXNMEMOID,@CKEYFIELD1,@CMASTERTABLENAME,@CLOCATIONID,
								   @CCOMPUTERNAME,@CWINUSERNAME,@CWIZUSERCODE,1,@CCMDOUTPUT OUTPUT
			
			SET @CKEYFIELDVAL1=@CXNMEMOID
			
			GOTO END_PROC
		END	
		
		SET @NSTEP = 17
		
		-- GETTING DEPT_ID FROM TEMP MASTER TABLE
		SET @CCMD = 'SELECT @CMEMODEPTID = DEPT_ID, @CKEYFIELDVAL1 = MEMO_ID FROM ' + @CTEMPMASTERTABLE
		EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT, @CKEYFIELDVAL1 VARCHAR(50) OUTPUT', 
								  @CMEMODEPTID OUTPUT, @CKEYFIELDVAL1 OUTPUT
		IF (@CMEMODEPTID IS NULL )
		BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED...'
			  --SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
			  GOTO END_PROC  		
		END

		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	

			SET @NSTEP = 20		-- GENERATING NEW KEY
			
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN
				-- GENERATING NEW MRR_NO		
				SET @NSAVETRANLOOP=0
				WHILE @NSAVETRANLOOP=0
				BEGIN
					EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
									@CFINYEAR,0, @CMEMONOVAL OUTPUT   
					
					SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
											WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
											AND FIN_YEAR = '''+@CFINYEAR+''' )
									SET @NLOOPOUTPUT=0
								ELSE
									SET @NLOOPOUTPUT=1'
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
				END

				IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
					  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
					  GOTO END_PROC  		
				END

				SET @NSTEP = 30		-- GENERATING NEW ID

				-- GENERATING NEW ORDER ID
				SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+ REPLICATE('0', 15-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL))
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  GOTO END_PROC
				END
				
				SET @NSTEP = 40		-- UPDATING NEW ID INTO TEMP TABLES

				-- UPDATING NEWLY GENERATED WORK ORDER NO AND ID IN MASTER & DETAIL TABLES
				SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
							@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
				EXEC SP_EXECUTESQL @CCMD
			
				SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD

				SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE2 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD
				
			END

		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
		
			SET @NSTEP = 50		-- GETTING ID INFO FROM TEMP TABLE

			-- GETTING ORDER_ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = MEMO_ID, @CMEMONOVAL = MEMO_NO FROM ' + @CTEMPMASTERTABLE
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
				  
				  GOTO END_PROC  		
			END
			
			SET @NSTEP = 60		-- UPDATING SENT_TO_HO FLAG TEMP TABLE
			
			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET SENT_TO_HO = 0,LAST_UPDATE=GETDATE() '
			EXEC SP_EXECUTESQL @CCMD
				
				
		END					-- END OF EDITMODE

		SET @NSTEP = 65

		-- CHECK WETHER THE MEMO ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END

		-- UPDATING MASTER TABLE FROM TEMP TABLE
		SET @NSTEP = 70		-- UPDATING MASTER TABLE

		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			, @BALWAYSUPDATE = 1
			
		-- UPDATING TRANSACTION TABLES FROM TEMP TABLE
		SET @NSTEP = 80
		
		SET @NLOOPCNT=1
		
		WHILE @NLOOPCNT<=6
		BEGIN
			SET @CTEMPDETAILTABLENAME = (CASE WHEN @NLOOPCNT=1 THEN @CTEMPDETAILTABLENAME1 
										  WHEN @NLOOPCNT=2 THEN @CTEMPDETAILTABLENAME2
										  WHEN @NLOOPCNT=3 THEN @CTEMPDETAILTABLENAME3
										  WHEN @NLOOPCNT=4 THEN @CTEMPDETAILTABLENAME4
										  WHEN @NLOOPCNT=5 THEN @CTEMPDETAILTABLENAME5
										  ELSE @CTEMPDETAILTABLENAME6 END)
			
			SET @CTEMPDETAILTABLE = @CTEMPDBNAME+@CTEMPDETAILTABLENAME
										  
			SET @CDETAILTABLENAME = (CASE WHEN @NLOOPCNT=1 THEN @CDETAILTABLENAME1 
										  WHEN @NLOOPCNT=2 THEN @CDETAILTABLENAME2
										  WHEN @NLOOPCNT=3 THEN @CDETAILTABLENAME3
										  WHEN @NLOOPCNT=4 THEN @CDETAILTABLENAME4
										  WHEN @NLOOPCNT=5 THEN @CDETAILTABLENAME5
										  ELSE @CDETAILTABLENAME6 END)
			
			
			IF @NLOOPCNT=1
			BEGIN
				SET @NSTEP = 90

				SET @CCMD = N'ALTER TABLE '+@CTEMPDETAILTABLE+' ADD OLD_ROW_ID VARCHAR(40)'
				EXEC SP_EXECUTESQL @CCMD

				SET @NSTEP = 95
								
				SET @CCMD=N'UPDATE '+@CTEMPDETAILTABLE+' SET OLD_ROW_ID=ROW_ID'
				EXEC SP_EXECUTESQL @CCMD
				
			END

			IF @NLOOPCNT=2
				GOTO LBLDELETE
			
			SET @NSTEP = 100
			SET @CCMD = N'ALTER TABLE '+@CTEMPDETAILTABLE+' ADD TEMP_ROW_ID VARCHAR(40)'
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
			
			
	
			-- UPDATING ROW_ID IN TEMP TABLES
			
			SET @BLOOP=1
			
			WHILE @BLOOP=1
			BEGIN										  
				SET @NSTEP = 110
		
				SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET TEMP_ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
							  WHERE LEFT(ROW_ID,5) = ''LATER'''
				PRINT @CCMD			  
				EXEC SP_EXECUTESQL @CCMD
				
				SET @NSTEP = 120
				SET @CCMD=N'IF NOT EXISTS (SELECT TOP 1 A.ROW_ID FROM '+@CDETAILTABLENAME+' A JOIN '+@CTEMPDETAILTABLE+' B
										   ON A.ROW_ID=B.TEMP_ROW_ID WHERE LEFT(B.ROW_ID,5) = ''LATER'')
							 BEGIN			   
								UPDATE ' + @CTEMPDETAILTABLE + ' SET ROW_ID=TEMP_ROW_ID	WHERE LEFT(ROW_ID,5) = ''LATER''
								
								SET @BLOOPOUT=0
							 END	'
				EXEC SP_EXECUTESQL @CCMD,N'@BLOOPOUT BIT OUTPUT',@BLOOPOUT=@BLOOP OUTPUT							
			END
			
			-- DELETING EXISTING ENTRIES FROM DETAIL TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
			
			LBLDELETE:
			
			IF @NLOOPCNT=1
			BEGIN
				SET @NSTEP = 125
				SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + ' WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
							  AND ROW_ID NOT IN (SELECT ROW_ID FROM '+@CTEMPDETAILTABLE+')' 
							  
				EXEC SP_EXECUTESQL @CCMD			  
				
			END
				
			ELSE
			IF @NLOOPCNT=2
			BEGIN
				SET @NSTEP = 130
				SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + ' WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1+'''' 
							  
				EXEC SP_EXECUTESQL @CCMD			  
			END
			
			ELSE
			BEGIN
				SET @NSTEP = 135
				SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + ' WHERE REF_ROW_ID IN (SELECT ROW_ID FROM
							  PRD_WO_DET WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + ''')
							  AND ROW_ID NOT IN (SELECT ROW_ID FROM '+@CTEMPDETAILTABLE+')'
				EXEC SP_EXECUTESQL @CCMD			  
				
				SET @NSTEP = 140

				SET @CCMD=N'UPDATE A SET REF_ROW_ID=B.ROW_ID FROM '+@CTEMPDETAILTABLE+' A
							JOIN '+@CTEMPDETAILTABLE1+' B ON A.REF_ROW_ID=B.OLD_ROW_ID
							WHERE LEFT(A.REF_ROW_ID,5)=''LATER'''
				PRINT ISNULL(@CCMD,'NULL REFROWID UPDATE')			
				EXEC SP_EXECUTESQL @CCMD			
			END				  					
			
			
			
			-- INSERTING/UPDATING THE ENTRIES IN PID01106 TABLE FROM TEMPTABLE
			SET @NSTEP = 145		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES
			
			IF @NLOOPCNT=2
				SET @CROWKEYFIELD ='MEMO_ID'
			ELSE
				SET @CROWKEYFIELD ='ROW_ID'
					
			EXEC UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPDETAILTABLENAME
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CDETAILTABLENAME
				, @CKEYFIELD1	= @CROWKEYFIELD
				, @BALWAYSUPDATE = 1

			SET @NLOOPCNT=@NLOOPCNT+1
		END
						
		GOTO END_PROC
		
	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(STR(@NSTEP))) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
			
		GOTO END_PROC
	END CATCH
	
END_PROC:
	
	--UPDATE UPC PMT 
	
	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
			COMMIT TRANSACTION	
		ELSE
			ROLLBACK
	END
	
	IF @NUPDATEMODE IN(1,3)
	BEGIN
	    
	    DECLARE @ENABLEUPC VARCHAR(10)
	    SELECT TOP 1 @ENABLEUPC=VALUE FROM CONFIG WHERE CONFIG_OPTION='ENABLED_UPC'
	    
	    IF ISNULL(@ENABLEUPC,'')='1'
	    BEGIN
	       
	       EXEC UPDATEUPCPMT_PRD   
			   @CXNTYPE   = 'PRD_WO'  
			 , @CXNNO   = @CMEMONOVAL  
			 , @CXNID   = @CKEYFIELDVAL1  
			 , @CCMD    = @CCMDOUTPUT OUTPUT  
			 
	    END
	    
	    	IF @CCMDOUTPUT <> ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE UNIQUE STOCK STATUS IN PMT....'
				GOTO END_PROC
			END
	
	END
	
	
	
	
	IF ISNULL(@CCMDOUTPUT,'')=''
	BEGIN
		INSERT @OUTPUT ( ERRMSG, MEMO_ID)
				VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )

		SELECT * FROM @OUTPUT	
	END
	
	
	EXEC SP_DROPTEMPTABLES_XNS 'XNSWPL',@NSPID
END				
------------------------------------------------------ END OF PROCEDURE SAVETRAN_PRD_WORKORDER
