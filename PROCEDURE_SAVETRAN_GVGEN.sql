CREATE PROCEDURE SAVETRAN_GVGEN
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CFINYEAR			VARCHAR(10),	
	@CMACHINENAME		VARCHAR(100)='',
	@CWINDOWUSERNAME	VARCHAR(100)='',
	@CWIZAPPUSERCODE	VARCHAR(10)='0000000',
	@CMEMOID			VARCHAR(40)=''
)
--WITH ENCRYPTION
AS
BEGIN
	-- @NUPDATEMODE:	1- NEW MEMO ADDED, 
	--					2- EDIT MEMO, 
	--					3- CURRENT MEMO CANCELLED, 
	-- @CMEMOID:		MEMOID IS REQUIRED IF @NUPDATEMODE IS 3 (FROM CANCELLATION)
	
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CKEYFIELD1_DETAIL2		VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(4),
			@CLOCATIONID			VARCHAR(4),
			@CHODEPTID				VARCHAR(4),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(MAX),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@BNEGSTOCKFOUND			BIT,
			@CVALUSERARC			CHAR(2),
			@CMEMONOPREFIX			VARCHAR(10),@NGVTYPE NUMERIC(1,0),@CLOCID VARCHAR(4)

	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	SET @NSTEP = 0		-- SETTTING UP ENVIRONMENT

	SET @CTEMPDBNAME = ''
		
	SET @CMASTERTABLENAME	= 'GV_GEN_MST'
	--SET @CDETAILTABLENAME	= ''
	SET @CDETAILTABLENAME	= 'GV_GEN_DET'

	SET @CTEMPMASTERTABLENAME	= 'TEMP_GV_GEN_MST_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME	= 'TEMP_GV_GEN_DET_'+LTRIM(RTRIM(STR(@NSPID)))

	SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME
	
	SET @CERRORMSG			= ''
	--SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'MEMO_ID'

	SET @CMEMONO			= 'MEMO_NO'
	SET @NMEMONOLEN			= 10
	
	IF OBJECT_ID('#TMPPMTBEFOREEDIT','U') IS NOT NULL
		DROP TABLE #TMPPMTBEFOREEDIT
	
	
	SELECT GV_SRNO INTO #TMPPMTBEFOREEDIT FROM PMT_GV_MST WHERE 1=2
	
	if @NUPDATEMODE <>3
	begin
	    SET @CCMD = 'SELECT @CLOCID = Location_code FROM '+@CTEMPMASTERTABLE+'  ' 
		EXEC SP_EXECUTESQL @CCMD, N'@CLOCID  VARCHAR(4) OUTPUT', @CLOCID  OUTPUT
	 
	end
	
	SET @CLOCATIONID=@CLOCID
	
	SET @CMEMONOPREFIX=@CLOCATIONID
		
	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		

	SET @NSTEP = 10		-- GETTING DEPTID INFO FROM TEMP TABLE
	BEGIN TRY

		BEGIN TRANSACTION			
		
		IF @NUPDATEMODE<>3
		BEGIN
			EXEC SP_VALIDATEXN_BEFORESAVE 'GVGEN',@NSPID,'0000000',@NUPDATEMODE,@CCMDOUTPUT OUTPUT,@BNEGSTOCKFOUND OUTPUT
			IF ISNULL(@CCMDOUTPUT,'') <> ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION ON TEMP DATA FAILED : ' + @CCMDOUTPUT + '...'
				GOTO END_PROC
			END
		END
		
		IF @NUPDATEMODE = 3 AND ISNULL(@CMEMOID,'') = ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED IF CALLED FROM CANCELLATION'
			GOTO END_PROC  		
		END

	
		-- GETTING DEPT_ID FROM TEMP MASTER TABLE
		SET @CCMD = 'SELECT @CMEMODEPTID = location_code ,@NGVTYPE=MODE FROM ' 
					+ (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME ELSE @CTEMPMASTERTABLE END )
		EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(4) OUTPUT,@NGVTYPE NUMERIC(1,0) OUTPUT', 
						   @CMEMODEPTID OUTPUT,@NGVTYPE OUTPUT
		IF (@CMEMODEPTID IS NULL )
		BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'
			  GOTO END_PROC  		
		END

		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	

		 IF ISNULL(@CLOCATIONID,'')=''
		 BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
			GOTO END_PROC    
		 END

			SET @NSTEP = 20		-- GENERATING NEW KEY
			
			-- GENERATING NEW JOB ORDER NO		
			SET @NSAVETRANLOOP=0
			WHILE @NSAVETRANLOOP=0
			BEGIN
				EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
								@CFINYEAR,0, @CMEMONOVAL OUTPUT   
				
				PRINT @CMEMONOVAL
				SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
										WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
										AND FIN_YEAR = '''+@CFINYEAR+''' )
								SET @NLOOPOUTPUT=0
							ELSE
								SET @NLOOPOUTPUT=1'
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
			END

			IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
				  GOTO END_PROC  		
			END

			SET @NSTEP = 30		-- GENERATING NEW ID

			-- GENERATING NEW JOB ORDER ID
			SET @CKEYFIELDVAL1 = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
			
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
				  GOTO END_PROC
			END

			SET @NSTEP = 35		-- UPDATING NEW ID INTO TEMP TABLES

			-- UPDATING NEWLY GENERATED JOB ORDER NO AND JOB ORDER ID IN PIM AND PID TEMP TABLES
			SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
						@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''',USER_CODE=(CASE WHEN USER_CODE='''' THEN '''+@CWIZAPPUSERCODE+''' ELSE USER_CODE END)'
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
		
			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
			
			
			SET @NSTEP = 40		-- GETTING ID INFO FROM TEMP TABLE

			
			-- GETTING JOB ORDER ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ' + @CKEYFIELD1 + ', @CMEMONOVAL = ' + @CMEMONO + ' FROM '
						+ (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME + ' WHERE MEMO_ID = ''' + @CMEMOID + '''' 
								ELSE @CTEMPMASTERTABLE END )
			
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  GOTO END_PROC  		
			END
	
			IF @NUPDATEMODE = 3			
			BEGIN
				IF EXISTS (SELECT TOP 1 MEMO_ID FROM GV_GEN_MST WHERE MEMO_ID=@CKEYFIELDVAL1 AND CANCELLED=1)
				BEGIN
					SET @CERRORMSG='THIS MEMO IS ALREADY CANCELLED...CAN NOT CANCEL AGAIN'
					GOTO END_PROC
				END

				SET @NSTEP = 45		-- GETTING ID INFO FROM TEMP TABLE
				DECLARE @cSoldGv VARCHAR(100),@cArcNo VARCHAR(50),@dArcDt DATETIME,@cXfrGv VARCHAR(100),
				@cXfrNo VARCHAR(50),@dXfrDt DATETIME,@cRedeemedGv VARCHAR(100),@dRedeemedOn datetime,@cCmNo varchar(50)

				SELECT TOP 1 @cSoldGv=a.gv_srno,@cArcNo=b.adv_rec_no,@dArcDt=b.adv_rec_dt 
				FROM arc_gvsale_details a (NOLOCK) 
				JOIN arc01106 b (NOLOCK) ON b.adv_rec_id=a.adv_rec_id
				JOIN gv_gen_det c (NOLOCK) ON c.gv_srno=a.gv_srno
				WHERE b.cancelled=0 AND c.memo_id=@CKEYFIELDVAL1

				IF ISNULL(@cSoldGv,'')<>''
				BEGIN
					SET @CERRORMSG='Gv no.:'+@cSoldGv+' is sold against Memo no.:'+@cArcNo+' Dated:'+convert(varchar,@dArcDt,110)+
								   ' Cannot cancel.....'
					GOTO END_PROC								   	
				END

				SET @NSTEP = 50
				IF ISNULL(@cSoldGv,'')=''
					SELECT TOP 1 @cSoldGv=a.gv_srno,@cArcNo=a.memo_id,@dArcDt=a.sold_on
					FROM gvsale_pos_validate a (NOLOCK) 
					JOIN gv_gen_det c (NOLOCK) ON c.gv_srno=a.gv_srno
					WHERE c.memo_id=@CKEYFIELDVAL1

				IF ISNULL(@cSoldGv,'')<>''
				BEGIN
					SET @CERRORMSG='Gv no.:'+@cSoldGv+' is sold against Memo Id:'+@cArcNo+' Dated:'+convert(varchar,@dArcDt,110)+
								   ' Cannot cancel.....'
					GOTO END_PROC								   	
				END

				SET @NSTEP = 52
				SELECT TOP 1 @cXfrGv=a.gv_srno,@cXfrNo=b.memo_no,@dXfrDt=b.memo_dt
					FROM GV_STKXFER_DET a (NOLOCK)
					JOIN GV_STKXFER_MST b (NOLOCK) ON b.MEMO_ID=a.MEMO_ID
					JOIN gv_gen_det c (NOLOCK) ON c.gv_srno=a.gv_srno
					WHERE c.memo_id=@CKEYFIELDVAL1 AND b.cancelled=0
				
				IF ISNULL(@cXfrGv,'')<>''
				BEGIN
					SET @CERRORMSG='Gv no.:'+@cXfrGv+' is transferred against Memo no.:'+@cXfrNo+
								   ' Dated:'+convert(varchar,@dXfrDt,110)+' Cannot cancel.....'
					GOTO END_PROC								   	
				END

				SET @NSTEP = 54
				SELECT TOP 1 @cRedeemedGv=a.gv_srno,@cCmNo=a.cm_no,@dRedeemedOn=a.redeemed_on
				FROM GV_MST_REDEMPTION a (NOLOCK)
				JOIN gv_gen_det c (NOLOCK) ON c.gv_srno=a.gv_srno
				WHERE c.memo_id=@CKEYFIELDVAL1
				
				IF ISNULL(@cRedeemedGv,'')<>''
				BEGIN
					SET @CERRORMSG='Gv no.:'+@cRedeemedGv+' is redeemed against Memo no.:'+@cCmNo+
								   ' Dated:'+convert(varchar,@dRedeemedOn,110)+' Cannot cancel.....'
					GOTO END_PROC								   	
				END	
			END			
		
			SET @NSTEP = 57		-- STORING OLD STATUS OF BARCODES 
			EXEC UPDATEPMT_GV   
			   @CXNTYPE   = 'GVGEN'    
			 , @CXNID   = @CKEYFIELDVAL1  
			 , @NREVERTFLAG = 1
			 , @NUPDATEMODE = @NUPDATEMODE
			 , @CCMD    = @CCMDOUTPUT OUTPUT  
		 			
			IF @NUPDATEMODE = 3			
			BEGIN

				IF @CCMDOUTPUT <> ''  
				BEGIN  
					 PRINT @CCMDOUTPUT  
				       
					 SET @NSTEP = 60
				        
					 SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'  
					 SET @BNEGSTOCKFOUND=1      
					 EXEC SP_EXECUTESQL @CCMDOUTPUT  
					 GOTO END_PROC  
				END  
				
				SET @NSTEP = 70
				-- UPDATING SENTTOHO FLAG
				SET @CCMD = N'UPDATE ' + @CMASTERTABLENAME + ' SET CANCELLED = 1,LAST_UPDATE=GETDATE() ' + 
							N' WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + ''''
				EXEC SP_EXECUTESQL @CCMD
				

				SET @CCMD=N'DELETE A1 
							FROM PMT_GV_MST a1 
							join SKU_GV_MST A on a.gv_srno=a1.gv_srno
							JOIN GV_GEN_DET B ON B.GV_SRNO=A.GV_SRNO 
							JOIN GV_GEN_MST C ON C.MEMO_ID=B.MEMO_ID
							WHERE B.MEMO_ID='''+@CKEYFIELDVAL1+''''		
				EXEC SP_EXECUTESQL @CCMD

				SET @CCMD=N'DELETE A 
							FROM SKU_GV_MST A
							JOIN GV_GEN_DET B ON B.GV_SRNO=A.GV_SRNO 
							JOIN GV_GEN_MST C ON C.MEMO_ID=B.MEMO_ID
							WHERE B.MEMO_ID='''+@CKEYFIELDVAL1+''''
		
				EXEC SP_EXECUTESQL @CCMD


				GOTO END_PROC				
			END
			ELSE
			BEGIN
				SET @NSTEP = 80		-- UPDATING SENT_TO_HO FLAG TEMP TABLE

				-- UPDATING SENTTOHO FLAG
				SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET LAST_UPDATE=GETDATE() '+
							N' WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + ''''
				EXEC SP_EXECUTESQL @CCMD
							
			END
			
			INSERT #TMPPMTBEFOREEDIT
			SELECT GV_SRNO FROM GV_GEN_DET WHERE MEMO_ID=@CKEYFIELDVAL1
			
		END					-- END OF EDITMODE

		SET @NSTEP = 95
		
		-- RECHECKING IF ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END

		-- UPDATING MASTER TABLE (PIM01106) FROM TEMP TABLE
		SET @NSTEP = 100		-- UPDATING MASTER TABLE

		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			, @BALWAYSUPDATE = 1
			

		-- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE
		SET @NSTEP = 110		-- UPDATING TRANSACTION TABLE

		-- UPDATING ROW_ID IN TEMP TABLES - PAYMODE_XN_DET
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE LEFT(ROW_ID,5)=''LATER'' OR ROW_ID='''''
		EXEC SP_EXECUTESQL @CCMD
		
		SET @NSTEP = 112
		-- UPDATING ROW_ID IN TEMP TABLES - PAYMODE_XN_DET
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET QUANTITY=1 WHERE	QUANTITY=0'
		EXEC SP_EXECUTESQL @CCMD

		SET @NSTEP = 114
		-- UPDATING ROW_ID IN TEMP TABLES - PAYMODE_XN_DET
		SET @CCMD = N'UPDATE a  SET gv_srno=''WC''+gv_srno FROM ' + @CTEMPDETAILTABLE+' a
					  JOIN gv_gen_mst b ON a.memo_id=b.memo_id
					  WHERE	validation_source=2 AND left(gv_srno,2)<>''WC'''
		EXEC SP_EXECUTESQL @CCMD
		

		
		SET @NSTEP = 116

		-- PAYMODE_XN_DET
		SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + ' 
					WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
					AND ROW_ID IN 
					(
						SELECT A.ROW_ID 
						FROM ' + @CDETAILTABLENAME + ' A 
						LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B ON A.ROW_ID = B.ROW_ID
						WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
						AND   B.ROW_ID IS NULL
					)'
		EXEC SP_EXECUTESQL @CCMD

		SET @NSTEP = 120
		
		SET @CCMD=N'UPDATE A SET DT_CREATED=C.MEMO_DT,DENOMINATION=B.DENOMINATION,VALIDITY_DAYS=C.VALIDITY_DAYS,
								 DT_EXPIRY=(CASE WHEN C.MODE=2 THEN DATEADD(DD,C.VALIDITY_DAYS,C.MEMO_DT) 
								 ELSE DT_EXPIRY END),
								 VALIDATE_WITH_EOSS=C.VALIDATE_WITH_EOSS,scheme_id=c.scheme_id,
								 allow_partial_redemption=isnull(c.allow_partial_redemption,0)
		FROM SKU_GV_MST A
		JOIN '+@CTEMPDETAILTABLE+' B ON B.GV_SRNO=A.GV_SRNO 
		JOIN GV_GEN_MST C ON C.MEMO_ID=B.MEMO_ID
		WHERE B.MEMO_ID='''+@CKEYFIELDVAL1+''''
		
		EXEC SP_EXECUTESQL @CCMD
		
		SET @NSTEP = 122
		
		
		SET @CCMD=N'INSERT SKU_GV_MST	(GV_SRNO, DT_CREATED, DT_EXPIRY,DENOMINATION,DISCOUNT_AMOUNT,
		VALIDITY_DAYS,GV_TYPE,VALIDATE_WITH_EOSS,scheme_id,allow_partial_redemption)
		SELECT A.GV_SRNO, B.MEMO_DT AS DT_CREATED,(CASE WHEN B.MODE=2 THEN DATEADD(DD,B.VALIDITY_DAYS,B.MEMO_DT) ELSE '''' END) AS DT_EXPIRY,
		A.DENOMINATION,A.DISCOUNT_AMOUNT,B.VALIDITY_DAYS,B.MODE,ISNULL(B.VALIDATE_WITH_EOSS,0),b.scheme_id,
		ISNULL(b.allow_partial_redemption,0) allow_partial_redemption
		FROM '+@CTEMPDETAILTABLE+' A JOIN GV_GEN_MST B ON A.MEMO_ID=B.MEMO_ID
		LEFT OUTER JOIN SKU_GV_MST C ON C.GV_SRNO=A.GV_SRNO 
		WHERE B.MEMO_ID='''+@CKEYFIELDVAL1+''' AND C.GV_SRNO IS NULL'
		
		EXEC SP_EXECUTESQL @CCMD	

		SET @NSTEP = 125		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES
		SET @CCMD=N'UPDATE A SET GV_SCRATCH_NO=B.GV_SCRATCH_NO
		FROM GV_MST_INFO A
		JOIN '+@CTEMPDETAILTABLE+' B ON B.GV_SRNO=A.GV_SRNO 
		WHERE B.MEMO_ID='''+@CKEYFIELDVAL1+''''
		
		EXEC SP_EXECUTESQL @CCMD
		
		SET @NSTEP = 127
		
		SET @CCMD=N'INSERT GV_MST_INFO	( GV_SRNO, GV_SCRATCH_NO )
		SELECT A.GV_SRNO, A.GV_SCRATCH_NO
		FROM '+@CTEMPDETAILTABLE+' A 
		LEFT OUTER JOIN GV_MST_INFO B ON B.GV_SRNO=A.GV_SRNO 
		WHERE A.MEMO_ID='''+@CKEYFIELDVAL1+''' AND B.GV_SRNO IS NULL'
		
		EXEC SP_EXECUTESQL @CCMD	
		
		SET @NSTEP = 130
		-- PAYMODE_XN_DET
		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME
			, @CKEYFIELD1	= 'ROW_ID'
			, @BALWAYSUPDATE = 1

		
		SET @NSTEP = 132
		SET @CCMD=N'SELECT 	A.GV_SRNO,0 AS QUANTITY_IN_STOCK FROM '+@CTEMPDETAILTABLE+' A 
					LEFT OUTER JOIN PMT_GV_MST B ON A.GV_SRNO=B.GV_SRNO 
					WHERE B.GV_SRNO IS NULL'
					
		INSERT PMT_GV_MST ( GV_SRNO, QUANTITY_IN_STOCK )  
		EXEC SP_EXECUTESQL @CCMD
		
		SET @NSTEP = 135
		EXEC UPDATEPMT_GV   
		   @CXNTYPE   = 'GVGEN'    
		 , @CXNID   = @CKEYFIELDVAL1  
		 , @CCMD    = @CCMDOUTPUT OUTPUT  
	      
		IF @CCMDOUTPUT <> ''  
		BEGIN  
			 PRINT @CCMDOUTPUT  
		       
			 SET @NSTEP = 140
		        
			 SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'  
			 SET @BNEGSTOCKFOUND=1      
			 EXEC SP_EXECUTESQL @CCMDOUTPUT  
			 GOTO END_PROC  
		END  


		-- VALIDATING ENTRIES 
		SET @NSTEP = 150		-- VALIDATING ENTRIES

		EXEC VALIDATEXN
			  @CXNTYPE	= 'GVGEN'
			, @CXNID	= @CKEYFIELDVAL1
			, @NUPDATEMODE = @NUPDATEMODE			
			, @CCMD		= @CCMDOUTPUT OUTPUT

		IF @CCMDOUTPUT <> ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION FAILED : ' + @CCMDOUTPUT + '...'
			GOTO END_PROC
		END
	
		-- AFTER SUCCESSFUL SAVING , JUST DROP THE TEMP TABLES CREATED BY APPLICATION
		SET @NSTEP = 160
		
	
	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'Error in Procedure SAVETRAN_GVGEN at STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'
		
		GOTO END_PROC
	END CATCH
	
END_PROC:

	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
		BEGIN
			COMMIT TRANSACTION
		END	
		ELSE
			ROLLBACK
	END
	
	IF ISNULL(@BNEGSTOCKFOUND,0)=0
	BEGIN
		INSERT @OUTPUT ( ERRMSG, MEMO_ID)
			VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )

		SELECT * FROM @OUTPUT	
	END	

	
END		
------------------------------------------------------ END OF PROCEDURE SAVETRAN_GVGEN