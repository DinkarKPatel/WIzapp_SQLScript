create PROCEDURE SAVETRAN_USERROLE
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CMEMONOPREFIX		VARCHAR(50),
	@CFINYEAR			VARCHAR(10),	
	@CMEMOID			VARCHAR(40)='',	
	@CLOCID				VARCHAR(4)=''
)
--WITH ENCRYPTION
AS
BEGIN
	-- @NUPDATEMODE:	1- NEW PUR ADDED, 
	--					2- NEW BOX ADDED TO EXISTING PUR, 
	--					3- CURRENT PUR CANCELLED, 
	--					4- EXISTING PUR EDITED

	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),			
			@CDETAILTABLENAME1		VARCHAR(100),			
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME1	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE1		VARCHAR(100),			
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(4),
			@CLOCATIONID			VARCHAR(4),
			@CHODEPTID				VARCHAR(4),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@NSUBTOTAL NUMERIC(20,2),
			@BNEGSTOCKFOUND BIT,
			@CWSLINVOICEID	VARCHAR(22),
			@BPURTHROUGHIMPORT	BIT,@CMSG VARCHAR(200),@NTAX NUMERIC(20,2)
			
			--IF OBJECT_ID('TEMPDB..#TEMP_USERROLE_USERS','U') IS NOT NULL
			--DROP TABLE #TEMP_USERROLE_USERS
			--CREATE TABLE #TEMP_USERROLE_USERS (USERROLE_ID VARCHAR(10) ,USER_CODE CHAR(7))

	BEGIN TRY
		
		BEGIN TRANSACTION
		
		SET @BPURTHROUGHIMPORT=0
		
		SET @NSTEP = 10

		SET @CTEMPDETAILTABLENAME	= 'TEMP_USERROLE_COL_DET_'+LTRIM(RTRIM(STR(@NSPID)))	
		SET @CTEMPDETAILTABLENAME1	= 'TEMP_USERROLE_USERS_'+LTRIM(RTRIM(STR(@NSPID)))	
				
					
	
		IF @NUPDATEMODE=3			
		BEGIN
			SET @NSTEP = 25
						
			IF ISNULL(@CMEMOID,'') = ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED .....CANNOT PROCEED'
				GOTO END_PROC  		
			END
			
			SET @CKEYFIELDVAL1=@CMEMOID
			
			SET @NSTEP = 30
				
				
			SET @NSTEP = 38
			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE USERROLE_MST SET CANCELLED = 1,LAST_UPDATE=GETDATE() ' + 
						N' WHERE USERROLE_ID = ''' + @CMEMOID + ''''
			EXEC SP_EXECUTESQL @CCMD
			
			GOTO END_PROC
		
		END

		SET @NSTEP = 50        
				
	
		
		SET @NSTEP = 55	
		IF @NUPDATEMODE<>2
		IF ISNULL(@CCMDOUTPUT,'') <> ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION ON TEMP DATA FAILED : ' + @CCMDOUTPUT + '...'
			GOTO END_PROC
		END
		
		--IF @NUPDATEMODE=2
		--BEGIN
		--	INSERT #TEMP_USERROLE_USERS 
		--	SELECT USERROLE_ID,USER_CODE FROM USERROLE_USERS WHERE USERROLE_ID = @CMEMOID
		--	DELETE FROM USERROLE_USERS WHERE USERROLE_ID = @CMEMOID
		--	DELETE FROM USERROLE_COL_DET WHERE USERROLE_ID = @CMEMOID
		--	DELETE FROM USERROLE_MST WHERE USERROLE_ID = @CMEMOID
			
		--END
		
		DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

		SET @NSTEP = 60		-- SETTTING UP ENVIRONMENT
		SET @CTEMPDBNAME = ''

		SET @CMASTERTABLENAME	= 'USERROLE_MST'
		SET @CDETAILTABLENAME	= 'USERROLE_COL_DET'
		SET @CDETAILTABLENAME1	= 'USERROLE_USERS'
	

		SET @CTEMPMASTERTABLENAME	= 'TEMP_USERROLE_MST_'+LTRIM(RTRIM(STR(@NSPID)))
		SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
		SET @CTEMPDETAILTABLE	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME
		SET @CTEMPDETAILTABLE1	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME1
		
		
		SET @CERRORMSG			= ''
		SET @LDONOTUPDATESTOCK	= 0
		SET @CKEYFIELD1			= 'USERROLE_ID'
		SET @CMEMONO			= 'USERROLE_ID'
		SET @NMEMONOLEN			= 10
		
		IF ISNULL(@CLOCID,'')=''
			SELECT @CLOCATIONID	=DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 
		ELSE
			SELECT @CLOCATIONID=@CLOCID
			
		SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		
		
		SET @NSTEP=70
		

		IF ISNULL(@CLOCATIONID,'')=''
		 BEGIN
			SET @CERRORMSG =' LOCATION ID CAN NOT BE BLANK  '  
			GOTO END_PROC    
		 END

		-- GETTING DEPT_ID FROM TEMP MASTER TABLE
		SET @CCMD = 'SELECT @CMEMODEPTID = DEPT_ID, @CKEYFIELDVAL1 = USERROLE_ID FROM '+@CTEMPMASTERTABLE
	
		EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(4) OUTPUT, @CKEYFIELDVAL1 VARCHAR(50) OUTPUT', 
								  @CMEMODEPTID OUTPUT, @CKEYFIELDVAL1 OUTPUT
		IF (@CMEMODEPTID IS NULL )
		BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED...'
			  --SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
			  GOTO END_PROC  		
		END


 
 
		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	

			SET @NSTEP = 80		-- GENERATING NEW KEY
            PRINT 'GENERATING NEW KEY... START'			
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN
				-- GENERATING NEW MRR_NO		
				SET @NSAVETRANLOOP=0
				WHILE @NSAVETRANLOOP=0
				BEGIN
					SET @NSTEP=90
					EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
									@CFINYEAR,0, @CMEMONOVAL OUTPUT   
					
					PRINT @CMEMONOVAL
					
					
					SET @NSTEP=100
					SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
											WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' )
									SET @NLOOPOUTPUT=0
								ELSE
									SET @NLOOPOUTPUT=1'
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
				END

				IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
					  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
					  GOTO END_PROC  		
				END

                PRINT 'GENERATING NEW KEY... START'			

				SET @NSTEP = 110		-- GENERATING NEW ID
				

				-- GENERATING NEW MRR ID
				SET @CKEYFIELDVAL1 = @CMEMONOVAL
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
					  GOTO END_PROC
				END
				
				SET @NSTEP = 120
				
				-- RECHECKING IF ID IS STILL LATER
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
				BEGIN
					SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					GOTO END_PROC
				END				


				SET @NSTEP = 130		-- UPDATING NEW ID INTO TEMP TABLES

				-- UPDATING NEWLY GENERATED MRR NO AND MRR ID IN PIM AND PID TEMP TABLES
				SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''''
				EXEC SP_EXECUTESQL @CCMD
			
				SET @NSTEP = 135		-- UPDATING NEW ID INTO TEMP TABLES
				
				
				SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD
				
				SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD
				
				
				
				
			END

		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
		      
			SET @NSTEP = 150		-- GETTING ID INFO FROM TEMP TABLE

			-- GETTING MRR_ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = USERROLE_ID, @CMEMONOVAL = USERROLE_ID FROM '+@CTEMPMASTERTABLE
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
				  
				  GOTO END_PROC  		
			END
			SET @NSTEP = 155		-- STORING OLD STATUS OF BARCODES 
			
						
			SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET LAST_UPDATE=GETDATE() '
			EXEC SP_EXECUTESQL @CCMD
							
			
				
			 	
		END					-- END OF EDITMODE

		SET @NSTEP = 180

		-- RECHECKING IF ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END				
		
		
		SET @NSTEP=210						 
		
		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			,@BALWAYSUPDATE = 1

		-- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE
		SET @NSTEP = 220		-- UPDATING TRANSACTION TABLE

		-- UPDATING ROW_ID IN TEMP TABLES
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE LEFT(ROW_ID,5) = ''LATER'''
		EXEC SP_EXECUTESQL @CCMD
		
		SET @NSTEP = 225		
				
		
		-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
		SET @NSTEP = 230		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES

		SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + ' 
					WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
					AND ROW_ID IN 
					(
						SELECT A.ROW_ID 
						FROM ' + @CDETAILTABLENAME + ' A 
						LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B ON A.ROW_ID = B.ROW_ID
						WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
						AND B.ROW_ID IS NULL
					)'
		PRINT @CCMD
		
		
		EXEC SP_EXECUTESQL @CCMD
		
		--PRINT 'ROHIT'
		-- INSERTING/UPDATING THE ENTRIES IN PID01106 TABLE FROM TEMPTABLE
		SET @NSTEP = 240		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME
			, @CKEYFIELD1	= 'ROW_ID'
			--, @LUPDATEXNS	= 1
	
		    	
		--IF @NUPDATEMODE=2
		--BEGIN
			--INSERT USERROLE_USERS 
			--SELECT USERROLE_ID,USER_CODE FROM #TEMP_USERROLE_USERS WHERE USERROLE_ID = @CMEMOID
			--DROP TABLE #TEMP_USERROLE_USERS
		--END
		SET @NSTEP = 24	
		DELETE FROM USERROLE_USERS WHERE USERROLE_ID = @CMEMOID
		SET @CCMD = N'INSERT USERROLE_USERS (USERROLE_ID,USER_CODE) 
		SELECT USERROLE_ID,USER_CODE FROM ' + @CTEMPDETAILTABLE1 
		EXEC SP_EXECUTESQL @CCMD

		--EXEC UPDATEMASTERXN 
		--	  @CSOURCEDB	= @CTEMPDBNAME
		--	, @CSOURCETABLE = @CTEMPDETAILTABLENAME1
		--	, @CDESTDB		= ''
		--	, @CDESTTABLE	= @CDETAILTABLENAME1
		--	, @CKEYFIELD1	= ''

	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'
			
		GOTO END_PROC
	END CATCH
	
	
END_PROC:
	
	
	
	IF @@TRANCOUNT>0
	BEGIN
		
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
		BEGIN
			COMMIT TRANSACTION
		END
		ELSE
			ROLLBACK
	END

		
	
	IF ISNULL(@BNEGSTOCKFOUND,0)=0
	BEGIN
		INSERT @OUTPUT ( ERRMSG, MEMO_ID)
				VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )

		SELECT * FROM @OUTPUT	
	END	

   	SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPDETAILTABLE1 + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPDETAILTABLE1
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPDETAILTABLE + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPDETAILTABLE
	EXEC SP_EXECUTESQL @CCMD
	

    SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPMASTERTABLE + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPMASTERTABLE
	EXEC SP_EXECUTESQL @CCMD		
END
