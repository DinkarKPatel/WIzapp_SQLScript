CREATE PROCEDURE SP3S_RECON_FILTER_PRD
(
	 @CREP_ID VARCHAR(10)=''
	,@CBIN_ID VARCHAR(4)=''
	,@CUSER_CODE VARCHAR(7)=''
	,@DDATE DATETIME=''
	,@CFILTER VARCHAR(MAX)=''
	,@CTITLE VARCHAR(50)=''
	,@CFINYEAR VARCHAR(5)=''
	,@CMEMO_ID VARCHAR(20)=''
	,@NMODE NUMERIC(1)=1 ,
	@CMULTI_BIN_ID VARCHAR(2000)=''
)
--WITH ENCRYPTION 
AS 
BEGIN
	DECLARE @CERRMSG VARCHAR(500),@CCMD NVARCHAR(MAX),@CDEPT_ID VARCHAR(5),@CNEWKEYVAL VARCHAR(20)
	
	DECLARE @TOUTPUT TABLE(PRODUCT_CODE VARCHAR(50),QUANTITY NUMERIC(10,3),ERRMSG VARCHAR(500),MEMO_ID VARCHAR(10))
	
	SELECT TOP 1 @CDEPT_ID=LTRIM(RTRIM(VALUE)) FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID'
	
	
--	SELECT @CMULTI_BIN_ID
	IF @NMODE=1 /*RECONCILLATION PROCESS IS STARTED*/
	BEGIN
	BEGIN TRY	 
		 IF OBJECT_ID('TEMPDB..#PRODUCTLIST','U') IS NOT NULL
			DROP TABLE #PRODUCTLIST
		 
		 CREATE TABLE #PRODUCTLIST(PRODUCT_CODE VARCHAR(50),PRODUCT_UID VARCHAR(100))  
		 --GET THE PRODUCT CODES FOR RECONCILLATION BASED ON FILTER CRITERIA 
		 SET @CCMD=N'SELECT DISTINCT PRODUCT_CODE,PRODUCT_UID 
					 FROM PRD_SKU (NOLOCK) 
					 JOIN ARTICLE (NOLOCK) ON PRD_SKU.ARTICLE_CODE = ARTICLE.ARTICLE_CODE
					 JOIN SECTIOND (NOLOCK) ON ARTICLE.SUB_SECTION_CODE = SECTIOND.SUB_SECTION_CODE
					 JOIN SECTIONM (NOLOCK) ON SECTIOND.SECTION_CODE = SECTIONM.SECTION_CODE
					 JOIN PARA1 (NOLOCK) ON PRD_SKU.PARA1_CODE = PARA1.PARA1_CODE
					 JOIN PARA2 (NOLOCK) ON PRD_SKU.PARA2_CODE = PARA2.PARA2_CODE
					 JOIN PARA3 (NOLOCK) ON PRD_SKU.PARA3_CODE = PARA3.PARA3_CODE
					 JOIN PARA4 (NOLOCK) ON PRD_SKU.PARA4_CODE = PARA4.PARA4_CODE
					 JOIN PARA5 (NOLOCK) ON PRD_SKU.PARA5_CODE = PARA5.PARA5_CODE
					 JOIN PARA6 (NOLOCK) ON PRD_SKU.PARA6_CODE = PARA6.PARA6_CODE
					 JOIN LMV01106 (NOLOCK) ON PRD_SKU.AC_CODE = LMV01106.AC_CODE
					LEFT OUTER JOIN ARTICLE_FIX_ATTR ATTR  (NOLOCK) ON ARTICLE.ARTICLE_CODE = ATTR.ARTICLE_CODE 
					LEFT OUTER JOIN ATTR1_MST AT1 (NOLOCK) ON AT1.ATTR1_KEY_CODE=ATTR.ATTR1_KEY_CODE
					LEFT OUTER JOIN ATTR2_MST AT2 (NOLOCK) ON AT2.ATTR2_KEY_CODE=ATTR.ATTR2_KEY_CODE
					LEFT OUTER JOIN ATTR3_MST AT3 (NOLOCK) ON AT3.ATTR3_KEY_CODE=ATTR.ATTR3_KEY_CODE
					LEFT OUTER JOIN ATTR4_MST AT4 (NOLOCK) ON AT4.ATTR4_KEY_CODE=ATTR.ATTR4_KEY_CODE
					LEFT OUTER JOIN ATTR5_MST AT5 (NOLOCK) ON AT5.ATTR5_KEY_CODE=ATTR.ATTR5_KEY_CODE
					LEFT OUTER JOIN ATTR6_MST AT6 (NOLOCK) ON AT6.ATTR6_KEY_CODE=ATTR.ATTR6_KEY_CODE
					LEFT OUTER JOIN ATTR7_MST AT7 (NOLOCK) ON AT7.ATTR7_KEY_CODE=ATTR.ATTR7_KEY_CODE
					LEFT OUTER JOIN ATTR8_MST AT8 (NOLOCK) ON AT8.ATTR8_KEY_CODE=ATTR.ATTR8_KEY_CODE
					LEFT OUTER JOIN ATTR9_MST AT9 (NOLOCK) ON AT9.ATTR9_KEY_CODE=ATTR.ATTR9_KEY_CODE
					LEFT OUTER JOIN ATTR10_MST AT10 (NOLOCK) ON AT10.ATTR10_KEY_CODE=ATTR.ATTR10_KEY_CODE
					LEFT OUTER JOIN ATTR11_MST AT11 (NOLOCK) ON AT11.ATTR11_KEY_CODE=ATTR.ATTR11_KEY_CODE
					LEFT OUTER JOIN ATTR12_MST AT12 (NOLOCK) ON AT12.ATTR12_KEY_CODE=ATTR.ATTR12_KEY_CODE
					LEFT OUTER JOIN ATTR13_MST AT13 (NOLOCK) ON AT13.ATTR13_KEY_CODE=ATTR.ATTR13_KEY_CODE
					LEFT OUTER JOIN ATTR14_MST AT14 (NOLOCK) ON AT14.ATTR14_KEY_CODE=ATTR.ATTR14_KEY_CODE
					LEFT OUTER JOIN ATTR15_MST AT15 (NOLOCK) ON AT15.ATTR15_KEY_CODE=ATTR.ATTR15_KEY_CODE
					LEFT OUTER JOIN ATTR16_MST AT16 (NOLOCK) ON AT16.ATTR16_KEY_CODE=ATTR.ATTR16_KEY_CODE
					LEFT OUTER JOIN ATTR17_MST AT17 (NOLOCK) ON AT17.ATTR17_KEY_CODE=ATTR.ATTR17_KEY_CODE
					LEFT OUTER JOIN ATTR18_MST AT18 (NOLOCK) ON AT18.ATTR18_KEY_CODE=ATTR.ATTR18_KEY_CODE
					LEFT OUTER JOIN ATTR19_MST AT19 (NOLOCK) ON AT19.ATTR19_KEY_CODE=ATTR.ATTR19_KEY_CODE
					LEFT OUTER JOIN ATTR20_MST AT20 (NOLOCK) ON AT20.ATTR20_KEY_CODE=ATTR.ATTR20_KEY_CODE
					LEFT OUTER JOIN ATTR21_MST AT21 (NOLOCK) ON AT21.ATTR21_KEY_CODE=ATTR.ATTR21_KEY_CODE
					LEFT OUTER JOIN ATTR22_MST AT22 (NOLOCK) ON AT22.ATTR22_KEY_CODE=ATTR.ATTR22_KEY_CODE
					LEFT OUTER JOIN ATTR23_MST AT23 (NOLOCK) ON AT23.ATTR23_KEY_CODE=ATTR.ATTR23_KEY_CODE
					LEFT OUTER JOIN ATTR24_MST AT24 (NOLOCK) ON AT24.ATTR24_KEY_CODE=ATTR.ATTR24_KEY_CODE
					LEFT OUTER JOIN ATTR25_MST AT25(NOLOCK) ON AT25.ATTR25_KEY_CODE=ATTR.ATTR25_KEY_CODE
					 JOIN BIN (NOLOCK) ON 1=1
					 WHERE ARTICLE.STOCK_NA=0 '
					 +(CASE WHEN ISNULL(@CFILTER,'')='' THEN '' ELSE ' AND '+@CFILTER END)
		PRINT @CCMD			 
		
		INSERT #PRODUCTLIST
		EXEC SP_EXECUTESQL @CCMD
		
		IF NOT EXISTS(SELECT TOP 1 'U' FROM #PRODUCTLIST)
		BEGIN
			SET @CERRMSG='PRODUCT CODE NOT FOUND FOR THE GIVEN FILTER CRITERIA.'
			
			INSERT @TOUTPUT(PRODUCT_CODE,QUANTITY,ERRMSG)
			SELECT '',0,@CERRMSG
			
			GOTO END_PROC
		END
		
		SET @CCMD=N'IF NOT EXISTS(SELECT TOP 1 ''U'' FROM PRD_DEPARTMENT_MST WHERE DEPARTMENT_ID IN ('+@CMULTI_BIN_ID+'))
		BEGIN
			SET @CERRMSG=''INVALID DEPARTMENT...''
	
		END'
		PRINT @CCMD
	    EXEC SP_EXECUTESQL @CCMD, N'@CERRMSG VARCHAR(500) OUTPUT', @CERRMSG OUTPUT
		
		IF ISNULL(@CERRMSG,'')<>''
		BEGIN
		INSERT @TOUTPUT(PRODUCT_CODE,QUANTITY,ERRMSG)
			SELECT '',0,@CERRMSG
			GOTO END_PROC
		END
		
		IF ISNULL(@CTITLE,'')=''
		BEGIN
			SET @CERRMSG='RECONCILLATION TITLE CANNOT BE BLANK.CANNOT PROCEED'
			
			INSERT @TOUTPUT(PRODUCT_CODE,QUANTITY,ERRMSG)
			SELECT '',0,@CERRMSG
			
			GOTO END_PROC
		END
				
		SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM PRD_PMT A JOIN #PRODUCTLIST B ON A.PRODUCT_UID=B.PRODUCT_UID
				  WHERE  A.DEPARTMENT_ID IN ('+@CMULTI_BIN_ID+') AND ISNULL(A.REP_ID,'''')<>'''' AND A.REP_ID<>'''+@CREP_ID+''')
		BEGIN
			SET @CERRMSG=''SELECTED PRODUCTS ARE ALREADY UNDER RECONCILLATION PROCESS.CANNOT PROCEED.''
			
		END'	
		PRINT @CCMD
	    EXEC SP_EXECUTESQL @CCMD, N'@CERRMSG VARCHAR(500) OUTPUT', @CERRMSG OUTPUT
	    
		IF ISNULL(@CERRMSG,'')<>''
		BEGIN
		INSERT @TOUTPUT(PRODUCT_CODE,QUANTITY,ERRMSG)
			SELECT '',0,@CERRMSG
			GOTO END_PROC
		END	  
		
		IF OBJECT_ID('TEMPDB..#PRODUCTSTOCK','U') IS NOT NULL
		   DROP TABLE #PRODUCTSTOCK
		
		 SELECT VW.DEPARTMENT_ID,VW.PRODUCT_CODE,VW.PRODUCT_UID
		,CAST(0 AS NUMERIC(12,3)) AS STOCK_QTY
		INTO #PRODUCTSTOCK  
		FROM VW_STOCKSTATUS_REPORT VW
		WHERE 1=2
		
				
		
		SET @CCMD = N'SELECT A.DEPARTMENT_ID,A.PRODUCT_CODE AS PRODUCT_CODE ,A.PRODUCT_UID  
                     ,CAST(SUM( (CASE WHEN A.XN_TYPE=''OPS'' OR (A.XN_TYPE IN (''OPS'',''APR'',''PUR'',''PRD_SCF'',''PFI'', ''UNC'', ''WSR'',''JWR'',''AMR'', ''STK-IN'', ''ISSUE-MAT-IN'',''JWR-FIN'')) 
                     THEN 1 WHEN A.XN_TYPE IN (''PRT'',''CIP'',''CNC'',''WSL'',''AMI'',''STK-OUT'',''APP'',''CODE-CON'',''JWI'',''JWR-CON'',''ISSUE-MAT-OUT'')   THEN -1 ELSE 0 END) * (XN_QTY)) AS NUMERIC(14,3)) AS STOCK_QTY
                     FROM VW_STOCKSTATUS_REPORT A  (NOLOCK) 
                     JOIN #PRODUCTLIST PL ON A.PRODUCT_UID=PL.PRODUCT_UID
                     WHERE  A.DEPARTMENT_ID IN ('+@CMULTI_BIN_ID+')
                     GROUP BY  A.DEPARTMENT_ID,A.PRODUCT_CODE,A.PRODUCT_UID'
		
		
		
		PRINT @CCMD
		INSERT INTO #PRODUCTSTOCK(A.DEPARTMENT_ID,A.PRODUCT_CODE,PRODUCT_UID,STOCK_QTY)
		EXEC SP_EXECUTESQL @CCMD
		
		--SELECT * INTO PRODUCTSTOCK FROM #PRODUCTSTOCK
		
		BEGIN TRANSACTION 
		
			SET @CCMD=N'UPDATE A SET QUANTITY_IN_STOCK=0
			FROM PRD_PMT A 
			JOIN #PRODUCTSTOCK B ON A.PRODUCT_UID=B.PRODUCT_UID
			WHERE  A.DEPARTMENT_ID IN ('+@CMULTI_BIN_ID+') '
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
			
			UPDATE A SET QUANTITY_IN_STOCK=B.STOCK_QTY
			FROM PRD_PMT A
			JOIN #PRODUCTSTOCK B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND  A.DEPARTMENT_ID=B.DEPARTMENT_ID 
			AND A.PRODUCT_UID =B.PRODUCT_UID 
		
			IF EXISTS(SELECT TOP 1 'U' FROM PRD_PMT A 
					  JOIN #PRODUCTSTOCK B ON A.PRODUCT_CODE=B.PRODUCT_CODE  AND A.DEPARTMENT_ID=B.DEPARTMENT_ID
					  AND A.PRODUCT_UID =B.PRODUCT_UID 
					  WHERE A.QUANTITY_IN_STOCK<0)
			BEGIN
				SET @CERRMSG='NEGATIVE STOCK'
				INSERT @TOUTPUT(PRODUCT_CODE,QUANTITY,ERRMSG)
				SELECT A.PRODUCT_CODE,A.QUANTITY_IN_STOCK,'NEGATIVE STOCK' FROM PRD_PMT A 
				JOIN #PRODUCTSTOCK B ON A.PRODUCT_CODE=B.PRODUCT_CODE  AND A.DEPARTMENT_ID=A.DEPARTMENT_ID
				AND A.PRODUCT_UID =B.PRODUCT_UID 
				WHERE A.QUANTITY_IN_STOCK<0
			END		  
			ELSE
			BEGIN
					SET @CCMD=N'UPDATE A SET REP_ID='''+@CREP_ID+'''
					FROM PRD_PMT A 
					JOIN #PRODUCTLIST B ON A.PRODUCT_UID=B.PRODUCT_UID
					WHERE  A.DEPARTMENT_ID IN ('+@CMULTI_BIN_ID+') '
					PRINT @CCMD
			        EXEC SP_EXECUTESQL @CCMD
				
				LBL_GENKEY:	
							
				    DECLARE @PREFIX VARCHAR(10)
				    SET @PREFIX= @CDEPT_ID+@CFINYEAR
				    
					EXEC GETNEXTKEY 
						  @CTABLENAME='PRD_STMH01106'
						 ,@CCOLNAME='MEMO_ID'
						 ,@NWIDTH=10
						 ,@CPREFIX=@PREFIX
						 ,@NLZEROS=1
						 ,@CFINYEAR=@CFINYEAR
						 ,@NROWCOUNT=2
						 ,@CNEWKEYVAL=@CNEWKEYVAL OUTPUT
					
					IF ISNULL(@CNEWKEYVAL,'')=''
					BEGIN
						SET @CERRMSG='ERROR GENERATING MEMO_ID..'
						
						INSERT @TOUTPUT(PRODUCT_CODE,QUANTITY,ERRMSG)
						SELECT '',0,@CERRMSG
						
						GOTO END_PROC
					END
					
					IF EXISTS(SELECT TOP 1 'U' FROM PRD_STMH01106 WHERE MEMO_ID=@CNEWKEYVAL)
						GOTO LBL_GENKEY
					ELSE
					BEGIN
						INSERT PRD_STMH01106(STM_TITLE,STM_START_DT, STM_END_DT, RECONCILED, MEMO_ID, DEPT_ID, SETTLED, REP_ID, RECON_BIN_ID,LAST_UPDATE,MULTI_DEPARTMENT_ID)  
						SELECT @CTITLE AS STM_TITLE,@DDATE AS STM_START_DT,'' AS STM_END_DT,0 AS RECONCILED,@CNEWKEYVAL AS MEMO_ID
							  ,@CDEPT_ID AS DEPT_ID,0 AS SETTLED,@CREP_ID AS REP_ID,'000' AS RECON_BIN_ID,GETDATE(),@CMULTI_BIN_ID 
					END	
					INSERT @TOUTPUT(PRODUCT_CODE,QUANTITY,ERRMSG,MEMO_ID)
					SELECT '',0,'',@CNEWKEYVAL
			END
	END TRY
	BEGIN CATCH
		 SET @CERRMSG='ERROR IN PROCEDURE - SP3S_RECON_FILTER, '+ERROR_MESSAGE()
		 INSERT @TOUTPUT(PRODUCT_CODE,QUANTITY,ERRMSG)
		 SELECT '',0,@CERRMSG
		 
		 IF @@TRANCOUNT>0	
			ROLLBACK	
			
		 GOTO END_PROC	
	END CATCH	
	END
	---END OF MODE 1
	ELSE IF @NMODE=2
	BEGIN
		DECLARE @TERRMSG TABLE(ERRMSG VARCHAR(500))
		
		INSERT @TERRMSG
		EXEC SP_STOCK_RECON_HIST_PRD  @MEMO_ID=@CMEMO_ID
								 ,@DEPT_ID=@CDEPT_ID
								 ,@USER_CODE=@CUSER_CODE
								 ,@C_DATE=@DDATE
								 
		IF EXISTS(SELECT TOP 1 'U' FROM @TERRMSG WHERE ISNULL(ERRMSG,'')<>'')
		BEGIN
			SELECT @CERRMSG AS ERRMSG FROM @TERRMSG
		END
		ELSE
		BEGIN
			
			UPDATE PRD_STMH01106 SET RECONCILED=1,STM_END_DT=@DDATE WHERE MEMO_ID=@CMEMO_ID
			UPDATE PRD_PMT SET REP_ID='' WHERE REP_ID=@CREP_ID 
			SELECT '' AS ERRMSG
		END
	END
END_PROC:	
	IF @NMODE=1
	BEGIN
		SELECT * FROM @TOUTPUT
		
		IF @@TRANCOUNT>0
			COMMIT
	END	
END
--END OF PROCEDURE - SP3S_RECON_FILTER_PRD
