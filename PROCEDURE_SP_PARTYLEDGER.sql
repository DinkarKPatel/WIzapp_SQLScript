CREATE PROCEDURE SP_PARTYLEDGER  
(  
 @CPARTYCODE VARCHAR(12),  
 @DTFROM  DATETIME,  
    @DTTO  DATETIME,  
    @NPARTYTYPE INT=0  
)  
--WITH ENCRYPTION
AS          
  
--SET @DTFROM  =  '2010-01-22'  
--SET @DTTO  = '2010-02-10'  
BEGIN  
  
 IF @CPARTYCODE =''  
 BEGIN  
  IF OBJECT_ID('TEMPDB..#TMPPARTYLEDGER','U') IS NOT NULL  
   DROP TABLE #TMPPARTYLEDGER 
   
        
  SELECT A.XN_PARTY_CODE, B.CUSTOMER_FNAME , B.CUSTOMER_LNAME ,
        'CUSTOMER'  AS PARTY_TYPE,  
         SUM(  CASE WHEN ( A.XN_DT < @DTFROM )  THEN A.XN_CASH ELSE 0 END ) AS OPS_CASH,  
         SUM(  CASE WHEN ( A.XN_DT BETWEEN @DTFROM AND  @DTTO) AND  XN_CASH  < 0 AND  A.XN_TYPE NOT IN ('ACT','RST')   
                    THEN XN_CASH  ELSE 0 END )  AS CASH_RCVD,  
         SUM(  CASE WHEN ( A.XN_DT BETWEEN @DTFROM AND  @DTTO) AND   XN_CASH  > 0 AND  A.XN_TYPE NOT IN ('ACT','RST')   
                    THEN XN_CASH   ELSE 0 END )   AS CASH_ISSUED,    
         SUM(  CASE WHEN ( A.XN_DT <= @DTTO )  THEN A.XN_CASH ELSE 0 END ) AS CLOSING_CASH  
  INTO #TMPPARTYLEDGER
   FROM XNPARTYBAL A  
  JOIN CUSTDYM  B ON A.XN_PARTY_CODE = B.CUSTOMER_CODE   
  GROUP BY A.XN_PARTY_CODE , B.CUSTOMER_FNAME , B.CUSTOMER_LNAME 
  ORDER BY B.CUSTOMER_FNAME , B.CUSTOMER_LNAME 
    
  SELECT   (CASE WHEN CLOSING_CASH<0 THEN 1 ELSE 2 END) AS CASH_STATUS,*  
  FROM #TMPPARTYLEDGER WHERE  CLOSING_CASH<>0  
  
 END   
  
 ELSE  
   
 BEGIN  
  DECLARE    @NOPS_CASH NUMERIC(14,2)  
  
  
  SELECT   @NOPS_CASH =  SUM(  A.XN_CASH )   
  FROM XNPARTYBAL A  
  WHERE A.XN_PARTY_CODE =@CPARTYCODE AND A.XN_DT < @DTFROM    
  
  
  
  SELECT  B.CUSTOMER_FNAME , B.CUSTOMER_LNAME , A.XN_PARTY_CODE, A.XN_NO, A.XN_DT,A.NARRATION, 
         A.XN_TYPE ,   ISNULL(@NOPS_CASH,0)AS OPS_CASH,  
     (CASE WHEN XN_CASH  < 0  THEN XN_CASH  ELSE 0 END )  AS CASH_RCVD,  
     (CASE WHEN  XN_CASH  > 0  THEN XN_CASH   ELSE 0 END )   AS CASH_ISSUED  
  FROM XNPARTYBAL A  
  JOIN CUSTDYM B ON A.XN_PARTY_CODE= B.CUSTOMER_CODE  
  WHERE A.XN_PARTY_CODE = @CPARTYCODE AND A.XN_DT BETWEEN @DTFROM AND @DTTO    
  ORDER BY A.XN_DT,XN_ID,XN_ORDER  
  
 END   
END
