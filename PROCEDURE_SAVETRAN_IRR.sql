create PROCEDURE SAVETRAN_IRR
(
	@NUPDATEMODE		NUMERIC(2,0),
	@NSPID				VARCHAR(50),
	@CMEMONOPREFIX		VARCHAR(50),
	@CFINYEAR			VARCHAR(10),
	@CMACHINENAME		VARCHAR(100)='',
	@CWINDOWUSERNAME	VARCHAR(100)='',
	@CWIZAPPUSERCODE	VARCHAR(10)='0000000',
	@CMEMOID			VARCHAR(40)='',
	@BTHROUGHIMPORT     BIT=0,
	@bPaste BIT=0
)
----WITH ENCRYPTION
AS
BEGIN
	-- @NUPDATEMODE:	1- ITEM RATE REVISION
	--					2- TAG PRINTING

	
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(4),
			@CLOCATIONID			VARCHAR(4),
			@CHODEPTID				VARCHAR(4),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					varchar(20),
			@BNEGSTOCKFOUND BIT,
			@bBARCODESGenerated		BIT,@CBARCODEPREFIX VARCHAR(20),
			@NMEMOTYPE				NUMERIC(1,0),
			@CDONOTGENBARCODE       VARCHAR(2),@CERRPRODUCTCODE VARCHAR(50),
		@BDUPRECORDFOUND BIT,@NTYPECOUNT BIT,
		@bServerLoc bit,@NAPPROVED BIT,@cMultipleFc VARCHAR(4),@CLOCID VARCHAR(4)

	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))
	DECLARE @OUTPUT1 TABLE ( ERRMSG VARCHAR(2000), PRODUCT_CODE VARCHAR(50))

	SET  @bBARCODESGenerated=0
	DECLARE @nSpIdlog varchar(40)
	set @nSpidlog=CAST(NEWID() AS VARCHAR(40))
	--convert(varchar,newid())

	SET @NSTEP = 0		-- SETTTING UP ENVIRONMENT
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 

	-- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
	SET @CTEMPDBNAME = ''

	SET @CMASTERTABLENAME	= 'IRM01106'
	SET @CDETAILTABLENAME	= 'IRD01106'

	SET @CTEMPMASTERTABLENAME	= 'IRR_IRM01106_UPLOAD'
	SET @CTEMPDETAILTABLENAME	= 'IRR_IRD01106_UPLOAD'

	SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME
	
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'IRM_MEMO_ID'
	SET @CMEMONO			= 'IRM_MEMO_NO'
	SET @NMEMONOLEN			= 10

	SET @nStep=3
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
    
    select @CLOCID=location_code from IRR_IRM01106_UPLOAD where SP_ID=@NSPID 
	
	SELECT @CLOCATIONID = @CLOCID
	
	SELECT @CHODEPTID		= [VALUE] FROM CONFIG (NOLOCK) WHERE CONFIG_OPTION='HO_LOCATION_ID'		

	
	SELECT TOP 1 @bServerLoc=ISNULL(server_loc,0) FROM location (NOLOCK) WHERE dept_id=@CLOCATIONID
	
	
	SELECT TOP 1 @CDONOTGENBARCODE=VALUE FROM CONFIG (NOLOCK) WHERE CONFIG_OPTION='DONOT_GEN_BARCODE_IRR' 
	

	set @CDONOTGENBARCODE=isnull(@cDonotGenBarcode,'')

	SET @nStep=5
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 		
		      
SET @NAPPROVED=0

IF EXISTS(SELECT TOP 1'U' FROM CONFIG (NOLOCK) WHERE CONFIG_OPTION='SEND_IRR_TO_POS_AFTER_APPROVAL' AND value='1')
SET @NAPPROVED=1

IF @NUPDATEMODE=15 AND ISNULL(@CMEMOID,'')<>'' AND  @NAPPROVED=1
BEGIN
		SET @nStep=7
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
   UPDATE IRM01106 SET APPROVED=1 WHERE irm_memo_id=@CMEMOID
   SET @CKEYFIELDVAL1=@CMEMOID
   GOTO APPROVED 		      
END

   --always barcode generate in  non ho location 

	IF  @CLOCATIONID<>@CHODEPTID
		SET @CDONOTGENBARCODE=''
		
	SET @NSTEP = 10		-- GETTING DEPTID INFO FROM TEMP TABLE
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 

	
	SELECT @NMEMOTYPE=TYPE FROM irr_irm01106_upload (NOLOCK) WHERE SP_ID =@nSPId

	IF @CDONOTGENBARCODE='1' --OR 1=1
	BEGIN
		 SET @CCMD=N'IF EXISTS (SELECT TOP 1 IRM_MEMO_ID FROM '+@CTEMPDETAILTABLE+' (NOLOCK)
						 WHERE ISNULL(NEW_PRODUCT_CODE,'''')='''' AND SP_ID ='''+@NSPID +''' )
						SET @CDONOTGENBARCODEOUT=''1''
					 ELSE
						SET @CDONOTGENBARCODEOUT='''''
		 EXEC SP_EXECUTESQL @CCMD,N'@CDONOTGENBARCODEOUT VARCHAR(2) OUTPUT',@CDONOTGENBARCODEOUT=@CDONOTGENBARCODE OUTPUT					
	END
	



      
IF @nMemoType=1 AND @bPaste=0
BEGIN
	SET @nStep=13
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 

	SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM '+@CTEMPDETAILTABLE+' (NOLOCK) A WHERE OLD_MRP=NEW_MRP AND OLD_WSP=NEW_WSP  
	AND  OLD_FIX_MRP= NEW_FIX_MRP AND   SP_ID ='''+@NSPID +''')
	SET @NTYPECOUNT=1
	ELSE
	SET @NTYPECOUNT=0 '
	EXEC SP_EXECUTESQL @CCMD,N'@NTYPECOUNT BIT OUTPUT',@NTYPECOUNT OUTPUT

	IF @NTYPECOUNT=1
	BEGIN
		SET @nStep=15
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
		SET @CCMD=N'SELECT ''NO CHANGES DEFINE'' AS ERRMSG,PRODUCT_CODE FROM '+@CTEMPDETAILTABLE+' (NOLOCK)
		 WHERE OLD_MRP=NEW_MRP AND OLD_WSP=NEW_WSP AND OLD_FIX_MRP= NEW_FIX_MRP   AND SP_ID ='''+@NSPID +''''
		INSERT INTO @OUTPUT1(ERRMSG,PRODUCT_CODE)
		EXEC SP_EXECUTESQL @CCMD
		GOTO END_PROC  
	END 
END
IF @nMemoType=3 AND @bPaste=0
BEGIN
	SET @nStep=17
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
	SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM '+@CTEMPDETAILTABLE+' A  (NOLOCK)
						WHERE 
						OLD_PARA1_CODE=PARA1_CODE     AND OLD_PARA4_CODE=PARA4_CODE AND
						OLD_PARA2_CODE=PARA2_CODE     AND OLD_PARA5_CODE=PARA5_CODE AND
						OLD_PARA3_CODE=PARA3_CODE     AND OLD_PARA6_CODE=PARA6_CODE AND
						OLD_ARTICLE_CODE=ARTICLE_CODE AND OLD_UOM_CODE=UOM_CODE     AND
						OLD_HSN_CODE=NEW_HSN_CODE and 
						OLD_EXPIRY_DT=NEW_EXPIRY_DT AND
						VENDOR_EAN_NO =NEW_VENDOR_EAN_NO
						AND OLD_FIX_MRP= NEW_FIX_MRP
						AND SP_ID ='''+@NSPID +''')
				SET @NTYPECOUNT=1
				ELSE
				SET @NTYPECOUNT=0 '
	EXEC SP_EXECUTESQL @CCMD,N'@NTYPECOUNT BIT OUTPUT',@NTYPECOUNT OUTPUT

	IF @NTYPECOUNT=1
		BEGIN
			SET @nStep=19
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
			SET @CCMD=N'SELECT ''NO CHANGES DEFINE'' AS ERRMSG,PRODUCT_CODE FROM '+@CTEMPDETAILTABLE+' (NOLOCK) 
                       WHERE sp_id='''+@nSpId+''' AND OLD_PARA1_CODE=PARA1_CODE     AND OLD_PARA4_CODE=PARA4_CODE AND
							  OLD_PARA2_CODE=PARA2_CODE     AND OLD_PARA5_CODE=PARA5_CODE AND
							  OLD_PARA3_CODE=PARA3_CODE     AND OLD_PARA6_CODE=PARA6_CODE AND
							  OLD_ARTICLE_CODE=ARTICLE_CODE AND OLD_UOM_CODE=UOM_CODE     AND
							  OLD_HSN_CODE=NEW_HSN_CODE and 
							  OLD_EXPIRY_DT=NEW_EXPIRY_DT AND 
							  VENDOR_EAN_NO =NEW_VENDOR_EAN_NO
							  AND OLD_FIX_MRP= NEW_FIX_MRP
							  '
			INSERT INTO @OUTPUT1(ERRMSG,PRODUCT_CODE)
			EXEC SP_EXECUTESQL @CCMD
			GOTO END_PROC  
		END 
END
IF @nMemoType=4 AND @bPaste=0
BEGIN
	SET @nStep=21
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
	SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM '+@CTEMPDETAILTABLE+' A (NOLOCK) 
	                    JOIN SKU (NOLOCK) ON A.PRODUCT_CODE=SKU.PRODUCT_CODE
	                    JOIN ARTICLE ART (NOLOCK) ON ART.ARTICLE_CODE=SKU.ARTICLE_CODE
						WHERE sp_id='''+@nSpId+''' AND  OLD_MRP=NEW_MRP AND OLD_WSP=NEW_WSP AND
						OLD_PARA1_CODE=A.PARA1_CODE     AND OLD_PARA4_CODE=A.PARA4_CODE AND
						OLD_PARA2_CODE=A.PARA2_CODE     AND OLD_PARA5_CODE=A.PARA5_CODE AND
						OLD_PARA3_CODE=A.PARA3_CODE     AND OLD_PARA6_CODE=A.PARA6_CODE AND
						OLD_ARTICLE_CODE=A.ARTICLE_CODE AND OLD_UOM_CODE=A.UOM_CODE     AND
						OLD_HSN_CODE=NEW_HSN_CODE AND
						OLD_EXPIRY_DT=NEW_EXPIRY_DT AND 
						OLD_FIX_MRP= NEW_FIX_MRP AND 
						a.VENDOR_EAN_NO =a.NEW_VENDOR_EAN_NO and 
						('+(case when @CDONOTGENBARCODE='' then '0' else RTRIM(LTRIM(@CDONOTGENBARCODE)) end)+' =''1'' OR SKU.barcode_coding_scheme=ART.coding_scheme ))
				SET @NTYPECOUNT=1
				ELSE
				SET @NTYPECOUNT=0 '
				PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD,N'@NTYPECOUNT BIT OUTPUT',@NTYPECOUNT OUTPUT

	IF @NTYPECOUNT=1
		BEGIN
			SET @nStep=23
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
			SET @CCMD=N'SELECT DISTINCT ''NO CHANGES DEFINE'' AS ERRMSG,A.PRODUCT_CODE FROM '+@CTEMPDETAILTABLE+' A (NOLOCK)
			           JOIN SKU (NOLOCK) ON A.PRODUCT_CODE=SKU.PRODUCT_CODE
	                JOIN ARTICLE ART (NOLOCK) ON ART.ARTICLE_CODE=SKU.ARTICLE_CODE 
                       WHERE sp_id='''+@nSpId+''' AND OLD_MRP=NEW_MRP AND OLD_WSP=NEW_WSP AND
                       OLD_PARA1_CODE=A.PARA1_CODE     AND OLD_PARA4_CODE=A.PARA4_CODE AND
							  OLD_PARA2_CODE=A.PARA2_CODE     AND OLD_PARA5_CODE=A.PARA5_CODE AND
							  OLD_PARA3_CODE=A.PARA3_CODE     AND OLD_PARA6_CODE=A.PARA6_CODE AND
							  OLD_ARTICLE_CODE=A.ARTICLE_CODE AND OLD_UOM_CODE=A.UOM_CODE     AND
							  OLD_HSN_CODE=NEW_HSN_CODE AND 
							  OLD_EXPIRY_DT=NEW_EXPIRY_DT and 
							   OLD_FIX_MRP= NEW_FIX_MRP AND
							  a.VENDOR_EAN_NO =a.NEW_VENDOR_EAN_NO and 
							  ('+(case when @CDONOTGENBARCODE='' then '0' else RTRIM(LTRIM(@CDONOTGENBARCODE)) end)+' =''1'' OR SKU.barcode_coding_scheme=ART.coding_scheme )
							  
							 '
			INSERT INTO @OUTPUT1(ERRMSG,PRODUCT_CODE)
			EXEC SP_EXECUTESQL @CCMD
			GOTO END_PROC  
		END 
END
	
		SET @nStep=25
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
	
	IF @NMEMOTYPE NOT IN (2) AND @CLOCATIONID<>@CHODEPTID AND ISNULL(@CDONOTGENBARCODE,'')='1'
	BEGIN
		SET @CERRORMSG=N'RATE REVISION WITHOUT BAR CODE GENERATION CANNOT BE DONE AT NON-HO LOCATION'
		GOTO END_PROC			
	END
	
	IF @NMEMOTYPE NOT IN (2) AND  ISNULL(@CDONOTGENBARCODE,'') <>  '1' ---- GENERATE NEW BAR CODES IF RATE REVISION IS DONE
    BEGIN
        	SET @nStep=27
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
		SELECT A.PRODUCT_CODE ,A.SRNO ,A.ROW_ID ,A.QUANTITY  
		INTO #TMPIRDROWS
		FROM IRD01106  A (NOLOCK)
		JOIN ARTICLE B (NOLOCK) ON A.ARTICLE_CODE =B.ARTICLE_CODE 
		WHERE B.CODING_SCHEME =3 AND QUANTITY >1
		AND 1=2
	
		SET @nStep=29
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
		SET @CCMD=N' SELECT A.PRODUCT_CODE ,A.SRNO ,A.ROW_ID ,A.QUANTITY  
		FROM '+@CTEMPDETAILTABLE+' A (NOLOCK) 
		JOIN ARTICLE B (NOLOCK) ON A.ARTICLE_CODE =B.ARTICLE_CODE 
		WHERE a.sp_id='''+@nSpId+''' AND B.CODING_SCHEME =3 AND QUANTITY >1 '
	    
	    PRINT @CCMD
	    INSERT INTO #TMPIRDROWS(PRODUCT_CODE ,SRNO ,ROW_ID ,QUANTITY )
	    EXEC SP_EXECUTESQL @CCMD

			SET @nStep=31
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
		DECLARE @CPRODUCT_CODE VARCHAR(100),@SRNO INT,@CROW_ID VARCHAR(100),@NQTY NUMERIC(10,0),
		@MINSR INT,@MAXSR INT,@DTSQL NVARCHAR(MAX)

		SET @MINSR=0
				
		WHILE EXISTS (SELECT TOP 1 'U' FROM #TMPIRDROWS)
		BEGIN
		   
		   	SET @nStep=33
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
		   SELECT TOP 1 @CPRODUCT_CODE=PRODUCT_CODE ,@SRNO=SRNO ,@CROW_ID=ROW_ID ,@NQTY=QUANTITY  
		   FROM #TMPIRDROWS
		   
		   SET @MINSR=1
		   SET @MAXSR=@NQTY
		   WHILE @MINSR<@MAXSR
		   BEGIN
		   	SET @nStep=35
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
					SET @CCMD=N' INSERT '+@CTEMPDETAILTABLE+'	( PRODUCT_CODE, QUANTITY, OLD_MRP, NEW_MRP, PRINT_LABEL, ROW_ID, COMPANY_CODE, LAST_UPDATE, DEPT_ID, OLD_WSP, NEW_WSP, 
					IRM_MEMO_ID, FIN_YEAR, NEW_MRP_FC_CODE, OLD_MRP_FC_CODE, OLD_PARA1_CODE, OLD_PARA2_CODE, OLD_PARA3_CODE, OLD_PARA4_CODE, OLD_PARA5_CODE, OLD_PARA6_CODE, PARA2_CODE, 
					PARA5_CODE, PARA6_CODE, PARA1_CODE, PARA3_CODE, PARA4_CODE, ARTICLE_CODE, OLD_ARTICLE_CODE, UOM_CODE, OLD_UOM_CODE, NEW_PRODUCT_CODE, SRNO, BIN_ID, 
					ONLINE_PRODUCT_CODE, VENDOR_EAN_NO, OLD_ONLINE_PRODUCT_CODE, OLD_HSN_CODE, NEW_HSN_CODE,OLD_EXPIRY_DT,NEW_EXPIRY_DT,SP_ID,NEW_VENDOR_EAN_NO,OLD_FIX_MRP,NEW_FIX_MRP ) 
					SELECT 	  PRODUCT_CODE,1 AS  QUANTITY, OLD_MRP, NEW_MRP, PRINT_LABEL, 
					CONVERT(VARCHAR(40), ''LATER'') AS ROW_ID, COMPANY_CODE, LAST_UPDATE, DEPT_ID, 
		            OLD_WSP, NEW_WSP, IRM_MEMO_ID, FIN_YEAR, NEW_MRP_FC_CODE, OLD_MRP_FC_CODE, OLD_PARA1_CODE, OLD_PARA2_CODE,
		            OLD_PARA3_CODE, OLD_PARA4_CODE, OLD_PARA5_CODE, OLD_PARA6_CODE, PARA2_CODE, PARA5_CODE, PARA6_CODE, PARA1_CODE, 
		            PARA3_CODE, PARA4_CODE, ARTICLE_CODE, OLD_ARTICLE_CODE, UOM_CODE, OLD_UOM_CODE, NEW_PRODUCT_CODE, 
		            '+STR(@SRNO+1)+' AS SRNO, BIN_ID, 
		            ONLINE_PRODUCT_CODE, VENDOR_EAN_NO, OLD_ONLINE_PRODUCT_CODE, OLD_HSN_CODE, NEW_HSN_CODE ,OLD_EXPIRY_DT,NEW_EXPIRY_DT,

					'''+@NSPID +''' AS SP_ID,a.NEW_VENDOR_EAN_NO,A.OLD_FIX_MRP,A.NEW_FIX_MRP
		            FROM '+@CTEMPDETAILTABLE+' A (NOLOCK)
					WHERE sp_id='''+@nSpId+''' AND  A.PRODUCT_CODE='''+@CPRODUCT_CODE+''' 
				    AND A.SRNO='+STR(@SRNO)+' 
				    AND A.ROW_ID='''+@CROW_ID+'''
					 '
								
					PRINT @CCMD			
					EXEC SP_EXECUTESQL @CCMD
		   
			  SET @MINSR=@MINSR+1
		   END
		   --VENDOR_EAN_NO =NEW_VENDOR_EAN_NO
		   	SET @nStep=38
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
		   DELETE FROM #TMPIRDROWS
		   WHERE PRODUCT_CODE =@CPRODUCT_CODE
		   AND SRNO=@SRNO
		   AND ROW_ID =@CROW_ID 

		END --END OF WHILE LOOP
       
       	SET @nStep=41
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
       
		SET @CCMD=N' UPDATE A SET QUANTITY=1 
		FROM '+@CTEMPDETAILTABLE+' A WITH (ROWLOCK)
		JOIN ARTICLE B ON A.ARTICLE_CODE =B.ARTICLE_CODE 
		WHERE sp_id='''+@nSpId+''' AND  B.CODING_SCHEME =3 AND QUANTITY >1
		'
	    PRINT @CCMD			
		EXEC SP_EXECUTESQL @CCMD
	END
	


	IF @BTHROUGHIMPORT=1   
    BEGIN  
				SET @nStep=45
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
			EXEC SP_GETMASTERS '01112',2,@CERRORMSG OUTPUT   
		  
			PRINT 'COME OUT OF IMPORTMASTERS'     
			IF ISNULL(@CERRORMSG,'')<>''  
			GOTO END_PROC  

	
	EXEC SP3S_VALIDATE_PARAS @CERRORMSG=@CERRORMSG OUTPUT
	IF ISNULL(@CERRORMSG,'')<>''  
	GOTO END_PROC  
		    --,FORM_ID=ISNULL(I.FORM_ID,''0000000'')
		    -- LEFT OUTER JOIN FORM I ON I.FORM_NAME = B.FORM_NAME
	SET @nStep=48
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	   
			
			SET @CCMD=N'UPDATE A SET ARTICLE_CODE=ART.ARTICLE_CODE,PARA1_CODE=ISNULL(C.PARA1_CODE,''0000000''),  
			  PARA2_CODE=ISNULL(D.PARA2_CODE,''0000000''),PARA3_CODE=ISNULL(E.PARA3_CODE,''0000000''),  
			  PARA4_CODE=ISNULL(F.PARA4_CODE,''0000000''),PARA5_CODE=ISNULL(G.PARA5_CODE,''0000000''),  
			  PARA6_CODE=ISNULL(H.PARA6_CODE,''0000000'')
			  FROM '+@CTEMPDBNAME+@CTEMPDETAILTABLENAME+' A WITH (ROWLOCK)
			  JOIN #TMPMASTERSENC B ON A.PRODUCT_CODE=B.PRODUCT_CODE  
			 JOIN ARTICLE ART (NOLOCK) ON ART.ARTICLE_NO = B.ARTICLE_NO    
			 LEFT OUTER JOIN PARA1 C (NOLOCK) ON C.PARA1_NAME = B.PARA1_NAME   AND ISNULL(C.INACTIVE,0)=0 
			 LEFT OUTER JOIN PARA2 D (NOLOCK) ON D.PARA2_NAME = B.PARA2_NAME   AND ISNULL(D.INACTIVE,0)=0 
			 LEFT OUTER JOIN PARA3 E (NOLOCK) ON E.PARA3_NAME = B.PARA3_NAME   AND ISNULL(E.INACTIVE,0)=0 
			 LEFT OUTER JOIN PARA4 F (NOLOCK) ON F.PARA4_NAME = B.PARA4_NAME   AND ISNULL(F.INACTIVE,0)=0 
			 LEFT OUTER JOIN PARA5 G (NOLOCK) ON G.PARA5_NAME = B.PARA5_NAME   AND ISNULL(G.INACTIVE,0)=0 
			 LEFT OUTER JOIN PARA6 H (NOLOCK) ON H.PARA6_NAME = B.PARA6_NAME   AND ISNULL(H.INACTIVE,0)=0 
			 WHERE sp_id='''+@nSpId+''' AND  ISNULL(A.PRODUCT_CODE,'''')<>'''' '   
			PRINT @CCMD        
			EXEC SP_EXECUTESQL @CCMD     
			
		    DROP TABLE #TMPMASTERSENC  
  END
	
	BEGIN TRANSACTION
	
	BEGIN TRY

			SET @nStep=51
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
		SELECT PRODUCT_CODE INTO #TMPPMT FROM SKU (NOLOCK) WHERE 1=2

		SELECT PRODUCT_CODE,QUANTITY_IN_STOCK AS XN_STOCK INTO #TMPXNSTK FROM PMT01106 (NOLOCK) WHERE 1=2

		-- START UPDATING XN TABLES	
			
		-- GENERATING NEW JOB ORDER NO		
		SET @NSAVETRANLOOP=0
		WHILE @NSAVETRANLOOP=0
		BEGIN
			SET @nStep=54
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
			EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
							@CFINYEAR,0, @CMEMONOVAL OUTPUT   
			
			PRINT @CMEMONOVAL
				SET @nStep=57
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
			SET @CCMD=N'IF EXISTS ( SELECT TOP 1 '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' (nolock)
									WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
									AND FIN_YEAR = '''+@CFINYEAR+''' )
							SET @NLOOPOUTPUT=0
						ELSE
							SET @NLOOPOUTPUT=1'
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
		END

		IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
		BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
			  GOTO END_PROC  		
		END
	SET @nStep=60
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
		-- GENERATING NEW MRR ID  
	   SET @CKEYFIELDVAL1 = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
		
		-- UPDATING NEWLY GENERATED JOB ORDER NO AND JOB ORDER ID IN PIM AND PID TEMP TABLES
		SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' WITH (ROWLOCK) SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
					@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+@NSPID +''' '
		EXEC SP_EXECUTESQL @CCMD
    
		
	SET @nStep=65
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
		SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' WITH (ROWLOCK) SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+@NSPID +''''
		EXEC SP_EXECUTESQL @CCMD
	
	SET @nStep=67
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
		
		SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' WITH (ROWLOCK) SET OLD_HSN_CODE= CASE WHEN ISNULL(OLD_HSN_CODE,'''')='''' THEN ''0000000000'' ELSE OLD_HSN_CODE END,
		             NEW_HSN_CODE= CASE WHEN ISNULL(NEW_HSN_CODE,'''')='''' THEN ''0000000000'' ELSE NEW_HSN_CODE END  WHERE SP_ID='''+@NSPID +''''
		EXEC SP_EXECUTESQL @CCMD
		
		IF @NMEMOTYPE IN (2)
		BEGIN
			SET @NSTEP = 70	
			EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
			SET @CCMD = 'UPDATE '+ @CTEMPDETAILTABLE +' WITH (ROWLOCK) SET NEW_PRODUCT_CODE='''' WHERE SP_ID='''+@NSPID +''''
			EXEC SP_EXECUTESQL @CCMD
		END
		
		SET @NSTEP = 75
		EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
		-- RECHECKING IF ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END


		IF @NUPDATEMODE IN (1,2)
		BEGIN
			SET @NSTEP = 77
			EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 

			UPDATE a SET total_quantity=b.total_quantity FROM IRR_IRM01106_UPLOAD A WITH (ROWLOCK) 
			JOIN (SELECT sp_id,sum(quantity) as total_quantity FROM IRR_IRD01106_UPLOAD b (NOLOCK)  
				  WHERE sp_id=rtrim(ltrim(@NSPID)) GROUP BY sp_id) b ON a.sp_id=b.sp_id
		 
			
			IF @NMEMOTYPE NOT IN (2) AND    @CDONOTGENBARCODE<>'1' AND EXISTS (SELECT TOP 1 IRM_MEMO_ID FROM IRR_IRD01106_UPLOAD (NOLOCK) WHERE sp_id=@NSPID
												 AND ISNULL(NEW_PRODUCT_CODE,'')='')
			BEGIN
				SET @NSTEP = 78.2
				EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 

				EXEC SP3S_upd_qty_lastupdate
				@nUpdateMode=@NUPDATEMODE,
				@cXnType='IRR',
				@cMasterTable='IRM01106',
				@nSpId=@nSpId,
				@cMemoIdCol='IRM_MEMO_ID',
				@cMemoId=@CKEYFIELDVAL1,
				@cXnDtCol='IRM_MEMO_DT',
				@CERRORMSG=@CERRORMSG OUTPUT

				IF ISNULL(@CERRORMSG,'')<>''
				   GOTO END_PROC

         
			 END

		 END
		




		-- UPDATING MASTER TABLE (PIM01106) FROM TEMP TABLE
		SET @NSTEP = 90		-- UPDATING MASTER TABLE
		EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
		
         DECLARE @CWHERECLAUSE VARCHAR(1000)
		 SET @CWHERECLAUSE='  SP_ID='''+ LTRIM(RTRIM((@NSPID)))+''''

		EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			, @BALWAYSUPDATE = 1
			, @LUPDATEXNS = 1
			,@CFILTERCONDITION=@CWHERECLAUSE

		-- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE
		SET @NSTEP = 110		-- UPDATING TRANSACTION TABLE
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
		-- UPDATING ROW_ID IN TEMP TABLES
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' WITH (ROWLOCK) SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE sp_id='''+@nSpId+''' AND  LEFT(ROW_ID,5) = ''LATER'''
					  
		EXEC SP_EXECUTESQL @CCMD

		-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
		SET @NSTEP = 114		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES
		EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 

		SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + ' WITH (ROWLOCK)
					WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
					AND ROW_ID IN 
					(
						SELECT A.ROW_ID 
						FROM ' + @CDETAILTABLENAME + ' A (NOLOCK) 
						LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B (NOLOCK) ON A.ROW_ID = B.ROW_ID AND SP_ID ='''+@NSPID +'''
						WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
						AND   B.ROW_ID IS NULL
					)'
		EXEC SP_EXECUTESQL @CCMD


		-- INSERTING/UPDATING THE ENTRIES IN PRD_JID TABLE FROM TEMPTABLE
		SET @NSTEP = 120		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES
		EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
	

	
		EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME
			, @CKEYFIELD1	= 'ROW_ID'
			, @BALWAYSUPDATE = 1
			, @LINSERTONLY=1
			, @LUPDATEXNS=1
		     ,@CFILTERCONDITION=@CWHERECLAUSE

	SET @nStep=123
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
		SELECT TOP 1 @cMultipleFc=value FROM config (NOLOCK) WHERE config_option='ENABLE_MULTI_CURRENCY'
		
		IF ISNULL(@cMultipleFc,'')='1'
		BEGIN
			SET @cCmd=N'UPDATE _TMPFCRATE WITH (ROWLOCK) SET fc_code=REPLACE(REPLACE(fc_code,''FC_'',''''),''_MRP'','''')'
			EXEC SP_EXECUTESQL @cCmd
		END			
		
		IF @CDONOTGENBARCODE='1' AND EXISTS (SELECT TOP 1 IRM_MEMO_ID FROM IRD01106 (NOLOCK) WHERE IRM_MEMO_ID=@CKEYFIELDVAL1
											 AND ISNULL(NEW_PRODUCT_CODE,'')<>'')
			SET @CDONOTGENBARCODE=''
			
		IF @NMEMOTYPE NOT IN (2) AND  ISNULL(@CDONOTGENBARCODE,'') <>  '1' ---- GENERATE NEW BAR CODES IF RATE REVISION IS DONE
		BEGIN
			PRINT 'GENERATING BARCODES'
			SET @NSTEP = 126		-- GENERATING BARCODES
			EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 			

			IF EXISTS (SELECT TOP 1 A.PRODUCT_CODE FROM IRD01106 A (NOLOCK) JOIN SKU B (NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE
					   WHERE IRM_MEMO_ID=@CKEYFIELDVAL1  AND (A.OLD_MRP<>A.NEW_MRP OR B.MRP<>A.NEW_MRP) AND A.NEW_MRP=0) 	 
			BEGIN
				SELECT TOP 1 @CERRPRODUCTCODE=A.PRODUCT_CODE 
				FROM IRD01106 A (NOLOCK) JOIN SKU B (NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE
				WHERE IRM_MEMO_ID=@CKEYFIELDVAL1  AND (A.OLD_MRP<>A.NEW_MRP OR B.MRP<>A.NEW_MRP) AND A.NEW_MRP=0
				
				SET @CERRORMSG = 'MRP OF ITEM CODE : '+@CERRPRODUCTCODE+' CAN NOT BE ZERO...PLEASE CHECK'
				GOTO END_PROC 
			END		   
			
			SET @nStep=128
			EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 			
					
			EXEC SAVETRAN_GENBARCODES
				  @CXNID		= @CKEYFIELDVAL1
				, @CPREFIX		= @CBARCODEPREFIX
				, @NMODE		= 2	
				, @LOCID		= @CLOCATIONID	
				, @NSPID		= @NSPID
				, @CERRORMSG	= @CERRORMSG OUTPUT
			
			
			IF ISNULL(@CERRORMSG,'')<>''
				GOTO END_PROC
				
			SET @bBARCODESGenerated=1
			
				SET @nStep=130
				EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
				-- CHECK ALL BARCODES INSERTED INTO IRD
				SET @CCMD=N'IF EXISTS ( SELECT TOP 1 A.PRODUCT_CODE FROM IRD01106  A (NOLOCK)
							LEFT OUTER JOIN SKU B (NOLOCK) ON A.NEW_PRODUCT_CODE = B.PRODUCT_CODE and isnull(b.PRODUCT_CODE,'''')<>''''
							WHERE  B.PRODUCT_CODE IS NULL AND A.IRM_MEMO_ID = '''+@CKEYFIELDVAL1+''')
								SET @CERRORMSGOUT = '' ERROR GENERATING NEW BARCODES -(ST)... NEW CODES NOT GENERATED'''
				
				PRINT @CCMD				
				EXEC SP_EXECUTESQL @CCMD,N'@CERRORMSGOUT VARCHAR(MAX) OUTPUT',@CERRORMSGOUT=@CERRORMSG OUTPUT
			
				IF ISNULL(@CERRORMSG,'')<>''	
					GOTO END_PROC


					EXEC SP3S_INSERTIMAGE_FROM_IRR @CKEYFIELDVAL1,@CERRORMSG OUTPUT

					IF ISNULL(@CERRORMSG,'')<>''	
					GOTO END_PROC
			
		END
		
		
		
		IF @nMemotype<>2 AND @bBARCODESGenerated=0
		BEGIN
			SET @NSTEP = 131.2		-- UPDATING SKU TABLE
			EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 	

			SELECT a.product_code,MRP = (CASE WHEN B.OLD_MRP<>B.NEW_MRP AND B.NEW_MRP<>0 THEN B.NEW_MRP ELSE A.MRP END),
						  WS_PRICE=(CASE WHEN B.OLD_WSP<>B.NEW_WSP AND B.NEW_WSP<>0 THEN B.NEW_WSP ELSE A.WS_PRICE END),
						  ARTICLE_CODE=(CASE WHEN B.OLD_ARTICLE_CODE<>B.ARTICLE_CODE AND B.ARTICLE_CODE NOT IN 
						  ('0000000','00000000','000000000') THEN B.ARTICLE_CODE ELSE A.ARTICLE_CODE END),
						  PARA1_CODE=(CASE WHEN B.OLD_PARA1_CODE<>B.PARA1_CODE AND B.PARA1_CODE NOT IN 
						  ('') THEN B.PARA1_CODE ELSE A.PARA1_CODE END),
						  PARA2_CODE=	(CASE WHEN B.OLD_PARA2_CODE<>B.PARA2_CODE AND B.PARA2_CODE NOT IN 
						  ('') THEN B.PARA2_CODE ELSE A.PARA2_CODE END),
						  PARA3_CODE=	(CASE WHEN B.OLD_PARA3_CODE<>B.PARA3_CODE AND B.PARA3_CODE NOT IN 
						  ('') THEN B.PARA3_CODE ELSE A.PARA3_CODE END),
						  PARA4_CODE=	(CASE WHEN B.OLD_PARA4_CODE<>B.PARA4_CODE AND B.PARA4_CODE NOT IN 
						  ('') THEN B.PARA4_CODE ELSE A.PARA4_CODE END),
						  PARA5_CODE=	(CASE WHEN B.OLD_PARA5_CODE<>B.PARA5_CODE AND B.PARA5_CODE NOT IN 
						  ('') THEN B.PARA5_CODE ELSE A.PARA5_CODE END),
						  PARA6_CODE=	(CASE WHEN B.OLD_PARA6_CODE<>B.PARA6_CODE AND B.PARA6_CODE NOT IN 
						  ('') THEN B.PARA6_CODE ELSE A.PARA6_CODE END),
						  HSN_CODE =CASE WHEN ISNULL(B.NEW_HSN_CODE ,'') IN ('0000000000','') THEN A.HSN_CODE ELSE B.NEW_HSN_CODE END
						  ,EXPIRY_DT =CASE WHEN B.OLD_EXPIRY_DT<>B.NEW_EXPIRY_DT  THEN B.NEW_EXPIRY_DT ELSE A.EXPIRY_DT END
						  ,VENDOR_EAN_NO =CASE WHEN isnull(B.VENDOR_EAN_NO,'')<>isnull(B.NEW_VENDOR_EAN_NO,'')  THEN B.NEW_VENDOR_EAN_NO ELSE A.VENDOR_EAN_NO END
						  --17 AUG 2018 : 07-0691
						 ,FIX_MRP=CASE WHEN B.OLD_FIX_MRP<>B.NEW_FIX_MRP AND B.NEW_FIX_MRP<>0 THEN B.NEW_FIX_MRP ELSE A.FIX_MRP END
						  --17 AUG 2018 : 07-0691
						  , BARCODE_CODING_SCHEME=(CASE WHEN B.OLD_ARTICLE_CODE<>B.ARTICLE_CODE AND B.ARTICLE_CODE NOT IN 
						  ('0000000','00000000','000000000') and a.barcode_coding_scheme<>1 THEN ART.CODING_SCHEME  ELSE A.BARCODE_CODING_SCHEME END) --discussion req
						  ,product_name=ISNULL(art.article_desc,''),
						  cast(1 as bit) as OverwriteMrp

			INTO #tmpSku 
			FROM SKU A WITH (ROWLOCK)
			JOIN IRD01106 B (NOLOCK) ON A.PRODUCT_CODE = B.PRODUCT_CODE
			JOIN IRM01106 C (NOLOCK) ON C.IRM_MEMO_ID=B.IRM_MEMO_ID
			LEFT JOIN ARTICLE ART (NOLOCK) ON ART.ARTICLE_CODE =B.ARTICLE_CODE 
			WHERE B.IRM_MEMO_ID = @CKEYFIELDVAL1 AND ISNULL(B.NEW_PRODUCT_CODE,'')=''


          --only master oberwrite in case of base to batch barcode(mrp ,WS_PRICE,FIX_MRP)

			SET @nStep=133.5
			EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
			--FOR BATCH CODING NOT PERISHABLE BARCODE NEW CHANGES
			INSERT INTO #tmpSku (product_code,ARTICLE_CODE,PARA1_CODE,PARA2_CODE,PARA3_CODE,PARA4_CODE,
			PARA5_CODE,PARA6_CODE,mrp,WS_PRICE,HSN_CODE,EXPIRY_DT,FIX_MRP,product_name,VENDOR_EAN_NO,OverwriteMrp)
			SELECT a.product_code,b.ARTICLE_CODE,b.PARA1_CODE,b.PARA2_CODE,b.PARA3_CODE,b.PARA4_CODE,
			b.para5_code,b.para6_code,a.mrp,a.WS_PRICE,b.HSN_CODE,b.EXPIRY_DT,a.FIX_MRP,b.product_name,
			b.VENDOR_EAN_NO,0 as OverwriteMrp
			FROM SKU A WITH (ROWLOCK)
			JOIN #tmpSku B  ON B.PRODUCT_CODE = LEFT(A.PRODUCT_CODE, ISNULL(NULLIF(CHARINDEX ('@',A.PRODUCT_CODE)-1,-1),LEN(A.PRODUCT_CODE )))
			JOIN ARTICLE ART (NOLOCK) ON ART.ARTICLE_CODE =A.ARTICLE_CODE 
			WHERE ISNULL(ART.PERISHABLE ,0)=0 AND CHARINDEX ('@',A.PRODUCT_CODE)<>0

			--if @@spid=116
			--	select 'check tmpsku',article_no,* from #tmpSku a join article b on a.article_code=b.article_code

			SET @NSTEP = 134.7		-- UPDATING SKU TABLE
			EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	
			
            
			UPDATE A SET MRP = (CASE WHEN B.MRP<>a.mrp then B.MRP ELSE A.MRP END),
						  WS_PRICE=(CASE WHEN B.WS_PRICE<>a.WS_PRICE THEN B.WS_PRICE ELSE A.WS_PRICE END), 	
                          FIX_MRP=(CASE WHEN isnull(B.FIX_MRP,0)<>isnull(a.fix_mrp,0) then b.fix_mrp else  A.FIX_MRP END),
			
			             ARTICLE_CODE=(CASE WHEN B.ARTICLE_CODE<>a.ARTICLE_CODE
											 THEN B.ARTICLE_CODE ELSE A.ARTICLE_CODE END),
						  PARA1_CODE=(CASE WHEN B.PARA1_CODE<>a.PARA1_CODE THEN B.PARA1_CODE ELSE A.PARA1_CODE END),
						  PARA2_CODE=(CASE WHEN B.PARA2_CODE<>a.PARA2_CODE THEN B.PARA2_CODE ELSE A.PARA2_CODE END),
						  PARA3_CODE=(CASE WHEN B.PARA3_CODE<>a.PARA3_CODE THEN B.PARA3_CODE ELSE A.PARA3_CODE END),
						  PARA4_CODE=(CASE WHEN B.PARA4_CODE<>a.PARA4_CODE THEN B.PARA4_CODE ELSE A.PARA4_CODE END),
						  PARA5_CODE=(CASE WHEN B.PARA5_CODE<>a.PARA5_CODE THEN B.PARA5_CODE ELSE A.PARA5_CODE END),
						  PARA6_CODE=(CASE WHEN B.PARA6_CODE<>a.PARA6_CODE THEN B.PARA6_CODE ELSE A.PARA6_CODE END),
						  LAST_UPDATE=GETDATE(),
						  HSN_CODE =(CASE WHEN isnull(B.HSN_CODE,'')<>isnull(a.hsn_code,'') THEN b.HSN_CODE ELSE a.HSN_CODE END),
						  EXPIRY_DT =(CASE WHEN isnull(B.EXPIRY_DT,'')<>isnull(a.EXPIRY_DT,'') THEN b.EXPIRY_DT ELSE a.EXPIRY_DT END),
						  VENDOR_EAN_NO =(CASE WHEN isnull(B.VENDOR_EAN_NO,'')<>isnull(a.VENDOR_EAN_NO,'') THEN b.VENDOR_EAN_NO ELSE a.VENDOR_EAN_NO END),
						  BARCODE_CODING_SCHEME=(CASE WHEN B.BARCODE_CODING_SCHEME<>a.BARCODE_CODING_SCHEME
						   THEN b.BARCODE_CODING_SCHEME else a.BARCODE_CODING_SCHEME END)
						  ,A.product_name=(CASE WHEN B.product_name<>a.product_name then b.product_name else a.product_name end)
			FROM SKU A WITH (ROWLOCK)
			JOIN #tmpSku b ON a.product_code=b.product_code

			SET @NSTEP = 137.5		-- UPDATING SKU TABLE
			EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 	

 
			UPDATE A SET 
			              MRP = (CASE WHEN B.MRP<>a.mrp then B.MRP ELSE A.MRP END),
						  WS_PRICE=(CASE WHEN B.WS_PRICE<>a.WS_PRICE THEN B.WS_PRICE ELSE A.WS_PRICE END),
	                      Fix_mrp =(CASE WHEN B.Fix_mrp<>a.Fix_mrp then B.Fix_mrp ELSE A.Fix_mrp END),
	                      
						  ARTICLE_no=(CASE WHEN art.ARTICLE_no<>a.ARTICLE_no
											 THEN art.ARTICLE_no ELSE A.ARTICLE_no END),
						  PARA1_name=(CASE WHEN p1.PARA1_name<>a.PARA1_name THEN p1.PARA1_name ELSE A.PARA1_name END),
						  PARA2_name=(CASE WHEN p2.PARA2_name<>a.PARA2_name THEN p2.PARA2_name ELSE A.PARA2_name END),
						  PARA3_name=(CASE WHEN p3.PARA3_name<>a.PARA3_name THEN p3.PARA3_name ELSE A.PARA3_name END),
						  PARA4_name=(CASE WHEN p4.PARA4_name<>a.PARA4_name THEN p4.PARA4_name ELSE A.PARA4_name END),
						  PARA5_name=(CASE WHEN p5.PARA5_name<>a.PARA5_name THEN p5.PARA5_name ELSE A.PARA5_name END),
						  PARA6_name=(CASE WHEN p6.PARA6_name<>a.PARA6_name THEN p6.PARA6_name ELSE A.PARA6_name END),
						  sn_hsn_code =(CASE WHEN isnull(B.HSN_CODE,'')<>isnull(a.sn_hsn_code,'') THEN b.HSN_CODE ELSE a.sn_hsn_code END),
						  EXPIRY_DT =(CASE WHEN isnull(B.EXPIRY_DT,'')<>isnull(a.EXPIRY_DT,'') THEN b.EXPIRY_DT ELSE a.EXPIRY_DT END),
						  sn_BARCODE_CODING_SCHEME=(CASE WHEN B.BARCODE_CODING_SCHEME<>a.sn_BARCODE_CODING_SCHEME
						   THEN b.BARCODE_CODING_SCHEME else a.sn_BARCODE_CODING_SCHEME END)
						  ,A.article_name=(CASE WHEN art.article_name<>a.article_name then art.article_name else a.article_name end)
						  ,A.sub_section_name =(CASE WHEN art.article_name<>a.article_name then sd.sub_section_name else a.sub_section_name end)
						  ,A.section_name=(CASE WHEN art.article_name<>a.article_name then sm.section_name else a.section_name end)
						
			FROM SKU_NAMES A WITH (ROWLOCK)
			JOIN #tmpSku b ON a.product_code=b.product_code
			JOIN article art (NOLOCK) ON art.article_code=b.article_code 
			join sectiond sd (nolock) on sd.sub_section_code =art.sub_section_code 
			join sectionm sm (nolock) on sm.section_code =sd.section_code 
			JOIN para1 p1 (NOLOCK) ON p1.para1_code=b.para1_code
			JOIN para2 p2 (NOLOCK) ON p2.para2_code=b.para2_code
			JOIN para3 p3 (NOLOCK) ON p3.para3_code=b.para3_code
			JOIN para4 p4 (NOLOCK) ON p4.para4_code=b.para4_code
			JOIN para5 p5 (NOLOCK) ON p5.para5_code=b.para5_code
			JOIN para6 p6 (NOLOCK) ON p6.para6_code=b.para6_code
			JOIN uom (NOLOCK) ON uom.uom_code=art.uom_code

			--if @@spid=116	
			--	select article_no,para3_name, a.mrp, * from sku_names a 
			--	where left(product_code,13)='1234567804439'

		
		END
		
		
		IF ISNULL(@cMultipleFc,'')='1'
		BEGIN
			SET @nStep=139
			EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
			SET @cCmd=N'UPDATE a SET fc_rate=b.fc_rate FROM sku_fc_prices a 
			JOIN irm01106 c WITH (ROWLOCK) ON 1=1
			JOIN _TMPFCRATE b (NOLOCK) ON a.product_code=b.product_code AND a.fc_code=b.fc_code 
			WHERE c.irm_memo_id='''+@CKEYFIELDVAL1+''' AND C.TYPE<>2'			
			
			EXEC SP_EXECUTESQL @cCmd
		END

		--17 AUG 2018 : 07-0691
		SET @nStep=142
		EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 

		UPDATE A
		SET FIX_MRP=CASE WHEN B.OLD_FIX_MRP<>B.NEW_FIX_MRP AND B.NEW_FIX_MRP<>0 THEN B.NEW_FIX_MRP ELSE A.FIX_MRP END
		FROM SKU A WITH (ROWLOCK)
		JOIN IRD01106 B (NOLOCK) ON A.PRODUCT_CODE = B.NEW_PRODUCT_CODE
		JOIN IRM01106 C (NOLOCK) ON C.IRM_MEMO_ID=B.IRM_MEMO_ID
		WHERE B.IRM_MEMO_ID=@CKEYFIELDVAL1 AND C.TYPE<>2 AND A.PRODUCT_CODE <>''

		----- UPDATE STOCK OF ITEMS AGAINST WHICH NEW BARCODES ARE GENERATED

		
		IF @bBARCODESGenerated=1
		BEGIN

			SET @nStep=150
			EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 

			EXEC UPDATEPMT_IRR
			 @nSpId			=    @nSpid	
			,@CXNID			=    @CKEYFIELDVAL1
			, @NREVERTFLAG		= 0
			, @NALLOWNEGSTOCK	= 0
			, @NUPDATEMODE		= @NUPDATEMODE		
			, @CCMD				= @CCMDOUTPUT OUTPUT
       
     

			IF @CCMDOUTPUT <> ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT... STOCK IS GOING NEGATIVE'
			
				EXEC SP_EXECUTESQL @CCMDOUTPUT
				SET @BNEGSTOCKFOUND=1
			
				GOTO END_PROC
			END
		END

		SET @nStep=151.4
		EXEC SP3S_INS_skuactivetitles_IRR
		@cMemoId=@cKeyfieldval1,
		@CERRORMSG=@CERRORMSG OUTPUT

		IF ISNULL(@CERRORMSG,'')<>''
			GOTO END_PROC

		  
		-- VALIDATE ENTRIES
			SET @nStep=153
			EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
		EXEC VALIDATEXN
			  @CXNTYPE	= 'IRR'
			, @CXNID	= @CKEYFIELDVAL1
			, @NUPDATEMODE = @NUPDATEMODE			
			, @CCMD		= @CCMDOUTPUT OUTPUT

		IF @CCMDOUTPUT <> ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION FAILED : ' + @CCMDOUTPUT + '...'
			GOTO END_PROC
		END
		-- AFTER SUCCESSFUL SAVING , JUST DROP THE TEMP TABLES CREATED BY APPLICATION
		SET @NSTEP = 160
		EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 	
		
		SELECT PRODUCT_CODE,NEW_PRODUCT_CODE,COUNT(*) AS  QUANTITY_IN_STOCK INTO #TMPDUPIRR
		FROM IRD01106 (NOLOCK) WHERE IRM_MEMO_ID=@CKEYFIELDVAL1
		GROUP BY PRODUCT_CODE,NEW_PRODUCT_CODE HAVING COUNT(*)>1
		
		IF EXISTS (SELECT TOP 1 * FROM #TMPDUPIRR)
		BEGIN
			SET @CERRORMSG='DUPLICATE ENTRY OF BAR CODES NOT ALLOWED.......PLEASE CHECK'
			
			SELECT *,@CERRORMSG AS ERRMSG FROM #TMPDUPIRR
			SET @BDUPRECORDFOUND=1
			GOTO END_PROC
		END
		

		SET @NSTEP = 170
		EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 

		DECLARE @CGENVENDOREANCODES VARCHAR(2)

		SELECT TOP 1 @CGENVENDOREANCODES=VALUE FROM CONFIG (NOLOCK) WHERE CONFIG_OPTION='GENERATE_VENDOR_EANCODES' 
		set @CGENVENDOREANCODES=0 --due to error in generate vendor code   
		 
		IF ISNULL(@CGENVENDOREANCODES,'')='1'
		BEGIN
			SET @nStep=175
			EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 

			EXEC SAVETRAN_GENVENDOR_EANCODES 
			 @CXNID=@CKEYFIELDVAL1,    
			 @NMODE=2,    
			 @CLOCID=@CLOCATIONID,    
			 @CERRORMSG=@CERRORMSG OUTPUT    
		END
		/*Rohit 01-05-2024 
		Raised by: Pankaj Raswant
		Ticket ID: 0424-00052
		Subject: Fabric Mart
		Remarks: Testing_H1 per images ke setting Color na dstyle per set hai, barcode no. 016K5725, iska colur and style change kiya hai per image change nahi ho rahe
		Raised at: 2024-04-23T19:34:53.953000
		*/
		
		
		if (@NMEMOTYPE=3 OR @NMEMOTYPE=4)
		BEGIN
		      IF EXISTS (SELECT TOP 1 'U' FROM  IMAGE_INFO_CONFIG (NOLOCK) WHERE 
		      (
		      ISNULL(ARTICLE,0)=1 OR ISNULL(PARA1,0)=1 OR ISNULL(PARA2,0)=1 OR ISNULL(PARA3,0)=1 OR
		      ISNULL(PARA4,0)=1 OR ISNULL(PARA5,0)=1 OR ISNULL(PARA6,0)=1
		      ))
		      BEGIN
		      
	            EXEC SP3S_INSERTIMAGE_FROM_IRR @CKEYFIELDVAL1,@CERRORMSG OUTPUT,1
	          
	          END 
			--EXEC SP3S_CREATE_SKUNAMES
		END
		
		--para7 generation 
		
		   IF EXISTS (SELECT TOP 1 'U' FROM INV_SKU_COL_LIST A  (NOLOCK) WHERE FOR_SKU=1 ) and @NMEMOTYPE<>2
			BEGIN
			   
				   EXEC SP3S_INSERT_PARA7 
						@CXNTYPE='IRR',
						@CSP_ID=@NSPID,
						@CLOCID=@CLOCATIONID,
						@CERRORMSG=@CERRORMSG OUTPUT 
				   
				   IF ISNULL(@CERRORMSG,'')<>''
				       GOTO END_PROC

			END

	END TRY
	
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(@NSTEP) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'
		
		GOTO END_PROC
	END CATCH
	
END_PROC:
	SET @nStep=180
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
    UPDATE irm01106  WITH (ROWLOCk) SET last_update=getdate(),barcodes_generated=
	(CASE WHEN ISNULL(barcodes_generated,0)=0 THEN  ISNULL(@bBARCODESGenerated,0) ELSE barcodes_generated END)
	WHERE irm_memo_id=@CKEYFIELDVAL1
	
	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
		BEGIN
			SET @nStep=185
			EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 			
			UPDATE XNLOG WITH (ROWLOCK) SET LAST_UPDATE=GETDATE() WHERE TABLENAME='IRM01106'
			
			commit TRANSACTION
			DELETE A  FROM XNTYPE_CHECKSUM_MST A  WITH (ROWLOCK)  WHERE SP_ID=@NSPID
			UPDATE IRM01106 WITH (ROWLOCK) SET HO_SYNCH_LAST_UPDATE='',
			LAST_UPDATE=GETDATE(),reconciled=0	WHERE irm_memo_id=@CKEYFIELDVAL1

		END	
		ELSE
		begin
			ROLLBACK
			DELETE A  FROM XNTYPE_CHECKSUM_MST A  WITH (ROWLOCK)  WHERE SP_ID=@NSPID
		end
	END

			SET @nStep=190
			EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 	
	IF ISNULL(@BNEGSTOCKFOUND,0)=0 AND ISNULL(@BDUPRECORDFOUND,0)=0
	BEGIN
		INSERT @OUTPUT ( ERRMSG, MEMO_ID)
				VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )
        
      IF EXISTS(SELECT TOP 1'U' FROM @OUTPUT1)
         SELECT * FROM @OUTPUT1
       ELSE
        BEGIN
            IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
			SELECT ERRMSG,MEMO_ID FROM @OUTPUT
        ELSE
			SELECT * FROM @OUTPUT	
        END				
        
        
        
	END	

APPROVED:	
	SET @nStep=200
	EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 				
	
 	 DELETE A FROM IRR_IRD01106_UPLOAD A WITH (ROWLOCK) WHERE SP_ID=@NSPID 
	 DELETE A FROM IRR_IRM01106_UPLOAD A WITH (ROWLOCK) WHERE SP_ID=@NSPID 

			SET @nStep=205
			EXEC SP_CHKXNSAVELOG 'IRR',@nStep,1,@nSpIdLog,'',1	 
	
END						
------------------------------------------------------ END OF PROCEDURE SAVETRAN_IRR
