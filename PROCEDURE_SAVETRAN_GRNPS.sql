create PROCEDURE SAVETRAN_GRNPS  
(  
 @NUPDATEMODE  NUMERIC(1,0),  
 @NSPID    VARCHAR(40)='',  
 @CMEMONOPREFIX  VARCHAR(50)='',  
 @CFINYEAR   VARCHAR(10)='',  
 @CMEMOID   VARCHAR(40)='',  
 @BOX_NO   NUMERIC(5,0)=0,
 @ITEM_CODE  VARCHAR(50)=''
)  
--WITH ENCRYPTION
AS  
BEGIN  
   
	DECLARE @NSTEP INT	,@BALLOWNEGSTOCK BIT ,@MODE INT  
	
BEGIN TRY  
	
	 -- @NUPDATEMODE: 1- NEW RETAIL SALE ADDED,   
	 --     2- NOT APPLICABLE,   
	 --     3- CURRENT RETAIL SALE CANCELLED,   
	 --     4- EXISTING RETAIL SALE EDITED  
	   
	 -- @CMEMOID:  MEMOID IS REQUIRED IF @NUPDATEMODE IS 3 (FROM CANCELLATION)  
	 DECLARE @CTEMPDBNAME   VARCHAR(100),  
	   @CMASTERTABLENAME  VARCHAR(100),  
	   @CDETAILTABLENAME  VARCHAR(100), 
	   @CDETAILTABLENAME1  VARCHAR(100),  
	   @CTEMPMASTERTABLENAME VARCHAR(100),  
	   @CTEMPDETAILTABLENAME VARCHAR(100),
	   @CTEMPDETAILTABLENAME1 VARCHAR(100),  
	   @CTEMPMASTERTABLE  VARCHAR(100),  
	   @CTEMPDETAILTABLE  VARCHAR(100),  
	   @CTEMPDETAILTABLE1  VARCHAR(100),  
	   @CERRORMSG    VARCHAR(500),  
	   @LDONOTUPDATESTOCK  BIT,  
	   @CKEYFIELD1    VARCHAR(50),  
	   @CKEYFIELDVAL1   VARCHAR(50),  
	   @CKEYFIELD1_DETAIL2  VARCHAR(50),  
	   @CMEMONO    VARCHAR(20),  
	   @NMEMONOLEN    NUMERIC(20,0),  
	   @CMEMONOVAL    VARCHAR(50),  
	   @CMEMODEPTID   VARCHAR(2),  
	   @CLOCATIONID   VARCHAR(4),  
	   @CHODEPTID    VARCHAR(4),  
	   @CCMD     NVARCHAR(4000),  
	   @CCMDOUTPUT    NVARCHAR(4000),  
	   @NSAVETRANLOOP   BIT, 
	   @BNEGSTOCKFOUND BIT ,@CLOCID	VARCHAR(4) 
	  
	   
	SET @NSTEP = 5  -- DO VALIDATIONS ON INPUT DATA BY USER  
	   
	DECLARE @CRETVAL VARCHAR(MAX)  
	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100)) 
	 DECLARE  @TBLERROR TABLE(ARTICLE_NO VARCHAR(50),PO_QTY NUMERIC(10,2),GRN_QTY NUMERIC(10,2))  
	 DECLARE  @TBLERROR1 TABLE(ARTICLE_NO VARCHAR(50),ASN_QTY NUMERIC(10,2),GRN_QTY NUMERIC(10,2))  
 
	   
	SET @NSTEP = 7  -- SETTTING UP ENVIRONMENT  
	SET @CTEMPDBNAME = ''  
	  
	SET @CMASTERTABLENAME  = 'GRN_PS_MST'  
	SET @CDETAILTABLENAME  = 'GRN_PS_DET'  

	SET @CTEMPMASTERTABLENAME  = 'GRNPS_GRN_PS_MST_UPLOAD'
	SET @CTEMPDETAILTABLENAME  = 'GRNPS_GRN_PS_DET_UPLOAD'
	  
	SET @CTEMPMASTERTABLE = @CTEMPDBNAME + @CTEMPMASTERTABLENAME  
	SET @CTEMPDETAILTABLE = @CTEMPDBNAME + @CTEMPDETAILTABLENAME  
	   
	SET @CERRORMSG   = ''  
	SET @LDONOTUPDATESTOCK = 0  
	SET @CKEYFIELD1   = 'MEMO_ID'  
    SET @CMEMONO       = 'MEMO_NO'  
	SET @NMEMONOLEN   = 10  
	 
	SELECT @CLOCID=LOCATION_CODE FROM GRNPS_GRN_PS_MST_UPLOAD WHERE SP_ID=@NSPID 
	SET @CLOCATIONID=@CLOCID
	
	 
	SELECT @CHODEPTID  = [VALUE] FROM CONFIG WHERE  CONFIG_OPTION='HO_LOCATION_ID'    
    BEGIN TRANSACTION
    
    IF OBJECT_ID('TEMPDB..#BACODES','U') IS NOT NULL
	DROP TABLE #BACODES
	
	SELECT DEPT_ID,BIN_ID,PRODUCT_CODE,QUANTITY_IN_STOCK AS XN_QTY INTO #BACODES FROM PMT01106 WHERE 1=2 
	
	IF @NUPDATEMODE IN(3,4,5)
	BEGIN
	  IF EXISTS(SELECT TOP 1 'U' FROM GRN_PS_MST WHERE MEMO_ID =@CMEMOID AND ISNULL(REF_CONVERTED_MRR_ID,'')<>'')
	  BEGIN
		  SET @CERRORMSG='GRN HAS BEEN CONVERTED IN MRR CAN NOT CANCELLED/DELETE PLEASE CHECK '
		  GOTO END_PROC
		         
	   END 
	END
		         
	IF @NUPDATEMODE IN(4,5)
	BEGIN
	       SET @CKEYFIELDVAL1= @CMEMOID
	       INSERT #BACODES(DEPT_ID,BIN_ID,PRODUCT_CODE,XN_QTY)
			SELECT LEFT (A.MEMO_ID,2) AS  DEPT_ID,a.BIN_ID,A.PRODUCT_CODE,A.QUANTITY
			FROM GRN_PS_DET A (NOLOCK)
			JOIN GRN_PS_MST B (NOLOCK) ON A.MEMO_ID =B.MEMO_ID 
			WHERE A.MEMO_ID =@CKEYFIELDVAL1

	END
	
    
    IF @NUPDATEMODE=4
    BEGIN
           IF (ISNULL(@CMEMOID,'')='' OR ISNULL(@BOX_NO,0)=0)
           BEGIN
                SET @CERRORMSG='IN CASE OF ITEM DELETION , MEMOID OR BOXNO SHOULD NOT BE EMPTY'
			    GOTO END_PROC
           END
           ELSE
           BEGIN
			   SET @CCMD = 'DELETE FROM ' + @CDETAILTABLENAME + ' WHERE MEMO_ID='''+@CMEMOID+''' AND BOX_NO='''+RTRIM(LTRIM(STR(@BOX_NO)))+''''
			   PRINT @CCMD  
			   EXEC SP_EXECUTESQL @CCMD 
			   GOTO LBLUPDATESTOCK 
           END
           
           DELETE A FROM PURCHASEORDERPROCESSINGNEW A (NOLOCK)
           JOIN GRN_PS_DET B (NOLOCK) ON A.ROWID =B.ROW_ID 
           WHERE A.XNTYPE ='GRN' and b.MEMO_ID=@CMEMOID and b.BOX_NO=RTRIM(LTRIM(STR(@BOX_NO))) and b.PO_ROW_ID <>''
     
    END
    
    IF @NUPDATEMODE=5
    BEGIN
           IF (ISNULL(@CMEMOID,'')='' OR ISNULL(@ITEM_CODE,'')='')
           BEGIN
                SET @CERRORMSG='IN CASE OF ITEM DELETION , MEMOID OR ITEMCODE SHOULD NOT BE EMPTY'
			    GOTO END_PROC
           END
           ELSE
           BEGIN
           
			   SET @CCMD = 'DELETE FROM ' + @CDETAILTABLENAME + ' WHERE MEMO_ID='''+@CMEMOID+''' AND PRODUCT_CODE='''+@ITEM_CODE+''''
			   PRINT @CCMD  
			   EXEC SP_EXECUTESQL @CCMD 
			   GOTO LBLUPDATESTOCK 
           END
           
           DELETE A FROM PURCHASEORDERPROCESSINGNEW A (NOLOCK)
           JOIN GRN_PS_DET B (NOLOCK) ON A.ROWID =B.ROW_ID 
           WHERE A.XNTYPE ='GRN' and b.MEMO_ID=@CMEMOID and b.PRODUCT_CODE=@ITEM_CODE and b.PO_ROW_ID <>''
     
    END
    
    
      

	IF @NUPDATEMODE=3 AND ISNULL(@CMEMOID,'') = ''  
	BEGIN  
		   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED IF CALLED FROM CANCELLATION'  
		   GOTO END_PROC      
	END  
	
	
	SET @NSTEP=15  
	IF @NUPDATEMODE = 1 -- ADDMODE   
	BEGIN   

	    IF ISNULL(@CLOCATIONID,'')=''
		 BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
			GOTO END_PROC    
		 END
		   SET @NSTEP = 20  -- GENERATING NEW KEY  
		     
		   SET @NSAVETRANLOOP=0  
		   WHILE @NSAVETRANLOOP=0  
		   BEGIN  
	      		EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,  
					@CFINYEAR,0, @CMEMONOVAL OUTPUT     
			      
				PRINT @CMEMONOVAL  
				SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+'   
					  WHERE '+@CMEMONO+'='''+@CMEMONOVAL+'''   
					  AND FIN_YEAR = '''+@CFINYEAR+''' )  
					SET @NLOOPOUTPUT=0  
				   ELSE  
					SET @NLOOPOUTPUT=1'  
				PRINT @CCMD  
				EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT  
		   END  
		  
		   IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
		   BEGIN  
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'   
			  GOTO END_PROC      
		   END  
		  
		   SET @NSTEP = 30  -- GENERATING NEW ID  
		  
		  SET @CKEYFIELDVAL1 = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
		  
		   IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		   BEGIN  
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
			  GOTO END_PROC  
		   END  
		  
		   SET @NSTEP = 32  -- UPDATING NEW ID INTO TEMP TABLES  
		     
		   SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' +   
			  @CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+LTRIM(RTRIM((@NSPID))) +''''  
		   PRINT @CCMD  
		   EXEC SP_EXECUTESQL @CCMD  
		     
		   SET @NSTEP = 34  
		     
		   SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+LTRIM(RTRIM((@NSPID))) +''''  
		   PRINT @CCMD  
		   EXEC SP_EXECUTESQL @CCMD  
		   

		        
	END     -- END OF ADDMODE  
	ELSE    -- CALLED FROM EDITMODE  
	BEGIN    -- START OF EDITMODE  
	    
		   SET @NSTEP = 40  -- GETTING ID INFO FROM TEMP TABLE  
		   -- GETTING CM ID WHICH IS BEING EDITED  
		   SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ' + @CKEYFIELD1 + ', @CMEMONOVAL = ' + @CMEMONO + ' FROM '  
			  + (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME + ' WHERE MEMO_ID = ''' + @CMEMOID + ''''   
				ELSE @CTEMPMASTERTABLE +' WHERE SP_ID='''+LTRIM(RTRIM((@NSPID))) +'''' END )  
		     
		   EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT',   
				  @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT  
		   IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )  
		   BEGIN  
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'  
			  GOTO END_PROC      
		   END  
		     
		   SET @NSTEP = 45  -- STORING OLD STATUS OF BARCODES   
		 
		 --UPDATING BARCODE  
		 
		    INSERT #BACODES(DEPT_ID,BIN_ID,PRODUCT_CODE,XN_QTY)
			SELECT LEFT (A.MEMO_ID,2) AS  DEPT_ID,a.BIN_ID,A.PRODUCT_CODE,A.QUANTITY
			FROM GRN_PS_DET A (NOLOCK)
			JOIN GRN_PS_MST B (NOLOCK) ON A.MEMO_ID =B.MEMO_ID 
			WHERE A.MEMO_ID =@CKEYFIELDVAL1
		
		 SET @NSTEP = 50
		 EXEC SP3SBUILDGRNPS 
				@CXNID=@CKEYFIELDVAL1
				,@NUPDATEMODE=3
				,@CERRMSG=@CERRORMSG OUTPUT  

		IF ISNULL(@CERRORMSG,'')<>''
			GOTO END_PROC

						   
		 --UPDATING BARCODE
		   IF @NUPDATEMODE = 3     
		   BEGIN  
		         
		     
		         IF OBJECT_ID ('TEMPDB..#BARCODE_NETQTY1','U') IS NOT NULL
		            DROP TABLE #BARCODE_NETQTY1
		            
		         SELECT A.DEPT_ID,A.BIN_ID,A.PRODUCT_CODE,SUM(A.XN_QTY) AS XN_QTY 
				 INTO #BARCODE_NETQTY1 
				 FROM #BACODES A 
				 JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE
				 JOIN ARTICLE C ON B.ARTICLE_CODE=C.ARTICLE_CODE
				 WHERE C.STOCK_NA=0 AND ISNULL(A.PRODUCT_CODE,'')<>''
				 GROUP BY A.DEPT_ID,A.BIN_ID,A.PRODUCT_CODE
				 HAVING SUM(A.XN_QTY)<>0
		   			--CHECK IF THE BARCODES TO BE UPDATED ARE NOT PART OF STOCK RECONCILLATION PROCESS	
				IF EXISTS(SELECT TOP 1 A.MEMO_ID FROM STMH01106 A JOIN PMT01106 B ON A.REP_ID=B.REP_ID 
				          AND B.BIN_ID=A.RECON_BIN_ID
				          JOIN #BARCODE_NETQTY1 C ON C.PRODUCT_CODE=B.PRODUCT_CODE AND C.BIN_ID=B.BIN_ID
					      )
				 BEGIN
						SELECT DISTINCT C.PRODUCT_CODE,0 AS QUANTITY_IN_STOCK,'FOLLOWING BAR CODES ARE PART OF STOCK RECONCILIATION' AS ERRMSG
						FROM STMH01106 A JOIN PMT01106 B ON A.REP_ID=B.REP_ID
						AND B.BIN_ID=A.RECON_BIN_ID
						JOIN #BARCODE_NETQTY1 C ON C.PRODUCT_CODE=B.PRODUCT_CODE AND C.BIN_ID=B.BIN_ID
								    
						SET @BNEGSTOCKFOUND=1
						GOTO END_PROC
				  END	  	
				    
					UPDATE A
					SET QUANTITY_IN_STOCK=QUANTITY_IN_STOCK-XN_QTY
					FROM PMT01106 A WITH (ROWLOCK)
					JOIN #BARCODE_NETQTY1 B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID
					where isnull(a.bo_order_id,'')=''
					
					IF ISNULL(@BALLOWNEGSTOCK,0)=0 --CHECKING FOR NEGATIVE STOCK
					BEGIN
						  IF EXISTS(SELECT TOP 1 'U' FROM PMT01106 A JOIN #BARCODE_NETQTY1 B ON A.PRODUCT_CODE=B.PRODUCT_CODE
						  AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID AND A.QUANTITY_IN_STOCK<0 and isnull(a.bo_order_id,'')='')
						  BEGIN	
								SELECT DISTINCT A.PRODUCT_CODE,A.QUANTITY_IN_STOCK,'STOCK GOING NEGATIVE FOR TARGET BIN.' AS ERRMSG
								FROM PMT01106 A
								JOIN #BARCODE_NETQTY1 B ON A.PRODUCT_CODE=B.PRODUCT_CODE 
								AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID 
								JOIN GRN_PS_DET C (NOLOCK) ON C.PRODUCT_CODE=A.PRODUCT_CODE
								WHERE C.MEMO_ID =@CKEYFIELDVAL1 AND A.QUANTITY_IN_STOCK<0 AND C.QUANTITY>0
								and isnull(a.bo_order_id,'')=''
									  
								SET @BNEGSTOCKFOUND=1
								GOTO END_PROC
						   END
					END
					
				SET @NSTEP=60  
				SET @CCMD = N'UPDATE ' + @CMASTERTABLENAME + ' SET CANCELLED = 1,LAST_UPDATE=GETDATE() ' +   
				   N' WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
				   '  
				EXEC SP_EXECUTESQL @CCMD  
			    
		   		UPDATE parcel_det SET CLOSED=0 FROM GRN_PS_MST b WHERE b.REF_PARCEL_ROW_ID=parcel_det.row_id
				AND b.MEMO_ID=@CKEYFIELDVAL1
				

			EXEC SP3S_upd_qty_lastupdate
			@nUpdateMode=3,
			@cXnType='GRNPS',
			@cMasterTable='GRN_PS_MST',
			@cMemoIdCol='Memo_id',
			@cMemoId=@CKEYFIELDVAL1,
			@CERRORMSG=@CERRORMSG OUTPUT
			
		   DELETE A FROM PURCHASEORDERPROCESSINGNEW A (NOLOCK)
           JOIN GRN_PS_DET B (NOLOCK) ON A.ROWID =B.ROW_ID 
           WHERE A.XNTYPE ='GRN' and b.MEMO_ID=@CMEMOID 
		
			    GOTO END_PROC
		   END  
		   
		   SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET LAST_UPDATE=GETDATE() WHERE SP_ID='''+LTRIM(RTRIM((@NSPID))) +''' '  
		   EXEC SP_EXECUTESQL @CCMD  
		         
	END     -- END OF EDITMODE  
	  
	SET @NSTEP = 95  
	-- RECHECKING IF ID IS STILL LATER  
	IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
	BEGIN  
	   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
	   GOTO END_PROC  
	END  

	IF @NUPDATEMODE IN (1,2)
	BEGIN
		SET @nSTEP = 98
		UPDATE a SET total_quantity=b.total_quantity FROM GRNPS_GRN_PS_MST_UPLOAD A WITH (ROWLOCK) 
		JOIN (SELECT sp_id,sum(quantity) as total_quantity FROM GRNPS_GRN_PS_DET_UPLOAD b (NOLOCK)  
				WHERE sp_id=@nSpId GROUP BY sp_id) b ON a.sp_id=b.sp_id

      	EXEC SP3S_upd_qty_lastupdate
		@nUpdateMode=@NUPDATEMODE,
		@cXnType='GRNPS',
		@cMasterTable='GRN_PS_MST',
		@nSpId=@nSpId,
		@cMemoIdCol='Memo_id',
		@cMemoId=@CKEYFIELDVAL1,
		@cXnDtCol='memo_dt',
		@CERRORMSG=@CERRORMSG OUTPUT

		IF ISNULL(@CERRORMSG,'')<>''
		   GOTO END_PROC

	END		
	  	  
	SET @NSTEP = 100  -- UPDATING MASTER TABLE     
	DECLARE @FILTER VARCHAR(100)
    SET @FILTER=' SP_ID='''+LTRIM(RTRIM((@NSPID)))+''''
                        
    EXEC UPDATEMASTERXN_MIRROR--UPDATEMASTERXN   
		  @CSOURCEDB = @CTEMPDBNAME  
		, @CSOURCETABLE = @CTEMPMASTERTABLENAME  
		, @CDESTDB  = ''  
		, @CDESTTABLE = @CMASTERTABLENAME  
		, @CKEYFIELD1 = @CKEYFIELD1  
		, @BALWAYSUPDATE = 1 
		,@CFILTERCONDITION=@FILTER 
	  
	SET @NSTEP = 110  -- UPDATING TRANSACTION TABLE  
	     
	     
	SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())  
			WHERE LEFT(ROW_ID,5) = ''LATER'' AND SP_ID='''+LTRIM(RTRIM((@NSPID))) +''''  
	EXEC SP_EXECUTESQL @CCMD  
	  
	 
	            
	-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE  
	SET @NSTEP = 114  -- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES  
	     
	-- CMD01106  
	SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + '   
		  WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''  
		  AND ROW_ID IN   
		  (  
		   SELECT A.ROW_ID   
		   FROM ' + @CDETAILTABLENAME + ' A   
		   JOIN ' + @CTEMPDETAILTABLE + ' B ON A.ROW_ID = B.ROW_ID  AND B.SP_ID='''+LTRIM(RTRIM((@NSPID))) +''' 
		   WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''  
		 
		  )'  
	EXEC SP_EXECUTESQL @CCMD  
	   
	   -- INSERTING/UPDATING THE ENTRIES IN PRD_JID TABLE FROM TEMPTABLE  
	SET @NSTEP = 117  -- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES  
	   -- CMD01106  
	EXEC UPDATEMASTERXN_MIRROR--UPDATEMASTERXN   
		  @CSOURCEDB = @CTEMPDBNAME  
		, @CSOURCETABLE = @CTEMPDETAILTABLENAME  
		, @CDESTDB  = ''  
		, @CDESTTABLE = @CDETAILTABLENAME  
		, @CKEYFIELD1 = 'ROW_ID'  
		, @BALWAYSUPDATE = 1 
		,@CFILTERCONDITION=@FILTER 
	
	IF @NUPDATEMODE=1
	BEGIN	
		SET @NSTEP = 120
		
		DECLARE @bParcelClosed BIT
		SELECT TOP 1 @bParcelClosed=ISNULL(parcel_closed,0) FROM GRNPS_GRN_PS_MST_UPLOAD WHERE sp_id=@NSPID
 		
		UPDATE parcel_det SET CLOSED=@bParcelClosed FROM GRN_PS_MST b WHERE b.REF_PARCEL_ROW_ID=parcel_det.row_id
		AND b.MEMO_ID=@CKEYFIELDVAL1	
	END     
 
 
   --NORMALIZE PESISHABLE PRODUCT_CODE
    IF @NUPDATEMODE<>3
    BEGIN
        
		  EXEC SAVETRAN_GENPERISHABLE_BARCODE 2,@CKEYFIELDVAL1,@CERRORMSG OUTPUT,0,@cLocId=@CLOCATIONID
		  
		  IF ISNULL(@CERRORMSG,'')<>''
		  BEGIN
			   SET @CERRORMSG='ERROR IN PERISHABLE BARCODE GENERATION '+@CERRORMSG
			   GOTO END_PROC
		  END
    END
    
    
    
 LBLUPDATESTOCK:
		-- UPDATING STOCK OF PMT W.R.T. CURRENT MEMO
		SET @NSTEP = 137		-- UPDATING PMT TABLE
		
		
		/*STOCK UPDATE CHANGES*/
		INSERT #BACODES(DEPT_ID,BIN_ID,PRODUCT_CODE,XN_QTY)
		SELECT LEFT (A.MEMO_ID,2) AS  DEPT_ID,a.BIN_ID,A.PRODUCT_CODE,-A.QUANTITY
		FROM GRN_PS_DET A (NOLOCK)
		JOIN GRN_PS_MST B (NOLOCK) ON A.MEMO_ID =B.MEMO_ID 
		WHERE A.MEMO_ID =@CKEYFIELDVAL1
		
		IF OBJECT_ID('TEMPDB..#BARCODE_NETQTY','U') IS NOT NULL
			DROP TABLE #BARCODE_NETQTY
		
		--GETTING THE NET QUANTITY TO UPDATED FOR EACH BARCODE EXCLUDING THE STOCK NA ARTICLES
		SELECT A.DEPT_ID,A.BIN_ID,A.PRODUCT_CODE,SUM(A.XN_QTY) AS XN_QTY 
		INTO #BARCODE_NETQTY 
		FROM #BACODES A 
		JOIN SKU B (NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE
		JOIN ARTICLE C (NOLOCK) ON B.ARTICLE_CODE=C.ARTICLE_CODE
		WHERE C.STOCK_NA=0 AND ISNULL(A.PRODUCT_CODE,'')<>''
		GROUP BY A.DEPT_ID,A.BIN_ID,A.PRODUCT_CODE
		HAVING SUM(A.XN_QTY)<>0
	    

	    INSERT PMT01106(LAST_UPDATE,REP_ID,PRODUCT_CODE,QUANTITY_IN_STOCK,DEPT_ID,BIN_ID) 
		SELECT GETDATE(),'' AS REP_ID,A.PRODUCT_CODE,0 AS QUANTITY_IN_STOCK,A.DEPT_ID,A.BIN_ID
		FROM #BARCODE_NETQTY A
		LEFT JOIN PMT01106 B WITH (NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID and isnull(b.bo_order_id,'')=''
		WHERE B.PRODUCT_CODE IS NULL
		   
		  --CHECK IF THE BARCODES TO BE UPDATED ARE NOT PART OF STOCK RECONCILLATION PROCESS	
		   IF EXISTS(
						SELECT TOP 1 A.MEMO_ID FROM STMH01106 A JOIN PMT01106 B ON A.REP_ID=B.REP_ID
																	      AND B.BIN_ID=A.RECON_BIN_ID
						JOIN #BARCODE_NETQTY C ON C.PRODUCT_CODE=B.PRODUCT_CODE AND C.BIN_ID=B.BIN_ID
					)
			BEGIN
					SELECT DISTINCT C.PRODUCT_CODE,0 AS QUANTITY_IN_STOCK,'FOLLOWING BAR CODES ARE PART OF STOCK RECONCILIATION' AS ERRMSG
				    FROM STMH01106 A (NOLOCK) JOIN PMT01106 B (NOLOCK) ON A.REP_ID=B.REP_ID
				    AND B.BIN_ID=A.RECON_BIN_ID
				    JOIN #BARCODE_NETQTY C ON C.PRODUCT_CODE=B.PRODUCT_CODE AND C.BIN_ID=B.BIN_ID
				    SET @BNEGSTOCKFOUND=1
				    GOTO END_PROC
			END	  	

			
		   --UPDATING STOCK IN PMT01106
		   UPDATE A
		   SET QUANTITY_IN_STOCK=QUANTITY_IN_STOCK-XN_QTY
		   FROM PMT01106 A WITH (ROWLOCK)
		   JOIN #BARCODE_NETQTY B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID
		   where isnull(a.bo_order_id,'')=''
			
		   IF ISNULL(@BALLOWNEGSTOCK,0)=0  --CHECKING FOR NEGATIVE STOCK
		   BEGIN
		   IF EXISTS(SELECT TOP 1 'U' FROM PMT01106 A JOIN #BARCODE_NETQTY B ON A.PRODUCT_CODE=B.PRODUCT_CODE
					 AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID AND A.QUANTITY_IN_STOCK<0 and isnull(a.bo_order_id,'')='' )
			   BEGIN	
					  SELECT A.PRODUCT_CODE,A.QUANTITY_IN_STOCK,'STOCK GOING NEGATIVE' AS ERRMSG
					  FROM PMT01106 A WITH (NOLOCK)
					  JOIN #BARCODE_NETQTY B ON A.PRODUCT_CODE=B.PRODUCT_CODE 
					  AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID 
					  AND A.QUANTITY_IN_STOCK<0 and  isnull(a.bo_order_id,'')=''
					  SET @BNEGSTOCKFOUND=1
				      GOTO END_PROC
			   END
		   END
		 --END OF UPDATING STOCK
	
	
	IF @NUPDATEMODE IN(4,5)
	BEGIN
	    
		EXEC SP3S_upd_qty_lastupdate
			@nUpdateMode=3,
			@cXnType='GRNPS',
			@cMasterTable='GRN_PS_MST',
			@cMemoIdCol='Memo_id',
			@cMemoId=@CKEYFIELDVAL1,
			@CERRORMSG=@CERRORMSG OUTPUT

	IF ISNULL(@CERRORMSG,'')<>''
		GOTO END_PROC

	END
 
 IF EXISTS(SELECT TOP 1 'U' FROM GRN_PS_DET  WHERE  MEMO_ID=@CKEYFIELDVAL1 AND ISNULL(ASN_ROW_ID,'')<>'')
 BEGIN
  
          
		UPDATE A SET GRN_QTY=Z.QUANTITY
		FROM ASN_MST A
		JOIN
		(
			SELECT B.MEMO_ID,SUM(A.QUANTITY) QUANTITY FROM GRN_PS_DET A JOIN 
			ASN_DET B ON A.ASN_ROW_ID=B.ROW_ID
			JOIN 
			(

			SELECT  DISTINCT B.MEMO_ID FROM GRN_PS_DET  A JOIN ASN_DET B ON A.ASN_ROW_ID=B.ROW_ID
			WHERE  A.MEMO_ID= @CKEYFIELDVAL1 AND  ISNULL(ASN_ROW_ID,'')<>''
			)Z ON Z.MEMO_ID=B.MEMO_ID
			GROUP BY B.MEMO_ID
		) Z ON Z.MEMO_ID=A.MEMO_ID


         
 END

 
 	 IF @NUPDATEMODE<>3
     BEGIN	 
		          
		
           
           
		          
		IF OBJECT_ID ('TEMPDB..#TMPGRN','U') IS NOT NULL
		   DROP TABLE #TMPGRN

		SELECT DISTINCT  A.PO_ROW_ID  
		INTO #TMPGRN
		FROM GRN_PS_DET A (NOLOCK)
		WHERE ISNULL(PO_ROW_ID,'')<>''
		AND MEMO_ID=@CKEYFIELDVAL1
		
		IF exists (select top 1 'U' from #TMPGRN)
		BEGIN
		   
		   if @NUPDATEMODE=2
		   DELETE A FROM PURCHASEORDERPROCESSINGNEW A (NOLOCK)
           JOIN GRN_PS_DET B (NOLOCK) ON A.ROWID =B.ROW_ID 
           WHERE A.XNTYPE ='GRN' AND B.MEMO_ID=@CMEMOID  and b.PO_ROW_ID <>''
           
           
           if @NUPDATEMODE in(1,2)
           begin
             INSERT PURCHASEORDERPROCESSINGNEW	( Qty, RefRowId, RowId, XnType ) 
             SELECT quantity   Qty, PO_ROW_ID RefRowId,row_id RowId,'GRN' XnType 
             FROM GRN_PS_DET  (nolock) 
             WHERE  MEMO_ID=@CMEMOID  and PO_ROW_ID <>''
          end

           
           
          END 
		
        
        IF OBJECT_ID ('TEMPDB..#TMPGRNEXCESS','U') IS NOT NULL
		   DROP TABLE #TMPGRNEXCESS
		   
		SELECT b.product_code, B.row_id ,B.quantity ,GRN.GRN_QTY 
		INTO #TMPGRNEXCESS
		FROM #TMPGRN A
		JOIN pod01106 B (NOLOCK) ON A.PO_ROW_ID =B.ROW_ID
		JOIN
		(
		 SELECT A.PO_ROW_ID ,SUM(A.QUANTITY) AS GRN_QTY 
		 FROM GRN_PS_DET A (NOLOCK)
		 JOIN GRN_PS_MST B (NOLOCK) ON A.MEMO_ID =B.MEMO_ID 
		 WHERE B.CANCELLED=0 
		 AND ISNULL(A.PO_ROW_ID,'')<>''
		 GROUP BY A.PO_ROW_ID
		) GRN ON B.ROW_ID=GRN.PO_ROW_ID 
		WHERE GRN_QTY>B.quantity 
		
		IF EXISTS (SELECT TOP 1 'U' FROM #TMPGRNEXCESS)
		BEGIN
		   
		    DECLARE @CPRODUCT_CODE VARCHAR(100),@QUANTITY NUMERIC(10,2),@GRN_QTY NUMERIC(10,2)
		    
		    SELECT TOP 1  @CPRODUCT_CODE=PRODUCT_CODE ,@QUANTITY=QUANTITY,@GRN_QTY=GRN_QTY FROM #TMPGRNEXCESS
		    
		    SET @CERRORMSG='GRN QTY MORE THEN PO QTY BARCODE:'+@CPRODUCT_CODE+' QTY:'+STR(@QUANTITY)+' GRN'+STR(@GRN_QTY)
			GOTO END_PROC
		END
       



	   IF OBJECT_ID ('TEMPDB..#TMPGRN1','U') IS NOT NULL
		   DROP TABLE #TMPGRN1

		SELECT DISTINCT  b.PO_ROW_ID  
		INTO #TMPGRN1
		FROM GRN_PS_DET A (NOLOCK)
		join asn_det b (nolock) on a.ASN_ROW_ID=b.row_id 
		join asn_mst am (nolock) on b.memo_id =am.MEMO_ID
		WHERE ISNULL(b.PO_ROW_ID,'')<>'' and ISNULL(a.ASN_ROW_ID,'')<>''
		AND a.MEMO_ID=@CKEYFIELDVAL1 and am.CANCELLED=0
        
        IF OBJECT_ID ('TEMPDB..#TMPGRNEXCESS1','U') IS NOT NULL
		   DROP TABLE #TMPGRNEXCESS1
		   
		SELECT b.product_code, B.row_id ,B.quantity ,GRN.GRN_QTY 
		INTO #TMPGRNEXCESS1
		FROM #TMPGRN1 A
		JOIN pod01106 B (NOLOCK) ON A.PO_ROW_ID =B.ROW_ID
		JOIN
		(
		 SELECT Ad.PO_ROW_ID ,SUM(A.QUANTITY) AS GRN_QTY 
		 FROM GRN_PS_DET A (NOLOCK)
		 JOIN GRN_PS_MST B (NOLOCK) ON A.MEMO_ID =B.MEMO_ID 
		 join asn_det ad (nolock) on a.ASN_ROW_ID=ad.row_id 
		 join asn_mst am (nolock) on ad.memo_id =am.MEMO_ID
		 WHERE B.CANCELLED=0 and am.CANCELLED=0
		 AND ISNULL(Ad.PO_ROW_ID,'')<>'' and ISNULL(a.ASN_ROW_ID,'')<>''
		 GROUP BY Ad.PO_ROW_ID
		) GRN ON B.ROW_ID=GRN.PO_ROW_ID 
		WHERE GRN_QTY>B.quantity 
		
		IF EXISTS (SELECT TOP 1 'U' FROM #TMPGRNEXCESS1)
		BEGIN
		   
	
		    SELECT TOP 1  @CPRODUCT_CODE=PRODUCT_CODE ,@QUANTITY=QUANTITY,@GRN_QTY=GRN_QTY FROM #TMPGRNEXCESS1
		    SET @CERRORMSG='GRN QTY MORE THEN PO QTY BARCODE:'+@CPRODUCT_CODE+' QTY:'+STR(@QUANTITY)+' GRN'+STR(@GRN_QTY)
			GOTO END_PROC
		END

     END

	   IF EXISTS (SELECT TOP 1 'U' FROM INV_SKU_COL_LIST A  (NOLOCK) WHERE FOR_SKU=1 )
			BEGIN
			   
			  
				   EXEC SP3S_INSERT_PARA7 
						@CXNTYPE='GRNPS',
						@CSP_ID=@CKEYFIELDVAL1,
						@CLOCID=@CLOCATIONID,
						@CERRORMSG=@CERRORMSG OUTPUT 

						
				   
				   IF ISNULL(@CERRORMSG,'')<>''
				       GOTO END_PROC

			END
		

    set @NSTEP=150
    EXEC SP3S_UPDATE_PMTLOCS_REBUILD_STARTDATE
    @cXnType='GRNPS',
    @cMemoId=@CKEYFIELDVAL1 

 
 
END TRY  

BEGIN CATCH  
	  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()  
	    
	  GOTO END_PROC  
END CATCH  
	   
END_PROC:  

     PRINT 'ERROR AT LAT : '+ISNULL(@CERRORMSG,'') + ISNULL(@CCMDOUTPUT,'') + STR(ISNULL(@BNEGSTOCKFOUND,0))
	 
	 UPDATE GRN_PS_MST WITH (ROWLOCk) SET last_update=getdate(),reconciled=0 WHERE memo_id=@CKEYFIELDVAL1
	   
	 IF @@TRANCOUNT>0  
	 BEGIN  
		  IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')='' AND ISNULL(@BNEGSTOCKFOUND,0)=0  
		  BEGIN
			UPDATE GRN_PS_MST SET HO_SYNCH_LAST_UPDATE='' WHERE MEMO_ID=@CKEYFIELDVAL1
			
			COMMIT TRANSACTION
		  END	
		  ELSE		
			ROLLBACK  
	 END  
	   
	 IF ISNULL(@BNEGSTOCKFOUND,0)=0  
	 BEGIN  
		  INSERT @OUTPUT ( ERRMSG, MEMO_ID)  
		   VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )  
		   SELECT * FROM @OUTPUT   
	 END   
	   
	     
	 DELETE FROM GRNPS_GRN_PS_MST_UPLOAD WHERE SP_ID=@NSPID
	 DELETE FROM  GRNPS_GRN_PS_DET_UPLOAD WHERE SP_ID=@NSPID
	 
	
	-- IF EXISTS(SELECT TOP 1 'U' FROM @TBLERROR) AND @MODE=2
	-- SELECT * FROM @TBLERROR
	--IF EXISTS(SELECT TOP 1 'U' FROM @TBLERROR1) AND @MODE=3
	-- SELECT * FROM @TBLERROR1
	   
END     
------------------------------------------------------ END OF PROCEDURE SAVETRAN_RPS
