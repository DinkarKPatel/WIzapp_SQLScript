create PROCEDURE SAVETRAN_ARS_INDENT
(
  @nMode INT=1,
  @cIndentID VARCHAR(40)='',
  @CFINYEAR VARCHAR(10),
  @nSPID INT
)  
AS  
BEGIN  
SET NOCOUNT ON  

DECLARE @CCMD NVARCHAR(MAX),@TABLE_NAME VARCHAR(100),@SNO VARCHAR(4),@ERROR VARCHAR(MAX)='',@STEP FLOAT  
,@PRINT_ON BIT=0,@CODE_LEN INT=15,@MAX VARCHAR(15),@CNEWKEYVAL VARCHAR(100),@ID VARCHAR(100)

BEGIN TRY  
BEGIN TRANSACTION  
SET @STEP=1  
SET @ID=@cIndentID
IF @NMODE<>1 
   IF ISNULL(@cIndentID,'')=''
      BEGIN
        SET @ERROR='Indent_ID not provided'
        GOTO END_PROC
      END   
   
IF @NMODE=3
   UPDATE ARS_INDENT_MST SET CANCELLED=1,LAST_UPDATE=GETDATE() WHERE INDENT_ID=@cIndentID
IF @@ROWCOUNT=0 AND @NMODE=3
   SET @ERROR='Indent ID not found'
IF @NMODE=3
   GOTO END_PROC
     
DECLARE LOC CURSOR FOR SELECT DISTINCT location_code FROM ARS_ARS_INDENT_MST_UPLOAD (NOLOCK) WHERE SP_ID=@nSPID AND @nMode=1 AND INDENT_ID LIKE 'LATER%'
OPEN LOC
FETCH NEXT FROM LOC INTO @SNO
WHILE @@FETCH_STATUS=0
  BEGIN
	  EXEC GETNEXTKEY 'ARS_INDENT_MST','INDENT_NO',7,@SNO,1,'',1,@CNEWKEYVAL OUTPUT
      IF ISNULL(@CNEWKEYVAL,'')='' 
         BEGIN
            SET @ERROR='Unable to generate Indent_ID'
            GOTO END_PROC
         END
      ELSE
         BEGIN
            UPDATE ARS_ARS_INDENT_MST_UPLOAD SET INDENT_NO=@CNEWKEYVAL,INDENT_ID=@SNO+@CFINYEAR+@CNEWKEYVAL WHERE SP_ID=@nSPID AND DEPT_ID=@SNO
            UPDATE ARS_ARS_INDENT_DET_UPLOAD SET INDENT_ID=@SNO+@CFINYEAR+@CNEWKEYVAL WHERE SP_ID=@nSPID
         END   
      FETCH NEXT FROM LOC INTO @SNO
  END
CLOSE LOC
DEALLOCATE LOC
SET @SNO=''

SET @STEP=2
--RAISERROR('MERGE MST',0,1) WITH NOWAIT
MERGE ARS_INDENT_MST D
USING(SELECT * FROM ARS_ARS_INDENT_MST_UPLOAD WHERE SP_ID=@NSPID)S ON D.INDENT_ID=S.INDENT_ID
WHEN MATCHED THEN UPDATE SET D.DEPT_ID=S.DEPT_ID,D.AC_CODE=S.AC_CODE,D.REF_ARS_ID=ISNULL(S.REF_ARS_ID,''),D.LAST_UPDATE=GETDATE(),D.CANCELLED=ISNULL(S.CANCELLED,0),D.APPROVED=S.APPROVED,D.INV_MODE=S.INV_MODE,D.MEMO_TYPE=S.MEMO_TYPE
WHEN NOT MATCHED THEN INSERT (INDENT_ID,INDENT_DT,DEPT_ID,AC_CODE,CANCELLED,REF_ARS_ID,LAST_UPDATE,INDENT_NO,FIN_YEAR,USER_CODE,APPROVED,INV_MODE,MEMO_TYPE) VALUES(S.INDENT_ID,S.INDENT_DT,S.DEPT_ID,S.AC_CODE,0,S.REF_ARS_ID,GETDATE(),S.INDENT_NO,@CFINYEAR,S.USER_CODE,1,INV_MODE,MEMO_TYPE);

SET @STEP=4
--RAISERROR('DELETE EXISTING DET',0,1) WITH NOWAIT
DELETE ARS_INDENT_DET WITH (ROWLOCK) WHERE INDENT_ID=@cIndentID AND @nMode=2

--RAISERROR('UPDATE DET UPLOAD',0,1) WITH NOWAIT
UPDATE ARS_ARS_INDENT_DET_UPLOAD WITH (ROWLOCK) 
SET SECTION_CODE=CASE ISNULL(SECTION_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE SECTION_CODE END 
,SUB_SECTION_CODE=CASE ISNULL(SUB_SECTION_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE SUB_SECTION_CODE END 
,ARTICLE_CODE=CASE ISNULL(ARTICLE_CODE,'') WHEN '' THEN REPLICATE('0',8) ELSE ARTICLE_CODE END 
,PARA1_CODE=CASE ISNULL(PARA1_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE PARA1_CODE END 
,PARA2_CODE=CASE ISNULL(PARA2_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE PARA2_CODE END 
,PARA3_CODE=CASE ISNULL(PARA3_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE PARA3_CODE END 
,PARA4_CODE=CASE ISNULL(PARA4_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE PARA4_CODE END 
,PARA5_CODE=CASE ISNULL(PARA5_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE PARA5_CODE END 
,PARA6_CODE=CASE ISNULL(PARA6_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE PARA6_CODE END 
,ATTR1_KEY_CODE=CASE ISNULL(ATTR1_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR1_KEY_CODE END 
,ATTR2_KEY_CODE=CASE ISNULL(ATTR2_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR2_KEY_CODE END 
,ATTR3_KEY_CODE=CASE ISNULL(ATTR3_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR3_KEY_CODE END 
,ATTR4_KEY_CODE=CASE ISNULL(ATTR4_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR4_KEY_CODE END 
,ATTR5_KEY_CODE=CASE ISNULL(ATTR5_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR5_KEY_CODE END 
,ATTR6_KEY_CODE=CASE ISNULL(ATTR6_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR6_KEY_CODE END 
,ATTR7_KEY_CODE=CASE ISNULL(ATTR7_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR7_KEY_CODE END 
,ATTR8_KEY_CODE=CASE ISNULL(ATTR8_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR8_KEY_CODE END 
,ATTR9_KEY_CODE=CASE ISNULL(ATTR9_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR9_KEY_CODE END 
,ATTR10_KEY_CODE=CASE ISNULL(ATTR10_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR10_KEY_CODE END 
,ATTR11_KEY_CODE=CASE ISNULL(ATTR11_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR11_KEY_CODE END 
,ATTR12_KEY_CODE=CASE ISNULL(ATTR12_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR12_KEY_CODE END 
,ATTR13_KEY_CODE=CASE ISNULL(ATTR13_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR13_KEY_CODE END 
,ATTR14_KEY_CODE=CASE ISNULL(ATTR14_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR14_KEY_CODE END 
,ATTR15_KEY_CODE=CASE ISNULL(ATTR15_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR15_KEY_CODE END 
,ATTR16_KEY_CODE=CASE ISNULL(ATTR16_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR16_KEY_CODE END 
,ATTR17_KEY_CODE=CASE ISNULL(ATTR17_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR17_KEY_CODE END 
,ATTR18_KEY_CODE=CASE ISNULL(ATTR18_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR18_KEY_CODE END 
,ATTR19_KEY_CODE=CASE ISNULL(ATTR19_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR19_KEY_CODE END 
,ATTR20_KEY_CODE=CASE ISNULL(ATTR20_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR20_KEY_CODE END 
,ATTR21_KEY_CODE=CASE ISNULL(ATTR21_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR21_KEY_CODE END 
,ATTR22_KEY_CODE=CASE ISNULL(ATTR22_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR22_KEY_CODE END 
,ATTR23_KEY_CODE=CASE ISNULL(ATTR23_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR23_KEY_CODE END 
,ATTR24_KEY_CODE=CASE ISNULL(ATTR24_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR24_KEY_CODE END 
,ATTR25_KEY_CODE=CASE ISNULL(ATTR25_KEY_CODE,'') WHEN '' THEN REPLICATE('0',7) ELSE ATTR25_KEY_CODE END 
WHERE SP_ID=@NSPID

--RAISERROR('MERGE DET',0,1) WITH NOWAIT
MERGE ARS_INDENT_DET D
USING (SELECT * FROM ARS_ARS_INDENT_DET_UPLOAD (NOLOCK) WHERE SP_ID=@NSPID)S ON D.INDENT_ID=S.INDENT_ID AND D.ROW_ID=S.ROW_ID
WHEN MATCHED THEN UPDATE SET D.SECTION_CODE=S.SECTION_CODE,D.SUB_SECTION_CODE=S.SUB_SECTION_CODE,D.ARTICLE_CODE=S.ARTICLE_CODE
,D.PARA1_CODE=S.PARA1_CODE,D.PARA2_CODE=S.PARA2_CODE,D.PARA3_CODE=S.PARA3_CODE,D.PARA4_CODE=S.PARA4_CODE,D.PARA5_CODE=S.PARA5_CODE,D.PARA6_CODE=S.PARA6_CODE
,D.ATTR1_KEY_CODE=S.ATTR1_KEY_CODE,D.ATTR2_KEY_CODE=S.ATTR2_KEY_CODE,D.ATTR3_KEY_CODE=S.ATTR3_KEY_CODE,D.ATTR4_KEY_CODE=S.ATTR4_KEY_CODE,D.ATTR5_KEY_CODE=S.ATTR5_KEY_CODE
,D.ATTR6_KEY_CODE=S.ATTR6_KEY_CODE,D.ATTR7_KEY_CODE=S.ATTR7_KEY_CODE,D.ATTR8_KEY_CODE=S.ATTR8_KEY_CODE,D.ATTR9_KEY_CODE=S.ATTR9_KEY_CODE,D.ATTR10_KEY_CODE=S.ATTR10_KEY_CODE
,D.ATTR11_KEY_CODE=S.ATTR11_KEY_CODE,D.ATTR12_KEY_CODE=S.ATTR12_KEY_CODE,D.ATTR13_KEY_CODE=S.ATTR13_KEY_CODE,D.ATTR14_KEY_CODE=S.ATTR14_KEY_CODE,D.ATTR15_KEY_CODE=S.ATTR15_KEY_CODE
,D.ATTR16_KEY_CODE=S.ATTR16_KEY_CODE,D.ATTR17_KEY_CODE=S.ATTR17_KEY_CODE,D.ATTR18_KEY_CODE=S.ATTR18_KEY_CODE,D.ATTR19_KEY_CODE=S.ATTR19_KEY_CODE,D.ATTR20_KEY_CODE=S.ATTR20_KEY_CODE
,D.ATTR21_KEY_CODE=S.ATTR21_KEY_CODE,D.ATTR22_KEY_CODE=S.ATTR22_KEY_CODE,D.ATTR23_KEY_CODE=S.ATTR23_KEY_CODE,D.ATTR24_KEY_CODE=S.ATTR24_KEY_CODE,D.ATTR25_KEY_CODE=S.ATTR25_KEY_CODE
,D.REORDER_QTY=S.REORDER_QTY
WHEN NOT MATCHED THEN INSERT (INDENT_ID, SECTION_CODE, SUB_SECTION_CODE, ARTICLE_CODE, PARA1_CODE, PARA2_CODE, PARA3_CODE, PARA4_CODE, PARA5_CODE, PARA6_CODE, ATTR1_KEY_CODE, ATTR2_KEY_CODE, ATTR3_KEY_CODE, ATTR4_KEY_CODE, ATTR5_KEY_CODE, ATTR6_KEY_CODE, ATTR7_KEY_CODE, ATTR8_KEY_CODE, ATTR9_KEY_CODE, ATTR10_KEY_CODE, ATTR11_KEY_CODE, ATTR12_KEY_CODE, ATTR13_KEY_CODE, ATTR14_KEY_CODE, ATTR15_KEY_CODE, ATTR16_KEY_CODE, ATTR17_KEY_CODE, ATTR18_KEY_CODE, ATTR19_KEY_CODE, ATTR20_KEY_CODE, ATTR21_KEY_CODE, ATTR22_KEY_CODE, ATTR23_KEY_CODE, ATTR24_KEY_CODE, ATTR25_KEY_CODE, PRODUCT_CODE, REORDER_QTY, ROW_ID) VALUES(S.INDENT_ID, S.SECTION_CODE, S.SUB_SECTION_CODE, S.ARTICLE_CODE, S.PARA1_CODE, S.PARA2_CODE, S.PARA3_CODE, S.PARA4_CODE, S.PARA5_CODE, S.PARA6_CODE, S.ATTR1_KEY_CODE, S.ATTR2_KEY_CODE, S.ATTR3_KEY_CODE, S.ATTR4_KEY_CODE, S.ATTR5_KEY_CODE, S.ATTR6_KEY_CODE, S.ATTR7_KEY_CODE, S.ATTR8_KEY_CODE, S.ATTR9_KEY_CODE, S.ATTR10_KEY_CODE, S.ATTR11_KEY_CODE, S.ATTR12_KEY_CODE, S.ATTR13_KEY_CODE, S.ATTR14_KEY_CODE, S.ATTR15_KEY_CODE, S.ATTR16_KEY_CODE, S.ATTR17_KEY_CODE, S.ATTR18_KEY_CODE, S.ATTR19_KEY_CODE, S.ATTR20_KEY_CODE, S.ATTR21_KEY_CODE, S.ATTR22_KEY_CODE, S.ATTR23_KEY_CODE, S.ATTR24_KEY_CODE, S.ATTR25_KEY_CODE, S.PRODUCT_CODE, S.REORDER_QTY, S.ROW_ID);

SET @STEP=5  
SELECT TOP 1 @ID=INDENT_ID FROM ARS_ARS_INDENT_MST_UPLOAD WHERE SP_ID=@nSPID
DELETE FROM ARS_ARS_INDENT_MST_UPLOAD WHERE SP_ID=@nSPID
DELETE FROM ARS_ARS_INDENT_DET_UPLOAD WHERE SP_ID=@nSPID
IF @PRINT_ON=1 PRINT CAST(@STEP AS VARCHAR)+'--'+CHAR(13)+'DELETE FROM ARS_ARS_INDENT_MST_UPLOAD WHERE SP_ID='+CAST(@nSPID AS VARCHAR)
END TRY  
  
BEGIN CATCH  
  SET @ERROR='PROCEDURE SAVETRAN_ASR_INDENT: STEP- ' + LTRIM(CAST(@STEP AS VARCHAR)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()  
END CATCH  
    
END_PROC:  
--PRINT @CCMD
IF @@TRANCOUNT>0 AND @ERROR=''  
   COMMIT  
ELSE  
   ROLLBACK  
SELECT @ERROR ERRMSG,@ID MEMO_ID        
SET NOCOUNT OFF  
END--PROCEDURE
