CREATE PROC PR_MERGE_TABLES(@TARGET VARCHAR(100),@SOURCE VARCHAR(100))  
--WITH ENCRYPTION
AS  
BEGIN  
SET NOCOUNT ON  
DECLARE @CCMD NVARCHAR(MAX),@ON VARCHAR(1000),@COL VARCHAR(1000)  

--FIND PRIMARY KEY  
SELECT @ON=COALESCE(@ON,'')+'T.['+UPPER(PKC.COLUMN_NAME)+'] = S.['+UPPER(PKC.COLUMN_NAME)+']'+' AND '  
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS T  
JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE PKC ON T.TABLE_NAME=PKC.TABLE_NAME  
WHERE T.TABLE_NAME=@TARGET AND T.CONSTRAINT_TYPE='PRIMARY KEY'
--PRINT ISNULL(@ON,'NO PRIMARY KEY')+CHAR(13)

--IF NOT PRIMARY KEY FOUND THEN TRY TO FOUND UNIQUE KEY
IF ISNULL(@ON,'')=''  
   BEGIN  
     SELECT @ON=COALESCE(@ON,'')+'T.['+UPPER(PKC.COLUMN_NAME)+'] = S.['+UPPER(PKC.COLUMN_NAME)+']'+' AND '  
     FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS T  
     JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE PKC ON T.TABLE_NAME=PKC.TABLE_NAME  
     WHERE T.TABLE_NAME=@TARGET AND T.CONSTRAINT_TYPE='UNIQUE'
     --PRINT ISNULL(@ON,'NO UNIQUE KEY')+CHAR(13)
   END     


--IF NEITHER PRIMARY KEY NOR UNIQUE KEY FOUND THE TAKE ALL FILEDS
IF ISNULL(@ON,'')=''  
   BEGIN  
     SELECT @ON=COALESCE(@ON,'')+'T.['+UPPER(COLUMN_NAME)+'] = S.['+UPPER(COLUMN_NAME)+']'+' AND '
     FROM INFORMATION_SCHEMA.COLUMNS T
     WHERE T.TABLE_NAME=@TARGET AND T.DATA_TYPE NOT LIKE 'TIMESTAMP'
     --PRINT ISNULL(@ON,'ALL FIELDS')+CHAR(13)
   END


SET @ON=LTRIM(RTRIM(@ON))
IF RIGHT(@ON,3)='AND'  
   SET @ON=LEFT(@ON,LEN(@ON)-3)  
     
SELECT @COL=COALESCE(@COL,'')+'T.['+UPPER(COLUMN_NAME)+']'+', '
FROM INFORMATION_SCHEMA.COLUMNS T
WHERE T.TABLE_NAME=@TARGET AND T.DATA_TYPE NOT LIKE 'TIMESTAMP'
SET @COL=LTRIM(RTRIM(@COL))
IF RIGHT(@COL,1)=','
   SET @COL=LEFT(@COL,LEN(@COL)-1)
   
--PRINT @COL
--PRINT CASE ISNULL(@ON,'') WHEN '' THEN 'NO PRIMARY KEY DEFINED FOR '+@TARGET ELSE @ON END+CHAR(13)  
IF ISNULL(@ON,'')!=''  
   BEGIN  
      SET @CCMD='MERGE '+UPPER(@TARGET)+' T'  
      SET @CCMD+=CHAR(13)+'USING '+UPPER(@SOURCE)+' S'  
      SET @CCMD+=CHAR(13)+'ON '+@ON  
      SET @CCMD+=CHAR(13)+'WHEN MATCHED THEN UPDATE SET '+REPLACE(@ON,'AND',',')  
      SET @CCMD+=CHAR(13)+'WHEN NOT MATCHED BY TARGET THEN INSERT('+REPLACE(@COL,'T.','')+') VALUES ('+REPLACE(@COL,'T.','S.')+');'   
      PRINT @CCMD+CHAR(13)  
      EXEC (@CCMD)  
      PRINT CAST(@@ROWCOUNT AS VARCHAR)+' RECORD'+CASE @@ROWCOUNT WHEN 0 THEN '' WHEN 1 THEN '' ELSE 'S' END+' MERGED IN TABLE '+@TARGET  
   END  
ELSE  
   PRINT 'ERROR IN PROCESSEING WHILE MERGING THE TABLE '+UPPER(@TARGET)    
SET NOCOUNT OFF  
END--PROCEDURE PR_MERGE_TABLES
