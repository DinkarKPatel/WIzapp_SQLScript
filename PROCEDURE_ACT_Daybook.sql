create PROCEDURE ACT_DAYBOOK
(	
		@NDAYBOOKMODE INT=1,
		@CDEPTID VARCHAR(4), 
		@DFROMDT DATETIME, 
		@DTODT DATETIME,
		@CFINYEAR VARCHAR(10), 
		@CCOMPANYCODE VARCHAR(2)
)
--WITH ENCRYPTION
AS
BEGIN
	DECLARE @CVMID VARCHAR(22), @CVDID VARCHAR(22), @TSTS TIMESTAMP

	DECLARE @DAYBOOKC TABLE ( VOUCHER_DT DATETIME, VOUCHER_NO VARCHAR(20), VOUCHER_CODE VARCHAR(10), 
							  VOUCHER_TYPE VARCHAR(20), VOUCHER_TYPE_ALIAS VARCHAR(10),
							  VM_ID VARCHAR(40), DR_VD_ID VARCHAR(40), 
							  DR_AC_NAME VARCHAR(100), DR_NARRATION VARCHAR(500), DEBIT_AMOUNT NUMERIC(14,2), 
							  CASH_DEBIT_AMOUNT NUMERIC(14,2),
							  CR_VD_ID VARCHAR(40), CR_AC_NAME VARCHAR(100), CR_NARRATION VARCHAR(500), 
							  CREDIT_AMOUNT NUMERIC(14,2), CASH_CREDIT_AMOUNT NUMERIC(14,2), TS TIMESTAMP )

	-- TEMP TABLE TO STORED THE LIST OF LOCATIONS CURRENTLY SELECTED
	-- JOIN THIS TABLE IN EACH QUERY TO GET THE RESULT FOR SINGLE, MULTIPLE OR ALL LOCATIONS
	DECLARE @LOCLISTC TABLE ( DEPT_ID CHAR(4) )
	
	IF @CDEPTID <> ''
		INSERT @LOCLISTC VALUES ( @CDEPTID )
	ELSE
	BEGIN
		IF EXISTS ( SELECT TOP 1 DEPT_ID FROM ACT_FILTER_LOC WHERE SP_ID = @@SPID )
			INSERT @LOCLISTC
			SELECT DEPT_ID FROM ACT_FILTER_LOC WHERE SP_ID = @@SPID
		ELSE
			INSERT @LOCLISTC
			SELECT DEPT_ID FROM LOCATION WHERE LOC_TYPE=1 AND DEPT_ID=MAJOR_DEPT_ID
	END


	DECLARE @CASHVCHC TABLE ( VM_ID VARCHAR(40) )
	DECLARE @BANKVCHC TABLE ( VM_ID VARCHAR(40) )

	DECLARE @CBANKHEADSTR VARCHAR(2000), @CCASHHEADSTR VARCHAR(2000)

	SELECT	@CBANKHEADSTR = DBO.FN_ACT_TRAVTREE('0000000013'), 
			@CCASHHEADSTR = DBO.FN_ACT_TRAVTREE('0000000014')

	IF @NDAYBOOKMODE IN ( 3, 4 )		-- 3: CASH CUM JOURNAL BOOK, 4: PURE CASHBOOK
	BEGIN
		INSERT @CASHVCHC
		SELECT DISTINCT A.VM_ID
		FROM VD01106 A 
		JOIN VM01106 B ON A.VM_ID = B.VM_ID
		JOIN LM01106 C ON A.AC_CODE = C.AC_CODE
		JOIN @LOCLISTC LOCLIST ON B.location_code  = LOCLIST.DEPT_ID
		WHERE B.VOUCHER_DT BETWEEN @DFROMDT AND @DTODT
		AND B.CANCELLED = 0 AND ISNULL(B.OP_ENTRY,0)=0  AND ISNULL(B.MEMO,0)=0 
		-- AND B.DEPT_ID = ( CASE WHEN @CDEPTID <> '' THEN @CDEPTID ELSE B.DEPT_ID END )
		AND CHARINDEX( C.HEAD_CODE, @CCASHHEADSTR)>0
	END

	IF @NDAYBOOKMODE = 5		-- 5: BANK BOOK
	BEGIN
		INSERT @BANKVCHC
		SELECT DISTINCT A.VM_ID
		FROM VD01106 A 
		JOIN VM01106 B ON A.VM_ID = B.VM_ID
		JOIN LM01106 C ON A.AC_CODE = C.AC_CODE
		JOIN @LOCLISTC LOCLIST ON B.location_code  = LOCLIST.DEPT_ID
		WHERE B.VOUCHER_DT BETWEEN @DFROMDT AND @DTODT
		AND B.CANCELLED = 0 AND ISNULL(B.OP_ENTRY,0)=0  AND ISNULL(B.MEMO,0)=0 
		-- AND B.DEPT_ID = ( CASE WHEN @CDEPTID <> '' THEN @CDEPTID ELSE B.DEPT_ID END )
		AND CHARINDEX( C.HEAD_CODE, @CBANKHEADSTR)>0
	END

	IF @NDAYBOOKMODE IN ( 1, 2, 3, 5 )		-- 1: DAYBOOK, 2: JOURNAL BOOK, 3:CASH CUM JOURNAL BOOK, 5: BANK BOOK
	BEGIN
		INSERT @DAYBOOKC ( VOUCHER_DT, VOUCHER_NO, VOUCHER_CODE, VOUCHER_TYPE, VOUCHER_TYPE_ALIAS, VM_ID, DR_VD_ID, 
						   DR_AC_NAME, DR_NARRATION, DEBIT_AMOUNT, CASH_DEBIT_AMOUNT, 
						   CR_VD_ID, CR_AC_NAME, CR_NARRATION, CREDIT_AMOUNT, CASH_CREDIT_AMOUNT )
		SELECT X.VOUCHER_DT, X.VOUCHER_NO, X.VOUCHER_CODE, X.VOUCHER_TYPE, X.VOUCHER_TYPE_ALIAS, X.VM_ID, 
			X.DR_VD_ID, X.DR_AC_NAME, X.DR_NARRATION, X.DEBIT_AMOUNT, 0, 
			Y.CR_VD_ID, Y.CR_AC_NAME, Y.CR_NARRATION, Y.CREDIT_AMOUNT, 0
		FROM
		( 
			SELECT A.VOUCHER_DT, A.VOUCHER_NO, A.VOUCHER_CODE, D.VOUCHER_TYPE, D.VOUCHER_TYPE_ALIAS, A.VM_ID,
					B.VD_ID AS DR_VD_ID, B.DEBIT_AMOUNT, B.NARRATION AS DR_NARRATION, 
					C.AC_NAME AS DR_AC_NAME
			FROM VM01106 A 
			JOIN VD01106 B ON A.VM_ID = B.VM_ID
			JOIN LM01106 C ON B.AC_CODE = C.AC_CODE
			JOIN VCHTYPE D ON A.VOUCHER_CODE = D.VOUCHER_CODE
			JOIN @LOCLISTC LOCLIST ON A.location_code  = LOCLIST.DEPT_ID
			WHERE B.DEBIT_AMOUNT <> 0
			AND A.VOUCHER_DT BETWEEN @DFROMDT AND @DTODT
			AND A.CANCELLED = 0 AND ISNULL(A.OP_ENTRY,0)=0  AND ISNULL(A.MEMO,0)=0 
			-- AND A.DEPT_ID = ( CASE WHEN @CDEPTID <> '' THEN @CDEPTID ELSE A.DEPT_ID END )
			AND A.VOUCHER_CODE IN ( CASE WHEN @NDAYBOOKMODE = 2 THEN '0000000001' ELSE A.VOUCHER_CODE END )
			AND A.VM_ID NOT IN ( SELECT VM_ID FROM @CASHVCHC )
		) X
		JOIN
		(
			SELECT A.VM_ID,
					B.VD_ID AS CR_VD_ID, B.CREDIT_AMOUNT, B.NARRATION AS CR_NARRATION, 
					C.AC_NAME AS CR_AC_NAME
			FROM VM01106 A 
			JOIN VD01106 B ON A.VM_ID = B.VM_ID
			JOIN LM01106 C ON B.AC_CODE = C.AC_CODE
			JOIN @LOCLISTC LOCLIST ON A.location_code  = LOCLIST.DEPT_ID
			WHERE B.CREDIT_AMOUNT <> 0
			AND A.VOUCHER_DT BETWEEN @DFROMDT AND @DTODT
			AND A.CANCELLED = 0 AND ISNULL(A.OP_ENTRY,0)=0  AND ISNULL(A.MEMO,0)=0 
			-- AND A.DEPT_ID = ( CASE WHEN @CDEPTID <> '' THEN @CDEPTID ELSE A.DEPT_ID END )
			AND A.VOUCHER_CODE IN ( CASE WHEN @NDAYBOOKMODE = 2 THEN '0000000001' ELSE A.VOUCHER_CODE END )
			AND A.VM_ID NOT IN ( SELECT VM_ID FROM @CASHVCHC )
		) Y ON X.VM_ID = Y.VM_ID
		ORDER BY X.VOUCHER_DT, X.VOUCHER_NO
	END

	-- DELETING ENTRIES FROM DAYBOOK WHICH ARE NOT BANK VOUCHERS 
	IF @NDAYBOOKMODE = 5 		-- 5:BANK BOOK
	BEGIN
		DELETE FROM @DAYBOOKC
		WHERE VM_ID NOT IN ( SELECT VM_ID FROM @BANKVCHC )
	END

	-- PROCEDURE TO EXTRACT CASH VOUCHERS
	IF @NDAYBOOKMODE IN ( 3, 4 )		-- 3:CASH CUM JOURNAL BOOK; 4: PURE CASH BOOK
	BEGIN
		INSERT @DAYBOOKC ( VOUCHER_DT, VOUCHER_NO, VOUCHER_CODE, VOUCHER_TYPE, VOUCHER_TYPE_ALIAS, VM_ID, DR_VD_ID, 
						   DR_AC_NAME, DR_NARRATION, DEBIT_AMOUNT, CASH_DEBIT_AMOUNT, 
						   CR_VD_ID, CR_AC_NAME, CR_NARRATION, CREDIT_AMOUNT, CASH_CREDIT_AMOUNT )
		SELECT X.VOUCHER_DT, X.VOUCHER_NO, X.VOUCHER_CODE, X.VOUCHER_TYPE, X.VOUCHER_TYPE_ALIAS, X.VM_ID, 
			ISNULL(X.DR_VD_ID,''), ISNULL(X.DR_AC_NAME,''), ISNULL(X.DR_NARRATION,''), 0, ISNULL(X.DEBIT_AMOUNT,0), 
			ISNULL(Y.CR_VD_ID,''), ISNULL(Y.CR_AC_NAME,''), ISNULL(Y.CR_NARRATION,''), 0, ISNULL(Y.CREDIT_AMOUNT,0)
		FROM
		( 
			SELECT A.VOUCHER_DT, A.VOUCHER_NO, A.VOUCHER_CODE, D.VOUCHER_TYPE, D.VOUCHER_TYPE_ALIAS, A.VM_ID,
					B.VD_ID AS DR_VD_ID, B.DEBIT_AMOUNT, B.NARRATION AS DR_NARRATION, 
					C.AC_NAME AS DR_AC_NAME
			FROM VM01106 A 
			JOIN VD01106 B ON A.VM_ID = B.VM_ID
			JOIN LM01106 C ON B.AC_CODE = C.AC_CODE
			JOIN VCHTYPE D ON A.VOUCHER_CODE = D.VOUCHER_CODE
			JOIN @LOCLISTC LOCLIST ON A.location_code  = LOCLIST.DEPT_ID
			WHERE B.DEBIT_AMOUNT <> 0
			AND A.VOUCHER_DT BETWEEN @DFROMDT AND @DTODT
			AND A.CANCELLED = 0 AND ISNULL(A.OP_ENTRY,0)=0  AND ISNULL(A.MEMO,0)=0 
			-- AND A.DEPT_ID = ( CASE WHEN @CDEPTID <> '' THEN @CDEPTID ELSE A.DEPT_ID END )
			AND B.VM_ID IN ( SELECT VM_ID FROM @CASHVCHC )
			AND CHARINDEX( C.HEAD_CODE, @CCASHHEADSTR) = 0
		) X
		FULL OUTER JOIN
		(
			SELECT A.VM_ID,
					B.VD_ID AS CR_VD_ID, B.CREDIT_AMOUNT, B.NARRATION AS CR_NARRATION, 
					C.AC_NAME AS CR_AC_NAME
			FROM VM01106 A 
			JOIN VD01106 B ON A.VM_ID = B.VM_ID
			JOIN LM01106 C ON B.AC_CODE = C.AC_CODE
			JOIN @LOCLISTC LOCLIST ON A.location_code  = LOCLIST.DEPT_ID
			WHERE B.CREDIT_AMOUNT <> 0
			AND A.VOUCHER_DT BETWEEN @DFROMDT AND @DTODT
			AND A.CANCELLED = 0 AND ISNULL(A.OP_ENTRY,0)=0  AND ISNULL(A.MEMO,0)=0 
			-- AND A.DEPT_ID = ( CASE WHEN @CDEPTID <> '' THEN @CDEPTID ELSE A.DEPT_ID END )
			AND B.VM_ID IN ( SELECT VM_ID FROM @CASHVCHC )
			AND CHARINDEX( C.HEAD_CODE, @CCASHHEADSTR) = 0
		) Y ON X.VM_ID = Y.VM_ID
		ORDER BY X.VOUCHER_DT, X.VOUCHER_NO

		-- IN CASE THE LEFT PART OF THE FULL OUTER JOIN RETURNS NULL, THEN WE HAVE TO UPDATE THE SAME FROM CR_VD_ID 
		UPDATE @DAYBOOKC SET 
			VOUCHER_DT = V.VOUCHER_DT, 
			VOUCHER_NO = V.VOUCHER_NO,
			VOUCHER_CODE = V.VOUCHER_CODE,
			VM_ID = V.VM_ID,
			VOUCHER_TYPE = V.VOUCHER_TYPE,
			VOUCHER_TYPE_ALIAS = V.VOUCHER_TYPE_ALIAS
		FROM @DAYBOOKC U
		JOIN
		( SELECT A.VD_ID, B.VOUCHER_DT, B.VOUCHER_NO, B.VOUCHER_CODE, B.VM_ID, C.VOUCHER_TYPE, C.VOUCHER_TYPE_ALIAS
		  FROM VD01106 A 
		  JOIN VM01106 B ON A.VM_ID = B.VM_ID
		  JOIN VCHTYPE C ON B.VOUCHER_CODE = C.VOUCHER_CODE
		  WHERE A.VD_ID IN ( SELECT CR_VD_ID FROM @DAYBOOKC WHERE VOUCHER_DT IS NULL AND CR_VD_ID <> '' )
		) V ON U.CR_VD_ID = V.VD_ID
		AND U.VOUCHER_DT IS NULL AND U.CR_VD_ID <> ''
	END

	-- REMOVING THE REPETITIVE AMOUNT OF MASTER ENTRY
	IF @NDAYBOOKMODE IN ( 1, 2, 3, 4, 5 )		-- 1: DAYBOOK, 2: JOURNAL BOOK, 3:CASH CUM JOURNAL BOOK, 5: BANK BOOK
	BEGIN
		DECLARE ABC CURSOR FOR
		SELECT DISTINCT VM_ID, DR_VD_ID FROM @DAYBOOKC GROUP BY VM_ID, DR_VD_ID HAVING COUNT(*) >1 ORDER BY VM_ID, DR_VD_ID 

		OPEN ABC
		FETCH NEXT FROM ABC INTO @CVMID, @CVDID
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SELECT TOP 1 @TSTS = TS FROM @DAYBOOKC WHERE VM_ID = @CVMID AND DR_VD_ID = @CVDID

			UPDATE @DAYBOOKC SET DR_AC_NAME = '', DR_NARRATION = '', DEBIT_AMOUNT = 0, CASH_DEBIT_AMOUNT = 0
			WHERE VM_ID = @CVMID AND DR_VD_ID = @CVDID AND TS <> @TSTS

			FETCH NEXT FROM ABC INTO @CVMID, @CVDID
		END
		CLOSE ABC
		DEALLOCATE ABC

		DECLARE ABC CURSOR FOR
		SELECT DISTINCT VM_ID, CR_VD_ID FROM @DAYBOOKC GROUP BY VM_ID, CR_VD_ID HAVING COUNT(*) >1 ORDER BY VM_ID, CR_VD_ID 

		OPEN ABC
		FETCH NEXT FROM ABC INTO @CVMID, @CVDID
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SELECT TOP 1 @TSTS = TS FROM @DAYBOOKC WHERE VM_ID = @CVMID AND CR_VD_ID = @CVDID

			UPDATE @DAYBOOKC SET CR_AC_NAME = '', CR_NARRATION = '', CREDIT_AMOUNT = 0, CASH_CREDIT_AMOUNT = 0
			WHERE VM_ID = @CVMID AND CR_VD_ID = @CVDID AND TS <> @TSTS

			FETCH NEXT FROM ABC INTO @CVMID, @CVDID
		END
		CLOSE ABC
		DEALLOCATE ABC
	END

	-- DISPLAYING RESULTANT QUERY
	SELECT * FROM @DAYBOOKC ORDER BY VOUCHER_DT, VOUCHER_NO
END
