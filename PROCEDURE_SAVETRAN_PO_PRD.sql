CREATE PROCEDURE SAVETRAN_PO_PRD
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CMEMONOPREFIX		VARCHAR(50),
	@CFINYEAR			VARCHAR(10),	
	@CMACHINENAME		VARCHAR(100)='',
	@CWINDOWUSERNAME	VARCHAR(100)='',
	@CWIZAPPUSERCODE	VARCHAR(10)='0000000',
	@CXNMEMOID			VARCHAR(40)='',
	@NAPPROVEMODE		NUMERIC(1,0)=0,
	@CCOMPUTERIP		VARCHAR(20)='',
	@CLOCID				VARCHAR(2)=''
)
--WITH ENCRYPTION
AS
BEGIN
	-- @NUPDATEMODE:	1- NEW PUR ADDED, 
	--					2- NEW BOX ADDED TO EXISTING PUR, 
	--					3- CURRENT PUR CANCELLED, 
	--					4- EXISTING PUR EDITED

	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CINTERMIDIATETABLENAME		VARCHAR(100),
			@CTEMPITERMIDIATETABLENAME	VARCHAR(100),
			@CTEMPITERMIDIATETABLE	VARCHAR(100),
			@CDETAILTABLENAME1		VARCHAR(100),
			@CDETAILTABLENAME2		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME1	VARCHAR(100),
			@CTEMPDETAILTABLENAME2	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE1		VARCHAR(100),
			@CTEMPDETAILTABLE2		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(2),
			@CLOCATIONID			VARCHAR(2),
			@CHODEPTID				VARCHAR(2),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT

	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	SET @NSTEP = 0		-- SETTTING UP ENVIRONMENT

	-- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
	SET @CTEMPDBNAME = ''

	SET @CMASTERTABLENAME	= 'PRD_POM01106'
	SET @CDETAILTABLENAME1	= 'PRD_POD01106'
	SET @CINTERMIDIATETABLENAME='PRD_PO_WSL'
	
	--SET @CDETAILTABLENAME2	= 'MOH01106'

	SET @CTEMPMASTERTABLENAME	= 'TEMP_PRD_POM01106_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME1	= 'TEMP_PRD_POD01106_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPITERMIDIATETABLENAME	= 'TEMP_PRD_PO_WSL_'+LTRIM(RTRIM(STR(@NSPID)))	
	--SET @CTEMPDETAILTABLENAME2	= 'TEMP_MOH01106_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE1	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME1
	SET @CTEMPDETAILTABLE2	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME2
	SET @CTEMPITERMIDIATETABLE= @CTEMPDBNAME + @CTEMPITERMIDIATETABLENAME
	
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'PO_ID'
	SET @CMEMONO			= 'PO_NO'
	SET @NMEMONOLEN			= 10
	
	IF ISNULL(@CLOCID,'')=''
		SELECT @CLOCATIONID		=DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 
	ELSE
		SELECT @CLOCATIONID=@CLOCID
	
	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		
	BEGIN TRY
	BEGIN TRANSACTION
		
		IF @NUPDATEMODE=4
			GOTO LBLAPPROVEPO
			
		IF @NUPDATEMODE = 3			
		BEGIN
			SET @NSTEP = 10
			
			IF @CXNMEMOID=''
			BEGIN
				SET @CERRORMSG='MEMO ID REQUIRED FOR CANCELLATION........CANNOT PROCEED'
				GOTO END_PROC
			END
			
			IF EXISTS (SELECT TOP 1 'U' FROM PRD_POD01106 A
			JOIN PRD_POM01106 B ON A.PO_ID =B.PO_ID 
			JOIN
			(
				SELECT A.PRODUCT_UID  FROM PRD_PID01106 A
				JOIN PRD_PIM01106 B ON A.MRR_ID =B.MRR_ID 
				WHERE B.CANCELLED =0
				GROUP BY A.PRODUCT_UID 
			)  C ON A.PRODUCT_UID =C.PRODUCT_UID
			WHERE A.PO_ID =@CXNMEMOID)
			BEGIN
                 SET @CERRORMSG='TRANSACTION FOUNT IN PURCHASE........CANNOT PROCEED'
				  GOTO END_PROC
			END

			SET @NSTEP = 13
			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N' UPDATE ' + @CMASTERTABLENAME + ' SET CANCELLED = 1,SENT_TO_HO=0,LAST_UPDATE=GETDATE() ' + 
						N' WHERE ' + @CKEYFIELD1 + ' = ''' + @CXNMEMOID + ''''
			EXEC SP_EXECUTESQL @CCMD
			
			SET @CKEYFIELDVAL1=@CXNMEMOID
			
			GOTO END_PROC
		END
		
		SET @NSTEP=15
		
		-- GETTING DEPT_ID FROM TEMP MASTER TABLE
		SET @CCMD = 'SELECT @CMEMODEPTID = DEPT_ID, @CKEYFIELDVAL1 = PO_ID FROM ' + @CTEMPMASTERTABLE
		EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT, @CKEYFIELDVAL1 VARCHAR(50) OUTPUT', 
								  @CMEMODEPTID OUTPUT, @CKEYFIELDVAL1 OUTPUT
		IF (@CMEMODEPTID IS NULL )
		BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED...'
			  --SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
			  GOTO END_PROC  		
		END
		
		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	

			SET @NSTEP = 20		-- GENERATING NEW KEY
			
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN
				-- GENERATING NEW MRR_NO		
				SET @NSAVETRANLOOP=0
				WHILE @NSAVETRANLOOP=0
				BEGIN
					EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
									@CFINYEAR,0, @CMEMONOVAL OUTPUT   
					
					SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
											WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
											AND FIN_YEAR = '''+@CFINYEAR+''' )
									SET @NLOOPOUTPUT=0
								ELSE
									SET @NLOOPOUTPUT=1'
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
				END

				IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
					  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
					  GOTO END_PROC  		
				END

				SET @NSTEP = 30		-- GENERATING NEW ID

				-- GENERATING NEW PO ID
				SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+ REPLICATE('0', 15-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL))
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  GOTO END_PROC
				END
				
				SET @NSTEP = 35
				-- CHECK WETHER THE MEMO ID IS STILL LATER
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  GOTO END_PROC
				END

				SET @NSTEP = 40		-- UPDATING NEW ID INTO TEMP TABLES

				-- UPDATING NEWLY GENERATED PO NO AND PO ID IN POM AND POD TEMP TABLES
				SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
							@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
				EXEC SP_EXECUTESQL @CCMD
			
				SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
				EXEC SP_EXECUTESQL @CCMD
				
				SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE2 + ' SET MEMO_ID = '''+@CKEYFIELDVAL1+''''
				EXEC SP_EXECUTESQL @CCMD
			END
			
			
			---- MAKE AN ENTRY INTO PO + WSL LINK TABLE
		   --IF ISNULL(@CKEYFIELDVAL1,'')<>''
				IF OBJECT_ID(@CTEMPITERMIDIATETABLE,'U') IS NOT NULL
				BEGIN
					SET @NSTEP = 42
					SET @CCMD=N'INSERT PRD_PO_WSL (PO_ID,INV_ID)
								SELECT '''+@CKEYFIELDVAL1+''',INV_ID FROM '+@CTEMPITERMIDIATETABLE
						
								
					EXEC SP_EXECUTESQL @CCMD			 	
				END
			
			
			

		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
		
			SET @NSTEP = 50		-- GETTING ID INFO FROM TEMP TABLE

			-- GETTING PO_ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = PO_ID, @CMEMONOVAL = PO_NO FROM ' + @CTEMPMASTERTABLE
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
				  
				  GOTO END_PROC  		
			END
			
			SET @NSTEP = 60		-- UPDATING SENT_TO_HO FLAG TEMP TABLE
			
			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET SENT_TO_HO = 0,LAST_UPDATE=GETDATE() '
			EXEC SP_EXECUTESQL @CCMD
				
				
		END					-- END OF EDITMODE

		SET @NSTEP = 95

		-- CHECK WETHER THE MEMO ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END

		-- UPDATING MASTER TABLE (PIM01106) FROM TEMP TABLE
		SET @NSTEP = 100		-- UPDATING MASTER TABLE

		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			, @BALWAYSUPDATE = 1
			
		-- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE
		SET @NSTEP = 110		-- UPDATING TRANSACTION TABLE

			-- UPDATING ROW_ID IN TEMP TABLES
			SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
						  WHERE LEFT(ROW_ID,5) = ''LATER'''
			EXEC SP_EXECUTESQL @CCMD

			-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
			SET @NSTEP = 114		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES

			SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME1 + ' 
						WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''' 
			EXEC SP_EXECUTESQL @CCMD

			-- INSERTING/UPDATING THE ENTRIES IN PID01106 TABLE FROM TEMPTABLE
			SET @NSTEP = 115		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

			EXEC UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPDETAILTABLENAME1
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CDETAILTABLENAME1
				, @CKEYFIELD1	= 'ROW_ID'
				, @BALWAYSUPDATE = 1
			
			SET @NSTEP = 120		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES
			-- UPDATING ROW_ID IN TEMP TABLES
			SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE2 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
						  WHERE LEFT(ROW_ID,5) = ''LATER'''
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 125
			-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
			
			SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME2 + ' 
						WHERE MEMO_ID = ''' + @CKEYFIELDVAL1 + '''' 
			EXEC SP_EXECUTESQL @CCMD
			
			-- INSERTING/UPDATING THE ENTRIES IN PID01106 TABLE FROM TEMPTABLE
			SET @NSTEP = 130		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

			EXEC UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPDETAILTABLENAME2
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CDETAILTABLENAME2
				, @CKEYFIELD1	= 'ROW_ID'
				, @BALWAYSUPDATE = 1
	

		SET @NSTEP = 170
		
		IF @NUPDATEMODE  IN(1,2) -- ADDMODE	 AND EIDT MODE
		BEGIN		
		   EXEC SAVETRAN_UPDSKU_PRD 'PO',	@CKEYFIELDVAL1,@CERRORMSG OUTPUT 
		END	
		
								
		GOTO END_PROC

LBLAPPROVEPO:

		IF @CXNMEMOID=''
		BEGIN
			SET @CERRORMSG='MEMO ID REQUIRED FOR APPROVAL......CANNOT PROCEED'
			GOTO END_PROC
		END
		
		SET @NSTEP = 180
		--DECLARE @NAPPROVALSTATUS NUMERIC(1,0)
		
		
		UPDATE PRD_POM01106 SET  APPROVED=(CASE WHEN @NAPPROVEMODE=1 THEN 2 ELSE 3 END),LAST_UPDATE=GETDATE()
		WHERE PO_ID=@CXNMEMOID
			
		 
				
 		SET @CKEYFIELDVAL1=@CXNMEMOID
		
		GOTO END_PROC
		
		
	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
				
		GOTO END_PROC
	END CATCH
	
END_PROC:
	
	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
			COMMIT TRANSACTION
			
			--ROLLBACK
			
		ELSE
			ROLLBACK
	END

	INSERT @OUTPUT ( ERRMSG, MEMO_ID)
			VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )

	SELECT * FROM @OUTPUT
	
		
	SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPDETAILTABLE1 + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPDETAILTABLE1
	EXEC SP_EXECUTESQL @CCMD
	

    SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPMASTERTABLE + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPMASTERTABLE
	EXEC SP_EXECUTESQL @CCMD
	
END						
------------------------------------------------------ END OF PROCEDURE SAVETRAN_PO
