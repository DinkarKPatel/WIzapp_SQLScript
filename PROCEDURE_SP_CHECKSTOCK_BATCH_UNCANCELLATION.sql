CREATE PROCEDURE SP_CHECKSTOCK_BATCH_UNCANCELLATION    
 @CPRODUCTCODE VARCHAR(50),    
 @BDONOTCHECKSTOCK BIT=0,    
 @CBINID  VARCHAR(7)='', 
 @CWHERE VARCHAR(40)='',  
 @NQTY NUMERIC(14,2)=0,  
 @CUSERCODE VARCHAR(10),
 @NRATEREVISION INT =0,
 @CXNTYPE VARCHAR(5)='',
 @NMRPWS NUMERIC(1)=1,
 @BESTIMATEMODE BIT=0,
 @XN_ITEM_TYPE NUMERIC(2,0)=1,
 @cDeptID VARCHAR(10)= ''
 --WITH ENCRYPTION
AS    
BEGIN    
--(dinkar) Replace  left(memoid,2) to Location_code 
	 DECLARE @NSTKQTY NUMERIC(10,3),@CPRDCODE VARCHAR(100),@CLOC_ID  VARCHAR(5),@CDONOTCHECKSTOCK VARCHAR(5),
	 @BSTOCKNA BIT,@NCNT NUMERIC(3,0),@DEXPIRYDT DATETIME, @NITEMTYPE NUMERIC(2,0),@CSKUPC VARCHAR(50)
	        
	 if @NMRPWS=0
		SET @NMRPWS=1
     IF ISNULL(@cDeptID,'')='' 
	    SELECT TOP 1 @CLOC_ID=DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 
	 ELSE
	    SELECT @CLOC_ID= @cDeptID
	 
	 SELECT @NITEMTYPE=ITEM_TYPE 
	 FROM SKU A(NOLOCK)
	 JOIN ARTICLE B (NOLOCK) ON A.ARTICLE_CODE=B.ARTICLE_CODE
	 JOIN SECTIOND C(NOLOCK) ON C.SUB_SECTION_CODE=B.SUB_SECTION_CODE
	 JOIN SECTIONM D(NOLOCK) ON D.SECTION_CODE=C.SECTION_CODE
	 WHERE PRODUCT_CODE=@CPRODUCTCODE
	 

	 IF ISNULL(@NITEMTYPE,0)>0 
	 BEGIN
	      IF  @XN_ITEM_TYPE<>@NITEMTYPE
	      BEGIN
	         SELECT CASE WHEN  @XN_ITEM_TYPE=1 AND @NITEMTYPE=2 THEN 'CONSUMABLE ITEM NOT ALLOWED IN INVENTORY TRANSCTION'
	                     WHEN  @XN_ITEM_TYPE=1 AND @NITEMTYPE=3 THEN 'ASSESTS    ITEM NOT ALLOWED IN INVENTORY TRANSCTION'
	                     WHEN  @XN_ITEM_TYPE=1 AND @NITEMTYPE=4 THEN 'SERVICE    ITEM NOT ALLOWED IN INVENTORY TRANSCTION'
	                     
	                     WHEN  @XN_ITEM_TYPE=2 AND @NITEMTYPE=1 THEN 'INVENTORY  ITEM NOT ALLOWED IN CONSUMBLE TRANSCTION'
	                     WHEN  @XN_ITEM_TYPE=2 AND @NITEMTYPE=3 THEN 'ASSESTS    ITEM NOT ALLOWED IN CONSUMBLE TRANSCTION'
	                     WHEN  @XN_ITEM_TYPE=2 AND @NITEMTYPE=4 THEN 'SERVICE    ITEM NOT ALLOWED IN CONSUMBLE TRANSCTION'
	                     
	                     WHEN  @XN_ITEM_TYPE=3 AND @NITEMTYPE=1 THEN 'INVENTORY  ITEM NOT ALLOWED IN ASSESTS   TRANSCTION'
	                     WHEN  @XN_ITEM_TYPE=3 AND @NITEMTYPE=2 THEN 'CONSUMABLE ITEM NOT ALLOWED IN ASSESTS   TRANSCTION'
	                     WHEN  @XN_ITEM_TYPE=3 AND @NITEMTYPE=4 THEN 'SERVICE    ITEM NOT ALLOWED IN ASSESTS   TRANSCTION'
	                     
	                     WHEN  @XN_ITEM_TYPE=4 AND @NITEMTYPE=1 THEN 'INVENTORY  ITEM NOT ALLOWED IN SERVICE   TRANSCTION'
	                     WHEN  @XN_ITEM_TYPE=4 AND @NITEMTYPE=2 THEN 'CONSUMBLE  ITEM NOT ALLOWED IN SERVICE   TRANSCTION'
	                     WHEN  @XN_ITEM_TYPE=4 AND @NITEMTYPE=3 THEN 'ASSESTS    ITEM NOT ALLOWED IN SERVICE   TRANSCTION '
	          END      
		      RETURN
	      END
	 END
	 
	 
	 --GET THE PRODUCT_CODE FROM EAN_SYNC,IF EXISTS ELSE GET FROM SKU
	 IF @BESTIMATEMODE<>1  
		SELECT TOP 1 @CPRDCODE=PRODUCT_CODE 
		FROM EAN_SYNC (NOLOCK) 
		WHERE EAN=@CPRODUCTCODE   
	 ELSE	
		SELECT TOP 1 @CPRDCODE=A.PRODUCT_CODE 
		FROM EAN_SYNC A (NOLOCK) 
		JOIN SKU (NOLOCK) ON A.PRODUCT_CODE=SKU.PRODUCT_CODE 
		WHERE EAN=@CPRODUCTCODE AND ER_FLAG=2  	  	

	 DECLARE @CALLOWWSLINACTIVESTOCKNAARTICLES VARCHAR(2)
	 SELECT TOP 1 @CALLOWWSLINACTIVESTOCKNAARTICLES= VALUE FROM CONFIG (NOLOCK) WHERE 
	 CONFIG_OPTION='ALLOW_WSL_INACTIVESTOCKNA_ARTICLES'
	 	 
	 IF @CPRDCODE IS NULL  
	 BEGIN
		 IF @BESTIMATEMODE<>1  
			SELECT @CPRDCODE=PRODUCT_CODE FROM SKU (NOLOCK)
			JOIN ARTICLE (NOLOCK) ON SKU.ARTICLE_CODE= ARTICLE.ARTICLE_CODE
			WHERE (PRODUCT_CODE=@CPRODUCTCODE )
			-- OR LEFT(PRODUCT_CODE,LEN(LTRIM(RTRIM(@CPRODUCTCODE)))+1)=LTRIM(RTRIM(@CPRODUCTCODE))+'@')
			--AND (ISNULL(ARTICLE.STOCK_NA,0)= 0  OR ISNULL(ARTICLE.INACTIVE,0)= 0 OR ISNULL(@CALLOWWSLINACTIVESTOCKNAARTICLES,'')='1')
		 ELSE	
			SELECT @CPRDCODE=PRODUCT_CODE FROM SKU (NOLOCK)
			JOIN ARTICLE (NOLOCK) ON SKU.ARTICLE_CODE= ARTICLE.ARTICLE_CODE
			WHERE (PRODUCT_CODE=@CPRODUCTCODE)
			  --OR LEFT(PRODUCT_CODE,LEN(LTRIM(RTRIM(@CPRODUCTCODE)))+1)=LTRIM(RTRIM(@CPRODUCTCODE))+'@')
			AND ER_FLAG=2
			AND (ISNULL(ARTICLE.STOCK_NA,0)= 0  OR ISNULL(ARTICLE.INACTIVE,0)= 0 OR ISNULL(@CALLOWWSLINACTIVESTOCKNAARTICLES,'')='1')
	 END
	 
	 SET @CSKUPC=@CPRODUCTCODE		
	 
	 IF @CPRDCODE IS NULL 
	 BEGIN     
		 SELECT '1-SELECTED BARCODE NOT FOUND....PLEASE CHECK' AS RETMSG  
		 RETURN
	 END
	 ELSE
	     SET @CSKUPC=@CPRDCODE
	 
	 IF ISNULL(@CPRDCODE,'')=''
		SET @CPRDCODE=@CPRODUCTCODE
	 ELSE
	 IF CHARINDEX('@',@CPRDCODE)>0 AND CHARINDEX('@',@CPRODUCTCODE)=0
	 BEGIN
		SET @CSKUPC=@CPRDCODE
		SET @CPRDCODE=@CPRODUCTCODE
		
	 END
	 DECLARE @ALLOW_ACCESS BIT ,@BINSTOCK NUMERIC(10,2)  ,@MAINTAIN_UNQ_QTY BIT
	 
	---VALIDATION FOR UNIQUR BARCODE----
	SELECT  TOP 1 @MAINTAIN_UNQ_QTY=VALUE FROM CONFIG(NOLOCK) WHERE CONFIG_OPTION='MAINTAIN_01_QTY_UNQ_CODING' 
	
	IF @CXNTYPE='WSR' AND ISNULL(@MAINTAIN_UNQ_QTY,1)=1	
	BEGIN
	 IF EXISTS(	SELECT TOP 1 'U' FROM PMT01106 A (NOLOCK) 
		JOIN SKU B (NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE
		JOIN ARTICLE C (NOLOCK) ON C.ARTICLE_CODE=B.ARTICLE_CODE
		WHERE A.PRODUCT_CODE=@CPRDCODE AND A.QUANTITY_IN_STOCK >0 AND C.CODING_SCHEME=3  AND a.dept_id=@CLOC_ID)
		BEGIN 
			 SELECT 'UNIQUE BARCODE HAS ALREADY IN STOCK....PLEASE CHECK' AS RETMSG  
			 RETURN
		END
	END	
	
		
	
	 --CHECK IF USER HAS ACCESS TO THE BIN
	 SELECT TOP 1 @ALLOW_ACCESS=1 FROM BINUSERS (NOLOCK) WHERE USER_CODE=@CUSERCODE AND BIN_ID =@CBINID
	 
	 DECLARE @BINNAME VARCHAR(1000),@CUSERNAME VARCHAR(1000),@USER_AUTH VARCHAR(100),@BMBO_COUNTER BIT
	 --GET THE USERNAME AND BIN_NAME
	 SET @CUSERNAME=(SELECT TOP 1 USERNAME FROM USERS(NOLOCK) WHERE USER_CODE=@CUSERCODE )
	 SET @BINNAME=(SELECT TOP 1 BIN_NAME FROM BIN(NOLOCK) WHERE BIN_ID =@CBINID )
     
     /*IF THE BIN IS MARKED AS MBO_COUNTER THAN ONLY THE BIN STOCK SHOULD BE CONSIDERED AND ONLY ITS STOCK 
      SHOULD BE RETURNED, IRRESPECTIVE OF THE BINS THE USER HAS ACCESS TO*/
     SELECT @BMBO_COUNTER=ISNULL(MBO_COUNTER,0) FROM BIN(NOLOCK) WHERE BIN_ID=@CBINID
     
     DECLARE @CCMD NVARCHAR(MAX),@BPERISHABLE BIT,@PERISHABLE BIT
     
  
     SELECT TOP 1 @PERISHABLE=PERISHABLE FROM ARTICLE A(NOLOCK) JOIN SKU B(NOLOCK) ON A.article_code=B.article_code
     WHERE B.product_code=@CPRODUCTCODE
     

     
     /*GET THE TOTAL STOCK QUANTITY FOR THE BARCODE, FROM ALL BINS THAT THE USER HAS ACCESS TO
	  ,SUPER USER HAS ACCESS TO ALL BIN STOCK*/
     SET @CCMD=N'SELECT @BINSTOCK=SUM(PMT.QUANTITY_IN_STOCK),@BPERISHABLE=ISNULL(ART.PERISHABLE,0) 
     FROM PMT01106 PMT (NOLOCK)
     JOIN BIN (NOLOCK) ON BIN.BIN_ID=PMT.BIN_ID
     JOIN BINUSERS B (NOLOCK) ON BIN.MAJOR_BIN_ID =B.BIN_ID      
     JOIN SKU (NOLOCK) ON SKU.PRODUCT_CODE=PMT.PRODUCT_CODE
     JOIN ARTICLE ART (NOLOCK) ON ART.ARTICLE_CODE=SKU.ARTICLE_CODE
     WHERE '+(CASE WHEN (CHARINDEX ('@',@CPRDCODE)=0) THEN 'LEFT(PMT.PRODUCT_CODE, ISNULL(NULLIF(CHARINDEX (''@'',PMT.PRODUCT_CODE)-1,-1),LEN(PMT.PRODUCT_CODE ))) ='''+@CPRDCODE+''''
     ELSE 'pmt.product_code='''+@CPRDCODE+'''' END)+'
     AND (B.USER_CODE='''+@CUSERCODE+''') AND (PMT.DEPT_ID='''+@cLOC_ID+''')
     GROUP BY ISNULL(ART.PERISHABLE,0)'
     
     PRINT @CCMD
     EXEC SP_EXECUTESQL @CCMD,N'@BINSTOCK NUMERIC(10,2) OUTPUT,@BPERISHABLE BIT OUTPUT',@BINSTOCK OUTPUT,@BPERISHABLE OUTPUT
     
     --SELECT @BINSTOCK
     --AND (@BMBO_COUNTER=0 OR B.BIN_ID=@CBINID)
     --AND (@CUSERCODE=(CASE WHEN @CUSERCODE='0000000' THEN @CUSERCODE ELSE B.USER_CODE END))  
     --AND B.BIN_ID=(CASE WHEN @BMBO_COUNTER=0 THEN B.BIN_ID ELSE @CBINID END)
     
				
  	PRINT CONVERT(VARCHAR,@BINSTOCK)
  	 /*SELECTED BARCODE SHOULD NOT BE PART OF STOCK RECONCILLATION*/
	 IF EXISTS (SELECT TOP 1 MEMO_ID FROM STMH01106 A(NOLOCK) JOIN PMT01106 B(NOLOCK) ON A.REP_ID=B.REP_ID
				WHERE B.PRODUCT_CODE=@CPRDCODE AND B.BIN_ID=@CBINID AND B.DEPT_ID= @CLOC_ID)
	 BEGIN
		 SELECT 'SELECTED BARCODE IS PART OF STOCK RECONCILIATION....PLEASE CHECK' AS RETMSG      
		 RETURN
	 END			
 
	 IF @BDONOTCHECKSTOCK=0    
		 SELECT @BDONOTCHECKSTOCK = STOCK_NA 
		 FROM SKU A   (NOLOCK)  
		 JOIN ARTICLE B  (NOLOCK) ON B.ARTICLE_CODE=A.ARTICLE_CODE
		 WHERE  A.PRODUCT_CODE=@CPRDCODE    
	 
	 SELECT @BSTOCKNA=STOCK_NA FROM SKU A (NOLOCK)
	 JOIN ARTICLE B (NOLOCK) ON A.ARTICLE_CODE=B.ARTICLE_CODE		 
	 WHERE A.PRODUCT_CODE=@CPRDCODE
	 
	 IF @BDONOTCHECKSTOCK=0
	 BEGIN
			SELECT TOP 1 @CDONOTCHECKSTOCK =VALUE FROM USER_ROLE_DET A(NOLOCK)
			JOIN USERS B(NOLOCK) ON A.ROLE_ID=B.ROLE_ID
			WHERE USER_CODE=@CUSERCODE AND USER_CODE<>'0000000'
			AND FORM_NAME='FRMSALE' 
			AND FORM_OPTION='ALLOW_NEG_STOCK'		
			
			IF ISNULL(@CDONOTCHECKSTOCK,'')='1'
				SET @BDONOTCHECKSTOCK = 1
	 END  
	 
	 IF @CXNTYPE='WSL'
	 BEGIN
			SELECT TOP 1 @CDONOTCHECKSTOCK =VALUE FROM USER_ROLE_DET A(NOLOCK)
			JOIN USERS B(NOLOCK) ON A.ROLE_ID=B.ROLE_ID
			WHERE USER_CODE=@CUSERCODE 
			AND FORM_NAME='FRMWSLINVOICE' 
			AND FORM_OPTION='ALLOW_NEG_STOCK'		
			
			IF ISNULL(@CDONOTCHECKSTOCK,'')='1'
				SET @BDONOTCHECKSTOCK = 1
			ELSE
			SET @BDONOTCHECKSTOCK=0
	 END    

	 IF @NQTY=0
		SET @NQTY=1
	 
	 
	  	   
	 IF @CPRDCODE IS NULL      
		 SELECT '2-SELECTED BARCODE NOT FOUND....PLEASE CHECK' AS RETMSG      
	 ELSE IF  ISNULL(@ALLOW_ACCESS,0)<>1  AND @CUSERCODE<>'0000000'
 		 SELECT '''USER -'+@CUSERNAME+' NOT ALLOW TO ACCESS BIN- '+@BINNAME+''' ' AS RETMSG 
	 ELSE IF ISNULL(@BINSTOCK,0)=0 AND @NQTY>0 AND @BDONOTCHECKSTOCK=0 
	     SELECT '(2)BARCODE NOT IN STOCK....PLEASE CHECK' AS RETMSG     	       	 
	 ELSE
	 BEGIN  

		 IF @BPERISHABLE=1 AND CHARINDEX('@',@CPRDCODE)>0 
		 BEGIN
			SELECT @DEXPIRYDT=EXPIRY_DT FROM SKU (NOLOCK) WHERE PRODUCT_CODE=@CPRDCODE
			
			IF @DEXPIRYDT<@CWHERE
			BEGIN
				SELECT 'THIS BATCH OF ITEM EXPIRED ON :'+CONVERT(VARCHAR,@DEXPIRYDT,105)+'....PLEASE CHECK'
			END
		 END

		 SET @NSTKQTY=ISNULL(@BINSTOCK,0)
		  
		  IF @BDONOTCHECKSTOCK = 0 
		    
		  PRINT 'TOTAL STK QTY : '+ CONVERT(VARCHAR,@NSTKQTY)
		  
		  DECLARE @TRETMSG TABLE (RETMSG VARCHAR(2000))	
		    
		  IF ISNULL(@NSTKQTY,0)>0 AND @BDONOTCHECKSTOCK=0
			 INSERT @TRETMSG      
			 SELECT '' AS RETMSG      
		  ELSE
		  IF @BDONOTCHECKSTOCK=1 OR @NQTY<0 
			 INSERT @TRETMSG      
			 SELECT '' AS RETMSG      
		  ELSE      
			 INSERT @TRETMSG      
			 SELECT '(1)BARCODE NOT IN STOCK....PLEASE CHECK' AS RETMSG      
		  
		  IF OBJECT_ID('TEMPDB..#SP_CHECKSTOCK0','U') IS NOT NULL   
			DROP TABLE #SP_CHECKSTOCK0  
		        
		  IF OBJECT_ID('TEMPDB..#SP_CHECKSTOCK','U') IS NOT NULL   
			DROP TABLE #SP_CHECKSTOCK  
			
		  IF OBJECT_ID('TEMPDB..#SP_CHECKSTOCK1','U') IS NOT NULL   
			DROP TABLE #SP_CHECKSTOCK1 
		  
		  IF OBJECT_ID('TEMPDB..#SKUCHECK','U') IS NOT NULL
			DROP TABLE #SKUCHECK
		  
		  SELECT PRODUCT_CODE,ISNULL(BARCODE_CODING_SCHEME,0) AS CODING_SCHEME INTO #SKUCHECK FROM SKU (NOLOCK) WHERE PRODUCT_CODE=@CPRDCODE
		  
		  IF  CHARINDEX('@',@CPRDCODE)=0
		  BEGIN
				SET @CCMD=N'SELECT A.PRODUCT_CODE,ISNULL(BARCODE_CODING_SCHEME,0) AS CODING_SCHEME FROM SKU A(NOLOCK)
				JOIN ARTICLE ART (NOLOCK) ON A.ARTICLE_CODE=ART.ARTICLE_CODE
				WHERE (ISNULL(ART.PERISHABLE,0)=1	AND A.PRODUCT_CODE LIKE ''%'+@CPRDCODE+'@%'') OR
				( A.PRODUCT_CODE LIKE ''%'+@CPRDCODE+'@%'')'
				
				INSERT #SKUCHECK
				EXEC SP_EXECUTESQL @CCMD
		  END	
			
		   					 
		  IF @NRATEREVISION IN (0,1,3)
		  BEGIN

		   		SELECT A.PRODUCT_CODE,ISNULL(Z.WS_PRICE,A.WS_PRICE) AS WS_PRICE,ISNULL(EXPIRY_DT,'') AS EXPIRY_DT,
				ISNULL(PMT.BIN_ID,@CBINID) AS BIN_ID,PMT.QUANTITY_IN_STOCK,ISNULL(BATCH_NO,'') AS BATCH_NO,CONVERT(VARCHAR(36),NEWID()) AS BATCH_ROW_ID,
				ISNULL(B.PERISHABLE,0) AS PERISHABLE,ISNULL(A.FIX_MRP,0) AS [FIX_MRP] 
				,(CASE WHEN @NMRPWS =1 THEN ISNULL(Z.MRP,A.MRP) 
				   WHEN @NMRPWS =2 THEN ISNULL(Z.WS_PRICE,A.WS_PRICE) ELSE 0 END
				)AS [MRP],CONVERT(BIT,0) AS SHOW_BATCH_COLUMNS,ISNULL(BIN.BIN_NAME, '') AS [BIN_NAME],
				 CAST(CASE WHEN BIN.BIN_ID =@CBINID THEN 1 ELSE 0 END  AS BIT) AS CHK,
				B.CODING_SCHEME
				
				INTO #SP_CHECKSTOCK0  
				FROM SKU A (NOLOCK)
				JOIN ARTICLE B  (NOLOCK) ON A.ARTICLE_CODE = B.ARTICLE_CODE        
				LEFT JOIN PMT01106 PMT (NOLOCK) ON A.PRODUCT_CODE=PMT.PRODUCT_CODE  AND pmt.dept_id=@CLOC_ID
				JOIN #SKUCHECK C ON C.PRODUCT_CODE=A.PRODUCT_CODE
				LEFT JOIN BIN(NOLOCK) ON BIN.BIN_ID=PMT.BIN_ID
				LEFT OUTER JOIN       
				(      
					SELECT TOP 1 PRODUCT_CODE,MRP,WS_PRICE         
					FROM LOCSKUSP  (NOLOCK)       
					WHERE PRODUCT_CODE=@CPRDCODE AND DEPT_ID=@CLOC_ID  AND ( FROM_DT <= @CWHERE OR @CWHERE ='')       
					ORDER BY FROM_DT DESC          
				)Z ON Z.PRODUCT_CODE=A.PRODUCT_CODE    				
				WHERE ((ISNULL(PMT.QUANTITY_IN_STOCK,0)>0 AND @NQTY>0 AND PMT.DEPT_ID= @CLOC_ID)
					    OR @NQTY<0 OR @BDONOTCHECKSTOCK=1)
				      
				
				
				
				IF   EXISTS (SELECT TOP 1 PRODUCT_CODE FROM #SKUCHECK WHERE CODING_SCHEME=1)
				BEGIN
					DECLARE @NLENPC INT,@NCNTEXPIRED NUMERIC(3,0),@NEXPIRYDTCOUNT NUMERIC(2,0)
					SET @NLENPC=LEN(@CPRDCODE)
					
					SET @NCNT=0

										
					UPDATE #SP_CHECKSTOCK0 SET PRODUCT_CODE=SUBSTRING(PRODUCT_CODE,1,@NLENPC),SHOW_BATCH_COLUMNS=1
					
							
					UPDATE A SET QUANTITY_IN_STOCK=B.QUANTITY_IN_STOCK FROM #SP_CHECKSTOCK0 A
					JOIN (SELECT PRODUCT_CODE,SUM(QUANTITY_IN_STOCK) AS QUANTITY_IN_STOCK,BIN_ID,MRP,EXPIRY_DT,BATCH_NO
						  FROM #SP_CHECKSTOCK0 GROUP BY PRODUCT_CODE,BIN_ID,MRP,EXPIRY_DT,BATCH_NO) B ON A.PRODUCT_CODE=B.PRODUCT_CODE
						  AND A.BIN_ID=B.BIN_ID AND A.MRP=B.MRP AND A.BATCH_NO=B.BATCH_NO AND A.EXPIRY_DT=B.EXPIRY_DT
					
					DELETE A FROM #SP_CHECKSTOCK0 A WHERE A.BATCH_ROW_ID<>(SELECT TOP 1 B.BATCH_ROW_ID FROM #SP_CHECKSTOCK0 B 
					WHERE A.PRODUCT_CODE=B.PRODUCT_CODE
					AND A.BIN_ID=B.BIN_ID AND A.MRP=B.MRP AND A.BATCH_NO=B.BATCH_NO AND A.EXPIRY_DT=B.EXPIRY_DT)
					
					
					
					SELECT @NCNT=COUNT(PRODUCT_CODE) FROM #SP_CHECKSTOCK0
					SELECT @NCNTEXPIRED=COUNT(PRODUCT_CODE) FROM #SP_CHECKSTOCK0 
					WHERE EXPIRY_DT<@CWHERE AND PERISHABLE=1
					
					SET @NCNTEXPIRED=ISNULL(@NCNTEXPIRED,0)
										
					IF @NCNT=1
						UPDATE #SP_CHECKSTOCK0 SET CHK=1
					
					IF @NCNTEXPIRED=@NCNT
					BEGIN
						SELECT @NEXPIRYDTCOUNT=COUNT(DISTINCT EXPIRY_DT) FROM #SP_CHECKSTOCK0
						
						IF @NEXPIRYDTCOUNT=1
							SELECT TOP 1 @DEXPIRYDT=EXPIRY_DT FROM #SP_CHECKSTOCK0
						ELSE
							SET @DEXPIRYDT=''
								
						IF @DEXPIRYDT<>''
							SELECT 'THIS BATCH OF ITEM EXPIRED ON :'+CONVERT(VARCHAR,@DEXPIRYDT,105)+'....PLEASE CHECK' AS RETMSG
						ELSE
							SELECT 'EXPIRY ITEMS CANNOT BE SOLD ...PLEASE CHECK' AS RETMSG	
						
						RETURN	
					END	
				END
				
				SELECT * FROM @TRETMSG      
				
				SELECT @CPRDCODE AS PRODUCT_CODE, B.ARTICLE_NO, B.ARTICLE_NAME, 
				C.PARA1_NAME, D.PARA2_NAME, F.PARA3_NAME, E.UOM_NAME,         
				A.PURCHASE_PRICE,SM.SECTION_NAME, SD.SUB_SECTION_NAME,      
				PARA4_NAME,PARA5_NAME,PARA6_NAME,ISNULL(E.UOM_TYPE,0) AS [UOM_TYPE],      
				B.DT_CREATED AS [ART_DT_CREATED],F.DT_CREATED AS [PARA3_DT_CREATED],A.DT_CREATED AS [SKU_DT_CREATED],      
				B.STOCK_NA,(CASE  WHEN @CPRDCODE=@CPRODUCTCODE THEN '' ELSE @CPRODUCTCODE END) AS EAN,  
				F1.FORM_NAME,F1.TAX_PERCENTAGE , A.PRODUCT_NAME,(CASE WHEN ISNULL(ER_FLAG,0)=0 THEN 1 ELSE A.ER_FLAG END) AS ER_FLAG,
				LM.AC_NAME,A.INV_DT,A.RECEIPT_DT ,B.ALIAS AS [ARTICLE_ALIAS],'' AS [WIP_UID],
				(A.PURCHASE_PRICE+ISNULL(SKU_OH.TAX_AMOUNT,0)+ ISNULL(SKU_OH.OTHER_CHARGES,0) +   
				ISNULL(SKU_OH.ROUND_OFF,0) + ISNULL(SKU_OH.FREIGHT,0)- ISNULL(SKU_OH.DISCOUNT_AMOUNT,0) +
				ISNULL(SKU_OH.EXCISE_DUTY_AMOUNT,0)) AS LANDED_COST,A.ONLINE_PRODUCT_CODE AS ONLINE_BAR_CODE,
				A.VENDOR_EAN_NO,(CASE WHEN ISNULL(A.HSN_CODE,'')='' THEN B.HSN_CODE ELSE A.HSN_CODE END) AS HSN_CODE,
				SM.ITEM_TYPE,B.UOM_CODE,F1.FORM_ID,A.MRP,A.WS_PRICE,LM.AC_CODE ,
				B.ARTICLE_CODE ,A.PARA1_CODE,A.PARA2_CODE,A.PARA3_CODE,A.PARA4_CODE,A.PARA5_CODE,A.PARA6_CODE,B.PARA1_SET,B.PARA2_SET ,ISNULL(A.FIX_MRP,0) AS [FIX_MRP]
				FROM SKU A   (NOLOCK)     
				LEFT OUTER JOIN SKU_OH  (NOLOCK) ON SKU_OH.PRODUCT_CODE=A.PRODUCT_CODE    								
				JOIN ARTICLE B  (NOLOCK) ON A.ARTICLE_CODE = B.ARTICLE_CODE        
				JOIN SECTIOND SD  (NOLOCK) ON B.SUB_SECTION_CODE = SD.SUB_SECTION_CODE      
				JOIN SECTIONM SM  (NOLOCK) ON SD.SECTION_CODE = SM.SECTION_CODE      
				JOIN PARA1 C  (NOLOCK) ON A.PARA1_CODE = C.PARA1_CODE        
				JOIN PARA2 D  (NOLOCK) ON A.PARA2_CODE = D.PARA2_CODE        
				JOIN PARA3 F  (NOLOCK) ON A.PARA3_CODE = F.PARA3_CODE        
				JOIN PARA4 G  (NOLOCK) ON A.PARA4_CODE = G.PARA4_CODE        
				JOIN PARA5 H  (NOLOCK) ON A.PARA5_CODE = H.PARA5_CODE        
				JOIN PARA6 I  (NOLOCK) ON A.PARA6_CODE = I.PARA6_CODE     
				JOIN LM01106 LM (NOLOCK) ON LM.AC_CODE = A.AC_CODE         
				LEFT OUTER JOIN UOM E  (NOLOCK) ON B.UOM_CODE = E.UOM_CODE   
				JOIN FORM F1  (NOLOCK) ON A.FORM_ID=F1.FORM_ID       
				WHERE A.PRODUCT_CODE=@CSKUPC
				
				
					
				IF @BDONOTCHECKSTOCK=1  AND @CXNTYPE<>'WSR' AND @nQty>0 ---- DOING THIS BECAUSE APPLICATION RECHECKS THE QUANTITY IN STOCK BASED UPON QUANTITY & STOCK_NA COLUMN
				BEGIN
					IF @BSTOCKNA=0 AND @CXNTYPE<>'IRR' 
						UPDATE #SP_CHECKSTOCK0 SET QUANTITY_IN_STOCK=99999 WHERE CODING_SCHEME<>3
					
					IF EXISTS (SELECT PRODUCT_CODE FROM #SP_CHECKSTOCK0 WHERE BIN_ID=@CBINID  )
						SELECT TOP 1 * FROM #SP_CHECKSTOCK0  WHERE  BIN_ID=@CBINID 
					ELSE
						SELECT TOP 1 * FROM #SP_CHECKSTOCK0 
						ORDER BY QUANTITY_IN_STOCK DESC
				END	
				ELSE
				IF @NQTY>=0
					SELECT A.* FROM #SP_CHECKSTOCK0 A
					JOIN BIN (NOLOCK) ON BIN.BIN_ID=A.BIN_ID
					JOIN BINUSERS B (NOLOCK) ON BIN.MAJOR_BIN_ID =B.BIN_ID 					
					WHERE B.USER_CODE=@CUSERCODE
				ELSE
				IF @NQTY<0
					SELECT TOP 1 * FROM #SP_CHECKSTOCK0 
					ORDER BY QUANTITY_IN_STOCK DESC
								
				--ELSE IF EXISTS (SELECT DEPT_ID FROM #SP_CHECKSTOCK0 WHERE QUANTITY_IN_STOCK>0 AND ((DEPT_ID=@CBINID)  OR BIN_ID =@CBINID) AND QUANTITY_IN_STOCK >0 )
				--	SELECT TOP 1 * FROM #SP_CHECKSTOCK0 WHERE (DEPT_ID=@CBINID    OR BIN_ID =@CBINID)  AND QUANTITY_IN_STOCK>0 
				--ELSE IF EXISTS (SELECT DEPT_ID FROM #SP_CHECKSTOCK0 WHERE QUANTITY_IN_STOCK>0 AND ((DEPT_ID<>@CBINID) AND BIN_ID <>@CBINID) )  
				--	SELECT * FROM #SP_CHECKSTOCK0 WHERE DEPT_ID<>@CBINID    AND BIN_ID <>@CBINID AND QUANTITY_IN_STOCK>0 

					
		  END
		  ELSE IF @NRATEREVISION = 2 
		  BEGIN
				SELECT * FROM @TRETMSG      
				
				SELECT  A.PRODUCT_CODE, A.ARTICLE_CODE, B.ARTICLE_NO, B.ARTICLE_NAME, A.PARA1_CODE,      
				C.PARA1_NAME, A.PARA2_CODE, D.PARA2_NAME, A.PARA3_CODE, F.PARA3_NAME, E.UOM_NAME,         
				ISNULL(PMT.DEPT_ID, @CLOC_ID) AS DEPT_ID, A.BARCODE_CODING_SCHEME AS CODING_SCHEME,  B.INACTIVE, PMT.QUANTITY_IN_STOCK,      
				A.PURCHASE_PRICE,
				--(CASE WHEN @NQTY<0 THEN ISNULL(Z1.OLD_MRP,A.MRP) ELSE ISNULL(Z.MRP,A.MRP) END)AS [MRP], 
				(CASE WHEN @NMRPWS =1 THEN CASE WHEN @NQTY<0 THEN ISNULL(Z1.OLD_MRP,A.MRP) ELSE ISNULL(Z.MRP,A.MRP) END
				   WHEN @NMRPWS =2 THEN  CASE WHEN @NQTY<0 THEN ISNULL(A.WS_PRICE,0) ELSE ISNULL(Z.WS_PRICE,A.WS_PRICE) END ELSE 0 END
				)AS [MRP],    
				ISNULL(Z.WS_PRICE,A.WS_PRICE) AS WS_PRICE,       
				'' AS SCHEME_ID, SM.SECTION_NAME, SD.SUB_SECTION_NAME,      
				A.PARA4_CODE,A.PARA5_CODE,A.PARA6_CODE,      
				PARA4_NAME,PARA5_NAME,PARA6_NAME,B.UOM_CODE,ISNULL(E.UOM_TYPE,0) AS [UOM_TYPE],      
				B.DT_CREATED AS [ART_DT_CREATED],F.DT_CREATED AS [PARA3_DT_CREATED],A.DT_CREATED AS [SKU_DT_CREATED],      
				B.STOCK_NA,(CASE  WHEN @CPRDCODE=@CPRODUCTCODE THEN '' ELSE @CPRODUCTCODE END) AS EAN,  
				F1.FORM_ID,F1.FORM_NAME,F1.TAX_PERCENTAGE , A.PRODUCT_NAME,  
				ISNULL(Z.MRP,A.MRP) AS RATE,A.ER_FLAG     ,ISNULL(A.FIX_MRP,0) AS [FIX_MRP] ,LM.AC_NAME  
				,A.INV_DT,A.RECEIPT_DT ,A.AC_CODE,B.ALIAS AS [ARTICLE_ALIAS],
				ISNULL(PMT.BIN_ID, @CBINID) AS [BIN_ID],ISNULL(BIN.BIN_NAME, '') AS [BIN_NAME],'' AS [WIP_UID],
				ISNULL(HH.OLD_MRP,A.MRP ) AS OLD_MRP,
				(A.PURCHASE_PRICE+ISNULL(SKU_OH.TAX_AMOUNT,0)+ ISNULL(SKU_OH.OTHER_CHARGES,0) +   
				ISNULL(SKU_OH.ROUND_OFF,0) + ISNULL(SKU_OH.FREIGHT,0)- ISNULL(SKU_OH.DISCOUNT_AMOUNT,0) +
				ISNULL(SKU_OH.EXCISE_DUTY_AMOUNT,0)) AS LANDED_COST,A.ONLINE_PRODUCT_CODE AS ONLINE_BAR_CODE,
				A.VENDOR_EAN_NO,(CASE WHEN ISNULL(A.HSN_CODE,'')='' THEN B.HSN_CODE ELSE A.HSN_CODE END) AS HSN_CODE	,
				SM.ITEM_TYPE,ISNULL(EXPIRY_DT,'') AS EXPIRY_DT,
				ISNULL(BATCH_NO,'') AS BATCH_NO,CONVERT(VARCHAR(36),NEWID()) AS BATCH_ROW_ID,
				ISNULL(B.PERISHABLE,0) AS PERISHABLE			
				
				INTO #SP_CHECKSTOCK  
				FROM SKU A   (NOLOCK)  
				LEFT OUTER JOIN SKU_OH  (NOLOCK) ON SKU_OH.PRODUCT_CODE=A.PRODUCT_CODE    												
				LEFT OUTER JOIN  PMT01106 PMT  (NOLOCK) ON A.PRODUCT_CODE=PMT.PRODUCT_CODE   AND pmt.dept_id=@CLOC_ID
				LEFT OUTER JOIN BIN (NOLOCK) ON BIN.BIN_ID=ISNULL(PMT.BIN_ID, @CBINID) 
				JOIN ARTICLE B  (NOLOCK) ON A.ARTICLE_CODE = B.ARTICLE_CODE        
				JOIN SECTIOND SD  (NOLOCK) ON B.SUB_SECTION_CODE = SD.SUB_SECTION_CODE      
				JOIN SECTIONM SM  (NOLOCK) ON SD.SECTION_CODE = SM.SECTION_CODE      
				JOIN PARA1 C  (NOLOCK) ON A.PARA1_CODE = C.PARA1_CODE        
				JOIN PARA2 D  (NOLOCK) ON A.PARA2_CODE = D.PARA2_CODE        
				JOIN PARA3 F  (NOLOCK) ON A.PARA3_CODE = F.PARA3_CODE        
				JOIN PARA4 G  (NOLOCK) ON A.PARA4_CODE = G.PARA4_CODE        
				JOIN PARA5 H  (NOLOCK) ON A.PARA5_CODE = H.PARA5_CODE        
				JOIN PARA6 I  (NOLOCK) ON A.PARA6_CODE = I.PARA6_CODE     
				JOIN LM01106 LM (NOLOCK) ON LM.AC_CODE = A.AC_CODE         
				LEFT OUTER JOIN UOM E  (NOLOCK) ON B.UOM_CODE = E.UOM_CODE   
				JOIN FORM F1  (NOLOCK) ON A.FORM_ID=F1.FORM_ID       
				LEFT OUTER JOIN       
				(      
				SELECT TOP 1 PRODUCT_CODE,OLD_MRP         
				FROM IRD01106 AA (NOLOCK) 
				JOIN IRM01106 (NOLOCK) LL ON AA.IRM_MEMO_ID= LL.IRM_MEMO_ID AND LL.TYPE=1
				WHERE PRODUCT_CODE=@CPRDCODE  
				ORDER BY IRM_MEMO_DT  DESC ,LL.LAST_UPDATE DESC         
				)HH ON HH.PRODUCT_CODE=A.PRODUCT_CODE    
				LEFT OUTER JOIN       
				(      
				SELECT TOP 1 PRODUCT_CODE,MRP,WS_PRICE         
				FROM LOCSKUSP  (NOLOCK)       
				WHERE PRODUCT_CODE=@CPRDCODE AND DEPT_ID=@CLOC_ID  AND ( FROM_DT <= @CWHERE OR @CWHERE ='')       
				ORDER BY FROM_DT DESC          
				)Z ON Z.PRODUCT_CODE=A.PRODUCT_CODE    
				LEFT OUTER JOIN       
				(      
					SELECT TOP 1 A.PRODUCT_CODE,(CASE WHEN ISNULL(B.PATCHUP_RUN,0)=0 THEN A.MRP ELSE A.OLD_MRP END ) AS [OLD_MRP]  
					FROM CMD01106 A  (NOLOCK)       
					JOIN CMM01106 B (NOLOCK) ON B.CM_ID=A.CM_ID  
					WHERE A.QUANTITY>0 AND PRODUCT_CODE=@CPRDCODE 
					AND ISNULL(B.BIN_ID,'000')=@CBINID    
					ORDER BY B.CM_DT DESC          
				)Z1 ON Z1.PRODUCT_CODE=A.PRODUCT_CODE   
				LEFT OUTER JOIN BINUSERS LOC (NOLOCK) ON LOC.BIN_ID=ISNULL(BIN.MAJOR_BIN_ID,@CBINID) AND LOC.USER_CODE=@CUSERCODE  
				WHERE  A.PRODUCT_CODE=@CPRDCODE AND 
				(B.STOCK_NA=1 OR (@CUSERCODE=(CASE WHEN @CUSERCODE='0000000' OR @NQTY<0 THEN @CUSERCODE ELSE LOC.USER_CODE END)))  
				AND ISNULL(PMT.BIN_ID, @CBINID)=(CASE WHEN @BMBO_COUNTER=0 THEN ISNULL(PMT.BIN_ID, @CBINID) ELSE @CBINID END)
				AND ISNULL(PMT.DEPT_ID,@CLOC_ID)= @CLOC_ID 
				
				UPDATE #SP_CHECKSTOCK SET ER_FLAG=1 WHERE ISNULL(ER_FLAG,0)=0
				
				IF @BDONOTCHECKSTOCK=1 
				 BEGIN
				    IF EXISTS (SELECT DEPT_ID FROM #SP_CHECKSTOCK WHERE BIN_ID=@CBINID )
					 SELECT TOP 1 * FROM #SP_CHECKSTOCK  WHERE  BIN_ID=@CBINID 
					 ELSE
					SELECT TOP 1 * FROM #SP_CHECKSTOCK ORDER BY QUANTITY_IN_STOCK DESC
			     END 
				ELSE IF EXISTS (SELECT DEPT_ID FROM #SP_CHECKSTOCK WHERE QUANTITY_IN_STOCK>0 AND ((DEPT_ID=@CBINID)  OR BIN_ID =@CBINID) )
					SELECT TOP 1 * FROM #SP_CHECKSTOCK WHERE (DEPT_ID=@CBINID    OR BIN_ID =@CBINID)  AND QUANTITY_IN_STOCK>0 
				ELSE IF EXISTS (SELECT DEPT_ID FROM #SP_CHECKSTOCK WHERE QUANTITY_IN_STOCK>0 AND ((DEPT_ID<>@CBINID) AND BIN_ID <>@CBINID) )  
					SELECT * FROM #SP_CHECKSTOCK WHERE DEPT_ID<>@CBINID    AND BIN_ID <>@CBINID AND QUANTITY_IN_STOCK>0 
				ELSE  
					SELECT TOP 1 * FROM #SP_CHECKSTOCK  ORDER BY QUANTITY_IN_STOCK DESC
		  END
	 END 
 
END  
--END OF PROCEDURE - SP_CHECKSTOCK_BATCH_UNCANCELLATION
--EXEC SP_CHECKSTOCK_BATCH_UNCANCELLATION '42611',1,'000','',0,'0000000',0,'',0,0,1,'LU'