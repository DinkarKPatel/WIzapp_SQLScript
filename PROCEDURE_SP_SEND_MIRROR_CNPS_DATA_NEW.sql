CREATE PROCEDURE SP_SEND_MIRROR_CNPS_DATA_NEW
(	
	 @CUPLOADEDXNID VARCHAR(50)
	,@CCURLOCID VARCHAR(5)
	,@BACKNOWLEDGE BIT=0
	,@CERRMSG VARCHAR(1000) OUTPUT
)	
--WITH ENCRYPTION
AS
/*
	SP_SEND_MIRROR_CNPS_DATA_NEW_208_04_02_14 : THIS PROCEDURE WILL SEND WHOLSALE CREDITNOTE PACKSLIP DATA FROM LOCATION TO HO.
*/
BEGIN
	DECLARE @DTSQL NVARCHAR(MAX),@CSPID VARCHAR(10),@CTEMPTABLE VARCHAR(500),@CMEMOID VARCHAR(50),
	@CTEMPMASTERTABLE VARCHAR(200),@CTEMPLMTABLE VARCHAR(200),@CTEMPLMPTABLE VARCHAR(200),@CTEMPAREATABLE VARCHAR(200),@CTEMPCITYTABLE VARCHAR(200)
	,@DMEMOLASTUPDATE DATETIME,@CTABLENAME VARCHAR(100),@BRECFOUND BIT,@CSTEP VARCHAR(5),@CFILTERCONDITION VARCHAR(MAX)
	,@CKEYFIELD VARCHAR(100)

	DECLARE @TXNSSENDINFO TABLE (ORG_TABLENAME VARCHAR(50),TMP_TABLENAME VARCHAR(50),XN_ID VARCHAR(40))  	
BEGIN TRY 	
	---- CALL ACKNOWLEDGEMENT OF MEMO SUCCESSFUL MERGING AT MIRRORING SERVER
	SET @CSTEP=0
	DECLARE @CTEMPDBNAME1 VARCHAR(40),@CTEMPDBNAME VARCHAR(40)
	SET @CTEMPDBNAME1 = DB_NAME() + '_TEMP'		
	SET @CSTEP=5
	IF DB_ID(@CTEMPDBNAME1) IS NOT NULL
		SET @CTEMPDBNAME = DB_NAME() + '_TEMP.DBO.'
	ELSE
	  BEGIN
	  SET @CERRMSG='STEP- ' + LTRIM(STR(@CSTEP)) + ' ERROR TEMP DATABASE NOT EXISTS.'          
			GOTO END_PROC
	  END
	--CHNAGE BY BAIJNATH
	SET @CMEMOID=@CUPLOADEDXNID
	---- IF NO MEMO FOUND , JUST END THE PROCESS
	IF ISNULL(@CMEMOID,'')=''
		GOTO END_PROC
LBLTABLEINFO:
	SET @CSTEP=50
	---- CNPSPULATE LIST OF TABLES 
/*CNPS_MST,CNPS_DET,LM01106,LMP01106,HD01106,AREA,CITY,STATE*/
	INSERT @TXNSSENDINFO (ORG_TABLENAME) VALUES ('CNPS_MST')
	INSERT @TXNSSENDINFO (ORG_TABLENAME) VALUES ('CNPS_DET')
	INSERT @TXNSSENDINFO (ORG_TABLENAME) VALUES ('PMT01106')
	
	
	SET @CSTEP=70

	IF CURSOR_STATUS('GLOBAL','CUR_SENDCNPS') IN (0,1)
	BEGIN
		CLOSE CUR_SENDCNPS
		DEALLOCATE CUR_SENDCNPS
	END
	
	---- DROP THE TEMCNPSRARY TABLES ALREADY EXISTING
	DECLARE CUR_SENDCNPS CURSOR FOR SELECT ORG_TABLENAME FROM @TXNSSENDINFO
	OPEN CUR_SENDCNPS
	SET @CSTEP=90
	FETCH NEXT FROM CUR_SENDCNPS INTO @CTABLENAME
	WHILE @@FETCH_STATUS=0
	BEGIN
		SET @CSTEP=100
		SET @CTEMPTABLE=@CTEMPDBNAME + '[TMP_CNPS_'+@CTABLENAME+'_'+LTRIM(RTRIM(REPLACE(@CMEMOID,'-','_')))+']'
		SET @DTSQL=N'IF OBJECT_ID('''+@CTEMPTABLE+''',''U'') IS NOT NULL  
						DROP TABLE '+@CTEMPTABLE+''
		PRINT @DTSQL
		EXEC SP_EXECUTESQL @DTSQL		
	
		FETCH NEXT FROM CUR_SENDCNPS INTO @CTABLENAME
	END

	CLOSE CUR_SENDCNPS
	DEALLOCATE CUR_SENDCNPS	
	
	SET @CSTEP=220
	---- SEND THE CNPS MEMO MASTER TABLE
	SET @CTABLENAME='CNPS_MST'
	SET @CTEMPMASTERTABLE=@CTEMPDBNAME + '[TMP_CNPS_'+@CTABLENAME+'_'+LTRIM(RTRIM(REPLACE(@CMEMOID,'-','_')))+']'
	SET @CKEYFIELD='PS_ID'
	SET @DTSQL=N'SELECT  DISTINCT * INTO '+@CTEMPMASTERTABLE+' FROM '+@CTABLENAME+'  (NOLOCK) WHERE '+@CKEYFIELD+'='''+@CMEMOID+''''
	PRINT @DTSQL
	EXEC SP_EXECUTESQL @DTSQL
	
	SET @CSTEP=230
	---- SEND THE CNPS MEMO DETAIL TABLE
	SET @CTABLENAME='CNPS_DET'
	SET @CTEMPTABLE=@CTEMPDBNAME + '[TMP_CNPS_'+@CTABLENAME+'_'+LTRIM(RTRIM(REPLACE(@CMEMOID,'-','_')))+']'
	SET @CKEYFIELD='PS_ID'
	SET @DTSQL=N'SELECT  DISTINCT * INTO '+@CTEMPTABLE+' FROM '+@CTABLENAME+' (NOLOCK)  WHERE '+@CKEYFIELD+'='''+@CMEMOID+''''
	PRINT @DTSQL
	EXEC SP_EXECUTESQL @DTSQL
	
	
	SET @CSTEP=231
	---- SEND THE CNPS MEMO DETAIL TABLE
	SET @CTABLENAME='PMT01106'
	SET @CTEMPTABLE=@CTEMPDBNAME + '[TMP_CNPS_'+@CTABLENAME+'_'+LTRIM(RTRIM(REPLACE(@CMEMOID,'-','_')))+']'
	SET @CKEYFIELD='PRODUCT_CODE'
	SET @DTSQL=N'SELECT  DISTINCT A.DEPT_ID,A.product_code,A.BIN_ID,A.quantity_in_stock INTO '+@CTEMPTABLE+' FROM PMT01106 A (NOLOCK)  
	JOIN CNPS_DET B (NOLOCK) ON B.PRODUCT_CODE=A.PRODUCT_CODE
	WHERE B.PS_ID='''+@CMEMOID+''''
	PRINT @DTSQL
	EXEC SP_EXECUTESQL @DTSQL
	

/*CNPS_MST,CNPS_DET,LM01106,LMP01106,HD01106,AREA,CITY,STATE*/
	
	IF @BACKNOWLEDGE=1
		GOTO END_PROC
	
	SET @CSTEP=420
	UPDATE @TXNSSENDINFO SET TMP_TABLENAME= 'TMP_CNPS_'+ORG_TABLENAME+'_'+LTRIM(RTRIM(REPLACE(@CMEMOID,'-','_'))),
	XN_ID=@CMEMOID,ORG_TABLENAME=ORG_TABLENAME 
	GOTO END_PROC

END TRY
BEGIN CATCH
	SET @CERRMSG='P: SP_SEND_MIRROR_CNPS_DATA_NEW, STEP:'+@CSTEP+', MESSAGE:'+ERROR_MESSAGE()
	GOTO END_PROC
END CATCH 		
END_PROC:
	IF ISNULL(@CERRMSG,'')=''
		SELECT * FROM @TXNSSENDINFO	
END
---END OF PROCEDURE - SP_SEND_MIRROR_CNPS_DATA_NEW
