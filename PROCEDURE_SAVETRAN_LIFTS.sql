CREATE PROCEDURE SAVETRAN_LIFTS  
(  
	 @NUPDATEMODE	 NUMERIC(1,0),  
	 @NSPID			 VARCHAR(50)='',  
	 @CMEMONOPREFIX  VARCHAR(50)='',  
	 @CFINYEAR       VARCHAR(10)='',  
	 @CMEMOID        VARCHAR(40)='', 
	 @DRECEIPTDT	 DATETIME=''
	 /*
		@NUPDATEMODE : 1 FOR ADD
					   2 FOR EDIT
					   3 FOR CANCEL
					   4 FOR GIT IN OF LOCKER	
	 */
	 
)  
--WITH ENCRYPTION

--changes in location id varchar(4)..Dinkar
AS  
BEGIN  
 DECLARE @CTEMPDBNAME   VARCHAR(100),  
   @CMASTERTABLENAME  VARCHAR(100),  
   @CDETAILTABLENAME  VARCHAR(100),  
   @CTEMPMASTERTABLENAME VARCHAR(100),  
   @CTEMPDETAILTABLENAME VARCHAR(100),  
   @CTEMPMASTERTABLE  VARCHAR(100),  
   @CTEMPDETAILTABLE  VARCHAR(100),  
   @CERRMSG    VARCHAR(500),  
   @CKEYFIELD1    VARCHAR(50),  
   @CKEYFIELDVAL1   VARCHAR(50),  
   @CMEMONO    VARCHAR(20),  
   @NMEMONOLEN    NUMERIC(20,0),  
   @CMEMONOVAL    VARCHAR(50),  
   @CCMD     NVARCHAR(4000),  
   @CCMDOUTPUT    NVARCHAR(4000),  
   @NSAVETRANLOOP   BIT,  
   @NSTEP    INT,  
   @CDEPTID   VARCHAR(4),  
   @CMEMODEPTID   VARCHAR(4),
   @CPETYENABLE	  BIT,
   @CPETTYTYPE    VARCHAR(4),
   @CSHIFTID VARCHAR(20),
   @NTRANSFERMODE NUMERIC(4),
   @CBANKTRANSFERID VARCHAR(22),
   @CPETTYEXPENSEID VARCHAR(22),
   @CTEMP_TILL_BANK_TRANSFER VARCHAR(100),
   @CTEMP_PEM01106 VARCHAR(100),
   @CTEMP_PED01106 VARCHAR(100) ,@CLOCID VARCHAR(4)
     
  SET @NSTEP=10
  DECLARE @OUTPUT TABLE (MEMO_ID VARCHAR(30),ERRMSG VARCHAR(500)) 
  
  SET @NSTEP=20
  IF OBJECT_ID('TEMPDB..#PROCOUTPUT','U') IS NOT NULL
		DROP TABLE #PROCOUTPUT
  
  SET @NSTEP=30
  CREATE TABLE #PROCOUTPUT(MEMOID VARCHAR(30),ERRMSG VARCHAR(500))
  
  SET @NSTEP=40      
  DECLARE @NRECEIPTS NUMERIC(18,2),@NISSUE NUMERIC(18,2),@NTILL_LIMIT NUMERIC(18,2),@CUSER_CODE CHAR(10)
  
 SET @NSTEP = 50  -- SETTTING UP ENVIRONMENT  
  
  SET @CTEMPDBNAME = ''  
 
 SET @NSTEP=80 
 SET @CMASTERTABLENAME = 'TILL_LIFTS'  
 
 SET @NSTEP=90 
 SET @CTEMPMASTERTABLENAME = 'TLF_TILL_LIFTS_UPLOAD'
   
 SET @CTEMPMASTERTABLE = @CTEMPDBNAME + @CTEMPMASTERTABLENAME  
 
 SET @NSTEP=101  
 SET @CERRMSG   = ''  
 SET @CKEYFIELD1   = 'MEMO_ID'  
  
 SET @CMEMONO   = 'MEMO_NO'  
 SET @NMEMONOLEN   = 10  
    
    
    select @CLOCID=location_code from TLF_TILL_LIFTS_UPLOAD where sp_id=@NSPID 
	
	SET @CDEPTID=@CLOCID
 
 SET @NSTEP=110  
 BEGIN TRY  
  BEGIN TRANSACTION   
  -- START UPDATING XN TABLES   
  SET @NSTEP=120
  IF @NUPDATEMODE NOT IN (1,2,3,4)
  BEGIN
	SET @CERRMSG='INVALID TRANSACTION MODE.CASH LIFT CAN ONLY BE ADDED, MODIFIED OR CANCELLED.'
	GOTO END_PROC
  END

  IF ISNULL(@CDEPTID,'')='' AND @NUPDATEMODE NOT IN (4)
	 BEGIN
		SET @CERRMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
		GOTO END_PROC    
	 END
	
	SET @NSTEP=130
	--CHECK IF THE SHIFT IS OPEN, IF IT IS OPEN THEN ONLY LIFTING IS ALLOWED ELSE NOT ALLOWED.....
	SET @CCMD=N'SELECT @CSHIFTID=SHIFT_ID,@CUSER_CODE=USER_CODE FROM '+(CASE WHEN @NUPDATEMODE=1 THEN @CTEMPMASTERTABLE  ELSE @CMASTERTABLENAME END)
				+(CASE WHEN @NUPDATEMODE=1 THEN ' WHERE SP_ID='''+@NSPID+''' ' ELSE ' WHERE MEMO_ID='''+@CMEMOID+'''' END)
	EXEC SP_EXECUTESQL @CCMD,N'@CSHIFTID VARCHAR(20) OUTPUT,@CUSER_CODE CHAR(10) OUTPUT',@CSHIFTID OUTPUT,@CUSER_CODE  OUTPUT
    
    DECLARE @CVALUE INT,@CEDITUSERCODE VARCHAR(10)
    SET @CVALUE=0


	if @NUPDATEMODE=2
	  SELECT @CEDITUSERCODE=EDT_USER_CODE FROM TLF_TILL_LIFTS_UPLOAD WHERE SP_ID=@NSPID

    
    SELECT TOP 1 @CVALUE=VALUE  
	FROM CONFIG WHERE CONFIG_OPTION='CONSIDER_TILL_PHY_CBS_AS_OPS' 
	
	
	
	IF ISNULL(@CVALUE,0)=1
	BEGIN
    SELECT TOP 1 @CVALUE=VALUE FROM USER_ROLE_DET A
	JOIN USERS B ON A.ROLE_ID=B.ROLE_ID 
	WHERE USER_CODE=CASE WHEN @NUPDATEMODE=2 THEN @CEDITUSERCODE ELSE  @CUSER_CODE END 
	AND FORM_NAME='FRMSALE' 
	AND FORM_OPTION='ALLOW_TO_MODIFY_MEMO_OF_CLOSE_TILLS'
	END
	
	SELECT TOP 1 @CVALUE=VALUE FROM USER_ROLE_DET A
	JOIN USERS B ON A.ROLE_ID=B.ROLE_ID 
	WHERE USER_CODE=CASE WHEN @NUPDATEMODE=2 THEN @CEDITUSERCODE ELSE  @CUSER_CODE END 
	AND FORM_NAME='FRMSALE' 
	AND FORM_OPTION='ALLOW_TO_MODIFY_MEMO_OF_CLOSE_TILLS'
	
	SET @NSTEP=140
	IF ISNULL(@CVALUE,0)=0
	BEGIN
	IF NOT EXISTS(SELECT TOP 1 'U' FROM TILL_SHIFT_MST WHERE SHIFT_ID=@CSHIFTID AND ISNULL(CLOSE_DATE,'')='') 
				  AND @NUPDATEMODE<>4
	BEGIN
		SET @CERRMSG='USER DOES ALLOW TO MODIFY MEMO OF CLOSE TILL.CANNOT PROCEED.'
		GOTO END_PROC
	END 
   END
	SET @NSTEP=145
	IF @NUPDATEMODE=4
	BEGIN
		/*
			FOR UPDATE MODE 4, JUST UPDATE THE RECEIPT_DT AND UPDATE THE LOCKER AMOUNT FOR THIS LOCATION.
		*/
		IF ISNULL(@DRECEIPTDT,'')=''
		BEGIN
			SET @CERRMSG='INVALID RECEIPT DATE.CANNOT PROCEED.';
			GOTO END_PROC
		END
		
		IF ISNULL(@CMEMOID,'')=''
		BEGIN
			SET @CERRMSG='INVALID MEMOID.CANNOT PROCEED.';
			GOTO END_PROC
		END
		
		UPDATE TILL_LIFTS SET RECEIPTDT=@DRECEIPTDT WHERE MEMO_ID=@CMEMOID;
		
		PRINT 'ADDING THE LIFT AMOUNT TO LOCKER'
		--UPDATE THE LOCKER AMOUNT			
	    EXEC SP3S_UPDATE_LOCKER
						 @CXN_TYPE='LFT'
						,@CXN_ID=@CMEMOID
						,@NMODE=1
						,@CERRMSGOUT=@CERRMSG OUTPUT 
						,@CLOCID=@CDEPTID
			
		IF ISNULL(@CERRMSG,'')<>''
			GOTO END_PROC		
		
		SET @CKEYFIELDVAL1=@CMEMOID;
		GOTO END_PROC
	END
  
  SET @NSTEP=150
  IF @NUPDATEMODE=3
  BEGIN
		SET @NSTEP=160
		SET @CKEYFIELDVAL1=@CMEMOID
  
		SET @NSTEP=170
		IF NOT EXISTS(SELECT TOP 1 'U' FROM TILL_LIFTS WHERE MEMO_ID=@CKEYFIELDVAL1)
		BEGIN
			SET @CERRMSG='PLEASE PROVIDE A VALID MEMO_ID FOR CANCELLATION.'
			GOTO END_PROC
		END
		
		SET @NSTEP=180
		EXEC SP3S_UPDATESHIFT_AMOUNT
					 @CXN_TYPE='LFT'
					,@CXN_ID=@CKEYFIELDVAL1
					,@NMODE=2
					,@NUPDATEMODE=@NUPDATEMODE
					,@NSPID=@NSPID
					,@CERRMSGOUT=@CERRMSG OUTPUT
		
		IF ISNULL(@CERRMSG,'')<>''
			GOTO END_PROC
		
		/*
			GETTING THE TRANSFER MODE FOR THE LIFT TRANSACTION.
			IF THE TRANSFER MODE IS 1, THEN BANK TRANSFER SHOULD BE CANCELLED.
			IF THE TRANSFER MODE IS 2, THEN PETTY CASH EXPENSE SHOULD BE CANCELLED.
			IF THE TRANSFER MODE IS 3, THEN THE LOCKER AMOUNT SHOULD BE REVERTED.
		*/
		SET @NSTEP=190
		SELECT TOP 1 @NTRANSFERMODE=TRANSFERMODE FROM TILL_LIFTS WHERE MEMO_ID=@CKEYFIELDVAL1
		IF @NTRANSFERMODE=1
		BEGIN
			SET @NSTEP=200
			PRINT 'CANCELLING THE BANK TRANSFER FOR THIS LIFT.'
			SELECT TOP 1 @CBANKTRANSFERID=MEMO_ID 
			FROM TILL_BANK_TRANSFER WHERE REFLIFTID=@CKEYFIELDVAL1
			
			SET @NSTEP=210
			EXEC SAVETRAN_BANK_TRANSFER
					 @NUPDATEMODE=@NUPDATEMODE
					,@NSPID=0
					,@CMEMONOPREFIX=''
					,@CFINYEAR=''
					,@CMEMOID=@CBANKTRANSFERID
					,@BCALLEDFROMSAVETRAN_LIFT=1
			
			SET @NSTEP=220		
			IF EXISTS(SELECT TOP 1 'U' FROM #PROCOUTPUT WHERE ISNULL(ERRMSG,'')<>'')
			BEGIN
				SET @CERRMSG=(SELECT TOP 1 ERRMSG FROM #PROCOUTPUT WHERE ISNULL(ERRMSG,'')<>'')
				GOTO END_PROC
			END			
						
		END
		ELSE IF @NTRANSFERMODE=2
		BEGIN
			SET @NSTEP=230
			PRINT 'CANCELLING THE PETTY CASH IN AGAINST THIS LIFT.'
			
			SET @NSTEP=240
			UPDATE PCI_MST SET CANCELLED=1
			WHERE REFLIFTID=@CKEYFIELDVAL1
		
		END
		ELSE IF @NTRANSFERMODE=3
		BEGIN
			SET @NSTEP=270
			PRINT 'REVERTING THE LOCKER AMOUNT AGAINST THIS LIFT.'
			/*
				LOCKER AMOUNT SHOULD BE UPDATED ONLY WHEN THE CASH IS BEING LIFTED FOR LOCKER MODE.
			*/
			SET @NSTEP=280
			EXEC SP3S_UPDATE_LOCKER
						 @CXN_TYPE='LFT'
						,@CXN_ID=@CKEYFIELDVAL1
						,@NMODE=2
						,@CERRMSGOUT=@CERRMSG OUTPUT 
			
			SET @NSTEP=290
			IF ISNULL(@CERRMSG,'')<>''
				GOTO END_PROC
		END
		ELSE
		BEGIN
			SET @NSTEP=300
			SET @CERRMSG='INVALID LIFT MODE.CANNOT PROCEED.'
			GOTO END_PROC
		END		
		
		SET @NSTEP=310
		UPDATE TILL_LIFTS SET CANCELLED=1,LAST_UPDATE=GETDATE() WHERE MEMO_ID=@CKEYFIELDVAL1
		
		GOTO END_PROC
  END
    
  IF @NUPDATEMODE = 1 -- ADDMODE   
  BEGIN   
   SET @NSTEP = 320  -- GENERATING NEW KEY  
   
   -- GENERATING NEW JOB ORDER NO    
   SET @NSAVETRANLOOP=0  
   WHILE @NSAVETRANLOOP=0  
   BEGIN  
	SET @NSTEP=330
    EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,  
					@CFINYEAR,0,@CMEMONOVAL OUTPUT     
      
    PRINT @CMEMONOVAL  
    SET @NSTEP=340
    SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+'   
							WHERE '+@CMEMONO+'='''+@CMEMONOVAL+'''   
							AND FIN_YEAR = '''+@CFINYEAR+''' )  
				SET @NLOOPOUTPUT=0  
			   ELSE  
				SET @NLOOPOUTPUT=1'  
    PRINT @CCMD  
    EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT  
   END  
  
   SET @NSTEP=350	
   IF @CMEMONOVAL IS NULL OR @CMEMONOVAL LIKE '%LATER%'
   BEGIN  
      SET @CERRMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'   
      GOTO END_PROC      
   END  
  
   SET @NSTEP = 360    
   
   SET @CKEYFIELDVAL1 = @CLOCID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
   
   
   IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'    
   BEGIN  
      SET @CERRMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
      GOTO END_PROC  
   END  
  
   SET @NSTEP = 370  -- UPDATING NEW ID INTO TEMP TABLES  
  
   SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' 
						 +@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+@NSPID+''' '  
   PRINT @CCMD  
   EXEC SP_EXECUTESQL @CCMD  
    
  END     -- END OF ADDMODE  
  ELSE IF @NUPDATEMODE=2
  BEGIN
	SET @CKEYFIELDVAL1=@CMEMOID
	/*
		IF THE LIFT MODE IS AGAINST LOCKER, REVERT THE PREVIOUSLY UPDATED AMOUNT SO THAT NEW AMOUNT CAN BE 
		ADDED.
	*/	
		SET @CCMD=N'UPDATE A SET RECEIPTDT=B.RECEIPTDT
					FROM '+@CTEMPMASTERTABLE+' A
					JOIN TILL_LIFTS B ON A.MEMO_ID=B.MEMO_ID 
					 WHERE SP_ID='''+@NSPID+'''  '
		PRINT @CCMD  
		EXEC SP_EXECUTESQL @CCMD  
	   
		SELECT @NTRANSFERMODE=TRANSFERMODE FROM TILL_LIFTS WHERE MEMO_ID=@CKEYFIELDVAL1
		   
	    IF @NTRANSFERMODE=3
	    BEGIN
		   EXEC SP3S_UPDATE_LOCKER
						 @CXN_TYPE='LFT'
						,@CXN_ID=@CKEYFIELDVAL1
						,@NMODE=2
						,@CERRMSGOUT=@CERRMSG OUTPUT 
			
			IF ISNULL(@CERRMSG,'')<>''
				GOTO END_PROC
	    END		
  END
  
  SET @NSTEP = 400
  -- RECHECKING IF ID IS STILL LATER  
  IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
  BEGIN  
	  SET @CERRMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
	  GOTO END_PROC  
  END
  
  SET @NSTEP = 410  -- UPDATING MASTER TABLE  
  	 DECLARE @CWHERECLAUSE VARCHAR(1000)
      SET @CWHERECLAUSE = ' SP_ID='''+LTRIM(RTRIM((@NSPID)))+''''

  EXEC UPDATEMASTERXN   
      @CSOURCEDB = @CTEMPDBNAME  
    , @CSOURCETABLE = @CTEMPMASTERTABLE  
    , @CDESTDB  = ''  
    , @CDESTTABLE = @CMASTERTABLENAME  
    , @CKEYFIELD1 = @CKEYFIELD1  
    , @BALWAYSUPDATE = 1
	,@CFILTERCONDITION=@CWHERECLAUSE
    -- , @LUPDATEXNS = 1  
 
    
   IF @NUPDATEMODE<>3
	BEGIN
	DECLARE @NCOMP_OP NUMERIC(18,2),@NTILLAMT NUMERIC(18,2),@CRECEIPT NUMERIC(18,2)
	        ,@LIFT_AMOUNT NUMERIC(18,2)
    
	  
        SELECT TOP 1 @NTILLAMT=COMP_OP
		FROM TILL_SHIFT_MST WHERE USER_CODE=@CUSER_CODE AND ISNULL(CLOSE_DATE,'')=''
		AND location_code = @CDEPTID
	
	
		SELECT @CRECEIPT=DBO.FN_RECEIPT_AMT(@CSHIFTID)

		SELECT @LIFT_AMOUNT=SUM(LIFT_AMOUNT) FROM TILL_LIFTS WHERE SHIFT_ID =@CSHIFTID AND CANCELLED =0
		SET @NCOMP_OP=ISNULL(@NCOMP_OP,0)

	
	--select @NTILLAMT,@LIFT_AMOUNT,@CRECEIPT
	
	SET @NSTEP = 420
	IF @LIFT_AMOUNT>ISNULL(@NTILLAMT,0)+ISNULL(@CRECEIPT,0)
	BEGIN
	     SET @CERRMSG = 'LIFT AMOUNT SHOULD NOT BE GRETATER THAN TILL AMOUNT'  
	     GOTO END_PROC  
	END

	END
	
   SET @NSTEP = 420		
   --UPDATE THE SHIFT AMOUNT
   EXEC SP3S_UPDATESHIFT_AMOUNT
					 @CXN_TYPE='LFT'
					,@CXN_ID=@CKEYFIELDVAL1
					,@NMODE=1
					,@NUPDATEMODE=@NUPDATEMODE
					,@NSPID=@NSPID
					,@CERRMSGOUT=@CERRMSG OUTPUT 
					
  IF ISNULL(@CERRMSG,'')<>''
		GOTO END_PROC			

  /*
			GETTING THE TRANSFER MODE FOR THE LIFT TRANSACTION.
			IF THE TRANSFER MODE IS 1, THEN BANK TRANSFER SHOULD BE ADDED.
			IF THE TRANSFER MODE IS 2, THEN PETTY CASH EXPENSE SHOULD BE ADDED.
			IF THE TRANSFER MODE IS 3, THEN THE LOCKER AMOUNT SHOULD BE ADDED.
  */	
  
  SET @NSTEP = 430
  SELECT TOP 1 @NTRANSFERMODE=TRANSFERMODE FROM TILL_LIFTS WHERE MEMO_ID=@CKEYFIELDVAL1
  
  IF @NUPDATEMODE=1
  BEGIN
	  IF @NTRANSFERMODE=1
	  BEGIN
			SET @NSTEP = 440
			PRINT 'CREATING A BANK TRANSFER ENTRY'

			SET @CTEMP_TILL_BANK_TRANSFER='BTF_TILL_BANK_TRANSFER_UPLOAD'
			
			SET @NSTEP = 450
			
			--SET @CCMD=N'IF OBJECT_ID('''+@CTEMP_TILL_BANK_TRANSFER+''',''U'') IS NOT NULL
			--					DROP TABLE '+@CTEMP_TILL_BANK_TRANSFER
			--PRINT @CCMD
			--EXEC SP_EXECUTESQL @CCMD
			
			--SET @NSTEP = 460
			--SET @CCMD='SELECT * INTO '+@CTEMP_TILL_BANK_TRANSFER+' FROM TILL_BANK_TRANSFER WHERE 1=2'
			--PRINT @CCMD
			--EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 470
			SET @CCMD=N'INSERT '+@CTEMP_TILL_BANK_TRANSFER+'	( MEMO_ID, MEMO_NO, MEMO_DT, FIN_YEAR, USER_CODE, AC_CODE, AMOUNT
													, REMARKS, CANCELLED, LAST_UPDATE, REFLIFTID,SP_ID ,location_Code)  
						SELECT 	''LATER'' AS MEMO_ID,''LATER'' AS MEMO_NO, MEMO_DT, FIN_YEAR, USER_CODE, AC_CODE
								, LIFT_AMOUNT, REMARKS+''.REF NO(''+MEMO_NO+'')'', CANCELLED, LAST_UPDATE
								,'''+@CKEYFIELDVAL1+''' AS REFLIFTID ,'''+@NSPID +''',location_Code
						FROM TILL_LIFTS
						WHERE MEMO_ID='''+@CKEYFIELDVAL1+''''			
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 480
			EXEC SAVETRAN_BANK_TRANSFER
					 @NUPDATEMODE=@NUPDATEMODE
					,@NSPID=@NSPID
					,@CMEMONOPREFIX=@CMEMONOPREFIX
					,@CFINYEAR=@CFINYEAR
					,@CMEMOID='LATER'
					,@BCALLEDFROMSAVETRAN_LIFT=1  
			
			SET @NSTEP = 490
			IF EXISTS(SELECT TOP 1 'U' FROM #PROCOUTPUT WHERE ISNULL(ERRMSG,'')<>'')
			BEGIN
				SET @CERRMSG=(SELECT TOP 1 ERRMSG FROM #PROCOUTPUT WHERE ISNULL(ERRMSG,'')<>'')
				GOTO END_PROC
			END	
	  END
	  ELSE IF @NTRANSFERMODE=2
	  BEGIN
			SET @NSTEP = 500
			PRINT 'CREATING A PETTY CASH CREDIT ENTRY'
			DECLARE @CPETTYCASHID VARCHAR(25),@CPETTYCASHNO VARCHAR(15),@CPETTYCASHPREFIX VARCHAR(5)
			
			SET @CPETTYCASHPREFIX=@CDEPTID+@CDEPTID
			
			--GENERATING NEW MEMO_ID FOR PCI_MST
			GENPETTYKEY:
			EXEC GETNEXTKEY 
					 @CTABLENAME='PCI_MST'
					,@CCOLNAME='MEMO_NO'
					,@NWIDTH=10
					,@CPREFIX=@CPETTYCASHPREFIX
					,@NLZEROS=1
					,@CFINYEAR=@CFINYEAR
					,@NROWCOUNT=0
					,@CNEWKEYVAL=@CPETTYCASHNO OUTPUT
			
			IF ISNULL(@CPETTYCASHNO,'')=''
			BEGIN
				SET @CERRMSG='ERROR GENERATING PETTY CASH IN MEMO.CANNOT PROCEED.'
				GOTO END_PROC
			END	
			
			IF EXISTS(SELECT TOP 1 'U' FROM PCI_MST WHERE FIN_YEAR=@CFINYEAR AND MEMO_NO=@CPETTYCASHNO)
				GOTO GENPETTYKEY
			 
			SET @CPETTYCASHID=@CDEPTID+RIGHT(@CFINYEAR,2)+REPLICATE(0,5)+@CPETTYCASHNO
			
		

			SET @NSTEP = 560
			INSERT PCI_MST	( MEMO_ID, MEMO_NO, MEMO_DT, AMOUNT, FIN_YEAR, RECEIPT_DT, RECEIVED_BY
							, LAST_UPDATE, USER_CODE, REMARKS, REFLIFTID, SHIFT_ID, CANCELLED,location_Code ,source_location_code  )  
			SELECT 	@CPETTYCASHID AS MEMO_ID,@CPETTYCASHNO AS MEMO_NO, MEMO_DT, LIFT_AMOUNT, FIN_YEAR
				  ,'' AS RECEIPT_DT,'' AS RECEIVED_BY,GETDATE() AS LAST_UPDATE, USER_CODE, REMARKS
				  ,MEMO_ID AS REFLIFTID,SHIFT_ID AS SHIFT_ID, CANCELLED ,location_Code ,location_Code source_location_code
			FROM DBO.TILL_LIFTS
			WHERE MEMO_ID=@CKEYFIELDVAL1
	  END
	  ELSE IF @NTRANSFERMODE=3
	  BEGIN
			SET @NSTEP = 570
			--NO OPERATION IS REQUIRED AS LIFT AMOUNT WILL BE UPDATED WHEN THE RECEIVED THRU GIT
			--PRINT 'ADDING THE LIFT AMOUNT TO LOCKER'
			----UPDATE THE LOCKER AMOUNT			
		 --   EXEC SP3S_UPDATE_LOCKER
			--				 @CXN_TYPE='LFT'
			--				,@CXN_ID=@CKEYFIELDVAL1
			--				,@NMODE=1
			--				,@CERRMSGOUT=@CERRMSG OUTPUT 
				
			--IF ISNULL(@CERRMSG,'')<>''
			--	GOTO END_PROC		
	  END
	  ELSE
	  BEGIN
			SET @NSTEP = 580
			SET @CERRMSG='INVALID LIFT MODE.CANNOT COMPLETE THE TRANSACTION.'
			GOTO END_PROC
	  END
   END
   ELSE IF @NUPDATEMODE=2
   BEGIN
		IF @NTRANSFERMODE=1
		BEGIN
			PRINT 'UPDATING A BANK TRANSFER ENTRY'
			UPDATE TILL_BANK_TRANSFER
				SET AMOUNT=(SELECT LIFT_AMOUNT FROM TILL_LIFTS WHERE MEMO_ID=@CKEYFIELDVAL1)
				 WHERE REFLIFTID=@CKEYFIELDVAL1
		END
		ELSE IF @NTRANSFERMODE=2
		BEGIN
			PRINT 'UPDATING A PETTY CASH CREDIT ENTRY'
			UPDATE PCI_MST
				SET AMOUNT=(SELECT LIFT_AMOUNT FROM TILL_LIFTS WHERE MEMO_ID=@CKEYFIELDVAL1)
				 WHERE REFLIFTID=@CKEYFIELDVAL1 
		END
		ELSE IF @NTRANSFERMODE=3
		BEGIN
			EXEC SP3S_UPDATE_LOCKER
						 @CXN_TYPE='LFT'
						,@CXN_ID=@CKEYFIELDVAL1
						,@NMODE=1
						,@CERRMSGOUT=@CERRMSG OUTPUT 
			
			IF ISNULL(@CERRMSG,'')<>''
				GOTO END_PROC
		END		
   END
   
 END TRY  
 BEGIN CATCH  
    SET @CERRMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
 END CATCH 
   
END_PROC:  

	INSERT INTO @OUTPUT(MEMO_ID,ERRMSG)
	SELECT @CKEYFIELDVAL1,ISNULL(@CERRMSG,'') 
  
IF @@TRANCOUNT>0  
BEGIN  
  IF ISNULL(@CERRMSG,'')='' 
  BEGIN
        UPDATE TILL_LIFTS SET HO_SYNCH_LAST_UPDATE=''  WHERE MEMO_ID=@CKEYFIELDVAL1 
		commit TRANSACTION 
  END
  ELSE  
		ROLLBACK  
END  

DELETE a FROM TLF_TILL_LIFTS_UPLOAD A (NOLOCK) WHERE SP_ID=@NSPID 
				
SELECT * FROM @OUTPUT
END        
---------- END OF PROCEDURE SAVETRAN_LIFTS
