CREATE PROCEDURE SPOLAP_SEND_MIRRORDATA
@CXNTYPE VARCHAR(20)='',
@CREQXNID VARCHAR(50),
@BACKNOWLEDGE BIT=0
AS
BEGIN

	DECLARE @TXNSSENDINFO TABLE (ORG_TABLENAME VARCHAR(500),TMP_TABLENAME VARCHAR(500),XN_ID VARCHAR(100))  	
		
	DECLARE @TFINALXNSSENDINFO TABLE (XN_TYPE VARCHAR(10),ERRMSG VARCHAR(1000),ORG_TABLENAME VARCHAR(100),TMP_TABLENAME VARCHAR(100),XN_ID VARCHAR(100))
	
	DECLARE @CXN_TYPE VARCHAR(20),@CPROC_NAME VARCHAR(200),@CERRMSG VARCHAR(1000),@NSEND_ORD NUMERIC(4)
		   ,@BEXISTS BIT,@DTSQL NVARCHAR(MAX),@CSTEP VARCHAR(5),@NMAX_ORD NUMERIC(4)
		   ,@CARCT VARCHAR(20),@CCURLOCID VARCHAR(5),@CHOLOCID VARCHAR(5),@CACKNOWLEDGE VARCHAR(2),@BSENDOFFLINE BIT
		   
	DECLARE @XNTYPE VARCHAR(20),@MEMO_ID VARCHAR(100),@CTEMPTABLELIST VARCHAR(100),@CTABLE VARCHAR(100),@RECORDCOUNT INT	   
	   
BEGIN TRY	
	SET @CSTEP=00
	
	SET @BSENDOFFLINE=0
	
	SET @CACKNOWLEDGE=(CASE WHEN @BACKNOWLEDGE=1 THEN '1' ELSE '0' END)
	
	SELECT TOP 1 @CCURLOCID = [VALUE] FROM CONFIG (NOLOCK) WHERE  CONFIG_OPTION='LOCATION_ID'
	SELECT TOP 1 @CHOLOCID = [VALUE] FROM CONFIG (NOLOCK) WHERE  CONFIG_OPTION='HO_LOCATION_ID'
	
	SET @CSTEP = 15
	IF @CCURLOCID<>@CHOLOCID
	BEGIN
		SET @CERRMSG='OLAP XNS SENDING VIA MIRRORSERVICE CAN BE DONE FROM HEAD OFFICE....'
		GOTO EXIT_PROC
	END 
	
		
	SET @CSTEP=20
	
	SELECT TOP 1 @CCURLOCID=VALUE FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID'	
	
	SET @CSTEP=30
	
	
	SET @CPROC_NAME='SPOLAP_SEND_MIRROR_'+LTRIM(RTRIM(@CXNTYPE))+'_DATA'

	SET @CSTEP=40	
	PRINT @CPROC_NAME+':'+@CXNTYPE
	
	
	
	SET @CSTEP=50
	IF OBJECT_ID(@CPROC_NAME,'P') IS NOT NULL
	BEGIN
		PRINT 'PROC EXISTS FOR SEND..'+@CXNTYPE
		SET @CSTEP=60
		
		              		
		SET @DTSQL='EXEC '+@CPROC_NAME+' '''+@CREQXNID+''','+@CACKNOWLEDGE+',@CERRMSG OUTPUT'
								
		PRINT @DTSQL
		SET @CSTEP=72
		
		
		
			EXEC SP_EXECUTESQL @DTSQL,N'@CERRMSG VARCHAR(1000) OUTPUT',@CERRMSG OUTPUT						
			
		SET @CSTEP=75
		
	END	
	else
		print @CPROC_NAME+' not exists'

	SET @CSTEP=90
	IF @BACKNOWLEDGE=1
		GOTO EXIT_PROC
		
	
END TRY

BEGIN CATCH
	SET @CERRMSG='P:SPOLAP_SEND_MIRRORDATA, STEP: '+@CSTEP+',MESSAGE:'+ERROR_MESSAGE()
	
	PRINT 'CATCH IN SPOLAP_SEND_MIRRORDATA'+@CERRMSG
END CATCH	 

EXIT_PROC:
	PRINT 'NO PENDING DATA'
	
	IF ISNULL(@CERRMSG,'')<>'' 
		SELECT ISNULL(@CERRMSG,'') AS ERRMSG

END