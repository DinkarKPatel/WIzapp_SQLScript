CREATE  PROCEDURE SP_PROCESS_FLATDISC_INFO
(
	@PSLS_MEMO_NO CHAR(7) 
	
)
--WITH ENCRYPTION
AS
BEGIN
	DECLARE   @CSLS_TITLE VARCHAR(50) 
			, @CD_FILTER VARCHAR(4000)
			, @NSQLQUERY NVARCHAR(4000)
			, @CERRMSG VARCHAR(500)
			, @NSTEP NUMERIC(3,0)
			, @CPRODUCT_CODE VARCHAR(50)
			, @NDISC_PRCNT NUMERIC(6,2)
			, @NNET_PRICE NUMERIC(10,2)
			, @NDISC_AMT NUMERIC(10,2),@CSLSROWID VARCHAR(100)
			
	DECLARE @TERRMSG TABLE(ERRORMESSAGE VARCHAR(2000),SLS_MEMO_NO VARCHAR(100))
	BEGIN TRY
		SET @CERRMSG = ''
		--CHECK IF MEMO_NO IS RECEIVED
		IF ISNULL(@PSLS_MEMO_NO,'')<>''
			BEGIN 
				PRINT 'MEMO NO. - ' + @PSLS_MEMO_NO 
				SET @NSTEP = 1
				BEGIN TRANSACTION
				PRINT 'TRANSACTION STARTED.'
				PRINT 'DELETING OLD ENTRIES IN TABLE - SLSSET_BCDISC' 
				--TRUNCATE TABLE IF NOT EMPTY
				IF EXISTS(SELECT 1 FROM SLSSET_BCDISC)
					BEGIN
					TRUNCATE TABLE SLSSET_BCDISC
					PRINT 'TABLE TRUNCATED.'
					--SELECT * FROM SLSSET_BCDISC
					END
				SET @NSTEP = 2
				--IF CURSOR IS OPEN, CLOSE AND DEALLOCATE
				IF CURSOR_STATUS('GLOBAL','CUR_SLS_BARCODES') IN (0,1)
					 BEGIN
						CLOSE CUR_SLS_BARCODES
						DEALLOCATE CUR_SLS_BARCODES
					 END
				--CURSOR TO SELECT SALES TITLE DEFINES IN DESCENDING ORDER FOR SCHEMES DEFINED ON PRODUCT CODES 	   
				DECLARE CUR_SLS_BARCODES CURSOR FOR SELECT SLS_TITLE														
													FROM SLSDET WHERE FILTER_MODE=2 AND SLS_MEMO_NO = @PSLS_MEMO_NO
													ORDER BY SLS_ORDER DESC
				OPEN CUR_SLS_BARCODES
				FETCH NEXT FROM CUR_SLS_BARCODES INTO @CSLS_TITLE
				WHILE @@FETCH_STATUS = 0
					BEGIN
						PRINT 'CALCULATING DISCOUNT ON BAR CODES....'
						--INSERT PRODUCT_CODES AND DISCOUNT DETAILS FOR PRODUCT_CODES THAT DONOT EXISTS IN THE TARGET TABLE
						INSERT SLSSET_BCDISC( PRODUCT_CODE, DISCOUNT_PERCENTAGE, NET_PRICE, DISCOUNT_AMOUNT )
							SELECT    SLSBC.PRODUCT_CODE
									, SLSBC.DISCOUNT_PERCENTAGE
									, SLSBC.NET_PRICE
									, SLSBC.DISCOUNT_AMOUNT
							FROM SLSBC 
							JOIN SLSDET ON SLSBC.SLS_MEMO_NO = SLSDET.SLS_MEMO_NO
							LEFT JOIN SLSSET_BCDISC SBD ON SLSBC.PRODUCT_CODE = SBD.PRODUCT_CODE
							WHERE SBD.PRODUCT_CODE IS NULL
							AND SLSDET.SLS_MEMO_NO = @PSLS_MEMO_NO
							AND SLSDET.SLS_TITLE = @CSLS_TITLE
							AND SLSBC.ROW_ID=(SELECT TOP 1 ROW_ID FROM SLSBC A WHERE A.PRODUCT_CODE=SLSBC.PRODUCT_CODE AND A.SLS_MEMO_NO=@PSLS_MEMO_NO)							
					FETCH NEXT FROM CUR_SLS_BARCODES INTO @CSLS_TITLE
					END
			    --SELECT * FROM SLSSET_BCDISC 
			    CLOSE CUR_SLS_BARCODES
			    DEALLOCATE CUR_SLS_BARCODES			
			    
			    SET @NSTEP = 3
				--IF CURSOR IS OPEN, CLOSE AND DEALLOCATE
				IF CURSOR_STATUS('GLOBAL','CUR_SLS_FILTERS') IN (0,1)
					 BEGIN
						CLOSE CUR_SLS_FILTERS
						DEALLOCATE CUR_SLS_FILTERS
					 END 
				--CURSOR TO HOLD THE FILTER CRITERIA AND DISCOUNT DETAILS FOR DISCOUNT SCHEME BASED ON FILTER
				DECLARE CUR_SLS_FILTERS CURSOR FOR SELECT D_FILTER 
														, DISCOUNT_PERCENTAGE
														, NET_PRICE
														, DISCOUNT_AMOUNT
														, ROW_ID
											 FROM SLSDET WHERE FILTER_MODE=1 AND SLS_MEMO_NO = @PSLS_MEMO_NO
											 AND D_FILTER<>''
											 ORDER BY SLS_ORDER  
				OPEN CUR_SLS_FILTERS
				FETCH NEXT FROM CUR_SLS_FILTERS INTO @CD_FILTER, @NDISC_PRCNT, @NNET_PRICE, @NDISC_AMT,@CSLSROWID
				WHILE @@FETCH_STATUS=0
				BEGIN					
					PRINT 'CALCULATING DISCOUNT ON FILTERS....'	+@CD_FILTER+STR(@NDISC_AMT,10,2)+'0-'+@CSLSROWID	
					--PRINT STR(@NDISC_PRCNT,6,2) +' , ' + STR(@NNET_PRICE,6,2)  + ' , ' + STR(@NDISC_AMT,6,2)
					--INSERT PRODUCT_CODES AND DISCOUNT DETAILS FOR PRODUCT_CODES THAT DONOT EXISTS IN THE TARGET TABLE
					SET @NSQLQUERY = N'INSERT SLSSET_BCDISC
									   ( PRODUCT_CODE, DISCOUNT_PERCENTAGE, NET_PRICE, DISCOUNT_AMOUNT)
						 SELECT  SKU.PRODUCT_CODE ,'
						   + STR(@NDISC_PRCNT,6,2) + ' , '
						   + STR(@NNET_PRICE,6,2)  + ' , '
						   + STR(@NDISC_AMT,6,2)								  	
						   + ' FROM SKU 
							JOIN ARTICLE ON SKU.ARTICLE_CODE = ARTICLE.ARTICLE_CODE
							JOIN SECTIOND ON ARTICLE.SUB_SECTION_CODE = SECTIOND.SUB_SECTION_CODE
							JOIN SECTIONM ON SECTIOND.SECTION_CODE = SECTIONM.SECTION_CODE
							JOIN PARA1 ON SKU.PARA1_CODE = PARA1.PARA1_CODE
							JOIN PARA2 ON SKU.PARA2_CODE = PARA2.PARA2_CODE
							JOIN PARA3 ON SKU.PARA3_CODE = PARA3.PARA3_CODE
							JOIN PARA4 ON SKU.PARA4_CODE = PARA4.PARA4_CODE
							JOIN PARA5 ON SKU.PARA5_CODE = PARA5.PARA5_CODE
							JOIN PARA6 ON SKU.PARA6_CODE = PARA6.PARA6_CODE
							LEFT JOIN SLSSET_BCDISC SBD ON SKU.PRODUCT_CODE = SBD.PRODUCT_CODE  
							LEFT OUTER JOIN ARTICLE_FIX_ATTR ATTR  (NOLOCK) ON ARTICLE.ARTICLE_CODE = ATTR.ARTICLE_CODE 
							LEFT OUTER JOIN ATTR1_MST AT1 (NOLOCK) ON AT1.ATTR1_KEY_CODE=ATTR.ATTR1_KEY_CODE
							LEFT OUTER JOIN ATTR2_MST AT2 (NOLOCK) ON AT2.ATTR2_KEY_CODE=ATTR.ATTR2_KEY_CODE
							LEFT OUTER JOIN ATTR3_MST AT3 (NOLOCK) ON AT3.ATTR3_KEY_CODE=ATTR.ATTR3_KEY_CODE
							LEFT OUTER JOIN ATTR4_MST AT4 (NOLOCK) ON AT4.ATTR4_KEY_CODE=ATTR.ATTR4_KEY_CODE
							LEFT OUTER JOIN ATTR5_MST AT5 (NOLOCK) ON AT5.ATTR5_KEY_CODE=ATTR.ATTR5_KEY_CODE
							LEFT OUTER JOIN ATTR6_MST AT6 (NOLOCK) ON AT6.ATTR6_KEY_CODE=ATTR.ATTR6_KEY_CODE
							LEFT OUTER JOIN ATTR7_MST AT7 (NOLOCK) ON AT7.ATTR7_KEY_CODE=ATTR.ATTR7_KEY_CODE
							LEFT OUTER JOIN ATTR8_MST AT8 (NOLOCK) ON AT8.ATTR8_KEY_CODE=ATTR.ATTR8_KEY_CODE
							LEFT OUTER JOIN ATTR9_MST AT9 (NOLOCK) ON AT9.ATTR9_KEY_CODE=ATTR.ATTR9_KEY_CODE
							LEFT OUTER JOIN ATTR10_MST AT10 (NOLOCK) ON AT10.ATTR10_KEY_CODE=ATTR.ATTR10_KEY_CODE
							LEFT OUTER JOIN ATTR11_MST AT11 (NOLOCK) ON AT11.ATTR11_KEY_CODE=ATTR.ATTR11_KEY_CODE
							LEFT OUTER JOIN ATTR12_MST AT12 (NOLOCK) ON AT12.ATTR12_KEY_CODE=ATTR.ATTR12_KEY_CODE
							LEFT OUTER JOIN ATTR13_MST AT13 (NOLOCK) ON AT13.ATTR13_KEY_CODE=ATTR.ATTR13_KEY_CODE
							LEFT OUTER JOIN ATTR14_MST AT14 (NOLOCK) ON AT14.ATTR14_KEY_CODE=ATTR.ATTR14_KEY_CODE
							LEFT OUTER JOIN ATTR15_MST AT15 (NOLOCK) ON AT15.ATTR15_KEY_CODE=ATTR.ATTR15_KEY_CODE
							LEFT OUTER JOIN ATTR16_MST AT16 (NOLOCK) ON AT16.ATTR16_KEY_CODE=ATTR.ATTR16_KEY_CODE
							LEFT OUTER JOIN ATTR17_MST AT17 (NOLOCK) ON AT17.ATTR17_KEY_CODE=ATTR.ATTR17_KEY_CODE
							LEFT OUTER JOIN ATTR18_MST AT18 (NOLOCK) ON AT18.ATTR18_KEY_CODE=ATTR.ATTR18_KEY_CODE
							LEFT OUTER JOIN ATTR19_MST AT19 (NOLOCK) ON AT19.ATTR19_KEY_CODE=ATTR.ATTR19_KEY_CODE
							LEFT OUTER JOIN ATTR20_MST AT20 (NOLOCK) ON AT20.ATTR20_KEY_CODE=ATTR.ATTR20_KEY_CODE
							LEFT OUTER JOIN ATTR21_MST AT21 (NOLOCK) ON AT21.ATTR21_KEY_CODE=ATTR.ATTR21_KEY_CODE
							LEFT OUTER JOIN ATTR22_MST AT22 (NOLOCK) ON AT22.ATTR22_KEY_CODE=ATTR.ATTR22_KEY_CODE
							LEFT OUTER JOIN ATTR23_MST AT23 (NOLOCK) ON AT23.ATTR23_KEY_CODE=ATTR.ATTR23_KEY_CODE
							LEFT OUTER JOIN ATTR24_MST AT24 (NOLOCK) ON AT24.ATTR24_KEY_CODE=ATTR.ATTR24_KEY_CODE
							LEFT OUTER JOIN ATTR25_MST AT25(NOLOCK) ON AT25.ATTR25_KEY_CODE=ATTR.ATTR25_KEY_CODE
							JOIN LMV01106 ON LMV01106.AC_CODE=SKU.AC_CODE
							WHERE SBD.PRODUCT_CODE IS NULL AND ' + @CD_FILTER 
					PRINT @NSQLQUERY
					EXEC SP_EXECUTESQL @NSQLQUERY										
				FETCH NEXT FROM CUR_SLS_FILTERS INTO @CD_FILTER, @NDISC_PRCNT, @NNET_PRICE, @NDISC_AMT,@CSLSROWID
				END
				CLOSE CUR_SLS_FILTERS 
				DEALLOCATE CUR_SLS_FILTERS			
	END
	ELSE
		BEGIN
			SET @CERRMSG = 'NO MEMO NUMBER RECEIVED!' 
			GOTO END_PROC
		END	
	END TRY

	BEGIN CATCH
		SET @CERRMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
	END CATCH
	
END_PROC:
	IF @@TRANCOUNT>0
	BEGIN
		--IF ERROR VARIABLE IS NOT EMPTY, ROLLBACK TRANSACTION AND DISPLAY ERROR MESSAGE ELSE COMMIT TRANSACTION
		IF ISNULL(@CERRMSG,'')='' 
			BEGIN
				COMMIT TRANSACTION
				PRINT 'TRANSACTION COMMITED.'
				INSERT @TERRMSG(ERRORMESSAGE, SLS_MEMO_NO)
				VALUES ( 'DISCOUNT UPDATED.', ISNULL(@PSLS_MEMO_NO,'') )
				SELECT * FROM @TERRMSG
			END
		ELSE
			BEGIN
				ROLLBACK
				INSERT @TERRMSG(ERRORMESSAGE, SLS_MEMO_NO)
				VALUES ( ISNULL(@CERRMSG,''), ISNULL(@PSLS_MEMO_NO,'') )
				SELECT * FROM @TERRMSG
				PRINT 'TRANSACTION ROLLED BACK.'
			END
	END
END
