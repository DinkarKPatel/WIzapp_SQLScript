
--THIS PROCEDURE DROPS THE CHECK-CONSTRAINTS AND RESPECTIVE FUNCTIONS
--IN WHICH THESE FUNCTIONS ARE BEING REFERRED.
CREATE PROCEDURE SP_DROP_FN_CHECKCONSTRAINTS
--WITH ENCRYPTION
AS
BEGIN
	DECLARE @CTABLENAME VARCHAR(100), 
			@CCONSTRAINTNAME VARCHAR(100), 
			@CFUNCTIONNAME VARCHAR(100),
			@CCMD NVARCHAR(4000)

	DECLARE @OUTPUTC TABLE ( TABLENAME VARCHAR(100), CONSTRAINTNAME VARCHAR(100), FUNCTIONNAME VARCHAR(100) )

	INSERT @OUTPUTC ( TABLENAME, CONSTRAINTNAME, FUNCTIONNAME )
	SELECT B.NAME AS TABLENAME, D.NAME AS CONSTRAINTNAME, E.NAME AS FUNCTIONNAME
	FROM SYSCONSTRAINTS A
	JOIN SYSDEPENDS C ON A.CONSTID = C.ID
	JOIN SYSOBJECTS B ON A.ID = B.ID
	JOIN SYSOBJECTS D ON A.CONSTID = D.ID
	JOIN SYSOBJECTS E ON C.DEPID = E.ID
	WHERE D.TYPE = 'C'
	AND   E.TYPE = 'FN'

	PRINT 'DROPPING CHECK CONSTRAINTS'

	DECLARE CHK_CUR CURSOR FOR 
	SELECT DISTINCT TABLENAME, CONSTRAINTNAME 
	FROM @OUTPUTC

	OPEN CHK_CUR

	FETCH NEXT FROM CHK_CUR INTO @CTABLENAME, @CCONSTRAINTNAME
	WHILE @@FETCH_STATUS =0
	BEGIN

		PRINT 'DROPPING CONSTRAINT ' + @CCONSTRAINTNAME
		
		SET @CCMD = N'IF EXISTS ( SELECT NAME FROM SYSOBJECTS WHERE NAME = ''' + @CCONSTRAINTNAME + ''' )
					     ALTER TABLE [' + @CTABLENAME + '] DROP CONSTRAINT [' + @CCONSTRAINTNAME + ']'
		
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD
		
		FETCH NEXT FROM CHK_CUR INTO @CTABLENAME, @CCONSTRAINTNAME
	END
	CLOSE CHK_CUR
	DEALLOCATE CHK_CUR

	PRINT 'DROPPING FUNCTIONS FOR CHECK CONSTRAINTS'

	DECLARE FN_CUR CURSOR FOR 
	SELECT DISTINCT FUNCTIONNAME
	FROM @OUTPUTC

	OPEN FN_CUR

	FETCH NEXT FROM FN_CUR INTO @CFUNCTIONNAME
	WHILE @@FETCH_STATUS =0
	BEGIN

		PRINT 'DROPPING FUNCTION ' + @CFUNCTIONNAME
		
		SET @CCMD = N'IF EXISTS ( SELECT NAME FROM SYSOBJECTS WHERE NAME = ''' + @CFUNCTIONNAME + ''' )
						 DROP FUNCTION [' + @CFUNCTIONNAME + ']'
		
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD
		
		FETCH NEXT FROM FN_CUR INTO @CFUNCTIONNAME
	END
	CLOSE FN_CUR
	DEALLOCATE FN_CUR
END
--***************************************** END OF PROCEDURE SP_DROP_FN_CHECKCONSTRAINTS
