create PROCEDURE SAVETRAN_SDL  
(  
 @NUPDATEMODE  NUMERIC(1,0),  
 @NSPID    INT,  
 @CMEMONOPREFIX  VARCHAR(50),  
 @CFINYEAR   VARCHAR(10),   
 @CMACHINENAME  VARCHAR(100)='',  
 @CWINDOWUSERNAME VARCHAR(100)='', 
 @CWIZAPPUSERCODE VARCHAR(10)='0000000',  
 @CMEMOID   VARCHAR(40)=''  
 )  
-- WITH ENCRYPTION
AS  
BEGIN  
		--changes by Dinkar in location id varchar(4)..
     --USED TO DEFINE/IDENTIFY PROCESS STEPS
	DECLARE @NSTEP INT	 
	
BEGIN TRY  
	 -- @NUPDATEMODE: 1- NEW RETAIL SALE ADDED,   
	 --     2- NEXISTING RETAIL SALE EDITED,   
	 --     3- CURRENT RETAIL SALE CANCELLED	   
	 -- @CMEMOID:  MEMOID IS REQUIRED IF @NUPDATEMODE IS 3 (FROM CANCELLATION)  
	 DECLARE @CTEMPDBNAME   VARCHAR(100),  
	   @CMASTERTABLENAME  VARCHAR(100), 
	   @CDETAILTABLENAME  VARCHAR(100),  
	   @CTEMPMASTERTABLENAME VARCHAR(100), 
	   @CTEMPDETAILTABLENAME VARCHAR(100),  
	   @CTEMPMASTERTABLE  VARCHAR(100),  
	   @CTEMPDETAILTABLE  VARCHAR(100),  

	   @CDETAILTABLENAME1 varchar(100),
	   @CTEMPDETAILTABLENAME1 varchar(100),
	   @CTEMPDETAILTABLE1 varchar(100),


	   @CERRORMSG    VARCHAR(500),  
	   @CKEYFIELD1    VARCHAR(50),  
	   @CKEYFIELDVAL1   VARCHAR(50), 
	   @CMEMONO    VARCHAR(20),  
	   @NMEMONOLEN    NUMERIC(20,0),  
	   @CMEMONOVAL    VARCHAR(50),  
	   @CMEMODEPTID   VARCHAR(4),  
	   @CLOCATIONID   VARCHAR(4),  
	   @CHODEPTID    VARCHAR(4),  
	   @CCMD     NVARCHAR(4000),  
	   @CCMDOUTPUT    NVARCHAR(4000),   
	   @NSAVETRANLOOP   BIT,  
	   @BNEGSTOCKFOUND BIT ,@CLOCID				VARCHAR(4) 
	   
	 SET @NSTEP = 5  -- DO VALIDATIONS ON INPUT DATA BY USER  
	 --DECLARE @CRETVAL VARCHAR(MAX)  
	  
	 --TABLE VARIBALE TO STORE ERROR DETAILS  
	 DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))  
	  
	   
	 --SET @CREFAPPMEMOID = '' 	   
	 SET @NSTEP = 7  -- SETTTING UP ENVIRONMENT  
	 -- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
	 SET @CTEMPDBNAME = ''  
	  
	  
	 SET @CMASTERTABLENAME = 'SLS_DELIVERY_MST'  
	 SET @CDETAILTABLENAME = 'SLS_DELIVERY_DET'  
	 SET @CDETAILTABLENAME1 = 'SLS_DELIVERY_CONS'  
	  
	 SET @CTEMPMASTERTABLENAME = 'TEMP_SLS_DELIVERY_MST_'+LTRIM(RTRIM(STR(@NSPID)))  
	 SET @CTEMPDETAILTABLENAME = 'TEMP_SLS_DELIVERY_DET_'+LTRIM(RTRIM(STR(@NSPID)))  
	 set @CTEMPDETAILTABLENAME1='TEMP_SLS_DELIVERY_CONS_'+LTRIM(RTRIM(STR(@NSPID)))
	 
	 SET @CTEMPMASTERTABLE = @CTEMPDBNAME + @CTEMPMASTERTABLENAME  
	 SET @CTEMPDETAILTABLE = @CTEMPDBNAME + @CTEMPDETAILTABLENAME  
      SET @CTEMPDETAILTABLE1 = @CTEMPDBNAME + @CTEMPDETAILTABLENAME1  

	 SET @CERRORMSG   = ''  
	 SET @CKEYFIELD1   = 'MEMO_ID'   
	  
	  
	 SET @CMEMONO   = 'MEMO_NO'  
	 SET @NMEMONOLEN   = 10  
	 
	 	SET @CCMD = 'SELECT @CLOCID = location_code  FROM '+@CTEMPMASTERTABLE
		EXEC SP_EXECUTESQL @CCMD, N'@CLOCID VARCHAR(4) OUTPUT', @CLOCID OUTPUT
	 
	 IF ISNULL(@CLOCID,'')=''
		SELECT @CLOCATIONID	=DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 
	ELSE
		SELECT @CLOCATIONID=@CLOCID
	 
	 
	 
	 
	 SELECT @CHODEPTID  = [VALUE] FROM CONFIG WHERE  CONFIG_OPTION='HO_LOCATION_ID'    
	  
	
     BEGIN TRANSACTION 	  
	  IF @NUPDATEMODE NOT IN (3,4)  
	  
	  BEGIN  
		   EXEC SP_VALIDATEXN_BEFORESAVE 'SDL',@NSPID,'0000000',@NUPDATEMODE,@CCMDOUTPUT OUTPUT,@BNEGSTOCKFOUND OUTPUT  
		   IF ISNULL(@CCMDOUTPUT,'') <> ''  
		   BEGIN  
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION ON TEMP DATA FAILED : ' + @CCMDOUTPUT + '...'  
			GOTO END_PROC  
		   END  
	  END  
	    
	  IF @NUPDATEMODE IN ( 3,4) AND ISNULL(@CMEMOID,'') = ''  
	  BEGIN  
		   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED IF CALLED FROM CANCELLATION'  
		   GOTO END_PROC      
	  END 	  
  
	  SET @NSTEP=15  
	    
	  -- GETTING DEPT_ID FROM TEMP MASTER TABLE  
	  SET @CCMD = 'SELECT @CMEMODEPTID = location_code FROM '   
		 + (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME ELSE @CTEMPMASTERTABLE END )  
	  EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(4) OUTPUT',   
			 @CMEMODEPTID OUTPUT  
	  IF (@CMEMODEPTID IS NULL)  
	  BEGIN  
		 SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'  
		 GOTO END_PROC      
	  END	  
	  -- START UPDATING XN TABLES 
	  -- CHECK IF ADD MODE  
	  IF @NUPDATEMODE = 1 -- ADDMODE   
	  BEGIN   
	  --START THE PROCESS OF NEW INSERTION, FOR THIS WE NEED TO GENERATE NEW MEMO_NO   
		   SET @NSTEP = 20  -- GENERATING NEW KEY  

		   IF ISNULL(@CLOCATIONID,'')=''
			 BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
				GOTO END_PROC    
			 END

		     
		   -- GENERATING NEW MEMO NO    
		   SET @NSAVETRANLOOP=0  
		   WHILE @NSAVETRANLOOP=0  
		   BEGIN  
	      		EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,  
					@CFINYEAR,0, @CMEMONOVAL OUTPUT     
			      
				PRINT @CMEMONOVAL  
				--CHECK IF MEMO_NUMBER DONOT ALREADY EXISTS
				--IF EXISTS RESTART THE LOOP ELSE EXIT THE LOOP
				SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+'   
					  WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' AND FIN_YEAR = '''+@CFINYEAR+''' )
					SET @NLOOPOUTPUT=0  
				   ELSE  
					SET @NLOOPOUTPUT=1'  
				PRINT @CCMD  
				EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT  
		   END  
		  
		   IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
		   BEGIN  
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + 'ERROR CREATING NEXT MEMO NO....'   
			  GOTO END_PROC      
		   END  
		  
		   SET @NSTEP = 30  -- GENERATING NEW ID  
		   -- GENERATING NEW JOB ORDER ID  
		   SET @CKEYFIELDVAL1 = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
		   
		   IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'    
		   BEGIN  
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
			  GOTO END_PROC  
		   END 		  
		   SET @NSTEP = 32  -- UPDATING NEW ID INTO TEMP TABLES  
		     
		   -- UPDATING NEWLY GENERATED KEY FIELD ID AND NO. IN TEMP MASTER AND DETAILS TABLE 
		   SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' +   
			  @CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''',bin_id=''999'''  
		   PRINT @CCMD  
		   EXEC SP_EXECUTESQL @CCMD  
		     
		   SET @NSTEP = 34  
		     
		   SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''  
		   PRINT @CCMD  
		   EXEC SP_EXECUTESQL @CCMD	
		   
		    SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''  
		   PRINT @CCMD  
		   EXEC SP_EXECUTESQL @CCMD		
	  END     -- END OF ADDMODE  
	  ELSE    -- CALLED FROM EDITMODE  
	  BEGIN    -- START OF EDITMODE  
	    
		   SET @NSTEP = 50  -- GETTING ID INFO FROM TEMP TABLE  
		   -- GETTING CM ID WHICH IS BEING EDITED
		   --GET MEMO_ID AND MEMO_NUMBER FROM PERMANENT TABLE FOR CANCEL MODE ELSE FROM TEMP MASTER TABLE  
		     SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ' + @CKEYFIELD1 + ', @CMEMONOVAL = ' + @CMEMONO + ' FROM '  
			  + (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME + ' WHERE MEMO_ID = ''' + @CMEMOID + ''''   
				ELSE @CTEMPMASTERTABLE END )  
		     
		   EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT',   
				  @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT  
		   IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )  
		   BEGIN  
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'  
			  GOTO END_PROC      
		   END  
		     
		   SET @NSTEP = 55  -- STORING OLD STATUS OF BARCODES   
		     
		   IF @NUPDATEMODE = 3     
		   BEGIN  
				SET @NSTEP=60  

				  EXEC SP3S_UPDATEPMT_ALTERATION
				 @CXN_TYPE='PSdlv'
				 ,@CXNID   = @CKEYFIELDVAL1  
				, @NREVERTFLAG  = 0  
				, @NALLOWNEGSTOCK = 0    
				, @CCMD    = @CCMDOUTPUT OUTPUT  

				IF @CCMDOUTPUT <> ''
				BEGIN
					SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'
					SET @BNEGSTOCKFOUND=1					
					EXEC SP_EXECUTESQL @CCMDOUTPUT
				    GOTO END_PROC
				END	
				-- UPDATING SENTTOHO FLAG  
				SET @CCMD = N'UPDATE ' + @CMASTERTABLENAME + ' SET CANCELLED = 1 ' + 
				   N' WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + ''''  
				EXEC SP_EXECUTESQL @CCMD  
				
				GOTO END_PROC
		   END  
		     
		   ELSE  
		   BEGIN  
				SET @NSTEP = 65  -- UPDATING SENT_TO_HO FLAG TEMP TABLE  
			      
				-- UPDATING SENTTOHO FLAG  
				SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + 'SET LAST_UPDATE=GETDATE() '  
				EXEC SP_EXECUTESQL @CCMD  
			         
			        
				
				SET @NSTEP = 70  -- AUDIT TRIAL ENTRY  
			      
				  EXEC SP3S_UPDATEPMT_ALTERATION
				 @CXN_TYPE='PSdlv'
				 ,@CXNID   = @CKEYFIELDVAL1  
				, @NREVERTFLAG  = 0  
				, @NALLOWNEGSTOCK = 0    
				, @CCMD    = @CCMDOUTPUT OUTPUT  

				IF @CCMDOUTPUT <> ''
				BEGIN
					SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'
					SET @BNEGSTOCKFOUND=1					
					EXEC SP_EXECUTESQL @CCMDOUTPUT
				    GOTO END_PROC
				END	
				

		   END 	     
	  END     -- END OF EDITMODE 
	  
	  SET @NSTEP = 95  
	    
	  -- RECHECKING IF ID IS STILL LATER  
	  IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
	  BEGIN  
		   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
		   GOTO END_PROC  
	  END  
	  
	  -- UPDATING MASTER TABLE (PIM01106) FROM TEMP TABLE  
	  
	  
	  SET @NSTEP = 100  -- UPDATING MASTER TABLE     
	   
	        
	  SET @NSTEP = 105
	  
      EXEC UPDATEMASTERXN_OPT   
		  @CSOURCEDB = @CTEMPDBNAME  
		, @CSOURCETABLE = @CTEMPMASTERTABLENAME  
		, @CDESTDB  = ''  
		, @CDESTTABLE = @CMASTERTABLENAME  
		, @CKEYFIELD1 = @CKEYFIELD1  
		, @BALWAYSUPDATE = 1  
	  
	   -- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE  
	   SET @NSTEP = 110  -- UPDATING TRANSACTION TABLE  
	     
	     
	   -- UPDATING ROW_ID IN TEMP TABLES - CMD01106  
	   SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())  
			WHERE LEFT(ROW_ID,5) = ''LATER'''  
	   EXEC SP_EXECUTESQL @CCMD  

	     SET @NSTEP = 111  

	   SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())  
			WHERE LEFT(ROW_ID,5) = ''LATER'''  
	   EXEC SP_EXECUTESQL @CCMD  
	  
	   -- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE  
	   SET @NSTEP = 114  -- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES  
	     
	   -- CMD01106  
	   SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + '   
		  WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''  
		  AND ROW_ID IN   
		  (  
		   SELECT A.ROW_ID   
		   FROM ' + @CDETAILTABLENAME + ' A   
		   LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B ON A.ROW_ID = B.ROW_ID  
		   WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''  
		   AND   B.ROW_ID IS NULL  
		  )'  
	   EXEC SP_EXECUTESQL @CCMD  
	     
	   SET @NSTEP = 115  
	     
	   -- INSERTING/UPDATING THE ENTRIES IN PRD_JID TABLE FROM TEMPTABLE  
	   SET @NSTEP = 117  -- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES  
	     
	 
	   -- CMD01106  
	   EXEC UPDATEMASTERXN_OPT   
		  @CSOURCEDB = @CTEMPDBNAME  
		, @CSOURCETABLE = @CTEMPDETAILTABLENAME  
		, @CDESTDB  = ''  
		, @CDESTTABLE = @CDETAILTABLENAME  
		, @CKEYFIELD1 = 'ROW_ID'  
		, @BALWAYSUPDATE = 1  
	     
	   SET @NSTEP = 119  
	      
	   -- UPDATING STOCK OF PMT W.R.T. CURRENT MEMO  
	   SET @NSTEP = 130  -- UPDATING PMT TABLE  
	 

	   SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME1 + '   
		  WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''  
		  AND ROW_ID IN   
		  (  
		   SELECT A.ROW_ID   
		   FROM ' + @CDETAILTABLENAME1 + ' A   
		   LEFT OUTER JOIN ' + @CTEMPDETAILTABLE1 + ' B ON A.ROW_ID = B.ROW_ID  
		   WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''  
		   AND   B.ROW_ID IS NULL  
		  )'  
	   EXEC SP_EXECUTESQL @CCMD 
	     
	    EXEC UPDATEMASTERXN_OPT   
		  @CSOURCEDB = @CTEMPDBNAME  
		, @CSOURCETABLE = @CTEMPDETAILTABLENAME1  
		, @CDESTDB  = ''  
		, @CDESTTABLE = @CDETAILTABLENAME1  
		, @CKEYFIELD1 = 'ROW_ID'  
		, @BALWAYSUPDATE = 1  
	     
	  
			EXEC SP3S_UPDATEPMT_ALTERATION
				 @CXN_TYPE='PSDLV'
				 ,@CXNID   = @CKEYFIELDVAL1  
				, @NREVERTFLAG  = 1  
				, @NALLOWNEGSTOCK = 0    
				, @CCMD    = @CCMDOUTPUT OUTPUT  


				
				IF @CCMDOUTPUT <> ''
				BEGIN
					SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'
					SET @BNEGSTOCKFOUND=1					
					EXEC SP_EXECUTESQL @CCMDOUTPUT
				    GOTO END_PROC
				END	
				
	     
	  ---- VALIDATING ENTRIES   
	  SET @NSTEP = 155  -- VALIDATING ENTRIES  
	    
	  EXEC VALIDATEXN  
		 @CXNTYPE = 'SDL'  
	   , @CXNID = @CKEYFIELDVAL1  
	   , @CCMD  = @CCMDOUTPUT OUTPUT  
	   , @CUSERCODE = @CWIZAPPUSERCODE
	   
	  IF @CCMDOUTPUT <> ''  
	  BEGIN  
	   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION FAILED : ' + @CCMDOUTPUT + '...'  
	   GOTO END_PROC  
	  END  
	     
	    
	  -- AFTER SUCCESSFUL SAVING , JUST DROP THE TEMP TABLES CREATED BY APPLICATION  
END TRY  
BEGIN CATCH  
	  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()  
	    
	  GOTO END_PROC  
END CATCH  
	   
END_PROC:  

     PRINT 'ERROR AT LAT : '+ISNULL(@CERRORMSG,'') + ISNULL(@CCMDOUTPUT,'') + STR(ISNULL(@BNEGSTOCKFOUND,0))
	 
	 UPDATE sls_delivery_mst WITH (ROWLOCk) SET last_update=getdate() WHERE memo_id=@CKEYFIELDVAL1
	   
	 IF @@TRANCOUNT>0  
	 BEGIN  
		  IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')='' 
		  BEGIN
		     UPDATE sls_delivery_mst WITH (ROWLOCk) SET HO_SYNCH_LAST_UPDATE='' WHERE memo_id=@CKEYFIELDVAL1
			commit TRANSACTION  
			exec SP3S_INSUPDATE_ITEM_STATUS 'SLSDLV',@CKEYFIELDVAL1,@NUPDATEMODE
		  END
		  ELSE		
			ROLLBACK  
	 END  
	   
	
	  INSERT @OUTPUT ( ERRMSG, MEMO_ID)  
	   VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )  
	  
	  SELECT * FROM @OUTPUT  
	  
	   
	 --EXEC SP_DROPTEMPTABLES_XNS 'XNSSDL',@NSPID   
	   
END
