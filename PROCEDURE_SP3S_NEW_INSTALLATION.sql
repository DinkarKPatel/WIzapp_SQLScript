CREATE PROCEDURE SP3S_NEW_INSTALLATION
(
  @DBNAME VARCHAR(100)
)
AS
BEGIN

  DECLARE @CERRMSG VARCHAR(MAX),@CSTEP VARCHAR(10),
          @CDB_PATH VARCHAR(1000),@LENNAME INT,
          @CNEWDBNAME VARCHAR(1000),@SR AS INT,@CCMD NVARCHAR(MAX),
          @CMASTER_TBL_NAME VARCHAR(100),@CTRAN_TABLE_NAME VARCHAR(100),
          @CMASTER_TRGT_TBL_NAME VARCHAR(100),
          @CDETAILS_TBL_NAME VARCHAR(100), @CDETAIL_TRGT_TBL_NAME VARCHAR(100),
          @COLDDNNAME VARCHAR(100),@CSOURCEDBNAME VARCHAR(100)  
  BEGIN TRY
        --NEW INSTALLATION DOES NOT ALLOW FOR GROUP INVOICE
        SET @CSTEP=10
        SET @CERRMSG=''
        SET @CSOURCEDBNAME=@DBNAME+'.DBO.'
        
        SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM '+@CSOURCEDBNAME+'INM01106  (NOLOCK) WHERE INV_MODE =2) OR EXISTS(SELECT TOP 1 ''U'' FROM '+@CSOURCEDBNAME+'RMM01106  (NOLOCK) WHERE MODE =2)
        BEGIN
            SET @CERRMSG=''PROCESS CAN NOT RUN IN THIS INSTALLATION''
        END'
        PRINT @CCMD
        EXEC SP_EXECUTESQL @CCMD, N'@CERRMSG VARCHAR(MAX) OUTPUT', @CERRMSG OUTPUT
        
        IF ISNULL(@CERRMSG,'')<>''
        GOTO END_PROC
       
     
        --BACK UP OF CURRENT DATA BASE 
        DECLARE @CBACKUPPATH VARCHAR(150)
        SET @CSTEP=30
        --SET @DBNAME=DB_NAME ()
        SELECT @LENNAME=LEN(@DBNAME+'.MDF')
        
        --SELECT @CDB_PATH=SUBSTRING(PHYSICAL_NAME,1,LEN(PHYSICAL_NAME)-@LENNAME)  FROM SYS.MASTER_FILES WHERE TYPE='0' AND DATABASE_ID  =DB_ID (@DBNAME)
        
         SELECT TOP 1   @CDB_PATH=REVERSE(RIGHT(REVERSE(PHYSICAL_NAME), LEN(PHYSICAL_NAME) - CHARINDEX('\', REVERSE(PHYSICAL_NAME))))
		 FROM SYS.DATABASES DB JOIN SYS.MASTER_FILES F ON DB.DATABASE_ID=F.DATABASE_ID
		 WHERE DB.NAME =@DBNAME AND FILE_ID = 1
         
         IF RIGHT(@CDB_PATH,1)<>'\'
         SET @CDB_PATH=@CDB_PATH+'\'
       
        SET @CBACKUPPATH=@CDB_PATH+(SELECT REPLACE(REPLACE(REPLACE(CONVERT (VARCHAR,GETDATE(),120),'-','_'),' ','_'),':','_'))
        
        
        
        EXEC BACKUPDATA @DBNAME,@CBACKUPPATH	
        
        --RUN RECONCILW MASTERS
        SET @CSTEP=40
        SET @CCMD=N'EXEC '+@CSOURCEDBNAME+'SP_RECONPMTXNS '
        PRINT @CCMD
        EXEC SP_EXECUTESQL @CCMD
        
        SET @CSTEP=50
        SET @SR=1
        SET @CNEWDBNAME=@DBNAME+(SELECT REPLACE(REPLACE(REPLACE(CONVERT (VARCHAR,GETDATE(),120),'-','_'),' ','_'),':','_'))
        LBL_CREATE_NEW_DATABASE:
        
      
        
        --CHECK WHEATHER DATA BASE ALREADY EXISTS OR NOT
        IF DB_ID(@CNEWDBNAME) IS NOT NULL
        BEGIN
            SET @CNEWDBNAME=@CNEWDBNAME+CAST(@SR AS VARCHAR(10))
            SET @SR=@SR+1
            GOTO LBL_CREATE_NEW_DATABASE
        END
        
        --CREATE NEW DATA BASE
        IF DB_ID(@CNEWDBNAME) IS NULL   
	    BEGIN  
	        SET @CCMD=N'CREATE DATABASE '+@CNEWDBNAME+'  
	        ON  
	        ( NAME = '+@CNEWDBNAME+'_DAT,  
		    FILENAME = '''+@CDB_PATH+'\'+@CNEWDBNAME+'.MDF'')  
	        LOG ON   
	        ( NAME = '+@CNEWDBNAME+'_LOG,  
		    FILENAME = '''+@CDB_PATH+'\'+@CNEWDBNAME+'.LDF'')'     
	  
		    PRINT @CCMD  
		    EXEC SP_EXECUTESQL @CCMD 
		  END  
		  
          SET @CSTEP=70
          --INSERT MASTER TABLE IN NEW DATABASE
          IF OBJECT_ID('TEMBDB..#TMP_MASTER_TABLE','') IS NOT NULL
             DROP TABLE #TMP_MASTER_TABLE
          
          
          SELECT TABLENAME=CAST('' AS VARCHAR(100))
          INTO #TMP_MASTER_TABLE
          WHERE 1=2
          
          SET @CCMD=N'SELECT DISTINCT TABLENAME 
          FROM '+@CSOURCEDBNAME+' XNSINFO 
          WHERE XN_TYPE LIKE ''MST%''
          AND ISNULL(TABLENAME,'''')<>'''''
          PRINT @CCMD
          INSERT  INTO #TMP_MASTER_TABLE
          EXEC SP_EXECUTESQL @CCMD
          
          
          IF NOT EXISTS ( SELECT TOP 1 'U' FROM #TMP_MASTER_TABLE WHERE TABLENAME='COMPANY')
          BEGIN
               INSERT  INTO #TMP_MASTER_TABLE
               SELECT 'COMPANY'
          END
          IF NOT EXISTS ( SELECT TOP 1 'U' FROM #TMP_MASTER_TABLE WHERE TABLENAME='HSN_MST')
          BEGIN
               INSERT  INTO #TMP_MASTER_TABLE
               SELECT 'HSN_MST'
          END
           IF NOT EXISTS ( SELECT TOP 1 'U' FROM #TMP_MASTER_TABLE WHERE TABLENAME='HSN_DET')
          BEGIN
               INSERT  INTO #TMP_MASTER_TABLE
               SELECT 'HSN_DET'
          END
          
          
          WHILE EXISTS (SELECT TOP 1 'U' FROM #TMP_MASTER_TABLE ) 
          BEGIN
              SELECT @CMASTER_TBL_NAME='',@CMASTER_TRGT_TBL_NAME=''
              SELECT TOP 1 @CMASTER_TBL_NAME=TABLENAME FROM #TMP_MASTER_TABLE
              
              SET @CMASTER_TRGT_TBL_NAME=@CNEWDBNAME+'.DBO.'+@CMASTER_TBL_NAME
              SET @CSTEP=90
              SET @CCMD=N'IF OBJECT_ID('''+@CMASTER_TRGT_TBL_NAME+''',''U'') IS  NULL
              BEGIN
                   SELECT * INTO '+@CMASTER_TRGT_TBL_NAME+' FROM '+@CSOURCEDBNAME+@CMASTER_TBL_NAME+'
              END'
              EXEC SP_EXECUTESQL @CCMD
              PRINT @CCMD
              
              DELETE FROM #TMP_MASTER_TABLE WHERE TABLENAME= @CMASTER_TBL_NAME    
          END
          
          ------------CHANGES-----------
          
           IF OBJECT_ID('TEMBDB..#TMP_DETAILS_TABLE','') IS NOT NULL
             DROP TABLE #TMP_DETAILS_TABLE
             
             SELECT TABLENAME=CAST('' AS VARCHAR(100))
             INTO #TMP_DETAILS_TABLE
             WHERE 1=2
           
           SET @CSTEP=100  
           SET @CCMD=N' SELECT DISTINCT  TABLENAME=A.NAME 
           FROM '+@DBNAME+'.SYS.TABLES A
           LEFT OUTER JOIN
           (
            SELECT DISTINCT TABLENAME 
            FROM '+@CSOURCEDBNAME+' XNSINFO WHERE XN_TYPE LIKE ''MST%''
            AND ISNULL(TABLENAME,'''')<>''''
           ) B ON A.NAME=B.TABLENAME
           WHERE A.TYPE=''U'' 
           AND A.NAME NOT LIKE ''TMP_%'' AND  A.NAME NOT LIKE ''TEMP_%'' 
           AND B.TABLENAME IS NULL'
           PRINT @CCMD
           INSERT INTO #TMP_DETAILS_TABLE
           EXEC SP_EXECUTESQL @CCMD
         
          
          SET @CSTEP=110
          WHILE EXISTS (SELECT TOP 1 'U' FROM #TMP_DETAILS_TABLE ) 
          BEGIN
              SELECT @CDETAILS_TBL_NAME='',@CDETAIL_TRGT_TBL_NAME=''
              SELECT TOP 1 @CDETAILS_TBL_NAME=TABLENAME FROM #TMP_DETAILS_TABLE
              
              SET @CDETAIL_TRGT_TBL_NAME=@CNEWDBNAME+'.DBO.'+@CDETAILS_TBL_NAME
              
              SET @CSTEP=120
               SET @CCMD=N'IF OBJECT_ID('''+@CDETAIL_TRGT_TBL_NAME+''',''U'') IS  NULL
              BEGIN
                   SELECT * INTO '+@CDETAIL_TRGT_TBL_NAME+' FROM '+@CSOURCEDBNAME+@CDETAILS_TBL_NAME+' WHERE 1=2
              END'
              EXEC SP_EXECUTESQL @CCMD
              PRINT @CCMD
              
              DELETE FROM #TMP_DETAILS_TABLE WHERE TABLENAME= @CDETAILS_TBL_NAME    
          END
          
      SET @CSTEP=130    
      SET @CCMD=N'INSERT '+@CNEWDBNAME+'..PMT01106(LAST_UPDATE,REP_ID,PRODUCT_CODE,QUANTITY_IN_STOCK,DEPT_ID,BIN_ID)
             SELECT LAST_UPDATE,REP_ID,PRODUCT_CODE,QUANTITY_IN_STOCK,DEPT_ID,BIN_ID FROM '+@CSOURCEDBNAME+'PMT01106 '
      PRINT @CCMD
      EXEC SP_EXECUTESQL @CCMD          
      
      SET @CSTEP=140
      SET @CCMD=N' INSERT '+@CNEWDBNAME+'..OPS01106	( PURCHASE_PRICE, RFINSERTED, XN_DT, SENT_TO_HO, XFER_PRICE, XFER_PRICE_WOTAX, 
					PRODUCT_CODE, LOT_NO, DEPT_ID, QUANTITY_OB, COMPANY_CODE, LAST_UPDATE, SENT_FOR_RECON, BIN_ID ) 
					SELECT  0.00 AS PURCHASE_PRICE ,0 AS RFINSERTED,'''' AS  XN_DT, 0 AS SENT_TO_HO, 0.00 AS XFER_PRICE, 
					0.00 AS XFER_PRICE_WOTAX, PRODUCT_CODE,
					'''' AS LOT_NO, DEPT_ID, QUANTITY_IN_STOCK, ''01'' AS COMPANY_CODE, GETDATE(), '''' AS SENT_FOR_RECON, BIN_ID 
					FROM '+@CSOURCEDBNAME+'PMT01106 WHERE QUANTITY_IN_STOCK >0'
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD				
	

   END TRY
   BEGIN CATCH
   SET @CERRMSG='P: SP3S_NEW_INSTALLATION, STEP:'+@CSTEP+', MESSAGE:'+ERROR_MESSAGE()
   GOTO END_PROC
END CATCH
		
END_PROC:

IF ISNULL(@CERRMSG,'')=''
BEGIN
 SET @CCMD=N'ALTER DATABASE '+@DBNAME+' SET SINGLE_USER WITH ROLLBACK IMMEDIATE;'  
 PRINT @CCMD
 EXEC SP_EXECUTESQL @CCMD
 
 SET @CCMD=N'DROP DATABASE '+@DBNAME+';'  
 PRINT @CCMD
 EXEC SP_EXECUTESQL @CCMD
 
 SET @CCMD=N'EXEC SP_RENAME '+@CNEWDBNAME+' ,'+@DBNAME+',''DATABASE'''  
 PRINT @CCMD
 EXEC SP_EXECUTESQL @CCMD
 
 
END  
 
SELECT @CERRMSG AS ERRMSG

END
