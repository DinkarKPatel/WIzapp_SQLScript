CREATE PROCEDURE SP3S_PUR_SLS
(
	@CREP_ID VARCHAR(40)
   ,@DFROMDT DATETIME
   ,@DTODT	 DATETIME	
   ,@CFILTER VARCHAR(MAX)
   ,@NMODE	 NUMERIC(1)=1
   ,@BINCLUDEVALUE BIT=0
   /*@BINCLUDEVALUE: WHEN THIS BIT IS SET,INCLUDE THE SALE VALUE AND STOCK VALUE IN THE REPORT OUT FOR 
     MODE 2*/
   ,@DSETTLEMENTDT DATETIME=''  
)	
--WITH ENCRYPTION 
AS 
BEGIN
/*
	THIS PROCEDURE IS USED BY TWO REPORTS IN EXTREME.
	THE FIRST ONE WITH MODE 1 AND SECOND ONE WITH MODE 2.
	
	THE FIRST ONE CALULATES THE SALE QTY/VALUE,STOCK QTY/VALUE AND SALE THRU QTY/VALUE FOR ITEMS THAT HAVE BEEN PURCHASED
	DURING THE PASSED DATE RANGE AND THE SAME SET OF METRIC BEFORE THE FROM DATE AS PREVIOUS METRIC.
	
	THE SECOND REPORT CACULATES THE SAME THING BUT MONTH WISE I.E. MONTHWISE SALE VALUES, STOCK VALUES AT THE END OF 
	EACH MONTH AND SALE THRU VALUES AND THE AGGREGATE VALUES BEFORE THE PASSED FROM DATE. 
*/
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	
	DECLARE @CLAYOUT VARCHAR(MAX),@CCMD NVARCHAR(MAX),@CTABLE VARCHAR(MAX)
		   ,@CRFDB VARCHAR(200),@CPURCHASE_PRICEEXP VARCHAR(500),@CINXNS VARCHAR(500),@COUTXNS VARCHAR(500)
		   ,@CTMPTABLE VARCHAR(100),@CTMPTABLE1 VARCHAR(100),@CTMPTABLE11 VARCHAR(100),@CTMPTABLE2 VARCHAR(100)
		   ,@CTMPTABLE22 VARCHAR(100),@CTMPTABLE33 VARCHAR(100),@CTMPTABLE3 VARCHAR(100)
		   ,@CTMPTABLE44 VARCHAR(100),@CTMPTABLE4 VARCHAR(100),@CTMPTABLE5 VARCHAR(100)
		   ,@CTMPTABLE6 VARCHAR(100),@CTMPTABLE7 VARCHAR(100)
		   ,@CFROMDT VARCHAR(10),@CTODT VARCHAR(10)	
		   ,@CMONTHLIST VARCHAR(MAX),@CDYNAMIC_COLLIST VARCHAR(MAX),@CTABLE1_JOINSTR VARCHAR(MAX)
		   ,@CTABLE2_JOINSTR VARCHAR(MAX),@DMONTHDATES DATETIME,@DCLOSING_STOCK_DATE DATETIME
		   ,@CCLOSING_STOCK_DATE VARCHAR(10),@CSALE_STOCK_JOINSTR VARCHAR(MAX),@CSELECT_SALE_STOCK_STR VARCHAR(MAX)			   
		   ,@COLD_CURRENT_JOINSTR VARCHAR(MAX),@CSETTLEMENTDT VARCHAR(20)
		   
	--SETTING THE RF DB NAME
	SET @CRFDB=    DB_NAME()+'_RFOPT'

	SET @CTMPTABLE='TMP_PUR_SLS_'+LTRIM(RTRIM(STR(@@SPID)))
	SET @CTMPTABLE1='TMP_SLS_MONTH_'+LTRIM(RTRIM(STR(@@SPID)))
	SET @CTMPTABLE11='TMP_SLSVALUE_MONTH_'+LTRIM(RTRIM(STR(@@SPID)))
	SET @CTMPTABLE2='TMP_STOCK_MONTH_'+LTRIM(RTRIM(STR(@@SPID)))
	SET @CTMPTABLE22='TMP_STOCKVALUE_MONTH_'+LTRIM(RTRIM(STR(@@SPID)))
	SET @CTMPTABLE3='TMP_SALETHRU_MONTH_'+LTRIM(RTRIM(STR(@@SPID)))
	SET @CTMPTABLE33='TMP_SALETHRU_MONTH33_'+LTRIM(RTRIM(STR(@@SPID)))
	SET @CTMPTABLE4='TMP_MONTH_FINAL_'+LTRIM(RTRIM(STR(@@SPID)))
	SET @CTMPTABLE44='TMP_MONTH_FINAL44_'+LTRIM(RTRIM(STR(@@SPID)))
	SET @CTMPTABLE5='TMP_OLD_FINAL_'+LTRIM(RTRIM(STR(@@SPID)))
	SET @CTMPTABLE6='TMP_OLD_FINALFORMAT_'+LTRIM(RTRIM(STR(@@SPID)))
	SET @CTMPTABLE7='TMP_REPORT_FINAL_'+LTRIM(RTRIM(STR(@@SPID)))
	SET @CSETTLEMENTDT=CONVERT(VARCHAR,@DSETTLEMENTDT,110)
	
	--CREATING TABLEEXPRESSION WITH ALL THE REQUIRED TABLES 
	SET @CTABLE=' VW_XNSREPS A (NOLOCK)
				JOIN SKU (NOLOCK) ON A.PRODUCT_CODE=SKU.PRODUCT_CODE
				LEFT JOIN SKU_OH (NOLOCK) ON SKU.PRODUCT_CODE=SKU_OH.PRODUCT_CODE
				JOIN ARTICLE (NOLOCK) ON SKU.ARTICLE_CODE=ARTICLE.ARTICLE_CODE
				JOIN PARA1 (NOLOCK) ON SKU.PARA1_CODE=PARA1.PARA1_CODE
				JOIN PARA2 (NOLOCK) ON SKU.PARA2_CODE=PARA2.PARA2_CODE
				JOIN PARA3 (NOLOCK) ON SKU.PARA3_CODE=PARA3.PARA3_CODE
				JOIN PARA4 (NOLOCK) ON SKU.PARA4_CODE=PARA4.PARA4_CODE
				JOIN PARA5 (NOLOCK) ON SKU.PARA5_CODE=PARA5.PARA5_CODE
				JOIN PARA6 (NOLOCK) ON SKU.PARA6_CODE=PARA6.PARA6_CODE
				JOIN SECTIOND (NOLOCK) ON ARTICLE.SUB_SECTION_CODE=SECTIOND.SUB_SECTION_CODE
				JOIN SECTIONM (NOLOCK) ON SECTIOND.SECTION_CODE=SECTIONM.SECTION_CODE
				LEFT OUTER JOIN ARTICLE_FIX_ATTR ATTR  (NOLOCK) ON ARTICLE.ARTICLE_CODE = ATTR.ARTICLE_CODE 
				LEFT OUTER JOIN ATTR1_MST AT1 (NOLOCK) ON AT1.ATTR1_KEY_CODE=ATTR.ATTR1_KEY_CODE
				LEFT OUTER JOIN ATTR2_MST AT2 (NOLOCK) ON AT2.ATTR2_KEY_CODE=ATTR.ATTR2_KEY_CODE
				LEFT OUTER JOIN ATTR3_MST AT3 (NOLOCK) ON AT3.ATTR3_KEY_CODE=ATTR.ATTR3_KEY_CODE
				LEFT OUTER JOIN ATTR4_MST AT4 (NOLOCK) ON AT4.ATTR4_KEY_CODE=ATTR.ATTR4_KEY_CODE
				LEFT OUTER JOIN ATTR5_MST AT5 (NOLOCK) ON AT5.ATTR5_KEY_CODE=ATTR.ATTR5_KEY_CODE
				LEFT OUTER JOIN ATTR6_MST AT6 (NOLOCK) ON AT6.ATTR6_KEY_CODE=ATTR.ATTR6_KEY_CODE
				LEFT OUTER JOIN ATTR7_MST AT7 (NOLOCK) ON AT7.ATTR7_KEY_CODE=ATTR.ATTR7_KEY_CODE
				LEFT OUTER JOIN ATTR8_MST AT8 (NOLOCK) ON AT8.ATTR8_KEY_CODE=ATTR.ATTR8_KEY_CODE
				LEFT OUTER JOIN ATTR9_MST AT9 (NOLOCK) ON AT9.ATTR9_KEY_CODE=ATTR.ATTR9_KEY_CODE
				LEFT OUTER JOIN ATTR10_MST AT10 (NOLOCK) ON AT10.ATTR10_KEY_CODE=ATTR.ATTR10_KEY_CODE
				LEFT OUTER JOIN ATTR11_MST AT11 (NOLOCK) ON AT11.ATTR11_KEY_CODE=ATTR.ATTR11_KEY_CODE
				LEFT OUTER JOIN ATTR12_MST AT12 (NOLOCK) ON AT12.ATTR12_KEY_CODE=ATTR.ATTR12_KEY_CODE
				LEFT OUTER JOIN ATTR13_MST AT13 (NOLOCK) ON AT13.ATTR13_KEY_CODE=ATTR.ATTR13_KEY_CODE
				LEFT OUTER JOIN ATTR14_MST AT14 (NOLOCK) ON AT14.ATTR14_KEY_CODE=ATTR.ATTR14_KEY_CODE
				LEFT OUTER JOIN ATTR15_MST AT15 (NOLOCK) ON AT15.ATTR15_KEY_CODE=ATTR.ATTR15_KEY_CODE
				LEFT OUTER JOIN ATTR16_MST AT16 (NOLOCK) ON AT16.ATTR16_KEY_CODE=ATTR.ATTR16_KEY_CODE
				LEFT OUTER JOIN ATTR17_MST AT17 (NOLOCK) ON AT17.ATTR17_KEY_CODE=ATTR.ATTR17_KEY_CODE
				LEFT OUTER JOIN ATTR18_MST AT18 (NOLOCK) ON AT18.ATTR18_KEY_CODE=ATTR.ATTR18_KEY_CODE
				LEFT OUTER JOIN ATTR19_MST AT19 (NOLOCK) ON AT19.ATTR19_KEY_CODE=ATTR.ATTR19_KEY_CODE
				LEFT OUTER JOIN ATTR20_MST AT20 (NOLOCK) ON AT20.ATTR20_KEY_CODE=ATTR.ATTR20_KEY_CODE
				LEFT OUTER JOIN ATTR21_MST AT21 (NOLOCK) ON AT21.ATTR21_KEY_CODE=ATTR.ATTR21_KEY_CODE
				LEFT OUTER JOIN ATTR22_MST AT22 (NOLOCK) ON AT22.ATTR22_KEY_CODE=ATTR.ATTR22_KEY_CODE
				LEFT OUTER JOIN ATTR23_MST AT23 (NOLOCK) ON AT23.ATTR23_KEY_CODE=ATTR.ATTR23_KEY_CODE
				LEFT OUTER JOIN ATTR24_MST AT24 (NOLOCK) ON AT24.ATTR24_KEY_CODE=ATTR.ATTR24_KEY_CODE
				LEFT OUTER JOIN ATTR25_MST AT25(NOLOCK) ON AT25.ATTR25_KEY_CODE=ATTR.ATTR25_KEY_CODE
				JOIN LMV01106 (NOLOCK) ON SKU.AC_CODE=LMV01106.AC_CODE
				JOIN LOC_VIEW (NOLOCK) ON A.DEPT_ID=LOC_VIEW.DEPT_ID 
				LEFT JOIN FORM (NOLOCK) ON SKU.FORM_ID=FORM.FORM_ID '
	
	SELECT @CLAYOUT=
	(STUFF(
	(
		SELECT ','+COL_EXPR FROM REP_DET WHERE REP_ID=@CREP_ID AND CALCULATIVE_COL=0
		FOR XML PATH('')
	),1,1,''))
	
	SET @CLAYOUT=REPLACE(@CLAYOUT,'PRODUCT_CODE','A.PRODUCT_CODE')
	SET @CLAYOUT=REPLACE(@CLAYOUT,'MAJOR_DEPT_ID','LOC_VIEW.DEPT_ID')
	
	SET @CPURCHASE_PRICEEXP='ISNULL((SKU.PURCHASE_PRICE  
							 +(CASE WHEN FORM.POST_TAX_SEPARATELY=1  THEN 0 ELSE ISNULL(SKU_OH.TAX_AMOUNT,0) END)  
							 - ISNULL(SKU_OH.DISCOUNT_AMOUNT,0)+ISNULL(SKU_OH.VALUE_ADD,0)+ISNULL(SKU_OH.EXCISE_DUTY_AMOUNT,0)),0)'
	
	SET @CINXNS='(''SCF'',''OPS'',''PRD'', ''PUR'', ''CHI'', ''SLR'',''UNC'',''APR'', ''WSR'', ''PFI'', ''PFG'', ''BCG''
											  ,''MRP'',''DCI'',''PSB'',''JWR'',''API'')'
	SET @COUTXNS='(''SCC'',''BOC'',''PRT'',''CHO'',''SLS'',''CNC'',''APP'',''WSL'',''CIP'', ''CRM'', ''DCO'',''MIP''
											  ,''CSB'',''JWI'',''DLM'',''APO'')'	
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE1+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE1
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE2+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE2
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE3+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE3
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE4+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE4
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE5+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE5
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE6+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE6
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE7+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE7
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE11+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE11
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE22+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE22
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE33+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE33
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE44+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE44
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
IF @NMODE=1 
	GOTO LBL_PERIOD_REPORT
IF @NMODE=2
	GOTO LBL_MONTHWISE_REPORT	

LBL_PERIOD_REPORT:	
	SET @CCMD=N'SELECT '+@CLAYOUT+'
				,CONVERT(NUMERIC(18),SUM(CASE WHEN SKU.RECEIPT_DT<'''+CONVERT(VARCHAR(10),@DFROMDT,110)+''' 
					  '+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+'THEN 
					 (CASE WHEN A.XN_TYPE=''SLS'' THEN A.XN_QTY 
						   WHEN A.XN_TYPE=''SLR'' THEN -A.XN_QTY
						   ELSE 0 END)
					  ELSE 0 END)) AS OLD_SALE_QTY
				,CONVERT(NUMERIC(18),SUM(CASE WHEN SKU.RECEIPT_DT<'''+CONVERT(VARCHAR(10),@DFROMDT,110)+''' 
				'+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+'THEN 
					(CASE WHEN A.XN_TYPE=''SLS'' THEN (A.XN_QTY*A.XN_NET) 
						   WHEN A.XN_TYPE=''SLR'' THEN -(A.XN_QTY*A.XN_NET)
						   ELSE 0 END)
					  ELSE 0 END)) AS OLD_SALE_VALUE
				,CONVERT(NUMERIC(18),SUM(CASE WHEN SKU.RECEIPT_DT<'''+CONVERT(VARCHAR(10),@DFROMDT,110)+''' 
					'+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+'THEN 
					(CASE WHEN A.XN_TYPE=''SLS'' THEN (A.XN_QTY*'+@CPURCHASE_PRICEEXP+')
						  WHEN A.XN_TYPE=''SLR'' THEN -(A.XN_QTY*'+@CPURCHASE_PRICEEXP+')
						  ELSE 0 END)
					  ELSE 0 END)) AS OLD_PURCHASE_SALE_VALUE					  
				,CONVERT(NUMERIC(18),SUM(CASE WHEN SKU.RECEIPT_DT<'''+CONVERT(VARCHAR(10),@DFROMDT,110)+''' 
				'+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+'THEN 
					 (CASE WHEN A.XN_TYPE IN '+@CINXNS+' THEN A.XN_QTY 
						   WHEN A.XN_TYPE IN '+@COUTXNS+' THEN -A.XN_QTY
						   ELSE 0 END)
					  ELSE 0 END)) AS OLD_STOCK_QTY
				,CONVERT(NUMERIC(18),SUM(CASE WHEN SKU.RECEIPT_DT<'''+CONVERT(VARCHAR(10),@DFROMDT,110)+''' 
				'+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+'THEN 
					(CASE WHEN A.XN_TYPE IN '+@CINXNS+' THEN (A.XN_QTY*'+@CPURCHASE_PRICEEXP+')
						  WHEN A.XN_TYPE IN '+@COUTXNS+' THEN -(A.XN_QTY*'+@CPURCHASE_PRICEEXP+')
						  ELSE 0 END)
					  ELSE 0 END)) AS OLD_STOCK_VALUE	  	  
				,CONVERT(NUMERIC(18),SUM(CASE WHEN SKU.RECEIPT_DT BETWEEN '''+CONVERT(VARCHAR(10),@DFROMDT,110)+''' AND '''+CONVERT(VARCHAR(10),@DTODT,110)+''' 
				'+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+'THEN 
					 (CASE WHEN A.XN_TYPE=''SLS'' THEN A.XN_QTY 
						   WHEN A.XN_TYPE=''SLR'' THEN -A.XN_QTY
						   ELSE 0 END)
					  ELSE 0 END)) AS SALE_QTY
				,CONVERT(NUMERIC(18),SUM(CASE WHEN SKU.RECEIPT_DT BETWEEN '''+CONVERT(VARCHAR(10),@DFROMDT,110)+''' AND '''+CONVERT(VARCHAR(10),@DTODT,110)+''' 
				'+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+'THEN 
					(CASE WHEN A.XN_TYPE=''SLS'' THEN (A.XN_QTY*A.XN_NET) 
						   WHEN A.XN_TYPE=''SLR'' THEN -(A.XN_QTY*A.XN_NET)
						   ELSE 0 END)
					  ELSE 0 END)) AS SALE_VALUE
				,CONVERT(NUMERIC(18),SUM(CASE WHEN SKU.RECEIPT_DT BETWEEN '''+CONVERT(VARCHAR(10),@DFROMDT,110)+''' AND '''+CONVERT(VARCHAR(10),@DTODT,110)+''' 
				'+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+'THEN 
					(CASE WHEN A.XN_TYPE=''SLS'' THEN (A.XN_QTY*'+@CPURCHASE_PRICEEXP+')
						   WHEN A.XN_TYPE=''SLR'' THEN -(A.XN_QTY*'+@CPURCHASE_PRICEEXP+')
						   ELSE 0 END)
					  ELSE 0 END)) AS PURCHASE_SALE_VALUE					  
				,CONVERT(NUMERIC(18),SUM(CASE WHEN SKU.RECEIPT_DT BETWEEN '''+CONVERT(VARCHAR(10),@DFROMDT,110)+''' AND '''+CONVERT(VARCHAR(10),@DTODT,110)+''' 
				'+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+' THEN 
					 (CASE WHEN A.XN_TYPE IN '+@CINXNS+' THEN A.XN_QTY 
						   WHEN A.XN_TYPE IN '+@COUTXNS+' THEN -A.XN_QTY
						   ELSE 0 END)
					  ELSE 0 END)) AS STOCK_QTY
				,CONVERT(NUMERIC(18),SUM(CASE WHEN SKU.RECEIPT_DT BETWEEN '''+CONVERT(VARCHAR(10),@DFROMDT,110)+''' AND '''+CONVERT(VARCHAR(10),@DTODT,110)+''' 
				'+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+'THEN 
					(CASE WHEN A.XN_TYPE IN '+@CINXNS+' THEN (A.XN_QTY*'+@CPURCHASE_PRICEEXP+')
						  WHEN A.XN_TYPE IN '+@COUTXNS+' THEN -(A.XN_QTY*'+@CPURCHASE_PRICEEXP+')
						  ELSE 0 END)
					  ELSE 0 END)) AS STOCK_VALUE
				INTO '+@CTMPTABLE+'
				FROM '+@CTABLE+'  
				WHERE SKU.RECEIPT_DT<='''+CONVERT(VARCHAR(10),@DTODT,110)+''''
				+(CASE WHEN ISNULL(@CFILTER,'')='' THEN '' ELSE ' AND ' END)+ISNULL(@CFILTER,'')
				+' GROUP BY '+@CLAYOUT
	PRINT @CCMD				
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'SELECT *
			  ,CONVERT(NUMERIC(18),(CASE WHEN ISNULL(OLD_SALE_QTY,0)+ISNULL(OLD_STOCK_QTY,0)=0 THEN 0 
						ELSE (ISNULL(OLD_SALE_QTY,0)/(ISNULL(OLD_SALE_QTY,0)+ISNULL(OLD_STOCK_QTY,0)))*100
				END)) AS OLD_SALE_THRU_QTY
			  ,CONVERT(NUMERIC(18),(CASE WHEN ISNULL(OLD_PURCHASE_SALE_VALUE,0)+ISNULL(OLD_STOCK_VALUE,0)=0 THEN 0 
						ELSE (ISNULL(OLD_SALE_VALUE,0)/(ISNULL(OLD_PURCHASE_SALE_VALUE,0)+ISNULL(OLD_STOCK_VALUE,0)))*100
				END)) AS OLD_SALE_THRU_VALUE			
			  ,CONVERT(NUMERIC(18),(CASE WHEN ISNULL(SALE_QTY,0)+ISNULL(STOCK_QTY,0)=0 THEN 0 
						ELSE (ISNULL(SALE_QTY,0)/(ISNULL(SALE_QTY,0)+ISNULL(STOCK_QTY,0)))*100
				END)) AS SALE_THRU_QTY
			  ,CONVERT(NUMERIC(18),(CASE WHEN ISNULL(PURCHASE_SALE_VALUE,0)+ISNULL(STOCK_VALUE,0)=0 THEN 0 
						ELSE (ISNULL(SALE_VALUE,0)/(ISNULL(PURCHASE_SALE_VALUE,0)+ISNULL(STOCK_VALUE,0)))*100
				END)) AS SALE_THRU_VALUE				
			  FROM '+@CTMPTABLE
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	GOTO END_PROC
	
LBL_MONTHWISE_REPORT:		
	
	--SETTING FROMDT VALUE TO START DAY OF THAT DATE AND TODT TO END DAY OF THAT DATE.
	SELECT @DFROMDT=DATEADD(DD,1,DATEADD(DD,-DAY(@DFROMDT),@DFROMDT))
	SELECT @DTODT=DATEADD(DD,-DAY(DATEADD(MM,1,@DTODT)),DATEADD(MM,1,@DTODT))
	
	--CONVERTING THE DATE TO THE VARCHAR DATE TYPE FOR DYNAMIC QUERY
	SET @CFROMDT=CONVERT(VARCHAR(10),@DFROMDT,110)
	SET @CTODT	=CONVERT(VARCHAR(10),@DTODT,110)
	
	--GETTING THE OLD VALUES FOR SALE AND STOCK
	SET @CCMD=N'SELECT '+@CLAYOUT+',CONVERT(NUMERIC(18),SUM(
					(CASE WHEN A.XN_TYPE=''SLS'' 
					'+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+' THEN (A.XN_QTY) 
						   WHEN A.XN_TYPE=''SLR'' 
						   '+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+' THEN -(A.XN_QTY)
						   ELSE 0 END))
					 ) AS OLD_SALE_QTY
					 ,CONVERT(NUMERIC(18),SUM(
					   (CASE WHEN A.XN_TYPE IN '+@CINXNS+' 
					   '+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+' THEN (A.XN_QTY)
					   WHEN A.XN_TYPE IN '+@COUTXNS+' 
					   '+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+' THEN -(A.XN_QTY)
					   ELSE 0 END)
					   )) AS OLD_STOCK_QTY	
					 ,CONVERT(NUMERIC(18),SUM(
					(CASE WHEN A.XN_TYPE=''SLS'' 
					'+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+' THEN (A.XN_QTY*A.XN_NET) 
						   WHEN A.XN_TYPE=''SLR'' 
						   '+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+' THEN -(A.XN_QTY*A.XN_NET)
						   ELSE 0 END))
					 ) AS OLD_SALE_VALUE
					 ,CONVERT(NUMERIC(18),SUM(
					   (CASE WHEN A.XN_TYPE IN '+@CINXNS+' 
					   '+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+' THEN (A.XN_QTY*'+@CPURCHASE_PRICEEXP+')
					   WHEN A.XN_TYPE IN '+@COUTXNS+' 
					   '+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+' THEN -(A.XN_QTY*'+@CPURCHASE_PRICEEXP+')
					   ELSE 0 END)
					   )) AS OLD_STOCK_VALUE
					,CONVERT(NUMERIC(18),0) AS OLD_SELL_THRU   	  
				INTO '+@CTMPTABLE+'
				FROM '+@CTABLE+'  
				WHERE SKU.RECEIPT_DT<'''+@CFROMDT+''''
				+(CASE WHEN ISNULL(@CFILTER,'')='' THEN '' ELSE ' AND ' END)+ISNULL(@CFILTER,'')
				+' GROUP BY '+@CLAYOUT
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	--GETTING THE MONTHWISE SALE VALUE FOR THE SPECIFIED PERIOD
	SET @CCMD=N'SELECT '+@CLAYOUT+',''X__''+DATENAME(MONTH,SKU.RECEIPT_DT) AS MONTH
				,CONVERT(NUMERIC(18),SUM((CASE WHEN A.XN_TYPE=''SLS'' 
				'+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+' THEN (A.XN_QTY) 
											   WHEN A.XN_TYPE=''SLR'' 
											   '+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+' THEN -(A.XN_QTY) 
											   ELSE 0 END))) AS SALE_QTY
				,CONVERT(NUMERIC(18),SUM((CASE WHEN A.XN_TYPE=''SLS'' 
				'+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+' THEN (A.XN_QTY*A.XN_NET) 
											   WHEN A.XN_TYPE=''SLR'' 
											   '+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+' THEN -(A.XN_QTY*A.XN_NET) 
											   ELSE 0 END))) AS SALE_VALUE
				,CONVERT(NUMERIC(18),SUM(
					   (CASE WHEN A.XN_TYPE IN '+@CINXNS+' 
					   '+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+' THEN (A.XN_QTY)
					   WHEN A.XN_TYPE IN '+@COUTXNS+' 
					    '+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+' THEN -(A.XN_QTY)
					   ELSE 0 END)
					   )) AS STOCK_QTY 
				,CONVERT(NUMERIC(18),SUM(
					   (CASE WHEN A.XN_TYPE IN '+@CINXNS+' 
					   '+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+' THEN (A.XN_QTY*'+@CPURCHASE_PRICEEXP+')
					   WHEN A.XN_TYPE IN '+@COUTXNS+' 
					   '+(CASE WHEN ISNULL(@CSETTLEMENTDT,'') IN ('','01-01-1900') THEN '' 
					  ELSE ' AND A.XN_DT<'''+@CSETTLEMENTDT+''' ' END)+' THEN -(A.XN_QTY*'+@CPURCHASE_PRICEEXP+')
					   ELSE 0 END)
					   )) AS STOCK_VALUE 							   							   
				,CONVERT(NUMERIC(18),0) AS SELL_THRU	   
				INTO '+@CTMPTABLE1+'
				FROM '+@CTABLE+'  
				WHERE SKU.RECEIPT_DT BETWEEN '''+@CFROMDT+''' AND '''+@CTODT+''''
				+(CASE WHEN ISNULL(@CFILTER,'')='' THEN '' ELSE ' AND ' END)+ISNULL(@CFILTER,'')
				+' GROUP BY '+@CLAYOUT+',DATENAME(MONTH,SKU.RECEIPT_DT)'
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	
	SET @CCMD=N'UPDATE '+@CTMPTABLE1+' SET SELL_THRU=(CASE WHEN (ISNULL(SALE_QTY,0)+ISNULL(STOCK_QTY,0))=0 THEN 0
										ELSE ISNULL(SALE_QTY,0)*100/(ISNULL(SALE_QTY,0)+ISNULL(STOCK_QTY,0)) END)'
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	--GETTING THE MONTHNAMES BETWEEN THE FROM DATE AND TODATE RANGE TO PIVOT THE DATA....
	SELECT @DMONTHDATES=@DFROMDT,@DCLOSING_STOCK_DATE=@DFROMDT
	WHILE @DMONTHDATES<@DTODT
	BEGIN
		SELECT @CMONTHLIST=ISNULL(@CMONTHLIST+',','')+QUOTENAME('X__'+DATENAME(MONTH,@DMONTHDATES))
		
		SET @DMONTHDATES=DATEADD(MONTH,1,@DMONTHDATES)
	END
	
	--GETTING THE DYNAMIC COLUMN LIST THE USER HAS SELECTED...
	SELECT @CDYNAMIC_COLLIST=ISNULL(@CDYNAMIC_COLLIST+',','')+COLUMN_NAME
	FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME=@CTMPTABLE AND COLUMN_NAME NOT IN 
	('OLD_SALE_QTY','OLD_STOCK_QTY','OLD_SALE_VALUE','OLD_STOCK_VALUE'
	 ,'OLD_SELL_THRU')
	
	/*
		CREATING @CTMPTABLE11 AND @CTMPTABLE22 FROM @CTMPTABLE1 AND @CTMPTABLE2 RESPECTIVELY SO THAT 
		PIVOT TABLE DONOT GENERATE DUPLICATE ROWS
	*/
	SET @CCMD=N'SELECT '+@CDYNAMIC_COLLIST+',MONTH,SALE_QTY INTO '+@CTMPTABLE11+' FROM '+@CTMPTABLE1
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'SELECT '+@CDYNAMIC_COLLIST+',MONTH,SALE_VALUE INTO '+@CTMPTABLE2+' FROM '+@CTMPTABLE1
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'SELECT '+@CDYNAMIC_COLLIST+',MONTH,STOCK_QTY INTO '+@CTMPTABLE22+' FROM '+@CTMPTABLE1
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'SELECT '+@CDYNAMIC_COLLIST+',MONTH,STOCK_VALUE INTO '+@CTMPTABLE33+' FROM '+@CTMPTABLE1
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'SELECT '+@CDYNAMIC_COLLIST+',MONTH,SELL_THRU INTO '+@CTMPTABLE44+' FROM '+@CTMPTABLE1
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'SELECT '+@CDYNAMIC_COLLIST+',1 AS XN_ORDER,CONVERT(VARCHAR(50),''SALE QTY'') AS XN_TYPE,CONVERT(NUMERIC(18),0) AS X__OLDER,'+@CMONTHLIST
			   +' INTO '+@CTMPTABLE4+'
			   FROM '+@CTMPTABLE11+'
			   PIVOT (SUM(SALE_QTY) FOR MONTH IN ('+@CMONTHLIST+')) AS PTABLE
			   UNION ALL
			   SELECT '+@CDYNAMIC_COLLIST+',2 AS XN_ORDER,''SALE VALUE'' AS XN_TYPE,CONVERT(NUMERIC(18),0) AS X__OLDER,'+@CMONTHLIST
			   +' FROM '+@CTMPTABLE2+'
			   PIVOT (SUM(SALE_VALUE) FOR MONTH IN ('+@CMONTHLIST+')) AS PTABLE
			   UNION ALL
			   SELECT '+@CDYNAMIC_COLLIST+',3 AS XN_ORDER,''STOCK QTY'' AS XN_TYPE,CONVERT(NUMERIC(18),0) AS X__OLDER,'+@CMONTHLIST
			   +'FROM '+@CTMPTABLE22+'
			   PIVOT (SUM(STOCK_QTY) FOR MONTH IN ('+@CMONTHLIST+')) AS PTABLE
			   UNION ALL
			   SELECT '+@CDYNAMIC_COLLIST+',4 AS XN_ORDER,''STOCK VALUE'' AS XN_TYPE,CONVERT(NUMERIC(18),0) AS X__OLDER,'+@CMONTHLIST
			   +'FROM '+@CTMPTABLE33+'
			   PIVOT (SUM(STOCK_VALUE) FOR MONTH IN ('+@CMONTHLIST+')) AS PTABLE
			   UNION ALL
			   SELECT '+@CDYNAMIC_COLLIST+',5 AS XN_ORDER,''SELL_THRU'' AS XN_TYPE,CONVERT(NUMERIC(18),0) AS X__OLDER,'+@CMONTHLIST
			   +'FROM '+@CTMPTABLE44+'
			   PIVOT (SUM(SELL_THRU) FOR MONTH IN ('+@CMONTHLIST+')) AS PTABLE
			   ORDER BY '+@CDYNAMIC_COLLIST+',XN_ORDER'
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	--CALCULATING THE SALE THRU PERCENTAGE FOR OLD DATA
	SET @CCMD=N'SELECT '+@CDYNAMIC_COLLIST+',OLD_SALE_QTY,OLD_SALE_VALUE,OLD_STOCK_QTY,OLD_STOCK_VALUE
				,CONVERT(NUMERIC(18),(CASE WHEN (ISNULL(OLD_SALE_QTY,0)+ISNULL(OLD_STOCK_QTY,0))=0 THEN 0
				ELSE  (ISNULL(OLD_SALE_QTY,0)*100)/(ISNULL(OLD_SALE_QTY,0)+ISNULL(OLD_STOCK_QTY,0))
														 END)) AS OLD_SALE_THRU 
				INTO '+@CTMPTABLE5+'
				FROM '+@CTMPTABLE
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'SELECT '+@CDYNAMIC_COLLIST+',(CASE WHEN XN_TYPE=''OLD_SALE_QTY''   THEN 1 
												   WHEN XN_TYPE=''OLD_SALE_VALUE'' THEN 2
												   WHEN XN_TYPE=''OLD_STOCK_QTY''  THEN 3
												   WHEN XN_TYPE=''OLD_STOCK_VALUE'' THEN 4
								  ELSE 5 END) AS XN_ORDER,XN_TYPE,AMOUNT 
	INTO '+@CTMPTABLE6+'
	FROM '+@CTMPTABLE5+'
	UNPIVOT
	(
		AMOUNT FOR XN_TYPE IN 
		(
			OLD_SALE_QTY
		   ,OLD_SALE_VALUE
		   ,OLD_STOCK_QTY
		   ,OLD_STOCK_VALUE
		   ,OLD_SALE_THRU
		)	
	)UPT
	ORDER BY '+@CDYNAMIC_COLLIST+',XN_ORDER'
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SELECT @COLD_CURRENT_JOINSTR=ISNULL(@COLD_CURRENT_JOINSTR+' AND ','')+'A.'+COLUMN_NAME+'=B.'+COLUMN_NAME
	FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME=@CTMPTABLE6 AND COLUMN_NAME NOT IN 
	('XN_TYPE','AMOUNT')
	
	SET @CCMD=N'UPDATE A SET X__OLDER=ISNULL(B.AMOUNT,0)
							,XN_TYPE=(CASE WHEN A.XN_TYPE=''SELL_THRU'' THEN ''SELL THRU QTY(%)'' 
							 ELSE A.XN_TYPE END)
				FROM '+@CTMPTABLE4+' A
				LEFT JOIN '+@CTMPTABLE6+' B ON '+@COLD_CURRENT_JOINSTR
	
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD			
	
	SET @CCMD=N'SELECT * FROM '+@CTMPTABLE4+'
				'+(CASE WHEN @BINCLUDEVALUE=1 THEN '' ELSE ' WHERE XN_TYPE NOT IN (''SALE VALUE'',''STOCK VALUE'')' END)
				+' ORDER BY '+@CDYNAMIC_COLLIST+',XN_ORDER'
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	GOTO END_PROC
		
END_PROC:
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE1+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE1
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE2+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE2
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE3+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE3
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE4+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE4
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE5+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE5
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE6+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE6
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE7+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE7
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE11+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE11
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE22+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE22
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE33+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE33
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CCMD=N'IF OBJECT_ID('''+@CTMPTABLE44+''',''U'') IS NOT NULL
					DROP TABLE '+@CTMPTABLE44
	PRINT @CCMD
	EXEC SP_EXECUTESQL @CCMD
END
--END OF PROCEDURE - SP3S_PUR_SLS
