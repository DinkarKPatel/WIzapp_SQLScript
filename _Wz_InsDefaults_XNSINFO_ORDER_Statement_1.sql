DELETE FROM XNSINFO_ORDER 


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='MSTLOC')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('MSTLOC' ,'LOCATION MASTER' ,50,50 ,GETDATE())
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='MSTDBI')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('MSTDBI' ,'POS DASHBOARD INFO' ,50,50 ,GETDATE())
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='MSTCUS')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('MSTCUS' ,'CUSTOMER MASTER FROM HO' ,50,50 ,GETDATE())
END



IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='MSTUSRROLE')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('MSTUSRROLE' ,'USER MASTER' ,100,100 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='MSTINV')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('MSTINV' ,'INVENTORY MASTER' ,150,150 ,GETDATE())
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='MSTSCH')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('MSTSCH' ,'SALE SETUP' ,200,200 ,GETDATE())
END



IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='MSTEOSS')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('MSTEOSS' ,'SALE SETUP (NEW)' ,200,200 ,GETDATE())
END



IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='MSTACT')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('MSTACT' ,'LEDGER MASTER' ,250,250 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='MSTWPAY')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('MSTWPAY' ,'EMPLOYEE MASTER(PAYROLL)' ,300,300 ,GETDATE())
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='DOCXNRACK')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('DOCXNRACK','DATA RECONCILIATION ACKNOWLEDGEMENT' ,350,350 ,GETDATE())
END

--******************************************************************************************

IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='DOCMRP')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('DOCMRP' ,'MULTIPLE MRP' ,10050,10050 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='DOCPCO')
BEGIN
	INSERT XNSINFO_ORDER( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('DOCPCO' ,'PETTY CASH' ,20950,20950 ,GETDATE())
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='DOCPO_APP')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('DOCPO_APP' ,'PURCHASE ORDER(APPROVAL)' ,10100,10100 ,GETDATE())
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='DOCPO')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('DOCPO' ,'PURCHASE ORDER' ,10150,10150 ,GETDATE())
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='DOCCHO')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('DOCCHO' ,'CHALLANS' ,10200,10200 ,GETDATE())
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='DOCZVC')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('DOCZVC' ,'ZERO VALUE CHALLANS' ,10200,10200 ,GETDATE())
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='DOCPRT_APP')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('DOCPRT_APP' ,'DEBIT NOTES(PURCHASE RETURN)(APPROVAL)' ,10250,10250 ,GETDATE())
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='DOCPRT')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('DOCPRT' ,'DEBIT NOTES(PURCHASE RETURN)' ,10300,10300 ,GETDATE())
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='DOCWSL_APP')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('DOCWSL_APP' ,'WHOLESALE(APPROVAL)' ,10350,10350 ,GETDATE())
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='DOCDTR')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('DOCDTR' ,'DATA RECONCILIATION' ,10400,10400 ,GETDATE())
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNRECON')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNRECON' ,'AUTO RECON DATA' ,10400,10400 ,GETDATE())
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='DOCIRT')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('DOCIRT' ,'ITEM RATE REVISION' ,10500,10500 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='DOCMBQ')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('DOCMBQ' ,'MAXIMUM BALANCE QUANTITY' ,21000,21000,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSAPR')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSAPR' ,'APPROVAL RETURN' ,21010,21010,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='DOCBC')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('DOCBC' ,'BAR CODE REQUEST FROM HO' ,10050,10050 ,GETDATE() )
END

IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='DOCSKUREQ')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('DOCSKUREQ' ,'BAR CODE REQUEST FROM HO' ,10050,10050 ,GETDATE() )
END

IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSOPS')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSOPS' ,'OPENING STOCK AT LOCATION' ,21050,21050,GETDATE() )
END





--**********************************************************************************************

IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSPUR')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSPUR' ,'PURCHASE DATA(XNS)' ,20050,20050 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSPO')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSPO' ,'PURCHASE ORDER(XNS)' ,20100,20100 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSCNC')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSCNC' ,'CANCELLATION/UNCANCELLATION(XNS)' ,20150,20150 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSIRR')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSIRR' ,'ITEM RATE REVISION(XNS)' ,20200 ,20200,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSSCF')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSSCF' ,'SPLIT AND COMBINE(XNS)' ,20250,20250 ,GETDATE())
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSWSR')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSWSR' ,'WHOLESALE RETURN(XNS)' ,20300,20300 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSWPS')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSWPS' ,'WHOLESALE PACKING SLIP(XNS)' ,20350,20350 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSWSL')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSWSL' ,'WHOLESALE(XNS)' ,20400,20400 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSWSLORD')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSWSLORD' ,'BUYER ORDER(XNS)' ,20400,20400 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSRPS')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSRPS' ,'RETAIL PACKING SLIP' ,20450,20450 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSSLS')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSSLS' ,'SALES DATA(XNS)' ,20500,20500 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSAPP')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSAPP' ,'APPROVAL SALE(XNS)' ,20550,20550 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSARC')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSARC' ,'CUSTOMER RECEIPTS(XNS)' ,20600,20600 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSPRT')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSPRT' ,'PURCHASE RETURN(XNS)' ,20650,20650 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSATD')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSATD' ,'ATTENDANCE(XNS)' ,20700,20700 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSPTC')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSPTC' ,'PETTY CASH REGISTER(XNS)' ,20800,20800 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSDEND')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSDEND' ,'DAY OPEN/CLOSE LOG(XNS)' ,20850,20850 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSCUS')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSCUS' ,'CUSTOMER MASTER (XNS)' ,20900,20900 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSBCO')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSBCO' ,'INTER BIN TRANSFER (XNS)' ,20900,20900 ,GETDATE() )
END


IF NOT EXISTS(SELECT TOP 1 XN_TYPE FROM XNSINFO_ORDER WHERE XN_TYPE='XNSDNPS')
BEGIN
	INSERT XNSINFO_ORDER	( XN_TYPE, XN_DESC, MERGING_ORDER,SENDING_ORDER, LAST_UPDATE )  
	VALUES('XNSDNPS' ,'DEBIT NOTE PACK SLIP (XNS)' ,20900,20900 ,GETDATE() )
END
