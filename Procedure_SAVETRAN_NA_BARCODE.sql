CREATE PROCEDURE SAVETRAN_NA_BARCODE
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CFINYEAR			VARCHAR(10),
	@CXNMEMOID			VARCHAR(40)='',
	@CLOCID				VARCHAR(2)='',
	@CMEMONOPREFIX      varchar(10)=''

)
--WITH ENCRYPTION
AS
BEGIN
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME1		VARCHAR(100),
			@CDETAILTABLENAME2		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME1	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE1		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(2),
			@CLOCATIONID			VARCHAR(2),
			@CHODEPTID				VARCHAR(2),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@LENABLETEMPDATABASE	BIT,
			@CAGENCY_CODE		VARCHAR(10),
			@CJOB_CODE VARCHAR(10)

	DECLARE @OUTPUT TABLE (ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))
	
	if @CMEMONOPREFIX=''
	SET @CMEMONOPREFIX=@CLOCID

	SET @NSTEP = 10		-- SETTTING UP ENVIRONMENT

	
	SET @CTEMPDBNAME = ''

	SET @CMASTERTABLENAME	= 'PPC_FG_BARCODE_NA_MST'
	SET @CDETAILTABLENAME1	= 'PPC_FG_BARCODE_NA_DET'

	
	SET @CTEMPMASTERTABLENAME	= 'PPC_PPC_FG_BARCODE_NA_MST_UPLOAD'
	SET @CTEMPDETAILTABLENAME1	= 'PPC_PPC_FG_BARCODE_NA_DET_UPLOAD'
	
	
	
	SET @CTEMPMASTERTABLE	=  @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE1	=  @CTEMPDETAILTABLENAME1

	
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'MEMO_ID'
	SET @CMEMONO			= 'MEMO_NO'
	SET @NMEMONOLEN			= LEN(@CMEMONOPREFIX)+6
	
	IF ISNULL(@CLOCID,'')=''
		SELECT @CLOCATIONID	= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID'
	ELSE
		SELECT @CLOCATIONID=@CLOCID
		
	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		

	BEGIN TRANSACTION
	BEGIN TRY
		
		SET @NSTEP = 20

	 IF @NUPDATEMODE = 3
		BEGIN
		    IF (@CXNMEMOID IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED...'
				  GOTO END_PROC  		
			END
			
			SET @CCMD=N' UPDATE '+@CMASTERTABLENAME+' SET CANCELLED=1,LAST_UPDATE=GETDATE() WHERE '+@CKEYFIELD1+'='''+@CXNMEMOID+'''  '
	        EXEC SP_EXECUTESQL @CCMD
	        

			UPDATE A SET Barcode_Cancelled=0 FROM JOBWORK_PMT A
			JOIN  PPC_FG_BARCODE_NA_DET B ON A.PRODUCT_CODE=B.PRODUCT_CODE
			WHERE B.MEMO_ID=@CXNMEMOID AND B.PARA2_CODE ='0000000'

			UPDATE A SET PARA2_CODE ='0000000'
			FROM SKU A
			JOIN  PPC_FG_BARCODE_NA_DET B ON A.PRODUCT_CODE=B.PRODUCT_CODE
			JOIN PPC_FG_BARCODE_NA_MST C ON B.MEMO_ID=C.MEMO_ID
			WHERE C.MEMO_ID=@CXNMEMOID     

			UPDATE A SET para2_name  ='NA'
			FROM sku_names A
			JOIN  PPC_FG_BARCODE_NA_DET B ON A.PRODUCT_CODE=B.PRODUCT_CODE
			JOIN PPC_FG_BARCODE_NA_MST C ON B.MEMO_ID=C.MEMO_ID
			WHERE C.MEMO_ID=@CXNMEMOID     
			
			
			
			GOTO END_PROC
		  END	
       
     
		--GETTING DEPT_ID FROM TEMP MASTER TABLE
		SET @CCMD = 'SELECT @CMEMODEPTID = LEFT(MEMO_ID,2), @CKEYFIELDVAL1 = MEMO_ID FROM ' + @CTEMPMASTERTABLE +' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''' '
		EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT, @CKEYFIELDVAL1 VARCHAR(50) OUTPUT', 
								  @CMEMODEPTID OUTPUT, @CKEYFIELDVAL1 OUTPUT
		IF (@CMEMODEPTID IS NULL)
		BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED...'
			  GOTO END_PROC  		
		END
        
       IF NOT EXISTS(SELECT TOP 1 'U' FROM   JWR_MISSING_BARCODE_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID))))
       BEGIN
           SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' Blank Details Can Not Be Saved...'
		   GOTO END_PROC  
     
       END
       
       
       
		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	
			SET @NSTEP = 50		-- GENERATING NEW KEY
			
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN
				-- GENERATING NEW MRR_NO		
				SET @NSAVETRANLOOP=0
				WHILE @NSAVETRANLOOP=0
				BEGIN
					EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
									@CFINYEAR,0, @CMEMONOVAL OUTPUT   
					
					SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
											WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
											AND FIN_YEAR = '''+@CFINYEAR+''' )
									SET @NLOOPOUTPUT=0
								ELSE
									SET @NLOOPOUTPUT=1'
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
				END

				IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
					  GOTO END_PROC  		
				END

				SET @NSTEP = 60		-- GENERATING NEW ID

				-- GENERATING NEW ORDER ID
				SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+ REPLICATE('0', 15-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL))
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  GOTO END_PROC
				END
				
				SET @NSTEP = 70
				-- CHECK WETHER THE MEMO ID IS STILL LATER
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  GOTO END_PROC
				END

				SET @NSTEP = 80		-- UPDATING NEW ID INTO TEMP TABLES

				-- UPDATING NEWLY GENERATED MEMO NO AND MEMO ID IN BUYER ORDER MST AND BUYER ORDER DET TEMP TABLES
				SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
							@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
				PRINT @CCMD		
				EXEC SP_EXECUTESQL @CCMD
				
				
	    END
		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
			SET @NSTEP = 110		-- GETTING ID INFO FROM TEMP TABLE
			
			-- GETTING ORDER_ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ORDER_ID, @CMEMONOVAL = ORDER_NO FROM ' + @CTEMPMASTERTABLE +' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  GOTO END_PROC  		
			END
			
			SET @NSTEP = 120		-- UPDATING SENT_TO_HO FLAG TEMP TABLE
			
			SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE LEFT(MEMO_ID,5) = ''LATER'' AND SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
			PRINT @CCMD	
			EXEC SP_EXECUTESQL @CCMD
			
			
			DELETE FROM PPC_FG_BARCODE_NA_DET WHERE MEMO_ID = @CKEYFIELDVAL1
			
	    END					-- END OF EDITMODE
        
      
        DECLARE @FILTER VARCHAR(MAX)
	    SET @FILTER=' B.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
		SET @NSTEP = 150
		
		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			, @BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@FILTER

		
		  SELECT @CAGENCY_CODE=AGENCY_CODE,@CJOB_CODE =JOB_CODE  FROM PPC_FG_BARCODE_NA_MST WHERE MEMO_ID =@CKEYFIELDVAL1


		   
			IF OBJECT_ID ('TEMPDB..#TMPNAQTY','U') IS NOT NULL
				DROP TABLE #TMPNAQTY
			SELECT jobcard_id , AGENCY_CODE,JOB_CODE,ARTICLE_CODE ,PARA1_CODE,SUM(REC_QTY) AS REC_QTY
			into #TMPNAQTY
			FROM JWR_MISSING_BARCODE_UPLOAD A  where sp_id=LTRIM(RTRIM(STR(@NSPID)))
			AND A.PARA2_CODE <>'0000000' 
			group by jobcard_id ,AGENCY_CODE,JOB_CODE,ARTICLE_CODE ,PARA1_CODE

		
			IF OBJECT_ID ('TEMPDB..#TMPRECBARCODE','U') IS NOT NULL
			   DROP TABLE #TMPRECBARCODE
           
			 ;WITH RECBARCODE AS 
			 (
				SELECT TMP.AGENCY_CODE,'h1' DEPT_ID,PMT.PRODUCT_CODE,1 AS QUANTITY,'000' AS BIN_ID,TMP.JOB_CODE,'' AS DUE_DT,111 AS SP_ID,
					   SR=row_number () OVER (partition by TMP.article_code,TMP.para1_code   ORDER BY A.PRODUCT_CODE),
					  TMP.ARTICLE_CODE ,TMP.PARA1_CODE ,cast('' as varchar(10)) as PARA2_CODE ,TMP.REC_QTY,newid() AS TMP_ROW_ID,
					 ISNULL(PMT.BOM_VALUE,0)+ISNULL(FG_VALUE,0) AS PP_VALUE
				 FROM JOBWORK_PMT PMT (NOLOCK)
				JOIN SKU (NOLOCK) ON PMT.PRODUCT_CODE =SKU.PRODUCT_CODE 
				JOIN ORD_PLAN_BARCODE_DET A (NOLOCK) ON PMT.PRODUCT_CODE=A.PRODUCT_CODE
				JOIN ORD_PLAN_DET T1 (NOLOCK) ON  A.REFROW_ID=T1.ROW_ID
				JOIN ORD_PLAN_MST T2 (NOLOCK) ON  T1.MEMO_ID=T2.MEMO_ID 
				JOIN #TMPNAQTY TMP (NOLOCK) ON sku.ARTICLE_CODE =TMP.ARTICLE_CODE AND sku.PARA1_CODE =TMP.PARA1_CODE  AND (ISNULL(TMP.JOBCARD_ID,'')=T2.MEMO_ID OR ISNULL(TMP.JOBCARD_ID,'')='')
				WHERE  T2.CANCELLED=0 AND   pmt.agency_code =@CAGENCY_CODE  AND PMT.JOB_CODE =@CJOB_CODE 
				AND LEFT(T2.MEMO_ID,2)=@CLOCID
				AND sku.PARA2_CODE ='0000000' 
							--and pmt.PRODUCT_CODE ='H1R506010'
			
			)

		SELECT * into #TMPRECBARCODE  FROM RECBARCODE WHERE SR<= REC_QTY


					IF OBJECT_ID ('TEMPDB..#TMPNAQTY_SIZEASSIGN','U') IS NOT NULL
						DROP TABLE #TMPNAQTY_SIZEASSIGN

					SELECT jobcard_id , AGENCY_CODE,JOB_CODE,ARTICLE_CODE ,PARA1_CODE,para2_code ,
					SUM(REC_QTY) AS REC_QTY,
					NEWID() as row_ID
					into #TMPNAQTY_SIZEASSIGN
					FROM JWR_MISSING_BARCODE_UPLOAD A  where sp_id=LTRIM(RTRIM(STR(@NSPID)))
					AND a.PARA2_CODE <>'0000000' 
					group by jobcard_id ,AGENCY_CODE,JOB_CODE,ARTICLE_CODE ,PARA1_CODE,para2_code 


					DECLARE @CARTICLE_CODE VARCHAR(10),@CPARA1_CODE VARCHAR(10),@CPARA2_CODE VARCHAR(10),@NRECQTY NUMERIC(10,0),
					@CROW_ID VARCHAR(50)

						WHILE EXISTS (SELECT TOP 1'U' FROM #TMPNAQTY_SIZEASSIGN)
						BEGIN
			    
							SELECT TOP 1 @CARTICLE_CODE=ARTICLE_CODE ,@CPARA1_CODE=PARA1_CODE,@CPARA2_CODE=PARA2_CODE,@NRECQTY=REC_QTY ,
								  @CROW_ID=ROW_ID 
							FROM #TMPNAQTY_SIZEASSIGN

							;WITH CTE AS
							(
								SELECT SIZESR=ROW_NUMBER () OVER(ORDER BY PRODUCT_CODE ), * 
								FROM #TMPRECBARCODE
								WHERE ARTICLE_CODE =@CARTICLE_CODE AND PARA1_CODE =@CPARA1_CODE 
								AND PARA2_CODE =''
							)

							UPDATE CTE SET PARA2_CODE = @CPARA2_CODE WHERE SIZESR<=@NRECQTY

							DELETE  FROM #TMPNAQTY_SIZEASSIGN WHERE ROW_ID=@CROW_ID

						END

				DECLARE @NTOTALQTY NUMERIC(10,0),@NCALTOTALQTY NUMERIC(10,0)

				select @NCALTOTALQTY=sum(quantity) from #TMPRECBARCODE

				select @NTOTALQTY=SUM(rec_qty)  from JWR_MISSING_BARCODE_UPLOAD (NOLOCK) where sp_id =LTRIM(RTRIM(STR(@NSPID))) AND PARA2_CODE <>'0000000' 
			

				IF ISNULL(@NTOTALQTY,0)<>ISNULL(@NCALTOTALQTY,0)
				BEGIN
				    	SET @CERRORMSG = 'MISMATCH IN TOTAL Quantity:'+RTRIM(LTRIM(STR(ISNULL(@NTOTALQTY,0))))+' & BARCODE ASSIGN QTY  ' +RTRIM(LTRIM(STR(ISNULL(@NCALTOTALQTY,0))))
					    GOTO END_PROC

				END
				

				
		

			  INSERT PPC_FG_BARCODE_NA_DET	( MEMO_ID, PRODUCT_CODE, ROW_ID, QUANTITY ,PARA2_CODE)  
			  SELECT @CKEYFIELDVAL1 AS 	MEMO_ID, PRODUCT_CODE, ROW_ID=CAST(NEWID() AS VARCHAR(100)), QUANTITY=1 ,PARA2_CODE 
			  FROM #TMPRECBARCODE
			  

			
			UPDATE A SET PARA2_CODE =B.PARA2_CODE 
			FROM SKU A (NOLOCK)
			JOIN  #TMPRECBARCODE B ON A.PRODUCT_CODE=B.PRODUCT_CODE

	        UPDATE SN SET PARA2_NAME =P2.PARA2_NAME FROM  
			#TMPRECBARCODE A (NOLOCK)
			JOIN PARA2 P2 (NOLOCK) ON A.PARA2_CODE =P2 .PARA2_CODE 
			JOIN SKU_NAMES SN (NOLOCK) ON SN.PRODUCT_CODE =A.PRODUCT_CODE 




			if exists (select top 1'u' from JWR_MISSING_BARCODE_UPLOAD where sp_id=LTRIM(RTRIM(STR(@NSPID))) and  PARA2_CODE ='0000000'  and isnull(REC_QTY,0)>0)
			begin


					IF OBJECT_ID ('TEMPDB..#TMPCNCQTY','U') IS NOT NULL
						DROP TABLE #TMPCNCQTY

					SELECT jobcard_id , AGENCY_CODE,JOB_CODE,ARTICLE_CODE ,PARA1_CODE,SUM(REC_QTY ) AS REC_QTY
					into #TMPCNCQTY
					FROM JWR_MISSING_BARCODE_UPLOAD A  where sp_id=LTRIM(RTRIM(STR(@NSPID)))
					AND PARA2_CODE ='0000000' 
					group by jobcard_id ,AGENCY_CODE,JOB_CODE,ARTICLE_CODE ,PARA1_CODE

		
					IF OBJECT_ID ('TEMPDB..#TMPCNCBARCODE','U') IS NOT NULL
					   DROP TABLE #TMPCNCBARCODE
           
					 ;WITH RECBARCODE AS 
					 (
						SELECT TMP.AGENCY_CODE,'h1' DEPT_ID,PMT.PRODUCT_CODE,1 AS QUANTITY,'000' AS BIN_ID,TMP.JOB_CODE,'' AS DUE_DT,111 AS SP_ID,
							   SR=row_number () OVER (partition by TMP.article_code,TMP.para1_code   ORDER BY A.PRODUCT_CODE),
							  TMP.ARTICLE_CODE ,TMP.PARA1_CODE ,cast('' as varchar(10)) as PARA2_CODE ,TMP.REC_QTY,newid() AS TMP_ROW_ID,
							 ISNULL(PMT.BOM_VALUE,0)+ISNULL(FG_VALUE,0) AS PP_VALUE
						 FROM JOBWORK_PMT PMT (NOLOCK)
						JOIN SKU (NOLOCK) ON PMT.PRODUCT_CODE =SKU.PRODUCT_CODE 
						JOIN ORD_PLAN_BARCODE_DET A (NOLOCK) ON PMT.PRODUCT_CODE=A.PRODUCT_CODE
						JOIN ORD_PLAN_DET T1 (NOLOCK) ON  A.REFROW_ID=T1.ROW_ID
						JOIN ORD_PLAN_MST T2 (NOLOCK) ON  T1.MEMO_ID=T2.MEMO_ID 
						JOIN #TMPCNCQTY TMP (NOLOCK) ON sku.ARTICLE_CODE =TMP.ARTICLE_CODE AND sku.PARA1_CODE =TMP.PARA1_CODE  AND (ISNULL(TMP.JOBCARD_ID,'')=T2.MEMO_ID OR ISNULL(TMP.JOBCARD_ID,'')='')
						WHERE  T2.CANCELLED=0 AND   pmt.agency_code =@CAGENCY_CODE  AND PMT.JOB_CODE =@CJOB_CODE 
						AND LEFT(T2.MEMO_ID,2)=@CLOCID
						AND sku.PARA2_CODE ='0000000' 
									--and pmt.PRODUCT_CODE ='H1R506010'
			
					)

				SELECT * into #TMPCNCBARCODE  FROM RECBARCODE WHERE SR<= REC_QTY

				select @NCALTOTALQTY=sum(quantity) from #TMPCNCBARCODE
				select @NTOTALQTY=SUM(isnull(REC_QTY,0) )  from JWR_MISSING_BARCODE_UPLOAD (NOLOCK) where sp_id =LTRIM(RTRIM(STR(@NSPID))) AND PARA2_CODE ='0000000' 
			

				IF ISNULL(@NTOTALQTY,0)<>ISNULL(@NCALTOTALQTY,0)
				BEGIN
				    	SET @CERRORMSG = 'MISMATCH IN TOTAL Quantity:'+RTRIM(LTRIM(STR(ISNULL(@NTOTALQTY,0))))+' & BARCODE Cancalled QTY  ' +RTRIM(LTRIM(STR(ISNULL(@NCALTOTALQTY,0))))
					    GOTO END_PROC

				END

			 INSERT PPC_FG_BARCODE_NA_DET	( MEMO_ID, PRODUCT_CODE, ROW_ID, QUANTITY ,PARA2_CODE)  
			  SELECT @CKEYFIELDVAL1 AS 	MEMO_ID, PRODUCT_CODE, ROW_ID=CAST(NEWID() AS VARCHAR(100)), QUANTITY=1 ,'0000000' as PARA2_CODE 
			  FROM #TMPCNCBARCODE

				UPDATE B SET BARCODE_CANCELLED =1 
				FROM #TMPCNCBARCODE A
				JOIN JOBWORK_PMT B ON A.PRODUCT_CODE =B.PRODUCT_CODE 



		end

		
	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		GOTO END_PROC
	END CATCH

	
END_PROC:
	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
			COMMIT TRANSACTION
		ELSE
			ROLLBACK
	END
	
	INSERT @OUTPUT ( ERRMSG, MEMO_ID)
		VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )

	SELECT * FROM @OUTPUT	
	
	IF ISNULL(@CERRORMSG,'')='' 
	BEGIN
	   DELETE FROM PPC_PPC_FG_BARCODE_NA_MST_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))
	   DELETE FROM JWR_MISSING_BARCODE_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))	
	 END

END						
--****END OF PROCEDURE PPC_SAVETRAN_BARCODE_PRINt**--