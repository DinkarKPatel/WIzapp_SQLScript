create PROCEDURE SAVETRAN_BFP_PRD
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CMEMONOPREFIX		VARCHAR(50),
	@CFINYEAR			VARCHAR(10),
	@CMACHINENAME		VARCHAR(100)='',
	@CWINDOWUSERNAME	VARCHAR(100)='',
	@CWIZAPPUSERCODE	VARCHAR(10)='0000000',
	@CBARCODEPREFIX		VARCHAR(20)='',
	@LGENERATEBARCODES	BIT=0,
	@CMEMOID			VARCHAR(40)=''
	
)
--WITH ENCRYPTION
AS
BEGIN
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(4),
			@CLOCATIONID			VARCHAR(4),
			@CHODEPTID				VARCHAR(4),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@NSUBTOTAL NUMERIC(20,2),
			@BNEGSTOCKFOUND BIT,
			@CWSLINVOICEID	VARCHAR(22),
			@BPURTHROUGHIMPORT	BIT,@CMSG VARCHAR(200),@NTAX NUMERIC(20,2),
			@CLOCID	VARCHAR(4)
			
			DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	BEGIN TRY
		
		BEGIN TRANSACTION
			SET @NSTEP = 10	-- SETTTING UP ENVIRONMENT

			SET @CTEMPDBNAME = ''

			SET @CMASTERTABLENAME	= 'PRD_STK_TRANSFER_DTM_MST'
			SET @CDETAILTABLENAME	= 'PRD_STK_TRANSFER_DTM_DET'
			
			SET @CTEMPMASTERTABLENAME	= 'TEMP_PRD_STK_TRANSFER_DTM_MST_'+LTRIM(RTRIM(STR(@NSPID)))
			SET @CTEMPDETAILTABLENAME	= 'TEMP_PRD_STK_TRANSFER_DTM_DET_'+LTRIM(RTRIM(STR(@NSPID)))
			SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
			SET @CTEMPDETAILTABLE	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME
			
			SET @CERRORMSG			= ''
			SET @CKEYFIELD1			= 'MEMO_ID'
			SET @CMEMONO			= 'MEMO_NO'
			SET @NMEMONOLEN			= 10
			SET @NSTEP = 20
			
				SET @CCMD = 'SELECT @CKEYFIELDVAL1 = location_code  FROM '+@CTEMPMASTERTABLE
				EXEC SP_EXECUTESQL @CCMD, N'@CLOCID VARCHAR(4) OUTPUT', @CLOCID OUTPUT
								  
		
				SELECT @CLOCATIONID=@CLOCID

				IF ISNULL(@CLOCATIONID,'')=''
				 BEGIN
					SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
					GOTO END_PROC    
				 END
			
			IF @NUPDATEMODE = 3 --CALLED FROM CANCELLATION
			BEGIN
				SET @CCMD=N'UPDATE '+@CMASTERTABLENAME+' SET CANCELLED=1,LAST_UPDATE=GETDATE() WHERE MEMO_ID='''+@CMEMOID+''''
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD
				
				EXEC UPDATEPMT_PRD 
				  @CXNTYPE			= 'BFP'  
				, @CXNNO			= ''
				, @CXNID			= @CMEMOID
				, @NREVERTFLAG		= 1
				, @NALLOWNEGSTOCK	= 0
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= @NUPDATEMODE				
				, @CCMD				= @CCMDOUTPUT OUTPUT
				
				IF @CCMDOUTPUT <> ''
				BEGIN
					PRINT @CCMDOUTPUT
					
					SET @NSTEP = 30
					SET @CKEYFIELDVAL1=	@CMEMOID
					SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'
					SET @BNEGSTOCKFOUND=1				
					EXEC SP_EXECUTESQL @CCMDOUTPUT
					GOTO END_PROC
				END
				ELSE
				BEGIN
				SET @CKEYFIELDVAL1=	@CMEMOID
				GOTO END_PROC
				END
			END
			
			
			IF @NUPDATEMODE = 1 -- ADDMODE	
			BEGIN	
				SET @CCMD = 'SELECT @CKEYFIELDVAL1 = MEMO_ID FROM '+@CTEMPMASTERTABLE
				EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT', 
								  @CKEYFIELDVAL1 OUTPUT
				--SELECT @CKEYFIELDVAL1				  
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
				BEGIN
					PRINT 'GENERATING NEW KEY'
					SET @NSAVETRANLOOP=0
					WHILE @NSAVETRANLOOP=0
					BEGIN
						SET @NSTEP=40
						EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
										@CFINYEAR,0, @CMEMONOVAL OUTPUT   
						
						PRINT @CMEMONOVAL
						
						SET @NSTEP=50
						SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
												WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
												AND FIN_YEAR = '''+@CFINYEAR+''' )
										SET @NLOOPOUTPUT=0
									ELSE
										SET @NLOOPOUTPUT=1'
						PRINT @CCMD
						EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
					END
					PRINT 'GENERATING NEW KEY... START'			

					SET @NSTEP = 60		-- GENERATING NEW ID

					-- GENERATING NEW MRR ID
					SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+ REPLICATE('0', 15-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL))
					IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
					BEGIN
						  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
						  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
						  GOTO END_PROC
					END
					
					SET @NSTEP = 70
					
					-- RECHECKING IF ID IS STILL LATER
					IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
					BEGIN
						SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
						GOTO END_PROC
					END	
					SET @NSTEP = 80		-- UPDATING NEW ID INTO TEMP TABLES

					-- UPDATING NEWLY GENERATED MRR NO AND MRR ID IN PIM AND PID TEMP TABLES
					SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
								@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD
				
					SET @NSTEP = 90		-- UPDATING NEW ID INTO TEMP TABLES
					
					SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD			
				END
			END
			ELSE --CALLED FROM EDIT MODE
			BEGIN
				SET @NSTEP = 100		-- GETTING ID INFO FROM TEMP TABLE

				-- GETTING MRR_ID WHICH IS BEING EDITED
				SET @CCMD = 'SELECT @CKEYFIELDVAL1 = MEMO_ID, @CMEMONOVAL = MEMO_NO FROM '+@CTEMPMASTERTABLE
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
								   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
				IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
					  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
					  
					  GOTO END_PROC  		
				END
				
				EXEC UPDATEPMT_PRD 
				  @CXNTYPE			= 'BFP'  
				, @CXNNO			= @CMEMONOVAL
				, @CXNID			= @CKEYFIELDVAL1
				, @NREVERTFLAG		= 1
				, @NALLOWNEGSTOCK	= 0
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= @NUPDATEMODE				
				, @CCMD				= @CCMDOUTPUT OUTPUT
				
				IF @CCMDOUTPUT <> ''
				BEGIN
					PRINT @CCMDOUTPUT
					
					SET @NSTEP = 110
						
					SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'
					SET @BNEGSTOCKFOUND=1				
					EXEC SP_EXECUTESQL @CCMDOUTPUT
					GOTO END_PROC
				END
			END
			
			SET @NSTEP = 120

			-- RECHECKING IF ID IS STILL LATER
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
				GOTO END_PROC
			END				
			
			SET @NSTEP=130						 
			
			EXEC UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPMASTERTABLENAME
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CMASTERTABLENAME
				, @CKEYFIELD1	= @CKEYFIELD1
				, @BALWAYSUPDATE = 1
			
			SET @NSTEP = 140		-- UPDATING TRANSACTION TABLE

			-- UPDATING ROW_ID IN TEMP TABLES
			SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
						  WHERE LEFT(ROW_ID,5) = ''LATER'''
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 150
			
			SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET PRODUCT_CODE='''' WHERE PRODUCT_CODE IS NULL'
			EXEC SP_EXECUTESQL @CCMD			
			
			-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
			SET @NSTEP = 160		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES

			SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + ' 
						WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
						AND ROW_ID IN 
						(
							SELECT A.ROW_ID 
							FROM ' + @CDETAILTABLENAME + ' A 
							LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B ON A.ROW_ID = B.ROW_ID
							WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
							AND B.ROW_ID IS NULL
						)'
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD	
			
			-- INSERTING/UPDATING THE ENTRIES IN PID01106 TABLE FROM TEMPTABLE
			SET @NSTEP = 170		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

			EXEC UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPDETAILTABLENAME
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CDETAILTABLENAME
				, @CKEYFIELD1	= 'ROW_ID'
				, @BALWAYSUPDATE = 1
				
			IF @LGENERATEBARCODES = 1
			BEGIN
				PRINT 'GENERATING BARCODES'
				SET @NSTEP = 180		-- GENERATING BARCODES
				--EXEC SAVETRAN_GENBARCODES
				--	  @CXNID		= @CKEYFIELDVAL1
				--	, @CPREFIX		= @CBARCODEPREFIX
				--	, @NMODE		= 11
				--	, @CERRORMSG	= @CERRORMSG OUTPUT
				
				
				EXEC SAVETRAN_GENBARCODES
				  @CXNID		= @CKEYFIELDVAL1
				, @CPREFIX		= @CBARCODEPREFIX
				, @NMODE		= 11	
				, @LOCID		= @CLOCATIONID	
				, @CERRORMSG	= @CERRORMSG OUTPUT
				
				
				IF ISNULL(@CERRORMSG,'')<>''
					GOTO END_PROC
					
				-- CHECK WHETHER BARCODE HAS SUCCESSFULLY GENERATED OR NOT
				IF EXISTS ( SELECT TOP 1 PRODUCT_CODE FROM PRD_STK_TRANSFER_DTM_DET 
							WHERE MEMO_ID = @CKEYFIELDVAL1 AND PRODUCT_CODE = '' )
				BEGIN
					SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR GENERATING NEW BARCODES....'
					-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
					
					GOTO END_PROC
				END

				-- CHECK ALL BARCODES INSERTED INTO PID
				IF EXISTS ( SELECT TOP 1 A.PRODUCT_CODE FROM PRD_STK_TRANSFER_DTM_DET A
							LEFT OUTER JOIN SKU B ON A.PRODUCT_CODE = B.PRODUCT_CODE
							WHERE A.MEMO_ID = @CKEYFIELDVAL1 
							AND B.PRODUCT_CODE IS NULL )
				BEGIN
					SET @NSTEP=190
					SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR GENERATING NEW BARCODES... NEW CODES NOT GENERATED'
					-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
					
					GOTO END_PROC
				END
			END 
			EXEC UPDATEPMT_PRD 
				  @CXNTYPE			= 'BFP'  
				, @CXNNO			= @CMEMONOVAL
				, @CXNID			= @CKEYFIELDVAL1
				, @NREVERTFLAG		= 0
				, @NALLOWNEGSTOCK	= 0
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= @NUPDATEMODE				
				, @CCMD				= @CCMDOUTPUT OUTPUT
				
			IF @CCMDOUTPUT <> ''
				BEGIN
					PRINT @CCMDOUTPUT
					
					SET @NSTEP = 200
						
					SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'
					SET @BNEGSTOCKFOUND=1				
					EXEC SP_EXECUTESQL @CCMDOUTPUT
					GOTO END_PROC
				END	
		END TRY
		BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'
		SELECT 'ERROR',@CERRORMSG	
		GOTO END_PROC
		END CATCH
	
END_PROC:
	IF ISNULL(@CERRORMSG,'')=''
	BEGIN

		DECLARE @NRFUPDATEMODE INT
		SET @NRFUPDATEMODE=(CASE WHEN @NUPDATEMODE>3 THEN 2 ELSE @NUPDATEMODE END)				
			
		EXEC SP3SBUILDPRD
				@CXNID=@CKEYFIELDVAL1
				,@NUPDATEMODE=@NRFUPDATEMODE
				,@CERRMSG=@CERRORMSG OUTPUT  
	END

	IF @@TRANCOUNT>0
	BEGIN
		
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
		BEGIN
			UPDATE PRD_STK_TRANSFER_DTM_MST SET LAST_UPDATE=GETDATE() WHERE MEMO_ID=@CKEYFIELDVAL1
			UPDATE XNLOG SET LAST_UPDATE=GETDATE() WHERE TABLENAME='PRD_STK_TRANSFER_DTM_MST'
			COMMIT TRANSACTION
		END
		ELSE
			ROLLBACK
	END
	
	
		INSERT @OUTPUT ( ERRMSG, MEMO_ID)
				VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )

		SELECT * FROM @OUTPUT	

   	
	
	SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPDETAILTABLE + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPDETAILTABLE
	EXEC SP_EXECUTESQL @CCMD
	

    SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPMASTERTABLE + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPMASTERTABLE
	EXEC SP_EXECUTESQL @CCMD
		
END
