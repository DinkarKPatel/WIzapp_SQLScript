-- PROCEDURE TO SAVE A ITEM RATE REVISION FROM TEMPORARY TABLES TO ACTUAL TABLES
CREATE PROCEDURE SAVETRAN_FIX_IRR
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				VARCHAR(50),
	@CMEMONOPREFIX		VARCHAR(50),
	@CFINYEAR			VARCHAR(10),
	@CMACHINENAME		VARCHAR(100)='',
	@CWINDOWUSERNAME	VARCHAR(100)='',
	@CWIZAPPUSERCODE	VARCHAR(10)='0000000',
	@CMEMOID			VARCHAR(40)=''
	
)
--WITH ENCRYPTION
AS
BEGIN
	-- @NUPDATEMODE:	1- ITEM RATE REVISION
	--					2- TAG PRINTING
	
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME1		VARCHAR(100),
			@CDETAILTABLENAME2		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME1	VARCHAR(100),
			@CTEMPDETAILTABLENAME2	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE1		VARCHAR(100),
			@CTEMPDETAILTABLE2		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(4),
			@CLOCATIONID			VARCHAR(4),
			@CHODEPTID				VARCHAR(4),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@BNEGSTOCKFOUND BIT,
			@LGENERATEBARCODES		BIT,@CBARCODEPREFIX VARCHAR(20),
			@NMEMOTYPE				NUMERIC(1,0),
			@CLOCID				VARCHAR(4)

	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	SET @NSTEP = 0		-- SETTTING UP ENVIRONMENT
	
	-- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
	SET @CTEMPDBNAME = ''

	SET @CMASTERTABLENAME	= 'FIXITEM_RATE_REVISION_MST'
	SET @CDETAILTABLENAME1	= 'FIXITEM_RATE_REVISION_DET'
	SET @CDETAILTABLENAME2	= 'FIXITEM_RATE_REVISION_LOC_DET'

	SET @CTEMPMASTERTABLENAME	= 'FIRR_FIXITEM_RATE_REVISION_MST_UPLOAD'
	SET @CTEMPDETAILTABLENAME1	= 'FIRR_FIXITEM_RATE_REVISION_DET_UPLOAD'
	SET @CTEMPDETAILTABLENAME2  = 'FIRR_FIXITEM_RATE_REVISION_LOC_DET_UPLOAD'
	
	SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE1	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME1
	SET @CTEMPDETAILTABLE2  = @CTEMPDBNAME + @CTEMPDETAILTABLENAME2
	
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'MEMO_ID'
	SET @CMEMONO			= 'MEMO_NO'
	SET @NMEMONOLEN			= 10
	
	select @CLOCID=location_code  from FIRR_FIXITEM_RATE_REVISION_MST_UPLOAD where sp_id=@NSPID 

	
	SET @CLOCATIONID=@CLOCID
	
	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		

	SET @NSTEP = 10		-- GETTING DEPTID INFO FROM TEMP TABLE
	
	BEGIN TRANSACTION
	
	BEGIN TRY

	
		IF @NUPDATEMODE=4
			GOTO LBLUPDATEMODE4
		
		IF ISNULL(@CLOCATIONID,'')=''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
			GOTO END_PROC    
		END

		IF OBJECT_ID('TEMPDB..#TMPPMT','U') IS NOT NULL
			DROP TABLE #TMPPMT
		
		SELECT PRODUCT_CODE INTO #TMPPMT FROM SKU WHERE 1=2

		IF OBJECT_ID('TEMPDB..#TMPXNSTK','U') IS NOT NULL
			DROP TABLE #TMPXNSTK						   
		
		SELECT PRODUCT_CODE,QUANTITY_IN_STOCK AS XN_STOCK INTO #TMPXNSTK FROM PMT01106 WHERE 1=2

		---- GETTING DEPT_ID FROM TEMP MASTER TABLE
	

		IF @NUPDATEMODE=1
		BEGIN
			-- START UPDATING XN TABLES	
			SET @NSTEP = 20		-- GENERATING NEW KEY
				
			-- GENERATING NEW JOB ORDER NO		
			SET @NSAVETRANLOOP=0
			WHILE @NSAVETRANLOOP=0
			BEGIN
				--GENERATE MEMO_NO FOR MASTERTABLE
				EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
								@CFINYEAR,0, @CMEMONOVAL OUTPUT   
				
				PRINT @CMEMONOVAL
				--CHECK IF GENERATED MEMO_NO ALREADY EXISTS IN THE MASTER TABLE
				SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
										WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
										AND FIN_YEAR = '''+@CFINYEAR+''' )
								SET @NLOOPOUTPUT=0
							ELSE
								SET @NLOOPOUTPUT=1'
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
			END

			IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
				  GOTO END_PROC  		
			END
			SET @NSTEP = 30		-- GENERATING NEW ID

			-- GENERATING NEW JOB ORDER ID
			SET @CKEYFIELDVAL1 = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
			
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
				  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
				  GOTO END_PROC
			END

			SET @NSTEP = 40		-- UPDATING NEW ID INTO TEMP TABLES
			-- UPDATING NEWLY GENERATED JOB ORDER NO AND JOB ORDER ID IN PIM AND PID TEMP TABLES
			SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
						@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+@NSPID+''' '
			EXEC SP_EXECUTESQL @CCMD
		END
		
		ELSE
		BEGIN
			SET @NSTEP = 45	
			SET @CCMD=N'SELECT TOP 1 @KEYFIELDVAL1=MEMO_ID FROM '+@CTEMPDETAILTABLE1 +' WHERE SP_ID ='''+@NSPID+''' '
			EXEC SP_EXECUTESQL @CCMD,N'@KEYFIELDVAL1 VARCHAR(100) OUTPUT',@KEYFIELDVAL1=@CKEYFIELDVAL1 OUTPUT				
		END
				
		SET @NSTEP = 50
		SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID ='''+@NSPID+''' '
		EXEC SP_EXECUTESQL @CCMD
		
		SET @NSTEP = 60
		SET @CCMD=N'SELECT @NMEMOTYPEOUT=TYPE FROM '+@CTEMPMASTERTABLE +' WHERE  SP_ID ='''+@NSPID+''''
		EXEC SP_EXECUTESQL @CCMD,N'@NMEMOTYPEOUT NUMERIC(1,0) OUTPUT',@NMEMOTYPEOUT=@NMEMOTYPE OUTPUT
		
		--IF @NMEMOTYPE=2
		--BEGIN
		--	SET @NSTEP = 70	
		--	SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET NEW_PRODUCT_CODE=NULL'
		--	EXEC SP_EXECUTESQL @CCMD
		--END
		
		SET @NSTEP = 95
		-- RECHECKING IF ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END

		-- UPDATING MASTER TABLE (PIM01106) FROM TEMP TABLE
		SET @NSTEP = 100		-- UPDATING MASTER TABLE

		DECLARE @CWHERECLAUSE VARCHAR(1000)
		 SET @CWHERECLAUSE='  SP_ID='''+ LTRIM(RTRIM((@NSPID)))+''''

		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			,@BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@CWHERECLAUSE

		-- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE
		SET @NSTEP = 110		-- UPDATING TRANSACTION TABLE
		-- UPDATING ROW_ID IN TEMP TABLES
		
		SET @NSTEP = 111
		--UPDATE THE OLD_ROW_ID WITH ROW_ID IN TEMPDETAILTABLE1
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET OLD_ROW_ID = ROW_ID WHERE SP_ID ='''+@NSPID +''' '
		EXEC SP_EXECUTESQL @CCMD
		SET @NSTEP = 112
		--UPDATE ROW_ID WITH NEW ROW_ID IN TEMPDETAILTABLE1		
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE LEFT(ROW_ID,5) = ''LATER'' AND SP_ID ='''+@NSPID +''' '
		EXEC SP_EXECUTESQL @CCMD
		SET @NSTEP = 113
		--UPDATE TEMPDETAILTABLE2 WITH ROW_ID FROM TEMPDETAILTABLE1
		SET @CCMD = N'UPDATE C2 SET C2.REF_ROW_ID=C1.ROW_ID FROM '
					+ @CTEMPDETAILTABLE2 +' C2 JOIN '+@CTEMPDETAILTABLE1+' C1 ON C2.REF_ROW_ID=C1.OLD_ROW_ID AND C2.SP_ID=C1.SP_ID 
					WHERE c2.SP_ID ='''+@NSPID +''' '
		EXEC SP_EXECUTESQL @CCMD 
		SET @NSTEP = 114
		--UPDATE TEMPDETAILTABLE2 WITH NEW ROW_ID
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE2 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE LEFT(ROW_ID,5) = ''LATER'' AND SP_ID ='''+@NSPID +''''
		EXEC SP_EXECUTESQL @CCMD

		-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
		SET @NSTEP = 118		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES
		SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME1 + ' 
					WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
					AND ROW_ID IN 
					(
						SELECT A.ROW_ID 
						FROM ' + @CDETAILTABLENAME1 + ' A 
						LEFT OUTER JOIN ' + @CTEMPDETAILTABLE1 + ' B ON A.ROW_ID = B.ROW_ID AND B.SP_ID ='''+@NSPID +'''
						WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
						AND   B.ROW_ID IS NULL
					)'
		EXEC SP_EXECUTESQL @CCMD
		SET @NSTEP = 119
		SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME2 + ' 
					WHERE ROW_ID IN 
					(
						SELECT A.ROW_ID 
						FROM ' + @CDETAILTABLENAME2 + ' A 
						LEFT OUTER JOIN ' + @CTEMPDETAILTABLE2 + ' B ON A.ROW_ID = B.ROW_ID AND B.SP_ID ='''+@NSPID +'''
						JOIN '+@CDETAILTABLENAME1+' C ON A.REF_ROW_ID=C.ROW_ID  
						WHERE C.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
						AND   B.ROW_ID IS NULL
					)'
		EXEC SP_EXECUTESQL @CCMD

		-- INSERTING/UPDATING THE ENTRIES IN PRD_JID TABLE FROM TEMPTABLE
		SET @NSTEP = 128		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME1
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME1
			, @CKEYFIELD1	= 'ROW_ID'
			,@BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@CWHERECLAUSE
		
		EXEC UPDATEMASTERXN 
		  @CSOURCEDB	= @CTEMPDBNAME
		, @CSOURCETABLE = @CTEMPDETAILTABLENAME2
		, @CDESTDB		= ''
		, @CDESTTABLE	= @CDETAILTABLENAME2
		, @CKEYFIELD1	= 'ROW_ID'
		,@BALWAYSUPDATE = 1
		,@CFILTERCONDITION=@CWHERECLAUSE

		-- VALIDATE ENTRIES
		--SET @NSTEP = 150

		--EXEC VALIDATEXN
		--	  @CXNTYPE	= 'FIRR'
		--	, @CXNID	= @CKEYFIELDVAL1
		--	, @NUPDATEMODE = @NUPDATEMODE			
		--	, @CCMD		= @CCMDOUTPUT OUTPUT

		IF @CCMDOUTPUT <> ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION FAILED : ' + @CCMDOUTPUT + '...'
			GOTO END_PROC
		END

		-- AFTER SUCCESSFUL SAVING , JUST DROP THE TEMP TABLES CREATED BY APPLICATION
		SET @NSTEP = 160
		
		GOTO END_PROC
		
LBLUPDATEMODE4:
	--GET THE PRODUCT_CODES AND DEPT_ID FROM FIXITEM_RATE_REVISION_DET
	--IF THESE PRODUCT_CODES FOR DEPT_IDS EXISTS IN LOCSKUSP UPDATE ELSE INSERT IT AND UPDATE ITS MASTER. 
	SET @CMASTERTABLENAME	= 'FIXITEM_RATE_REVISION_MST'
	
	--UPDATE LOCSKUSP
	--UPDATE LSP
	--	SET  LSP.PRODUCT_CODE	  = D1.PRODUCT_CODE
	--		,LSP.DEPT_ID		  = D2.DEPT_ID
	--		,LSP.MRP			  = D2.NEW_MRP
	--		,LSP.WS_PRICE		  =	D2.NEW_WSP
	--		,LSP.SENT_TO_LOCATION = 0
	--	FROM LOCSKUSP LSP 
	--	JOIN FIXITEM_RATE_REVISION_DET D1 ON LSP.PRODUCT_CODE=D1.PRODUCT_CODE
	--	JOIN FIXITEM_RATE_REVISION_LOC_DET D2 ON D1.ROW_ID=D2.REF_ROW_ID
	--	JOIN LOCSKUSP LS ON D1.PRODUCT_CODE=LS.PRODUCT_CODE AND D2.DEPT_ID=LS.DEPT_ID
	--	WHERE D1.MEMO_ID=@CMEMOID 
	
		   
	 INSERT LOCSKUSP ( PRODUCT_CODE, DEPT_ID, MRP, WS_PRICE, SENT_TO_LOCATION ,FROM_DT )    
	 SELECT    D1.PRODUCT_CODE, D2.DEPT_ID, D2.NEW_MRP, D2.NEW_WSP, '0' ,ISNULL(D3.FROM_DT,'')  
	 FROM FIXITEM_RATE_REVISION_DET D1   
	 JOIN FIXITEM_RATE_REVISION_LOC_DET D2 ON D1.ROW_ID=D2.REF_ROW_ID  
	 JOIN  FIXITEM_RATE_REVISION_MST D3 ON D1.MEMO_ID = D3.MEMO_ID 
	 WHERE D1.MEMO_ID=@CMEMOID
	 
	  INSERT LOCSKUSP_CURRENT ( PRODUCT_CODE, DEPT_ID, LOC_MRP)    
	 SELECT DISTINCT PP.PRODUCT_CODE, PP.DEPT_ID, PP.NEW_MRP FROM LOCSKUSP_CURRENT LL 
	 RIGHT OUTER  JOIN (
	 SELECT    D1.PRODUCT_CODE, D2.DEPT_ID, D2.NEW_MRP
	 FROM FIXITEM_RATE_REVISION_DET D1   
	 JOIN FIXITEM_RATE_REVISION_LOC_DET D2 ON D1.ROW_ID=D2.REF_ROW_ID  
	 LEFT OUTER JOIN LOCSKUSP LS ON D1.PRODUCT_CODE=LS.PRODUCT_CODE AND D2.DEPT_ID=LS.DEPT_ID 
	 JOIN  FIXITEM_RATE_REVISION_MST D3 ON D1.MEMO_ID = D3.MEMO_ID 
	 WHERE D1.MEMO_ID=@CMEMOID) AS PP ON LL.PRODUCT_CODE=PP.PRODUCT_CODE AND LL.DEPT_ID = PP.DEPT_ID 
	 WHERE LL.PRODUCT_CODE IS NULL AND LL.DEPT_ID IS NULL 
	 
	 
	 UPDATE PP SET LOC_MRP = RR.NEW_MRP FROM LOCSKUSP_CURRENT PP JOIN 
	  (
	 SELECT    D1.PRODUCT_CODE, D2.DEPT_ID, D2.NEW_MRP
	 FROM FIXITEM_RATE_REVISION_DET D1   
	 JOIN FIXITEM_RATE_REVISION_LOC_DET D2 ON D1.ROW_ID=D2.REF_ROW_ID  
	 LEFT OUTER JOIN LOCSKUSP LS ON D1.PRODUCT_CODE=LS.PRODUCT_CODE AND D2.DEPT_ID=LS.DEPT_ID 
	 JOIN  FIXITEM_RATE_REVISION_MST D3 ON D1.MEMO_ID = D3.MEMO_ID 
	 WHERE D1.MEMO_ID=@CMEMOID) RR ON RR.PRODUCT_CODE=PP.PRODUCT_CODE AND RR.DEPT_ID = PP.DEPT_ID 
	 
	 
	 
	UPDATE M 
		SET  M.APPROVED_BY_USERCODE = @CWIZAPPUSERCODE
			,M.APPROVED_ON=GETDATE()
			,M.APPROVED=1
		FROM FIXITEM_RATE_REVISION_MST M WHERE M.MEMO_ID=@CMEMOID
 	
 	SET @CKEYFIELDVAL1=@CMEMOID
 	
 	
	END TRY
	
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'
		
		GOTO END_PROC
	END CATCH
	
END_PROC:
	
	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
			COMMIT TRANSACTION
		ELSE
			ROLLBACK
	END
	
	IF ISNULL(@BNEGSTOCKFOUND,0)=0
	BEGIN
		INSERT @OUTPUT ( ERRMSG, MEMO_ID)
				VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )

		SELECT * FROM @OUTPUT	
	END	


	DELETE A FROM FIRR_FIXITEM_RATE_REVISION_MST_UPLOAD A (NOLOCK) WHERE SP_ID =@NSPID 
	DELETE A FROM FIRR_FIXITEM_RATE_REVISION_DET_UPLOAD A (NOLOCK) WHERE SP_ID =@NSPID 
	DELETE A FROM FIRR_FIXITEM_RATE_REVISION_LOC_DET_UPLOAD A (NOLOCK) WHERE SP_ID =@NSPID 


	
END						
------------------------------------------------------ END OF PROCEDURE SAVETRAN_FIX_IRR
