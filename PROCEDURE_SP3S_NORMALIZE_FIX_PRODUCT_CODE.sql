create PROCEDURE SP3S_NORMALIZE_FIX_PRODUCT_CODE-- (lOC 3 DIGIT CHANGES DONE by Sanjay : 22-11-2024 (left char(2) by  some other developer)
(
 @CXN_TYPE VARCHAR(20)='',
 @NSPID				VARCHAR(50)='',
 @NUPDATEMODE		NUMERIC(2,0),
 @CTEMPDETAILTABLE1 VARCHAR(100),
 @CMEMO_ID VARCHAR(100)='',
 @CERRORMSG VARCHAR(MAX) OUTPUT,
 @CTEMPMASTERTABLE VARCHAR(100)='',
 @CLOC_ID VARCHAR(5)='',
 @CWIZAPPUSERCODE VARCHAR(10)='0000000',
 @NPRTMODE INT=0,
 @bDonotCheckStock BIT=0,
 @cAddColsList varchar(max)=''
    
)
AS
BEGIN

BEGIN TRY     


	 DECLARE @NSTEP VARCHAR(10),@DTSQL NVARCHAR(MAX),@CMRP VARCHAR(100),@BCHKMRP BIT,@CLOCATIONID VARCHAR(4),
	 @NBATCH_WSP VARCHAR(10),@NBATCH_PURCHASE_PRICE VARCHAR(10),@CWSP VARCHAR(100),@BCHKWSP BIT,@CPP VARCHAR(100),@BCHKPP BIT,@CPACKSPLIFILTER VARCHAR(100)
	
	 SET @bDonotCheckStock=ISNULL(@bDonotCheckStock,0)
	 SET @CPACKSPLIFILTER=''
	 
	 IF @CXN_TYPE='SLS'
	 SET @CPACKSPLIFILTER=' AND ISNULL(A.pack_slip_ID,'''')='''' '
	 
	 IF EXISTS (SELECT TOP 1 sp_id from BATCHWISE_FIXCODE_UPLOAD (NOLOCK)  WHERE SP_ID=@NSPID)
		DELETE FROM BATCHWISE_FIXCODE_UPLOAD WITH (ROWLOCK)  WHERE SP_ID=@NSPID
	 
	 DECLARE @SKU_SERIES_START VARCHAR(10)
	 SELECT TOP 1 @SKU_SERIES_START=VALUE FROM CONFIG (NOLOCK) WHERE CONFIG_OPTION ='SKU_SERIES_START_1000' AND VALUE =1
			 
	
	 
	 --CHECK PROCESS FOR NORMALIZATION   
	    DECLARE @CCHKROW_ID VARCHAR(100)
	    SET @DTSQL=' SELECT  TOP 1 @CCHKROW_ID=A.ROW_ID
	    FROM '+@CTEMPDETAILTABLE1+' A 
		JOIN SKU B (NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE
	    JOIN ARTICLE ART (NOLOCK) ON ART.ARTICLE_CODE=B.ARTICLE_CODE
		JOIN UOM (NOLOCK) ON ART.UOM_CODE=UOM.UOM_CODE
	    WHERE A.SP_ID='''+LTRIM(RTRIM((@NSPID)))+''' AND (B.BARCODE_CODING_SCHEME=1) AND ISNULL(ART.STOCK_NA,0)=0 
		AND CHARINDEX(''@'',A.PRODUCT_CODE)=0  '+@CPACKSPLIFILTER
		PRINT @DTSQL
		EXEC SP_EXECUTESQL @DTSQL,N'@CCHKROW_ID VARCHAR(100) OUTPUT',@CCHKROW_ID OUTPUT
		
		IF ISNULL(@CCHKROW_ID,'')=''
		 GOTO END_PROC
	  --END


	  IF ISNULL(@CLOC_ID,'')=''
     SELECT @CLOCATIONID  = DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID  
	 ELSE 
	 SET @CLOCATIONID  =ISNULL(@CLOC_ID,'')
     SELECT TOP 1 @NBATCH_WSP=VALUE FROM CONFIG (NOLOCK) WHERE CONFIG_OPTION ='CONSIDER_FOR_AUTO_BATCH_WSP'
     SELECT TOP 1 @NBATCH_PURCHASE_PRICE=VALUE FROM CONFIG (NOLOCK) WHERE CONFIG_OPTION ='CONSIDER_FOR_AUTO_BATCH_PP'
      
      IF ISNULL(@CLOC_ID,'')<>''
      SET @CLOCATIONID=@CLOC_ID
      
       SET @CWSP=' 0 AS WS_PRICE '
       SET @BCHKWSP=0
       SET @CPP=' 0 AS PURCHASE_PRICE '
       SET @CPP=0
           
      

     SET @NSTEP=00
     
     IF OBJECT_ID('TEMPDB..#TMPFIXCODE','U')   IS NOT NULL
       DROP TABLE #TMPFIXCODE
       
       SELECT ROW_ID= CAST('' AS VARCHAR(100)),PRODUCT_CODE=CAST('' AS  VARCHAR(100)), QUANTITY=CAST(0 AS  NUMERIC(10,3)),
              DEPT_ID =CAST('' AS VARCHAR(4)),BIN_ID=CAST('' AS VARCHAR(7)),MRP=CAST(0 AS NUMERIC(14,3)),
              WS_PRICE=CAST(0 AS NUMERIC(14,3)),PURCHASE_PRICE=CAST(0 AS NUMERIC(14,3))
       INTO #TMPFIXCODE WHERE 1=2
       
       PRINT '1 SET STOCK OUT MRP WISE'
       
     
	   IF @CXN_TYPE IN('SLS','WSL','RPS','APP','WPS','SLSNA') 
       BEGIN
       
         SET @CMRP=' A.MRP AS MRP '
         SET @BCHKMRP=1
         
       END
       ELSE IF @CXN_TYPE IN('PRT') 
       BEGIN
          --donot check mrp at the time of stock picking
        SET @CMRP=' CASE WHEN ISNULL(A.MRP_BATCH,0)=0 THEN B.MRP ELSE A.MRP_BATCH END  AS MRP '
        SET @BCHKMRP=0
       END
       ELSE IF @CXN_TYPE IN('CNC') 
       BEGIN
       
        SET @CMRP=' a.rate   AS MRP '
        SET @BCHKMRP=1
       END
       ELSE IF @CXN_TYPE IN('DCO') 
       BEGIN
        SET @CMRP=' a.FCO_MRP   AS MRP '
        SET @BCHKMRP=1
       END
       ELSE IF @CXN_TYPE IN('SNC') 
       BEGIN
        SET @CMRP=' a.SNC_CONSUMABLE_MRP   AS MRP '
        SET @BCHKMRP=1
       END
       ELSE 
       BEGIN
            SET @CMRP=' B.MRP AS MRP '
            SET @BCHKMRP=1
       END

	
    SET @NSTEP=10
    
    PRINT '2 HOLD THE BARCODE FOR NORMALIZE '
    
    IF @CXN_TYPE IN('WSL','SLS','PRT','RPS','DCO','WPS','DNPS','CNC','UNC','APP','JWI','SNC','SLSNA','MIS') 
    BEGIN    
        
		IF @CXN_TYPE IN('WSL','SLS','PRT','RPS','WPS','DNPS','CNC','UNC','APP','JWI','MIS') 
		BEGIN	
		
			 SET @DTSQL=' SELECT A.ROW_ID,A.PRODUCT_CODE,A.QUANTITY,
			 CASE WHEN '''+ISNULL(@CLOC_ID,'''')+'''='''' THEN  A.DEPT_ID ELSE '''+ISNULL(@CLOC_ID,'''')+''' END AS DEPT_ID,
			 A.BIN_ID,
			 '+@CMRP+',
			 '+@CWSP+',
			 '+@CPP+'	
			 FROM '+@CTEMPDETAILTABLE1+' A  (NOLOCK)
			 JOIN SKU B (NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE
			 JOIN ARTICLE ART (NOLOCK) ON ART.ARTICLE_CODE=B.ARTICLE_CODE
			 WHERE A.SP_ID='''+LTRIM(RTRIM((@NSPID)))+''' AND (B.BARCODE_CODING_SCHEME=1) AND ISNULL(ART.STOCK_NA,0)=0 
			 AND CHARINDEX(''@'',A.PRODUCT_CODE)=0  '+@CPACKSPLIFILTER
			 PRINT @DTSQL
			 INSERT INTO #TMPFIXCODE(ROW_ID,PRODUCT_CODE,QUANTITY,DEPT_ID,BIN_ID ,MRP,WS_PRICE ,PURCHASE_PRICE )
			 EXEC SP_EXECUTESQL @DTSQL
			 
		 END
		 ELSE IF @CXN_TYPE IN('DCO') 
		 BEGIN
		     
		     SET @DTSQL=' SELECT A.ROW_ID,A.PRODUCT_CODE,A.QUANTITY,'''+@CLOCATIONID+''' AS DEPT_ID,A.SOURCE_BIN_ID AS BIN_ID,
			 '+@CMRP+',
			 '+@CWSP+',
			 '+@CPP+'
			 FROM '+@CTEMPDETAILTABLE1+' A 
			 JOIN SKU B (NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE
			 JOIN ARTICLE ART (NOLOCK) ON ART.ARTICLE_CODE=B.ARTICLE_CODE
			 WHERE (B.BARCODE_CODING_SCHEME=1)
			 AND ISNULL(ART.STOCK_NA,0)=0 
			 AND CHARINDEX(''@'',A.PRODUCT_CODE)=0 AND A.SP_ID='''+LTRIM(RTRIM((@NSPID)))+'''
			 '
			 PRINT @DTSQL
			 INSERT INTO #TMPFIXCODE(ROW_ID,PRODUCT_CODE,QUANTITY,DEPT_ID,BIN_ID ,MRP,WS_PRICE ,PURCHASE_PRICE )
			 EXEC SP_EXECUTESQL @DTSQL
		 
		 END
	     ELSE IF @CXN_TYPE IN('SNC','SLSNA') 
		 BEGIN
		     
		     SET @DTSQL=' SELECT A.ROW_ID,A.PRODUCT_CODE,A.QUANTITY,'''+@CLOCATIONID+''' AS DEPT_ID,A.BIN_ID AS BIN_ID,
			 '+@CMRP+',
			 '+@CWSP+',
			 '+@CPP+'
			 FROM '+@CTEMPDETAILTABLE1+' A 
			 JOIN SKU B (NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE
			 JOIN ARTICLE ART (NOLOCK) ON ART.ARTICLE_CODE=B.ARTICLE_CODE
			 WHERE (B.BARCODE_CODING_SCHEME=1)
			 AND ISNULL(ART.STOCK_NA,0)=0 
			 AND CHARINDEX(''@'',A.PRODUCT_CODE)=0 AND A.SP_ID='''+LTRIM(RTRIM((@NSPID)))+'''
			 '
			 PRINT @DTSQL
			 INSERT INTO #TMPFIXCODE(ROW_ID,PRODUCT_CODE,QUANTITY,DEPT_ID,BIN_ID ,MRP,WS_PRICE ,PURCHASE_PRICE )
			 EXEC SP_EXECUTESQL @DTSQL
		 
		 END




	     IF @NUPDATEMODE=2
	      BEGIN
	         DELETE FROM #TMPFIXCODE WHERE LEFT(ROW_ID,5)<>'LATER'

	      END
		
		 PRINT '3 HOLD THE BARCODE FOR NORMALIZE '
		  
	     SET @NSTEP=20	 
	
		 IF NOT EXISTS(SELECT TOP 1 'U' FROM #TMPFIXCODE)
		   GOTO END_PROC
		   
		   IF OBJECT_ID('TEMPDB..#TMPPMT01106','U')   IS NOT NULL
              DROP TABLE #TMPPMT01106
   
		   SELECT DISTINCT  B.*,SKU.ac_code ,SKU.MRP,SKU.ws_price   INTO #TMPPMT01106 
		   FROM #TMPFIXCODE A
		   JOIN PMT01106 B (NOLOCK) 
		   ON A.PRODUCT_CODE =CASE WHEN CHARINDEX('@',B.PRODUCT_CODE)=0 THEN B.PRODUCT_CODE 
		                             ELSE SUBSTRING (B.PRODUCT_CODE,1, CHARINDEX('@',B.PRODUCT_CODE)-1) END
		   AND A.DEPT_ID =B.DEPT_ID 
		   JOIN SKU (NOLOCK) ON SKU.product_code =B.product_code 
		   WHERE QUANTITY_IN_STOCK >0 AND B.BIN_ID not in('999') and isnull(b.bo_order_id,'')=''
		   --and b.product_code like '%@%'

		   SET @NSTEP=25
		   IF @CXN_TYPE ='SLS'
		   BEGIN
		       
		       IF EXISTS (SELECT TOP 1 'u' FROM SLS_CMM01106_UPLOAD (NOLOCK) WHERE SP_ID =@NSPID AND ISNULL(mrp_wsp,0) =2)
		       BEGIN
		            UPDATE #TMPPMT01106 SET MRP =WS_PRICE 
		       END
		   
		   END
		   
		    IF EXISTS (SELECT TOP 1'U' FROM LOCSKUSP (NOLOCK) where DEPT_ID =@CLOC_ID)
		   BEGIN
		        
		        ;with cte as
		        (
		        SELECT b.PRODUCT_CODE ,a.MRP ,a.dept_id,
		              SRNO=ROW_NUMBER() over (partition by  b.PRODUCT_CODE order by From_dt desc) 
		        FROM LOCSKUSP A (NOLOCK) 
		        JOIN  #TMPPMT01106 B ON A.PRODUCT_CODE =B.PRODUCT_CODE AND A.DEPT_ID =b.DEPT_ID 
		        where a.DEPT_ID =@CLOC_ID
		        )
		        
		        UPDATE B SET MRP =A.MRP FROM CTE A
		        JOIN #TMPPMT01106 B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.dept_id =B.dept_id 
		        where a.SRNO=1
		   
		   END
		   
		   IF @CXN_TYPE in('PRT','DNPS')
		   BEGIN
		   
		   DECLARE @CAC_CODE VARCHAR(15),@CHECK_SUPPLIER_DN VARCHAR(10),@NMODE NUMERIC(1)
		   
           SELECT TOP 1 @CHECK_SUPPLIER_DN= value  FROM CONFIG WHERE   config_option='CHECK_SUPPLIER_DN'		   
		   SET @CAC_CODE=''
		   IF @NPRTMODE<>2 
		   BEGIN

		    SET @DTSQL=N'SELECT TOP 1 @CAC_CODE=AC_CODE FROM '+@CTEMPMASTERTABLE+' (NOLOCK) WHERE SP_ID='''+LTRIM(RTRIM((@NSPID)))+''''
			EXEC SP_EXECUTESQL @DTSQL,N'@CAC_CODE VARCHAR(15) OUTPUT',@CAC_CODE OUTPUT 
			
		   END
			IF @CXN_TYPE='PRT'
			    SELECT TOP 1 @NMODE=mode FROM PRT_rmm01106_UPLOAD (NOLOCK) WHERE SP_ID =LTRIM(RTRIM((@NSPID)))
			ELSE
			   SELECT TOP 1 @NMODE=PS_MODE FROM DNPS_DNPS_MST_UPLOAD (NOLOCK)  WHERE SP_ID =LTRIM(RTRIM((@NSPID)))
			
			
			IF ISNULL(@CHECK_SUPPLIER_DN,'')='1' and ISNULL(@NMODE,0)=1 and @NPRTMODE<>2
			DELETE FROM #TMPPMT01106 WHERE AC_CODE <>@CAC_CODE
		        
		        DELETE A FROM #TMPFIXCODE A
		        JOIN GRN_PS_DET B (NOLOCK) ON A.PRODUCT_CODE =B.PRODUCT_CODE 
		        JOIN GRN_PS_MST C (NOLOCK) ON B.MEMO_ID=C.MEMO_ID 
		        LEFT OUTER JOIN
		        (
		          SELECT A.PRODUCT_CODE  FROM #TMPFIXCODE A
		          JOIN PID01106 B (NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE 
		          JOIN PIM01106 C (NOLOCK) ON B.MRR_ID=C.MRR_ID
		          WHERE C.CANCELLED =0 
		          GROUP BY A.PRODUCT_CODE
		        ) D ON A.PRODUCT_CODE =D.PRODUCT_CODE
		        WHERE C.CANCELLED =0 AND D.PRODUCT_CODE IS NULL
		   
		   END
		   
		  
		 DECLARE @CROW_ID VARCHAR(100),@CPRODUCT_CODE VARCHAR(100),@CBIN_ID VARCHAR(7),
		 @NMRP NUMERIC(14,2),@CDEPT_ID CHAR(4),@NQTY NUMERIC(14,3),@NCALQTY NUMERIC(14,3),
		 @NWS_PRICE NUMERIC(14,2),@NPP NUMERIC(14,2),@BALLOWNEGSTOCK BIT
		 
	     SET @NSTEP=30	



		IF @CXN_TYPE  IN('SLS','PRT','RPS','WSL','DNPS') 
		begin
			SELECT @BALLOWNEGSTOCK =VALUE FROM USER_ROLE_DET A (NOLOCK)--ADDED
			JOIN USERS B (NOLOCK)--ADDED
			ON A.ROLE_ID=B.ROLE_ID 
			WHERE USER_CODE=@CWIZAPPUSERCODE 
			AND FORM_NAME='FRMSALE' 
			AND FORM_OPTION='ALLOW_NEG_STOCK'
		end
		

	   SET @BALLOWNEGSTOCK =ISNULL(@BALLOWNEGSTOCK,0)
	   /*Rohit 17-04-2023 Against WizTicket 0323-00169
	   IF @CWIZAPPUSERCODE='0000000' 
	   SET @BALLOWNEGSTOCK=0
	   */
	  
	    IF @CXN_TYPE NOT IN('SLS','PRT','WSL','RPS','DCO','SNC','DNPS') 
		    SET @BALLOWNEGSTOCK=0
		 ELSE IF @CXN_TYPE IN('DCO','SNC')
            SET @BALLOWNEGSTOCK=@bDonotCheckStock
            

	    
         IF @CXN_TYPE IN('WSL','SNC','PRT','RPS','CNC','DCO','DNPS') AND  ISNULL(@BALLOWNEGSTOCK,0)=0
		 BEGIN
		     
			 IF OBJECT_ID('TEMPDB..#TMPINV_QTY','U') IS NOT NULL
			    DROP TABLE #TMPINV_QTY
			
			SELECT PRODUCT_CODE ,DEPT_ID,BIN_ID ,MRP ,
			SUM(QUANTITY) AS INV_QTY
			INTO #TMPINV_QTY
			FROM #TMPFIXCODE A
			GROUP BY PRODUCT_CODE ,DEPT_ID,BIN_ID,MRP 
             
             DECLARE @CERR VARCHAR(1000)
             set @CERR='STOCK IS GOING NEGATIVE'
			
			 IF OBJECT_ID('TEMPDB..#TMPQTYSTOCK','U') IS NOT NULL
			    DROP TABLE #TMPQTYSTOCK
			

			SELECT A.PRODUCT_CODE ,A.DEPT_ID,A.BIN_ID ,
			        A.MRP ,A.INV_QTY AS OUTQTY,SUM(ISNULL(B.QUANTITY_IN_STOCK,0)) AS QUANTITY_IN_STOCK,
			       @CERR AS ERRMSG
			INTO #TMPQTYSTOCK
			FROM #TMPINV_QTY A
			LEFT JOIN #TMPPMT01106 B ON A.PRODUCT_CODE =CASE WHEN CHARINDEX('@',B.PRODUCT_CODE)=0 THEN B.PRODUCT_CODE 
		                             ELSE SUBSTRING (B.PRODUCT_CODE,1, CHARINDEX('@',B.PRODUCT_CODE)-1) END
		   AND A.DEPT_ID =B.DEPT_ID AND A.BIN_ID=B.BIN_ID  AND B.BIN_ID<>'999' and  isnull(b.bo_order_id,'')='' 
		   and a.MRP =(case when @CXN_TYPE ='PRT' then a.MRP else b.mrp end   )  
		   GROUP BY A.PRODUCT_CODE ,A.DEPT_ID,A.BIN_ID ,A.MRP ,A.INV_QTY
		   HAVING A.INV_QTY>SUM(ISNULL(B.QUANTITY_IN_STOCK,0)) 
		   
		   

		   IF EXISTS (SELECT TOP 1 'U' FROM #TMPQTYSTOCK) 
		   BEGIN
		        if ISNULL(@CHECK_SUPPLIER_DN,'')='1' and @CXN_TYPE ='DNPS'
		        begin
		            set @CERR='Stock not available for this Supplier'
		            Update  #TMPQTYSTOCK set ERRMSG =@CERR
		        
		        end
		        
		       SELECT * FROM #TMPQTYSTOCK 
			   SET @CERRORMSG=@CERR
			   GOTO END_PROC 
		   END


		 end


	    
	    
	    IF @CXN_TYPE NOT IN('UNC') 
	    BEGIN
			 WHILE  EXISTS(SELECT TOP 1 'U' FROM #TMPFIXCODE)
			 BEGIN

				 SELECT TOP 1 @CROW_ID=ROW_ID ,@CPRODUCT_CODE=PRODUCT_CODE ,@CBIN_ID=BIN_ID,
						@NMRP=MRP,
						@NWS_PRICE=WS_PRICE,
						@NPP=PURCHASE_PRICE,
						@CDEPT_ID=DEPT_ID ,@NQTY=QUANTITY 
				 FROM #TMPFIXCODE
			    
				 LBLPICKITEM:
			       
					 IF OBJECT_ID('TEMPDB..#TMPPRODUCTCODE','U')   IS NOT NULL
					  DROP TABLE #TMPPRODUCTCODE
					  
					
		       
					 SELECT DISTINCT  @NQTY AS TOTAL_QTY, @CROW_ID AS ROW_ID ,b.PRODUCT_CODE ,B.BIN_ID,B.DEPT_ID,
							b.MRP,
							B.QUANTITY_IN_STOCK,
							PRODUCTSR=CAST(CASE WHEN CHARINDEX('@',B.PRODUCT_CODE)=0 THEN '0' 
							ELSE SUBSTRING(B.PRODUCT_CODE, CHARINDEX('@',B.PRODUCT_CODE)+1,LEN(B.PRODUCT_CODE)) END AS VARCHAR(100))
					
					 INTO #TMPPRODUCTCODE
					 FROM  #TMPPMT01106 B (NOLOCK) 
					 WHERE B.QUANTITY_IN_STOCK >0
					 AND RTRIM(LTRIM(LEFT(b.PRODUCT_CODE, ISNULL(NULLIF(CHARINDEX ('@',b.PRODUCT_CODE)-1,-1),LEN(b.PRODUCT_CODE )))))=RTRIM(LTRIM(@CPRODUCT_CODE))
					 AND B.BIN_ID =@CBIN_ID 
					 AND B.MRP =(CASE WHEN @CXN_TYPE ='PRT' THEN B.MRP ELSE @NMRP END)
					
		         
		
					SELECT @NCALQTY=SUM(QUANTITY_IN_STOCK)
					FROM #TMPPRODUCTCODE A
		            
					SET @NSTEP=40
					
					IF ISNULL(@NQTY,0)>ISNULL(@NCALQTY,0)  AND ISNULL(@BALLOWNEGSTOCK,0)=0 AND @bDonotCheckStock=0
					BEGIN
						SET @CERRORMSG='QTY GOING NEGATIVE ITEM '+  @CPRODUCT_CODE  
						+', BIN '+@CBIN_ID+', MRP:'+STR(@NMRP)
						GOTO END_PROC  
			        
					END
			                
					SET @NSTEP=50
					IF OBJECT_ID('TEMPDB..#TMPPRODUCTCODELIST','U')   IS NOT NULL
					  DROP TABLE #TMPPRODUCTCODELIST
		              
			        
					SELECT A.ROW_ID,A.PRODUCT_CODE,A.BIN_ID,A.DEPT_ID  ,A.TOTAL_QTY,
					A.QUANTITY_IN_STOCK ,A.MRP,A.PRODUCTSR,
					SUM(B.QUANTITY_IN_STOCK ) AS RUNNINGTOTAL
					INTO #TMPPRODUCTCODELIST
					FROM #TMPPRODUCTCODE A CROSS JOIN #TMPPRODUCTCODE B 
					WHERE A.PRODUCTSR>=B.PRODUCTSR 
					GROUP BY  A.ROW_ID,A.PRODUCT_CODE,A.BIN_ID,A.DEPT_ID  ,A.TOTAL_QTY,
					A.QUANTITY_IN_STOCK ,A.MRP,A.PRODUCTSR
					
						
					DELETE  FROM #TMPPRODUCTCODELIST
					WHERE RUNNINGTOTAL>(SELECT TOP 1 RUNNINGTOTAL FROM #TMPPRODUCTCODELIST WHERE RUNNINGTOTAL >=@NQTY ORDER BY RUNNINGTOTAL)
		            
	
		         
					UPDATE  #TMPPRODUCTCODELIST
					SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK+(TOTAL_QTY -RUNNINGTOTAL)
					WHERE RUNNINGTOTAL >@NQTY
		            
					UPDATE A 
					SET QUANTITY_IN_STOCK =A.QUANTITY_IN_STOCK -C.QUANTITY_IN_STOCK
					FROM #TMPPMT01106 A
					JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE 
					JOIN #TMPPRODUCTCODELIST C ON A.PRODUCT_CODE =C.PRODUCT_CODE 
					AND A.BIN_ID =C.BIN_ID AND A.DEPT_ID=C.DEPT_ID 
					AND(ISNULL(@BCHKMRP,0)=0 OR B.MRP =C.MRP  )	
			        
					SET @NSTEP=60
					
					

					--changes for negative stock

					IF ISNULL(@BALLOWNEGSTOCK,0)=1 
						BEGIN
					   
						   IF ISNULL(@NQTY,0)>ISNULL(@NCALQTY,0)
						   BEGIN
						       
						       IF OBJECT_ID ('TEMPDB..#tmpNegBarcode','U') IS NOT NULL
						          DROP TABLE #tmpNegBarcode

							   DECLARE @CNEGPRODUCT_CODE VARCHAR(50)
							   
							   SELECT  PRODUCT_CODE ,SUBSTRING(A.PRODUCT_CODE, CHARINDEX('@',A.PRODUCT_CODE)+3,LEN(A.PRODUCT_CODE)) as batch_no,
							           SrNo =CAST(0 as numeric(8,0))
							           into #tmpNegBarcode
							   FROM SKU A (NOLOCK)
							   WHERE  a.product_code like @CPRODUCT_CODE+'@%'
							   AND MRP=@NMRP 

							   UPDATE #TMPNEGBARCODE SET SRNO =BATCH_NO  WHERE  ISNUMERIC (BATCH_NO)=1 
							   
							   IF EXISTS (SELECT TOP 1 'U' FROM #TMPNEGBARCODE)
							      SELECT TOP 1 @CNEGPRODUCT_CODE=PRODUCT_CODE FROM #TMPNEGBARCODE ORDER BY SRNO desc
							   ELSE 
							      SET @CNEGPRODUCT_CODE=@CPRODUCT_CODE
							   
							  
							   INSERT INTO #TMPPRODUCTCODELIST(ROW_ID,PRODUCT_CODE,BIN_ID,DEPT_ID ,TOTAL_QTY,QUANTITY_IN_STOCK,MRP,PRODUCTSR,RUNNINGTOTAL)
							   SELECT @CROW_ID AS ROW_ID,
							   isnull(@CNEGPRODUCT_CODE,@CPRODUCT_CODE) AS PRODUCT_CODE,
							   @CBIN_ID AS BIN_ID,
							   @CDEPT_ID AS DEPT_ID,
							   ISNULL(@NQTY,0) AS TOTAL_QTY,
							   ISNULL(@NQTY,0)-ISNULL(@NCALQTY,0) AS QUANTITY_IN_STOCK,
							   @NMRP AS MRP,
							   0 AS PRODUCTSR,
							   ISNULL(@NCALQTY,0)+(ISNULL(@NQTY,0)-ISNULL(@NCALQTY,0)) AS RUNNINGTOTAL
						   
							   SELECT @NCALQTY=SUM(QUANTITY_IN_STOCK) FROM #TMPPRODUCTCODELIST

								IF ISNULL(@NQTY,0)<>ISNULL(@NCALQTY,0)  AND @bDonotCheckStock=0 
								BEGIN
									SET @CERRORMSG='QTY GOING NEGATIVE ITEM '+  @CPRODUCT_CODE  
									+', BIN '+@CBIN_ID+', MRP:'+STR(@NMRP)
									GOTO END_PROC  
			        
								END

							END

				  END
				  --end of negative stock
			        
					INSERT INTO BATCHWISE_FIXCODE_UPLOAD(ROW_ID,PRODUCT_CODE,QUANTITY,DEPT_ID,BIN_ID,MRP,SP_ID)
					SELECT A.ROW_ID,A.PRODUCT_CODE,A.QUANTITY_IN_STOCK,
					A.DEPT_ID,A.BIN_ID  ,A.MRP,@NSPID AS SP_ID
					FROM #TMPPRODUCTCODELIST A
					WHERE ISNULL(A.QUANTITY_IN_STOCK,0)<>0
					
				
					DELETE FROM #TMPFIXCODE WHERE ROW_ID =@CROW_ID	 
					
				
			 END
	 END	
	 ELSE
	 BEGIN
	      
	      UPDATE A SET PRODUCT_CODE =B.ORG_PRODUT_CODE  FROM #TMPFIXCODE A
	      JOIN 
	      (
	        SELECT A.product_code AS ORG_PRODUT_CODE,
	        PRODUCT_CODE=LEFT(A.PRODUCT_CODE, ISNULL(NULLIF(CHARINDEX ('@',A.PRODUCT_CODE)-1,-1),LEN(A.PRODUCT_CODE ))),
	        A.mrp,B.DEPT_ID ,B.BIN_ID ,
	        SR=ROW_NUMBER() OVER (PARTITION BY LEFT(A.PRODUCT_CODE, ISNULL(NULLIF(CHARINDEX ('@',A.PRODUCT_CODE)-1,-1),LEN(A.PRODUCT_CODE ))),
	        A.mrp,B.DEPT_ID ,B.BIN_ID ORDER BY CHARINDEX ('@',A.PRODUCT_CODE) DESC)
	        FROM SKU A (NOLOCK)
	        JOIN PMT01106 B (NOLOCK) ON A.PRODUCT_CODE=B.product_code 
			WHERE B.BIN_ID<>'999'
	      ) B ON A.PRODUCT_CODE =B.PRODUCT_CODE AND A.DEPT_ID =B.DEPT_ID 
	      AND A.BIN_ID =B.BIN_ID AND A.MRP =B.mrp AND B.SR =1
	 
		INSERT INTO BATCHWISE_FIXCODE_UPLOAD(ROW_ID,PRODUCT_CODE,QUANTITY,DEPT_ID,BIN_ID,MRP,SP_ID)
		SELECT A.ROW_ID,A.PRODUCT_CODE,A.QUANTITY,
		A.DEPT_ID,A.BIN_ID  ,A.MRP,@NSPID AS SP_ID
		FROM #TMPFIXCODE A
		WHERE ISNULL(A.QUANTITY,0)<>0
					
		DELETE FROM #TMPFIXCODE
		
		
	 
	 END
		
		

		PRINT '4 TEMP TABLE FOR NORMALIZE DISCOUNT  '
		
		DECLARE @CCOLNAME VARCHAR(MAX),@CALIASCOLNAME VARCHAR(MAX)
		DECLARE @CNEWCOLNAME VARCHAR(MAX)
		
		SET @NSTEP=70
		
		 IF OBJECT_ID ('TEMPDB..#TMPALLDIFF','U') IS NOT NULL
            DROP TABLE #TMPALLDIFF 
                 
		 SELECT CAST('' AS VARCHAR(50)) ROW_ID,CAST(0 AS NUMERIC(10,2))   AS VALUE,DIFF=CAST(0 AS NUMERIC(10,2)) ,
		        DIFF1=CAST(0 AS NUMERIC(10,2)) ,CAST(0 AS NUMERIC(10,2))  AS VALUE1 
		 INTO #TMPALLDIFF
		 WHERE 1=2
	     
      IF OBJECT_ID ('TEMPDB..#TMPDIFF','U') IS NOT NULL
         DROP TABLE #TMPDIFF 
        SELECT ROW_ID,VALUE,DIFF INTO #TMPDIFF FROM #TMPALLDIFF WHERE 1=2 
     
		
		IF @CXN_TYPE IN('WSL','PRT')
		BEGIN
		    
		    PRINT '6 PROCESS OF DISCOUNT NORMALIZATION '   
		    
              SET @DTSQL=N' UPDATE  B SET 
              DISCOUNT_PERCENTAGE=A.DISCOUNT_PERCENTAGE,
              DISCOUNT_AMOUNT= ROUND(((A.DISCOUNT_AMOUNT /A.QUANTITY)*B.QUANTITY )  ,2)  
		      FROM '+@CTEMPDETAILTABLE1+' A
              JOIN BATCHWISE_FIXCODE_UPLOAD B ON A.ROW_ID=B.ROW_ID 
              WHERE A.SP_ID ='''+LTRIM(RTRIM((@NSPID)))+'''
              AND B.SP_ID ='''+LTRIM(RTRIM((@NSPID)))+'''
              '
              PRINT @DTSQL
              EXEC SP_EXECUTESQL @DTSQL
              
            SET @DTSQL=N' INSERT #TMPALLDIFF(ROW_ID,VALUE,DIFF)
            SELECT A.ROW_ID ,A.DISCOUNT_AMOUNT AS VALUE,DIFF=A.DISCOUNT_AMOUNT -B.DISCOUNT_AMOUNT
            FROM '+@CTEMPDETAILTABLE1+' A
            JOIN 
             (
              SELECT ROW_ID ,SUM(DISCOUNT_AMOUNT) AS DISCOUNT_AMOUNT
              FROM BATCHWISE_FIXCODE_UPLOAD (NOLOCK)
              WHERE SP_ID ='''+LTRIM(RTRIM((@NSPID)))+'''
              GROUP BY ROW_ID
             ) B ON A.ROW_ID  =B.ROW_ID  
             WHERE SP_ID ='''+LTRIM(RTRIM((@NSPID)))+'''
             AND (ISNULL(A.DISCOUNT_AMOUNT,0) <>ISNULL(B.DISCOUNT_AMOUNT,0) )
             '
             
             PRINT @DTSQL
             EXEC SP_EXECUTESQL @DTSQL
              
              SET @NSTEP=130
           
             INSERT  #TMPDIFF(ROW_ID,DIFF,VALUE)
             SELECT ROW_ID,DIFF,VALUE  
             FROM #TMPALLDIFF
             WHERE ISNULL(DIFF,0) <>0
                 
               
             SET @NSTEP=140
                 
		    WHILE EXISTS(SELECT TOP 1 'U' FROM #TMPDIFF)
			BEGIN

				 EXEC SP3S_REPROCESS_FIXPRODUCT_DISCOUNT @NSPID,'DISCOUNT_AMOUNT',@CERRORMSG OUTPUT
				 
				 IF ISNULL(@CERRORMSG,'')<>''
				 BEGIN
						 SET @CERRORMSG='ERROR IN DISCOUNT DISTRIBUTION '+@CERRORMSG
						 GOTO END_PROC
			     END
			END
            
       
          PRINT '7 INSERT NEW BARCODE IN UPLOAD TABLES  '   
          
			SELECT @CCOLNAME=ISNULL(@CCOLNAME+',','')+(COLUMN_NAME),
				   @CALIASCOLNAME=ISNULL(@CALIASCOLNAME+',','')+('A.'+COLUMN_NAME )
			FROM INFORMATION_SCHEMA.COLUMNS 
			WHERE TABLE_NAME=@CTEMPDETAILTABLE1
			AND COLUMN_NAME NOT IN('TS','QUANTITY','ROW_ID','PRODUCT_CODE','INVOICE_QUANTITY','DISCOUNT_AMOUNT')
            ORDER BY COLUMN_NAME
            
            SET @CNEWCOLNAME='PRODUCT_CODE,QUANTITY,INVOICE_QUANTITY,DISCOUNT_AMOUNT,ROW_ID,'
            SET @CCOLNAME=@CNEWCOLNAME+@CCOLNAME
            
		   SET @NSTEP=80
			SET @DTSQL=N' INSERT '+@CTEMPDETAILTABLE1+' ('+@CCOLNAME+')
			            SELECT B.PRODUCT_CODE, B.QUANTITY,B.QUANTITY AS INVOICE_QUANTITY,
			            ROUND(((A.RATE*B.QUANTITY)*A.DISCOUNT_PERCENTAGE/100),2) AS DISCOUNT_AMOUNT,
			            CONVERT(VARCHAR(40),''LATER''+ CONVERT(VARCHAR(50), NEWID())) AS ROW_ID, '+@CALIASCOLNAME+' 
			            FROM '+@CTEMPDETAILTABLE1+' A 
			            JOIN
			            (
			             SELECT ROW_ID AS OLD_ROW_ID,PRODUCT_CODE,QUANTITY,SP_ID
			             FROM BATCHWISE_FIXCODE_UPLOAD (NOLOCK)
			             WHERE SP_ID ='''+LTRIM(RTRIM((@NSPID)))+'''
			            ) B ON A.ROW_ID=B.OLD_ROW_ID 
			            WHERE A.SP_ID ='''+LTRIM(RTRIM((@NSPID)))+'''
			            '
			PRINT @DTSQL 
			EXEC SP_EXECUTESQL @DTSQL
			
           SET @NSTEP=90
	        
	        
	        PRINT '8 DELETE OLD BARCODE '   
	         
	         
            SET @DTSQL=N' DELETE A FROM '+@CTEMPDETAILTABLE1+' A
            JOIN BATCHWISE_FIXCODE_UPLOAD B ON A.ROW_ID=B.ROW_ID 
            WHERE A.SP_ID ='''+LTRIM(RTRIM((@NSPID)))+''' 
            AND B.SP_ID ='''+LTRIM(RTRIM((@NSPID)))+''''
            
            PRINT @DTSQL 
			EXEC SP_EXECUTESQL @DTSQL
			
			SET @NSTEP=100
			
			--IF @CXN_TYPE='PRT'
			--BEGIN
			    
			--	SET @DTSQL=N'UPDATE A  SET BILL_NO= ISNULL(PID.BILL_NO, B.INV_NO),
			--	BILL_DT=ISNULL(PID.BILL_DT, B.INV_DT),
			--	MRR_ID=ISNULL(PID.MRR_ID,''''),
			--	MRR_NO=ISNULL(PID.MRR_NO,'''')
			--	FROM '+@CTEMPDETAILTABLE1+' A
			--	JOIN BATCHWISE_FIXCODE_UPLOAD BT ON  A.PRODUCT_CODE=BT.PRODUCT_CODE AND A.SP_ID=BT.SP_ID 
			--	JOIN
			--	(
			--	 SELECT  B.AC_CODE, A.PRODUCT_CODE ,B.BILL_NO,B.BILL_DT ,a.mrr_id,B.MRR_NO,
			--	 B.bill_level_tax_method,
			--	 SR=ROW_NUMBER() OVER (PARTITION BY B.AC_CODE, A.PRODUCT_CODE ORDER BY bill_challan_mode,b.RECEIPT_DT DESC ,b.LAST_UPDATE DESC)
			--	 FROM PID01106 A (NOLOCK)
			--	 JOIN PIM01106 B (NOLOCK) ON A.MRR_ID =B.MRR_ID
			--	 WHERE B.CANCELLED=0 
			--	 AND ('''+@CAC_CODE+'''='''' or B.AC_CODE='''+@CAC_CODE+''')
			--	 and INV_MODE='+rtrim(ltrim(str(@NMODE)))+'
			--	 AND B.BILL_NO<>''''
			--	) PID ON A.PRODUCT_CODE=PID.PRODUCT_CODE AND PID.SR=1
			--	LEFT JOIN SKU B (NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE  
			--	WHERE A.SP_ID ='''+LTRIM(RTRIM((@NSPID)))+''' 
			--	and ISNULL(B.BARCODE_CODING_SCHEME,0)=1 
			--	and isnull(ISNULL(PID.BILL_NO, B.INV_NO),'''') <>'''' 
			--	and  isnull(ISNULL(PID.BILL_DT, B.INV_DT),'''')<>'''' 
			--	'
			--	PRINT @DTSQL 
			--	EXEC SP_EXECUTESQL @DTSQL
			
			--END
			

            
		END
		ELSE IF @CXN_TYPE IN('SLS','RPS')
		BEGIN
            --CALCULATE IN CASE OF MANUAL DISCOUNT 
            
            DECLARE @CFILTER VARCHAR(MAX)
            SET @CFILTER=''
      
            SET @NSTEP=105
            PRINT '9 NORMALIZE ALL DISCOUNT AVALILABLE  '  
			
			  SET @DTSQL=N' UPDATE  B SET 
              BASIC_DISCOUNT_PERCENTAGE=A.BASIC_DISCOUNT_PERCENTAGE,
              BASIC_DISCOUNT_AMOUNT=A.BASIC_DISCOUNT_AMOUNT ,
              CARD_DISCOUNT_PERCENTAGE=A.CARD_DISCOUNT_PERCENTAGE,
              CARD_DISCOUNT_AMOUNT=A.CARD_DISCOUNT_AMOUNT
		      FROM BATCHWISE_FIXCODE_UPLOAD B  (NOLOCK) 
              JOIN '+@CTEMPDETAILTABLE1+' A (NOLOCK)  ON A.ROW_ID=B.ROW_ID AND A.SP_ID=B.SP_ID
              WHERE A.SP_ID ='''+LTRIM(RTRIM((@NSPID)))+'''
			  AND ABS(A.QUANTITY)=ABS(b.QUANTITY) ' --AND ABS(A.QUANTITY)=1 (Changed after issue raised by Ved/Pankaj/Sir in case If user is seeling quantity=1 
			  --- and stock is lying within 2 batch codes (0.5 each) and manual discount is there (Date :31-10-2022)
              PRINT @DTSQL
             EXEC SP_EXECUTESQL @DTSQL

			  SET @NSTEP=106
			  SET @DTSQL=N' UPDATE  B SET 
              BASIC_DISCOUNT_PERCENTAGE=A.BASIC_DISCOUNT_PERCENTAGE,
              BASIC_DISCOUNT_AMOUNT=ROUND(((A.BASIC_DISCOUNT_AMOUNT /A.QUANTITY)*B.QUANTITY )  ,2) ,
              CARD_DISCOUNT_PERCENTAGE=A.CARD_DISCOUNT_PERCENTAGE,
              CARD_DISCOUNT_AMOUNT=ROUND(((A.CARD_DISCOUNT_AMOUNT /A.QUANTITY)*B.QUANTITY )  ,2)
		      FROM '+@CTEMPDETAILTABLE1+' A WITH (ROWLOCK)
              JOIN BATCHWISE_FIXCODE_UPLOAD B WITH (ROWLOCK) ON A.ROW_ID=B.ROW_ID AND A.SP_ID=B.SP_ID
              WHERE A.SP_ID ='''+LTRIM(RTRIM((@NSPID)))+'''
			  AND ABS(A.QUANTITY)<>ABS(b.QUANTITY) ' ---AND ABS(A.QUANTITY)<>1  (Changed after issue raised by Ved/Pankaj/Sir in case If user is seeling quantity=1 
			  --- and stock is lying within 2 batch codes (0.5 each) and manual discount is there (Date :31-10-2022)
              PRINT @DTSQL
              EXEC SP_EXECUTESQL @DTSQL
            
     --        SET @DTSQL=N' UPDATE  B SET 
     --         BASIC_DISCOUNT_PERCENTAGE=A.BASIC_DISCOUNT_PERCENTAGE,
     --         BASIC_DISCOUNT_AMOUNT=CASE WHEN A.QUANTITY=1 THEN A.BASIC_DISCOUNT_AMOUNT ELSE 
			  --ROUND(((A.BASIC_DISCOUNT_AMOUNT /A.QUANTITY)*B.QUANTITY )  ,2)  end ,
     --         CARD_DISCOUNT_PERCENTAGE=A.CARD_DISCOUNT_PERCENTAGE,
     --         CARD_DISCOUNT_AMOUNT=CASE WHEN A.QUANTITY=1 THEN A.CARD_DISCOUNT_AMOUNT ELSE
			  --ROUND(((A.CARD_DISCOUNT_AMOUNT /A.QUANTITY)*B.QUANTITY )  ,2)  END
		   --   FROM '+@CTEMPDETAILTABLE1+' A WITH (ROWLOCK)
     --         JOIN BATCHWISE_FIXCODE_UPLOAD B WITH (ROWLOCK) ON A.ROW_ID=B.ROW_ID AND A.SP_ID=B.SP_ID
     --         WHERE A.SP_ID ='''+LTRIM(RTRIM((@NSPID)))+'''
     --        '
     --         PRINT @DTSQL
     --        EXEC SP_EXECUTESQL @DTSQL
              
		
			IF @CXN_TYPE='SLS'
			BEGIN     

             SET @DTSQL=N' UPDATE  B SET 
              CMM_DISCOUNT_AMOUNT=CASE WHEN A.QUANTITY=1 THEN A.CMM_DISCOUNT_AMOUNT ELSE 
			  ROUND(((A.CMM_DISCOUNT_AMOUNT /A.QUANTITY)*B.QUANTITY )  ,2)  END,
			  Item_round_off= CASE WHEN A.QUANTITY=1 THEN A.ITEM_ROUND_OFF ELSE  ((A.ITEM_ROUND_OFF /A.QUANTITY)*B.QUANTITY ) END
			 
		      FROM '+@CTEMPDETAILTABLE1+' A WITH (ROWLOCK)
              JOIN BATCHWISE_FIXCODE_UPLOAD B WITH (ROWLOCK) ON A.ROW_ID=B.ROW_ID 
              WHERE A.SP_ID ='''+LTRIM(RTRIM((@NSPID)))+'''
              AND B.SP_ID ='''+LTRIM(RTRIM((@NSPID)))+''' 
            '+@CFILTER
              PRINT @DTSQL
              EXEC SP_EXECUTESQL @DTSQL
			 
		  END
              
            SET @DTSQL=N' INSERT #TMPALLDIFF(ROW_ID,VALUE,DIFF,DIFF1,VALUE1)
            SELECT A.ROW_ID ,A.BASIC_DISCOUNT_AMOUNT AS VALUE,
             DIFF=A.BASIC_DISCOUNT_AMOUNT -B.BASIC_DISCOUNT_AMOUNT,
             DIFF1=A.CARD_DISCOUNT_AMOUNT-B.CARD_DISCOUNT_AMOUNT,
             A.CARD_DISCOUNT_AMOUNT AS VALUE1
             FROM '+@CTEMPDETAILTABLE1+' A WITH (ROWLOCK)
             JOIN 
             (
              SELECT ROW_ID ,SUM(BASIC_DISCOUNT_AMOUNT) AS BASIC_DISCOUNT_AMOUNT
              ,SUM(CARD_DISCOUNT_AMOUNT) AS CARD_DISCOUNT_AMOUNT
              FROM BATCHWISE_FIXCODE_UPLOAD WITH (ROWLOCK)
              WHERE SP_ID ='''+LTRIM(RTRIM((@NSPID)))+'''
              GROUP BY ROW_ID
             ) B ON A.ROW_ID  =B.ROW_ID  
             WHERE SP_ID ='''+LTRIM(RTRIM((@NSPID)))+'''
             AND (A.BASIC_DISCOUNT_AMOUNT <>B.BASIC_DISCOUNT_AMOUNT OR A.CARD_DISCOUNT_AMOUNT<>B.CARD_DISCOUNT_AMOUNT)
             '+@CFILTER
             
             PRINT @DTSQL
             EXEC SP_EXECUTESQL @DTSQL
               
             SET @NSTEP=140
             
               INSERT INTO #TMPDIFF(ROW_ID,DIFF,VALUE)
				 SELECT ROW_ID,DIFF,VALUE 
				 FROM #TMPALLDIFF
				 WHERE DIFF <>0
                 
				 WHILE EXISTS(SELECT TOP 1 'U' FROM #TMPDIFF)
				 BEGIN
				      EXEC SP3S_REPROCESS_FIXPRODUCT_DISCOUNT @NSPID,'BASIC_DISCOUNT_AMOUNT',@CERRORMSG OUTPUT
					  IF ISNULL(@CERRORMSG,'')<>''
					  BEGIN
						   SET @CERRORMSG='ERROR IN BASIC_DISCOUNT DISTRIBUTION '+@CERRORMSG
						   GOTO END_PROC
					  END
				 END
              
				 INSERT INTO #TMPDIFF(ROW_ID,DIFF,VALUE)
				 SELECT ROW_ID,DIFF1,VALUE1 
				 FROM #TMPALLDIFF
				 WHERE DIFF1 <>0
               
                SET @NSTEP=150
                
				WHILE EXISTS(SELECT TOP 1 'U' FROM #TMPDIFF)
				BEGIN 
				
				     EXEC SP3S_REPROCESS_FIXPRODUCT_DISCOUNT @NSPID,'CARD_DISCOUNT_AMOUNT',@CERRORMSG OUTPUT
				     
				      IF ISNULL(@CERRORMSG,'')<>''
					  BEGIN
						   SET @CERRORMSG='ERROR IN CARD_DISCOUNT DISTRIBUTION '+@CERRORMSG
						   GOTO END_PROC
					  END
				 END
           
           
           PRINT '10 INSERTION NEW BARCODE IN UPLOAD TABLES  '   
           
             SET @NSTEP=160

		    SELECT @CCOLNAME=ISNULL(@CCOLNAME+',','')+(COLUMN_NAME),
			@CALIASCOLNAME=ISNULL(@CALIASCOLNAME+',','')+('A.'+COLUMN_NAME)
			FROM INFORMATION_SCHEMA.COLUMNS (nolock)
			WHERE TABLE_NAME=@CTEMPDETAILTABLE1
			AND COLUMN_NAME NOT IN('TMP_ROW_ID','SP_ID','TS','QUANTITY','ROW_ID','PRODUCT_CODE','BASIC_DISCOUNT_AMOUNT','CARD_DISCOUNT_AMOUNT','CMM_DISCOUNT_AMOUNT','ITEM_ROUND_OFF')
            ORDER BY COLUMN_NAME
            DECLARE @CBATCH_SPID VARCHAR(50)
			SET @CBATCH_SPID=@NSPID

            SET @CNEWCOLNAME='SP_ID,PRODUCT_CODE,QUANTITY,BASIC_DISCOUNT_AMOUNT,CARD_DISCOUNT_AMOUNT,ROW_ID,'


			DECLARE @CCMMDIS VARCHAR(100)
			SET @CCMMDIS=''
			IF @CXN_TYPE='SLS'
			BEGIN
			   SET @CNEWCOLNAME=@CNEWCOLNAME+'CMM_DISCOUNT_AMOUNT,ITEM_ROUND_OFF,'
			   SET @CCMMDIS='B.CMM_DISCOUNT_AMOUNT,b.ITEM_ROUND_OFF,'
			 END

            SET @CCOLNAME=@CNEWCOLNAME+@CCOLNAME

			IF @CXN_TYPE='SLS'
			BEGIN
			   SET @CBATCH_SPID=@NSPID+'ZZ'
			   UPDATE SLS_cmd01106_UPLOAD SET TEMP_ROW_ID =ROW_ID WHERE SP_ID=@NSPID 
			END

            
            SET @NSTEP=170
			SET @DTSQL=N' INSERT '+@CTEMPDETAILTABLE1+' ('+@CCOLNAME+')
			            SELECT '''+RTRIM(LTRIM(@CBATCH_SPID))+''' AS SP_ID, 
						B.PRODUCT_CODE, B.QUANTITY,
			            ISNULL(B.BASIC_DISCOUNT_AMOUNT,0) AS BASIC_DISCOUNT_AMOUNT,
			            ISNULL(B.CARD_DISCOUNT_AMOUNT,0) AS CARD_DISCOUNT_AMOUNT,
			            CONVERT(VARCHAR(40),''LATER''+ CONVERT(VARCHAR(50), NEWID())) AS ROW_ID,'+
						@CCMMDIS +'
						'+@CALIASCOLNAME+' 
			            FROM '+@CTEMPDETAILTABLE1+' A 
			            JOIN
			            (
			             SELECT ROW_ID AS OLD_ROW_ID,PRODUCT_CODE,QUANTITY,SP_ID,
			             BASIC_DISCOUNT_PERCENTAGE,BASIC_DISCOUNT_AMOUNT,CARD_DISCOUNT_PERCENTAGE,CARD_DISCOUNT_AMOUNT,CMM_DISCOUNT_AMOUNT,ITEM_ROUND_OFF
			             FROM BATCHWISE_FIXCODE_UPLOAD WITH (ROWLOCK)
			             WHERE SP_ID ='''+LTRIM(RTRIM((@NSPID)))+'''
			            ) B ON A.ROW_ID=B.OLD_ROW_ID 
			            WHERE A.SP_ID ='''+LTRIM(RTRIM((@NSPID)))+'''
			            '
			PRINT @DTSQL 
			EXEC SP_EXECUTESQL @DTSQL
	        
	        PRINT '10 DELETE OLD BARCODE   '   
	        
		    SET @NSTEP=180

		IF @CXN_TYPE NOT IN('SLS','RPS')
		BEGIN
         SET @DTSQL=N' DELETE  a  FROM '+@CTEMPDETAILTABLE1+' A WITH (rowlock)
            JOIN BATCHWISE_FIXCODE_UPLOAD B WITH (rowlock) ON A.ROW_ID=B.ROW_ID AND A.SP_ID=B.SP_ID
            WHERE A.SP_ID ='''+LTRIM(RTRIM((@NSPID)))+'''  '
            PRINT @DTSQL 
			EXEC SP_EXECUTESQL @DTSQL
        END 
		ELSE IF @CXN_TYPE  IN('RPS')
		BEGIN
		 SET @NSTEP=185
		       SET @DTSQL=N' UPDATE  A SET SP_ID='''' FROM '+@CTEMPDETAILTABLE1+' A (NOLOCK)
            JOIN BATCHWISE_FIXCODE_UPLOAD B (NOLOCK) ON A.ROW_ID=B.ROW_ID AND A.SP_ID=B.SP_ID
            WHERE A.SP_ID ='''+LTRIM(RTRIM((@NSPID)))+'''  '
            PRINT @DTSQL 
			EXEC SP_EXECUTESQL @DTSQL

		END
		
   
            SET @NSTEP=190
           
            if @CXN_TYPE='RPS'
            begin

				SET @DTSQL=N' UPDATE A 
				SET DISCOUNT_AMOUNT=BASIC_DISCOUNT_AMOUNT+CARD_DISCOUNT_AMOUNT,
				NET=((MRP*QUANTITY)-BASIC_DISCOUNT_AMOUNT-CARD_DISCOUNT_AMOUNT)
				FROM '+@CTEMPDETAILTABLE1+' A  WHERE A.SP_ID ='''+LTRIM(RTRIM((@CBATCH_SPID)))+'''
				 '+@CFILTER
				 PRINT @DTSQL +'TEST'
				EXEC SP_EXECUTESQL @DTSQL 

					print 'check'
	

				
			end 
			else
			begin
			   
				SET @DTSQL=N' UPDATE A 
				SET DISCOUNT_AMOUNT=BASIC_DISCOUNT_AMOUNT+CARD_DISCOUNT_AMOUNT,
				NET=((MRP*QUANTITY)-BASIC_DISCOUNT_AMOUNT-CARD_DISCOUNT_AMOUNT+isnull(item_round_off,0))
				FROM '+@CTEMPDETAILTABLE1+' A  WHERE A.SP_ID ='''+LTRIM(RTRIM((@CBATCH_SPID)))+'''
				 '+@CFILTER
				 PRINT @DTSQL +'TEST'
				EXEC SP_EXECUTESQL @DTSQL
			
			end
			
		END
		ELSE IF @CXN_TYPE IN('DCO','WPS','DNPS','CNC','UNC','APP','JWI','snc','SLSNA','MIS')
		BEGIN
		    
		    
		     PRINT '12 INSERTION NEW BARCODE IN UPLOAD TABLES  '   
           
             SET @NSTEP=160
			
			 SET @CNEWCOLNAME='PRODUCT_CODE,QUANTITY,ROW_ID,SP_ID'		    
			--- This is done to handle calling of normalize fix barcodes from  Savetran of WOW floor transfer 
			--- where Temp tables are base of upload table (Sanjay : 19-08-2023) Dinkar need to cross check it
			
			if @cAddColsList=''
		    begin
			    SET @CNEWCOLNAME='PRODUCT_CODE,QUANTITY,ROW_ID'

				SELECT @CCOLNAME=ISNULL(@CCOLNAME+',','')+(COLUMN_NAME),
				@CALIASCOLNAME=ISNULL(@CALIASCOLNAME+',','')+('A.'+COLUMN_NAME)
				FROM INFORMATION_SCHEMA.COLUMNS 
				WHERE TABLE_NAME=@CTEMPDETAILTABLE1
				AND COLUMN_NAME NOT IN('TS','QUANTITY','ROW_ID','PRODUCT_CODE')
				ORDER BY COLUMN_NAME
          
				SET @CCOLNAME=@CNEWCOLNAME+(CASE WHEN @CCOLNAME<>'' THEN ','+@CCOLNAME ELSE '' END )


			end
			else
			begin

			     SET @CNEWCOLNAME='PRODUCT_CODE,QUANTITY,ROW_ID'
				SELECT @CCOLNAME=@CNEWCOLNAME+','+@cAddColsList,
				@CALIASCOLNAME='a.sp_id,'+@cAddColsList

			end

			
    --        if @@spid=51
				--select 
            SET @NSTEP=172
			SET @DTSQL=N' INSERT '+@CTEMPDETAILTABLE1+' ('+@CCOLNAME+')
			            SELECT B.PRODUCT_CODE, B.QUANTITY,
			            CONVERT(VARCHAR(40),''LATER''+ CONVERT(VARCHAR(50), NEWID())) AS ROW_ID, '+@CALIASCOLNAME+' 
			            FROM '+@CTEMPDETAILTABLE1+' A 
			            JOIN
			            (
			             SELECT ROW_ID AS OLD_ROW_ID,PRODUCT_CODE,QUANTITY,SP_ID
			             FROM BATCHWISE_FIXCODE_UPLOAD
			             WHERE SP_ID ='''+LTRIM(RTRIM((@NSPID)))+'''
			            ) B ON A.ROW_ID=B.OLD_ROW_ID 
			            WHERE A.SP_ID ='''+LTRIM(RTRIM((@NSPID)))+'''
			            '
			PRINT @DTSQL 
			EXEC SP_EXECUTESQL @DTSQL
	        
	        PRINT '13 DELETE OLD BARCODE   '   
	        
		    SET @NSTEP=180
            SET @DTSQL=N' DELETE A FROM '+@CTEMPDETAILTABLE1+' A
            JOIN BATCHWISE_FIXCODE_UPLOAD B (NOLOCK) ON A.ROW_ID=B.ROW_ID 
            WHERE A.SP_ID ='''+LTRIM(RTRIM((@NSPID)))+''' 
            AND  b.sp_id='''+LTRIM(RTRIM((@NSPID)))+'''  '
            PRINT @DTSQL 
			EXEC SP_EXECUTESQL @DTSQL
            
		
		END
		
    END

	 --  IF @@SPID=66
		--begin
			
		--	SELECT 1, 'CHECK TMPCMDRPS AFTER NORMALIZE',* FROM EOSSRPS_UPLOAD (NOLOCK) WHERE SP_ID=@NSPID	
		--end	
    
    
END TRY         
BEGIN CATCH    		    
  SET @CERRORMSG = 'PROCEDURE SP3S_NORMALIZE_FIX_PRODUCT_CODE : STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()    
    
END CATCH    
     
END_PROC:    

END


