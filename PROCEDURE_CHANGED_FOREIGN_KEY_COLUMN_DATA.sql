create PROCEDURE DBO.CHANGED_FOREIGN_KEY_COLUMN_DATA  
(  
  @TABLE_NAME VARCHAR(200)  
 ,@COLUMN_NAME VARCHAR(200)  
 ,@OLD_VALUE VARCHAR(200)  
 ,@NEW_VALUE VARCHAR(200)  
)  
----WITH ENCRYPTION  
AS  
  SET NOCOUNT ON;  
  BEGIN TRY  
    --DECLARE LOCAL VARIABLE  
    DECLARE @NROWCOUNT INT , @CSTRQUERY NVARCHAR(MAX)  
           ,@NLOOP_START INT  
           ,@CSOURCETABLE VARCHAR(500)  
           ,@CTARGATETABLE VARCHAR(500)  
           ,@CSOURCECOLUMN VARCHAR(500)  
           ,@CTARGATECOLUMN VARCHAR(500)  
           ,@CERORMSG VARCHAR(MAX)  
           ,@STRQUERY NVARCHAR(MAX)  
           ,@CDATABASENAME VARCHAR(100)  
           ,@UNIQUE_CONSTRAINT_COLUMN_NAME VARCHAR(200)
           ,@RECORDS_EXISTS VARCHAR(100)  
           ,@inactivecol_name nvarchar(20)  
     SET @CDATABASENAME=DB_NAME()+'_RFOPT..RF_OPT'  
     
      set @inactivecol_name=''
	 if left(@TABLE_NAME,4)='ATTR'
	 SeT @inactivecol_name=SUBSTRING(@TABLE_NAME,0,CHARINDEX('_',@TABLE_NAME)+1)+'INACTIVE'
     
     
	 
     --CREATE TEM TABLE FOR INSERT ALL TABLE AND THERE RELATED COLUMN NAME FOR SUB SECTION CODE
     IF OBJECT_ID('TEMPDB..#SUB_SECTION_CODE') IS NOT NULL  
        DROP TABLE #SUB_SECTION_CODE  
     CREATE TABLE #SUB_SECTION_CODE  
       (  
         ID INT IDENTITY(1,1)  
        ,SUB_SECTION_NAME VARCHAR(200)  
        ,OLD_SUB_SECTION_CODE VARCHAR(200)   
        ,NEW_SUB_SECTION_CODE VARCHAR(200)   
        ,OLD_SECTION_CODE VARCHAR(200)   
        ,NEW_SECTION_CODE VARCHAR(200)   
       )  
     --CREATE TEM TABLE FOR INSERT ALL TABLE AND THERE RELATED COLUMN NAME 
    IF OBJECT_ID('TEMPDB..#CONSTRAINT_DETAILS') IS NOT NULL  
       DROP TABLE #CONSTRAINT_DETAILS  
    CREATE TABLE #CONSTRAINT_DETAILS  
     (  
      ID INT IDENTITY(1,1)  
     ,SOURCE_TABLE VARCHAR(500)  
     ,SOURCE_COLUMN VARCHAR(500)  
     ,TARGAT_TABLE  VARCHAR(500)  
     ,TARGAT_COLUMN VARCHAR(500)  
     ,CONSTRAINTS_NAME VARCHAR(500)  
     )  
     --SELECT ALL TABLE AND COLUMN NAME RELATED TO PRIMARY KEY AND FORIGEN KEY REFERENCE
     --AND INSERT INTO TEMP TABLE FOR FEATHER USED
    INSERT INTO #CONSTRAINT_DETAILS(SOURCE_TABLE,SOURCE_COLUMN,TARGAT_TABLE,TARGAT_COLUMN,CONSTRAINTS_NAME)  
    SELECT O2.NAME AS [SOURCE TABLE]  
          ,C2.NAME AS [SOURCE COLUMN]  
          ,O1.NAME AS [TARGATE TABLE]   
          ,C1.NAME AS [TARGATE COLUMN]  
          ,FK.NAME AS [FORIGEN KEY NAME]  
        
 FROM SYS.OBJECTS O1  
 JOIN SYS.FOREIGN_KEYS FK ON O1.OBJECT_ID = FK.PARENT_OBJECT_ID  
 JOIN SYS.FOREIGN_KEY_COLUMNS FKC ON FK.OBJECT_ID=FKC.CONSTRAINT_OBJECT_ID  
 JOIN SYS.COLUMNS C1 ON FKC.PARENT_OBJECT_ID = C1.OBJECT_ID  
   AND FKC.PARENT_COLUMN_ID=C1.COLUMN_ID  
 JOIN SYS.COLUMNS C2 ON FKC.REFERENCED_OBJECT_ID = C2.OBJECT_ID  
   AND FKC.REFERENCED_COLUMN_ID=C2.COLUMN_ID  
 JOIN SYS.OBJECTS O2 ON FK.REFERENCED_OBJECT_ID=O2.OBJECT_ID  
 JOIN SYS.KEY_CONSTRAINTS PK ON FK.REFERENCED_OBJECT_ID = PK.PARENT_OBJECT_ID  
   AND FK.KEY_INDEX_ID = PK.UNIQUE_INDEX_ID  
 WHERE O2.NAME =@TABLE_NAME AND C2.NAME = @COLUMN_NAME AND O1.NAME NOT IN ('SD_ATTR','LMP01106','campaign_Sectiond')
 ORDER BY O2.NAME, C2.NAME  


 --AND O1.NAME NOT IN ('LMP01106','LOCOB','CAMPAIGN_SECTIONM','CAMPAIGN_SECTIOND','SD_ATTR')    
 SET @NROWCOUNT = @@ROWCOUNT;  
 SET @NLOOP_START = 1;  
 BEGIN TRANSACTION  
 WHILE @NROWCOUNT >=@NLOOP_START  
   BEGIN  
     --DECLARE TARGATE TABLE AND TARGATE COLUMN NAME  
     SELECT @CTARGATETABLE=TARGAT_TABLE,@CTARGATECOLUMN =TARGAT_COLUMN   
     FROM #CONSTRAINT_DETAILS WHERE ID=@NLOOP_START  
       
      IF @CTARGATETABLE ='SECTIOND'  
        BEGIN  
          ------INSERT DATA INTO TEMP TABLE FROM SECTIOND TABLE------------  
            INSERT INTO #SUB_SECTION_CODE(SUB_SECTION_NAME,OLD_SUB_SECTION_CODE,NEW_SUB_SECTION_CODE,OLD_SECTION_CODE,NEW_SECTION_CODE)  
            SELECT O.SUB_SECTION_NAME,O.SUB_SECTION_CODE,N.SUB_SECTION_CODE,O.SECTION_CODE,N.SECTION_CODE   
            FROM SECTIOND O WITH(NOLOCK)  
            JOIN SECTIOND N WITH(NOLOCK) ON O.SUB_SECTION_NAME = N.SUB_SECTION_NAME  
            WHERE O.SECTION_CODE=@OLD_VALUE AND N.SECTION_CODE= @NEW_VALUE  
              
            ------UPDATE DATA INTO ARTICLE MASTER FROM OLD TO NEW SUB_SECTION_CODE---------   
            UPDATE A SET  A.SUB_SECTION_CODE =S.NEW_SUB_SECTION_CODE  
            FROM DBO.ARTICLE A  
            JOIN #SUB_SECTION_CODE S ON  A.SUB_SECTION_CODE = S.OLD_SUB_SECTION_CODE  
              
            ---INACTIVE ALL SUB SECTION NAME WHICH ARE RELATED TO OLD VALE OF SECTION CODE----------  
            UPDATE DBO.SECTIOND SET INACTIVE = 1   
            WHERE SUB_SECTION_CODE IN (SELECT OLD_SUB_SECTION_CODE FROM #SUB_SECTION_CODE)  
            
        END  
          
         IF @CTARGATETABLE ='SECTIOND'  
           BEGIN  
                  SET @STRQUERY = N'UPDATE DBO.['+@CTARGATETABLE+'] SET ['+@CTARGATECOLUMN+']   
                    = '''+@NEW_VALUE+''' WHERE ['+@CTARGATECOLUMN+'] = '''+@OLD_VALUE+'''  
                    AND INACTIVE = 0 '  
                 EXEC SP_EXECUTESQL @STRQUERY  
           END  
          ELSE  IF @CTARGATETABLE ='ARTICLE_FIX_ATTR'   AND @TABLE_NAME='ARTICLE' AND @COLUMN_NAME='ARTICLE_CODE'
          BEGIN
				Print 'There is no effect on the Attributes......'
           END
		   ELSE 
          BEGIN
              
					 SET @STRQUERY = N'UPDATE DBO.['+@CTARGATETABLE+'] SET ['+@CTARGATECOLUMN+']     
						 = '''+@NEW_VALUE+''' WHERE ['+@CTARGATECOLUMN+'] = '''+@OLD_VALUE+''''    
					 PRINT @STRQUERY    
					 EXEC SP_EXECUTESQL @STRQUERY   
               
           END
           
         
       -- PRINT @STRQUERY    

    SET @NLOOP_START = @NLOOP_START+1;  
   END  


     DECLARE @CPARANAME  VARCHAR(20),@CPARAALIAS VARCHAR(100)
           
           
           IF (LEFT(@COLUMN_NAME,4)='PARA')
           BEGIN
                set @CPARANAME=REPLACE (@COLUMN_NAME,'_CODE','_NAME')
                set @CPARAALIAS=REPLACE (@COLUMN_NAME,'_CODE','_ALIAS')
                
                SET @STRQUERY = N' Update c set '+@CPARANAME+'=b.'+@CPARANAME+' ,'+@CPARAALIAS+'=b.alias  
                                   FROM SKU A (NOLOCK) 
                                   JOIN '+@TABLE_NAME+' B (NOLOCK) ON A.'+@COLUMN_NAME+' =B.'+@COLUMN_NAME+' 
                                   JOIN SKU_NAMES C (NOLOCK) ON C.PRODUCT_CODE =A.PRODUCT_CODE
                                   WHERE B.'+@CPARANAME+'<>C.'+@CPARANAME+' '
                 PRINT @STRQUERY    
				 EXEC SP_EXECUTESQL @STRQUERY         
           
           END
  
     if left(@TABLE_NAME,4)='ATTR'
	 BEGiN  
			SET @STRQUERY='UPDATE ['+@TABLE_NAME+'] SET '+@inactivecol_name+' = 1 WHERE ['+@COLUMN_NAME+'] = '''+@OLD_VALUE+''' '   
	 END
	 ELSe
	 BEGIN
			SET @STRQUERY='UPDATE ['+@TABLE_NAME+'] SET INACTIVE = 1 WHERE ['+@COLUMN_NAME+'] = '''+@OLD_VALUE+''' '  
	 END
     PRINT @STRQUERY  
     EXEC SP_EXECUTESQL @STRQUERY     
          
       
 COMMIT TRANSACTION;  
   
 SELECT '' AS [ERRMSG]  
 --SELECT * FROM #CONSTRAINT_DETAILS  
  END TRY  
  BEGIN CATCH  
   IF @@TRANCOUNT > 0  
      ROLLBACK;  
      SET @CERORMSG= 'ERROR || '+ ERROR_MESSAGE();  
      SELECT @CERORMSG AS [ERRMSG]  
  END CATCH
