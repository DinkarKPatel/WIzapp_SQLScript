CREATE PROCEDURE SAVETRAN_SLR_RECON
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				VARCHAR(50)='',
	@CMEMONOPREFIX		VARCHAR(50)='',
	@CFINYEAR			VARCHAR(10)='',
	@CMACHINENAME		VARCHAR(100)='',
	@CWINDOWUSERNAME	VARCHAR(100)='',
	@CWIZAPPUSERCODE	VARCHAR(10)='0000000',
	@CMEMOID			VARCHAR(40)='',
	@NBOXNO				NUMERIC(3,0)=0,
	@CPRODUCTCODE		VARCHAR(50)=''
		
)
--WITH ENCRYPTION
AS
BEGIN
	--changes by Dinkar in location id varchar(4)..
	-- @NUPDATEMODE:	1- NEW WHOLESALE PS ADDED, 
	--					2- EDIT A GIVEN PS
	--					3- CURRENT MEMO CANCELLED, 
						
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(4),
			@CLOCATIONID			VARCHAR(4),
			@CHODEPTID				VARCHAR(4),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@BNEGSTOCKFOUND BIT,
			@CMSG					VARCHAR(MAX),@BPURLOC BIT,
			@CPRIFIX				VARCHAR(10),
			@CCURLOC				VARCHAR(10),
			@BPREFIXLZEROS	BIT,@CPREZERO VARCHAR(5),@BALLOWNEGSTOCK BIT,@CLOCID VARCHAR(4)
					
	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))
     -- SETTTING UP ENVIRONMENT
	SET @NSTEP = 0	
		
    
    
    SET @NSTEP = 10
	-- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
	SET @CTEMPDBNAME = ''

	SET @CMASTERTABLENAME	= 'SLR_RECON_MST'
	SET @CDETAILTABLENAME	= 'SLR_RECON_DET'

--SELECT * FROM TEMP_SLR_RECON_MST_65
	SET @CTEMPMASTERTABLENAME	= 'SLRRECON_SLR_RECON_MST_UPLOAD'
	SET @CTEMPDETAILTABLENAME	= 'SLRRECON_SLR_RECON_DET_UPLOAD'

	SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME
	
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'MEMO_ID'
	SET @CMEMONO			= 'MEMO_NO'
	SET @NMEMONOLEN			= 10
	
	SELECT @CLOCID=LOCATION_CODE FROM SLRRECON_SLR_RECON_MST_UPLOAD (nolock) WHERE SP_ID=@NSPID  
	
	IF ISNULL(@CLOCID,'')=''	
		SELECT @CLOCATIONID		=DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 
	ELSE
		SET @CLOCATIONID= @CLOCID
			
	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE  CONFIG_OPTION='HO_LOCATION_ID'		

	SET @NSTEP = 15		-- GETTING DEPTID INFO FROM TEMP TABLE
	
	BEGIN TRANSACTION
	
	BEGIN TRY

		SELECT @BALLOWNEGSTOCK =VALUE FROM USER_ROLE_DET A
		JOIN USERS B ON A.ROLE_ID=B.ROLE_ID 
		WHERE USER_CODE=@CWIZAPPUSERCODE 
		AND FORM_NAME='FRMSALE' 
		AND FORM_OPTION='ALLOW_NEG_STOCK'		
		
		SET @BALLOWNEGSTOCK=ISNULL(@BALLOWNEGSTOCK,0)

		IF OBJECT_ID('TEMPDB..#BARCODES','U') IS NOT NULL
			DROP TABLE #BARCODES
			
		SELECT PRODUCT_CODE,BIN_ID,QUANTITY_IN_STOCK AS XN_QTY INTO #BARCODES FROM PMT01106 WHERE 1=2	
		
		IF OBJECT_ID('TEMPDB..#TMPSLRRECONINVALID','U') IS NOT NULL
			DROP TABLE #TMPSLRRECONINVALID

		IF OBJECT_ID('TEMPDB..#TMPSLRRECONDET','U') IS NOT NULL
			DROP TABLE #TMPSLRRECONDET
		
		SET @NSTEP = 20
		SELECT CMD_ROW_ID,QUANTITY INTO #TMPSLRRECONDET FROM SLR_RECON_DET
		WHERE 1=2
		
		IF @nUpdatemode<>3
		BEGIN
			SET @CCMD=N'SELECT CMD_ROW_ID,QUANTITY FROM '+@CTEMPDETAILTABLE
			
			INSERT #TMPSLRRECONDET
			EXEC SP_EXECUTESQL @CCMD
		END
		SELECT A.PRODUCT_CODE,SUM(A.QUANTITY) AS QUANTITY_IN_STOCK INTO #TMPSLRRECONINVALID
		FROM CMD01106 A (NOLOCK) 
		JOIN #TMPSLRRECONDET B (NOLOCK) ON A.ROW_ID=B.CMD_ROW_ID
		WHERE  A.QUANTITY>0 GROUP BY A.PRODUCT_CODE
		
		
		IF EXISTS (SELECT TOP 1 * FROM #TMPSLRRECONINVALID)
		BEGIN
			SET @NSTEP = 30
			SELECT PRODUCT_CODE,QUANTITY_IN_STOCK,'FOLLOWING BAR CODES ARE NOT PART OF SALE RETURN' AS ERRMSG
			FROM #TMPSLRRECONINVALID
		    
			SET @BNEGSTOCKFOUND=1
			GOTO END_PROC
		END
		
		SET @NSTEP = 40

		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	

		   IF ISNULL(@CLOCATIONID,'')=''
		 BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
			GOTO END_PROC    
		 END

		 	UPDATE a SET RecoQty=RecoQty+abs(b.QUANTITY),lastupdate=getdate()  from POSGRRecos a WITH (ROWLOCK) JOIN SLRRECON_SLR_RECON_DET_UPLOAD b (NOLOCK) ON 
			a.CMDRowId=b.cmd_row_id WHERE b.SP_ID=@NSPID 

			-- GENERATING NEW JOB ORDER NO		
			SET @NSAVETRANLOOP=0
			WHILE @NSAVETRANLOOP=0
			BEGIN
			
				SET @NSTEP = 45		-- GENERATING NEW KEY
				
				EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX,1,
								@CFINYEAR,0, @CMEMONOVAL OUTPUT   
			
			
				SET @NSTEP = 50
				
				PRINT @CMEMONOVAL
				SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
										WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
										AND FIN_YEAR = '''+@CFINYEAR+''' )
								SET @NLOOPOUTPUT=0
							ELSE
								SET @NLOOPOUTPUT=1'
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
			END

			IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
				  GOTO END_PROC  		
			END

			SET @NSTEP = 55		-- GENERATING NEW ID

			-- GENERATING NEW JOB ORDER ID
			SET @CKEYFIELDVAL1 = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
			
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
				  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
				  GOTO END_PROC
			END

			SET @NSTEP = 60		-- UPDATING NEW ID INTO TEMP TABLES

			-- UPDATING NEWLY GENERATED JOB ORDER NO AND JOB ORDER ID IN PIM AND PID TEMP TABLES
			SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
						@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE  SP_ID ='''+@NSPID+''' '
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
		
			SET @NSTEP = 65
			
			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE  SP_ID ='''+@NSPID+''' '
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD

			SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET fin_year = '''+@CFINYEAR+''' WHERE  SP_ID ='''+@NSPID+''' and isnull(fin_year,'''')='''' '
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 70
			
			-- GETTING DEPT_ID FROM TEMP MASTER TABLE
			SET @CCMD = 'SELECT @CMEMODEPTID = location_code FROM ' + @CTEMPMASTERTABLE +' WHERE  SP_ID ='''+@NSPID+''' '
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(4) OUTPUT', 
							   @CMEMODEPTID OUTPUT
			IF (@CMEMODEPTID IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'
				  GOTO END_PROC  		
			END

		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
		
			SET @NSTEP = 75		-- GETTING ID INFO FROM TEMP TABLE

			-- GETTING DEPT_ID FROM TEMP MASTER TABLE
			SET @CCMD = 'SELECT @CMEMODEPTID = location_code FROM ' + @CMASTERTABLENAME 
			
			EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(4) OUTPUT', 
							   @CMEMODEPTID OUTPUT
							   
			IF (@CMEMODEPTID IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'
				  GOTO END_PROC  		
			END

			SET @NSTEP = 80
			
			-- GETTING MEMO ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ' + @CKEYFIELD1 + ', @CMEMONOVAL = ' + @CMEMONO + ' FROM '
						+ (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME + ' WHERE MEMO_ID = ''' + @CMEMOID + '''' --MANISH
								ELSE @CTEMPMASTERTABLE +' WHERE   SP_ID ='''+@NSPID+'''' END )
			
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
							   
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  GOTO END_PROC  		
			END
			
			INSERT #BARCODES(PRODUCT_CODE,BIN_ID,XN_QTY)
			SELECT B.PRODUCT_CODE,B.BIN_ID,-A.QUANTITY AS XN_QTY
			FROM SLR_RECON_DET A
			JOIN CMD01106 B ON B.ROW_ID=A.CMD_ROW_ID
			WHERE A.MEMO_ID=@CKEYFIELDVAL1
			
			UPDATE a SET RecoQty=RecoQty-abs(b.QUANTITY),lastupdate=getdate()  from POSGRRecos a WITH (ROWLOCK) JOIN SLR_RECON_DET b (NOLOCK) ON 
			a.CMDRowId=b.cmd_row_id WHERE b.memo_id=@CKEYFIELDVAL1

			IF (@NUPDATEMODE = 3) 
			BEGIN

				SET @NSTEP=90
				-- UPDATING SENTTOHO FLAG
				SET @CCMD = N'UPDATE ' + @CMASTERTABLENAME + ' SET CANCELLED = 1,LAST_UPDATE=GETDATE() ' + 
							N' WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + ''''
				EXEC SP_EXECUTESQL @CCMD
			
				SET @NSTEP = 95
				
				--FOR CANCEL MODE REVERT THE STOCK AND GOTO END_PROC
				IF OBJECT_ID('TEMPDB..#BARCODE_NETQTY1','U') IS NOT NULL
					DROP TABLE #BARCODE_NETQTY1
		
				--GETTING THE NET QUANTITY TO BE UPDATED FOR EACH BARCODE EXCLUDING THE STOCK NA ARTICLES
				SELECT A.BIN_ID,A.PRODUCT_CODE,SUM(A.XN_QTY) AS XN_QTY 
				INTO #BARCODE_NETQTY1 
				FROM #BARCODES A 
				JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE
				JOIN ARTICLE C ON B.ARTICLE_CODE=C.ARTICLE_CODE
				WHERE C.STOCK_NA=0 AND ISNULL(A.PRODUCT_CODE,'')<>''
				
				GROUP BY A.BIN_ID,A.PRODUCT_CODE
				HAVING SUM(A.XN_QTY)<>0
				
				SET @NSTEP = 100
			   --CHECK IF THE BARCODES TO BE UPDATED ARE NOT PART OF STOCK RECONCILLATION PROCESS	
			   IF EXISTS(
							SELECT TOP 1 A.MEMO_ID FROM STMH01106 A JOIN PMT01106 B ON A.REP_ID=B.REP_ID
																			 AND B.BIN_ID=A.RECON_BIN_ID
							JOIN #BARCODE_NETQTY1 C ON C.PRODUCT_CODE=B.PRODUCT_CODE AND C.BIN_ID=B.BIN_ID
							WHERE B.DEPT_ID = @CLOCATIONID
						)
			   BEGIN
						SELECT DISTINCT C.PRODUCT_CODE,0 AS QUANTITY_IN_STOCK,'FOLLOWING BAR CODES ARE PART OF STOCK RECONCILIATION' AS ERRMSG
						FROM STMH01106 A JOIN PMT01106 B ON A.REP_ID=B.REP_ID
						AND B.BIN_ID=A.RECON_BIN_ID
						JOIN #BARCODE_NETQTY1 C ON C.PRODUCT_CODE=B.PRODUCT_CODE AND C.BIN_ID=B.BIN_ID
					    
						SET @BNEGSTOCKFOUND=1
						GOTO END_PROC
			   END	  	
			   
			   SET @NSTEP = 105
			   --UPDATING STOCK IN PMT01106
			   UPDATE A
			   SET QUANTITY_IN_STOCK=QUANTITY_IN_STOCK+XN_QTY
			   FROM PMT01106 A
			   JOIN #BARCODE_NETQTY1 B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.BIN_ID=B.BIN_ID
               WHERE A.DEPT_ID = @CLOCATIONID
               
			   IF @BALLOWNEGSTOCK=0
			   BEGIN
				  IF EXISTS(SELECT TOP 1 'U' FROM PMT01106 A JOIN #BARCODE_NETQTY1 B ON A.PRODUCT_CODE=B.PRODUCT_CODE
						 AND A.BIN_ID=B.BIN_ID WHERE A.QUANTITY_IN_STOCK<0 AND A.DEPT_ID = @CLOCATIONID)
				  BEGIN	
					  SELECT A.PRODUCT_CODE,A.QUANTITY_IN_STOCK,'STOCK GOING NEGATIVE' AS ERRMSG
					  FROM PMT01106 A
					  JOIN #BARCODE_NETQTY1 B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.BIN_ID=B.BIN_ID 
					  WHERE A.QUANTITY_IN_STOCK<0 AND A.DEPT_ID = @CLOCATIONID
					  
					  SET @BNEGSTOCKFOUND=1
				  END
			   END				   
			   
			  		   
			   GOTO END_PROC
			END				   			
			
			

			UPDATE a SET RecoQty=RecoQty+abs(b.QUANTITY),lastupdate=getdate()  from POSGRRecos a WITH (ROWLOCK) JOIN SLRRECON_SLR_RECON_DET_UPLOAD b (NOLOCK) ON 
			a.CMDRowId=b.cmd_row_id WHERE b.SP_ID=@NSPID 

			SET @NSTEP = 85		-- STORING OLD STATUS OF BARCODES 
			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET LAST_UPDATE=GETDATE()  WHERE  SP_ID ='''+@NSPID+''''
			EXEC SP_EXECUTESQL @CCMD
			
		END					-- END OF EDITMODE
		
		SET @NSTEP = 110
		
		-- RECHECKING IF ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END

		SET @NSTEP = 115		-- UPDATING MASTER TABLE

		 DECLARE @CWHERECLAUSE VARCHAR(1000)
		 SET @CWHERECLAUSE='  SP_ID='''+ LTRIM(RTRIM((@NSPID)))+''''

		
		EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			,@BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@CWHERECLAUSE

		-- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE
		SET @NSTEP = 125		-- UPDATING TRANSACTION TABLE

		-- UPDATING ROW_ID IN TEMP TABLES
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE LEFT(ROW_ID,5) = ''LATER''  AND SP_ID='''+ LTRIM(RTRIM((@NSPID)))+''''
		EXEC SP_EXECUTESQL @CCMD

		-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
		SET @NSTEP = 130		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES

		SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + ' 
					WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
					AND ROW_ID IN 
					(
						SELECT A.ROW_ID 
						FROM ' + @CDETAILTABLENAME + ' A 
						LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B ON A.ROW_ID = B.ROW_ID and SP_ID='''+ LTRIM(RTRIM((@NSPID)))+'''
						WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
						AND   B.ROW_ID IS NULL
					)'
		EXEC SP_EXECUTESQL @CCMD


		-- INSERTING/UPDATING THE ENTRIES IN PRD_JID TABLE FROM TEMPTABLE
		SET @NSTEP = 135		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

		EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME
			, @CKEYFIELD1	= 'ROW_ID'
			,@BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@CWHERECLAUSE

	LBLUPDATESTOCK:
		
		-- UPDATING STOCK OF PMT W.R.T. CURRENT MEMO
		SET @NSTEP = 140		-- UPDATING PMT TABLE
		--SELECT @CMEMONOVAL
		INSERT #BARCODES(PRODUCT_CODE,BIN_ID,XN_QTY)
		SELECT B.PRODUCT_CODE,B.BIN_ID,A.QUANTITY AS XN_QTY
		FROM SLR_RECON_DET A
		JOIN CMD01106 B ON B.ROW_ID=A.CMD_ROW_ID
		WHERE A.MEMO_ID=@CKEYFIELDVAL1
		
		IF OBJECT_ID('TEMPDB..#BARCODE_NETQTY','U') IS NOT NULL
			DROP TABLE #BARCODE_NETQTY

		--GETTING THE NET QUANTITY TO BE UPDATED FOR EACH BARCODE EXCLUDING THE STOCK NA ARTICLES
		SELECT A.BIN_ID,A.PRODUCT_CODE,SUM(A.XN_QTY) AS XN_QTY 
		INTO #BARCODE_NETQTY 
		FROM #BARCODES A 
		JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE
		JOIN ARTICLE C ON B.ARTICLE_CODE=C.ARTICLE_CODE
		WHERE C.STOCK_NA=0 AND ISNULL(A.PRODUCT_CODE,'')<>''
		GROUP BY A.BIN_ID,A.PRODUCT_CODE
		HAVING SUM(A.XN_QTY)<>0
		
		SET @NSTEP = 150
	    --CHECK IF THE BARCODES TO BE UPDATED ARE NOT PART OF STOCK RECONCILLATION PROCESS	
	    IF EXISTS(
					SELECT TOP 1 A.MEMO_ID FROM STMH01106 A JOIN PMT01106 B ON A.REP_ID=B.REP_ID
																	 AND B.BIN_ID=A.RECON_BIN_ID
					JOIN #BARCODE_NETQTY C ON C.PRODUCT_CODE=B.PRODUCT_CODE AND C.BIN_ID=B.BIN_ID
					WHERE B.DEPT_ID = @CLOCATIONID
				)
		BEGIN
				SELECT DISTINCT C.PRODUCT_CODE,0 AS QUANTITY_IN_STOCK,'FOLLOWING BAR CODES ARE PART OF STOCK RECONCILIATION' AS ERRMSG
				FROM STMH01106 A JOIN PMT01106 B ON A.REP_ID=B.REP_ID
				AND B.BIN_ID=A.RECON_BIN_ID
				JOIN #BARCODE_NETQTY C ON C.PRODUCT_CODE=B.PRODUCT_CODE AND C.BIN_ID=B.BIN_ID
			    
				SET @BNEGSTOCKFOUND=1
				GOTO END_PROC
		END	  	
		
		SET @NSTEP = 160
	    INSERT PMT01106 (PRODUCT_CODE,  QUANTITY_IN_STOCK, DEPT_ID,BIN_ID, LAST_UPDATE )  
	    SELECT B.PRODUCT_CODE,0 AS QUANTITY_IN_STOCK,@CLOCATIONID,B.BIN_ID,GETDATE() AS LAST_UPDATE  
	    FROM #BARCODE_NETQTY B
	    JOIN SKU D ON B.PRODUCT_CODE = D.PRODUCT_CODE  
	    LEFT OUTER JOIN PMT01106 PMT ON PMT.PRODUCT_CODE = B.PRODUCT_CODE AND PMT.BIN_ID=B.BIN_ID  AND PMT.DEPT_ID = @CLOCATIONID 
	    WHERE PMT.PRODUCT_CODE IS NULL 		
		
	    --UPDATING STOCK IN PMT01106
	    UPDATE A
	    SET QUANTITY_IN_STOCK=QUANTITY_IN_STOCK-XN_QTY
	    FROM PMT01106 A
	    JOIN #BARCODE_NETQTY B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.BIN_ID=B.BIN_ID	
	   Where A.DEPT_ID = @CLOCATIONID			
	    /*STOCK UPDATE CHANGES*/
		
		SET @NSTEP = 170
		
	    IF @BALLOWNEGSTOCK=0
	    --CHECKING FOR NEGATIVE STOCK
	    BEGIN
		  IF EXISTS(SELECT TOP 1 'U' FROM PMT01106 A JOIN #BARCODE_NETQTY B ON A.PRODUCT_CODE=B.PRODUCT_CODE
				 AND A.BIN_ID=B.BIN_ID WHERE A.QUANTITY_IN_STOCK<0  AND A.DEPT_ID = @CLOCATIONID)
		  BEGIN	
			  SELECT A.PRODUCT_CODE,A.QUANTITY_IN_STOCK,'STOCK GOING NEGATIVE' AS ERRMSG
			  FROM PMT01106 A
			  JOIN #BARCODE_NETQTY B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.BIN_ID=B.BIN_ID 
			  WHERE A.QUANTITY_IN_STOCK<0
			  
			  SET @BNEGSTOCKFOUND=1
			  GOTO END_PROC
		  END
	    END	

		SET @NSTEP = 180	
				
		DECLARE @NTAXFLAG NUMERIC(1,0)
	
		-- VALIDATING ENTRIES 
		
		IF OBJECT_ID('TEMPDB..#TMPRECONDET','U') IS NOT NULL
		   DROP TABLE #TMPRECONDET
		   
		   SELECT DISTINCT MEMO_ID, CMD_ROW_ID 
		   INTO #TMPRECONDET
		   FROM SLR_RECON_DET WHERE MEMO_ID=@CKEYFIELDVAL1
		
		
		IF OBJECT_ID('TEMPDB..#TMPSLRRECONNEG','U') IS NOT NULL
			DROP TABLE #TMPSLRRECONNEG
		
		SELECT CMD.PRODUCT_CODE  
		INTO #TMPSLRRECONNEG
		FROM #TMPRECONDET A
		JOIN CMD01106 CMD (NOLOCK) ON A.CMD_ROW_ID =CMD.ROW_ID 
		JOIN SLR_RECON_DET B (NOLOCK) ON A.CMD_ROW_ID =B.CMD_ROW_ID 
		JOIN SLR_RECON_MST C (NOLOCK) ON B.MEMO_ID =C.MEMO_ID 
		WHERE C.CANCELLED=0
		GROUP BY CMD.PRODUCT_CODE ,A.CMD_ROW_ID 
		HAVING COUNT(*)>1

		SET @NSTEP = 190		
		
		IF EXISTS (SELECT TOP 1 * FROM #TMPSLRRECONNEG)
		BEGIN
			SELECT PRODUCT_CODE,0 AS QUANTITY_IN_STOCK,'FOLLOWING BAR CODES ARE GOING EXCESS W.R.T. SALE RETURN QTY' AS ERRMSG
			FROM #TMPSLRRECONNEG
		    
			SET @BNEGSTOCKFOUND=1
			GOTO END_PROC
		END
		
		-- AFTER SUCCESSFUL SAVING , JUST DROP THE TEMP TABLES CREATED BY APPLICATION
				
		GOTO END_PROC
		
	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'
		
		GOTO END_PROC
	END CATCH
	
END_PROC:
	
	UPDATE slr_recon_mst WITH (ROWLOCk) SET last_update=getdate() WHERE memo_id=@CKEYFIELDVAL1

	IF @@TRANCOUNT>0 
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')='' AND ISNULL(@BNEGSTOCKFOUND,0)=0
		BEGIN
	        UPDATE slr_recon_mst WITH (ROWLOCk) SET HO_SYNCH_LAST_UPDATE='' WHERE memo_id=@CKEYFIELDVAL1
			COMMIT TRANSACTION
		END	
		ELSE
			ROLLBACK
	END
	
	IF ISNULL(@BNEGSTOCKFOUND,0)=0
	BEGIN
		INSERT @OUTPUT ( ERRMSG, MEMO_ID)
				VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )
		
		SELECT ERRMSG,MEMO_ID FROM @OUTPUT	
	END	

	DELETE A FROM SLRRECON_SLR_RECON_MST_UPLOAD A (NOLOCK) WHERE SP_ID=@NSPID 
	DELETE A FROM SLRRECON_SLR_RECON_DET_UPLOAD A (NOLOCK) WHERE SP_ID=@NSPID 

END											
------------------------------------------------------ END OF PROCEDURE SAVETRAN_SLR_RECON