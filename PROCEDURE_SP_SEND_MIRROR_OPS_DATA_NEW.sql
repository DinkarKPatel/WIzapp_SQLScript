CREATE PROCEDURE SP_SEND_MIRROR_OPS_DATA_NEW  
(   
  @CUPLOADEDXNID VARCHAR(50),  
  @CCURLOCID VARCHAR(5)  
  ,@BACKNOWLEDGE BIT=0  
  ,@CERRMSG VARCHAR(1000) OUTPUT  
)   
--WITH ENCRYPTION  
AS  
/*  
 SP_SEND_MIRROR_OPS_DATA_NEW_208_01_02_14 : THIS PROCEDURE WILL SEND PURCHASE ORDER DATA FROM LOCATION TO HO.  
*/  
BEGIN
 return --- Put return on this procedure after getting it slow at Elini after 
		--- ConCall discussion with Sir/Sonu at 8:00 PM (22-10-2020)  
 DECLARE @DTSQL NVARCHAR(MAX),@NSPID INT,@CTEMPTABLE VARCHAR(500),@CMEMOID VARCHAR(50),  
 @CTEMPEMPLOYEETABLE VARCHAR(200),@DMEMOLASTUPDATE DATETIME,@CTABLENAME VARCHAR(100),  
 @BRECFOUND BIT,@CSTEP VARCHAR(5),@CFILTERCONDITION VARCHAR(MAX),  
 @CTEMPMASTERTABLE VARCHAR(200),@CTEMPDETAILTABLE VARCHAR(200),@CTEMPLMTABLE VARCHAR(200),  
 @CTEMPLMPTABLE VARCHAR(200),@CTEMPAREATABLE VARCHAR(200),@CTEMPCITYTABLE VARCHAR(200),  
 @CTEMPSKUTABLE VARCHAR(200),@CTEMPARTTABLE VARCHAR(200),@CTEMPSDTABLE VARCHAR(200),  
 @CTEMPARTATTRTABLE VARCHAR(200),@CTEMPOPS VARCHAR(100)  
   
   
 DECLARE @TXNSSENDINFO TABLE (ORG_TABLENAME VARCHAR(50),TMP_TABLENAME VARCHAR(50),XN_ID VARCHAR(40))     
BEGIN TRY    
 ---- CALL ACKNOWLEDGEMENT OF MEMO SUCCESSFUL MERGING AT MIRRORING SERVER  
 DECLARE @CTEMPDBNAME VARCHAR(40)  
 set @CTEMPDBNAME=''
   
   
    ---- REMOVED THIS CODE AFTER PROBLEM CAME AT FOOTSTEPS AS TOLD BY SIR  
    ---- NO NEED TO SEND OPS DATA NOW ONWARDS ...(IT KEEPS ON RESENDING OPS)  
    ---- TEJENDER SAYING THAT WE DO IT MANUALLY ALREADY (18-01-2015)  
  
 IF OBJECT_ID('TEMPDB..#TEMP_OPS','U') IS NOT NULL  
    DROP TABLE #TEMP_OPS  
   
 SELECT TOP 1 @CCURLOCID AS DEPT_ID,LAST_UPDATE INTO #TEMP_OPS FROM OPS01106 WHERE DEPT_ID = @CCURLOCID    
   
 IF EXISTS (SELECT TOP 1 * FROM MIRRORLOG WHERE XN_TYPE = 'OPS' AND XN_ID = 'OPS')  
 BEGIN  
  IF (SELECT TOP 1 LAST_UPDATE FROM #TEMP_OPS) <> (SELECT TOP 1 LAST_UPDATE FROM  MIRRORLOG WHERE XN_TYPE = 'OPS' AND XN_ID = @CCURLOCID )  
   SET @CMEMOID = @CCURLOCID   
  ELSE  
   SET @CMEMOID = ''   
 END   
 ELSE  
 BEGIN  
  SET @CMEMOID = @CCURLOCID   
 END     
        
 --CHANGE BY BAIJNATH  
 SET @CSTEP=40  
 ---- IF NO MEMO FOUND , JUST END THE PROCESS  
 IF ISNULL(@CMEMOID,'')=''  
  GOTO END_PROC  
 
   
 SET @CSTEP=220  
 ---- SEND THE OPS MEMO MASTER TABLE   
 SELECT  DISTINCT *,'OPS_OPS01106_UPLOAD' AS TARGET_TABLENAME  FROM OPS01106  (NOLOCK)  
   
 SET @CSTEP=240  
 ---- SEND THE DEBITNOTE MEMO SKU TABLE  
 SELECT  DISTINCT SKU.*,'OPS_SKU_UPLOAD' AS TARGET_TABLENAME  FROM OPS01106  (NOLOCK)  
 JOIN SKU (NOLOCK) ON OPS01106.product_code =SKU.product_code 
  
   
 SET @CSTEP=250  
 ---- SEND THE SKU_OH RELATED TO GIVEN OPS MEMO  
 SELECT  DISTINCT SKU_OH.*,'OPS_SKU_OH_UPLOAD' AS TARGET_TABLENAME  FROM OPS01106  (NOLOCK)  
 JOIN SKU_OH (NOLOCK) ON OPS01106.product_code =SKU_OH.product_code 
   
 
 SET @CSTEP=270  
 ---- SEND THE LEDGER A/C RELATED TO GIVEN DEBITNOTE MEMO  
 SELECT  DISTINCT LM01106.*,'OPS_LM01106_UPLOAD' AS TARGET_TABLENAME  FROM OPS01106  (NOLOCK)  
 JOIN SKU (NOLOCK) ON OPS01106.product_code =SKU.product_code 
 JOIN LM01106 (NOLOCK) ON LM01106.AC_CODE =SKU.AC_CODE 
   
 SET @CSTEP=300  
 ---- SEND THE LEDGER HEAD RELATED TO GIVEN DEBITNOTE MEMO  
 SELECT  DISTINCT HD01106.*,'OPS_HD01106_UPLOAD' AS TARGET_TABLENAME  FROM OPS01106  (NOLOCK)  
 JOIN SKU (NOLOCK) ON OPS01106.product_code =SKU.product_code 
 JOIN LM01106 (NOLOCK) ON LM01106.AC_CODE =SKU.AC_CODE 
 JOIN HD01106 (NOLOCK) ON HD01106.HEAD_CODE =LM01106 .HEAD_CODE 
   
 SET @CSTEP=280  
 ---- SEND THE LEDGER A/C PHYSICAL DETAILS RELATED TO GIVEN DEBITNOTE MEMO  
 SELECT  DISTINCT LMP01106.*,'OPS_LMP01106_UPLOAD' AS TARGET_TABLENAME  FROM OPS01106  (NOLOCK)  
 JOIN SKU (NOLOCK) ON OPS01106.product_code =SKU.product_code 
 JOIN LMP01106 (NOLOCK) ON LMP01106.AC_CODE =SKU.AC_CODE 
   
 SET @CSTEP=290  
 ---- SEND THE AREA OF LEDGER/CUSTOMER RELATED TO GIVEN DEBITNOTE MEMO  
 SELECT  DISTINCT AREA.*,'OPS_AREA_UPLOAD' AS TARGET_TABLENAME  FROM OPS01106  (NOLOCK)  
 JOIN SKU (NOLOCK) ON OPS01106.product_code =SKU.product_code 
 JOIN LMP01106 (NOLOCK) ON LMP01106.AC_CODE =SKU.AC_CODE 
 JOIN AREA (NOLOCK) ON AREA.area_code =LMP01106.AREA_CODE  
   
 SET @CSTEP=320  
 ---- SEND THE CITY OF LEDGER/CUSTOMER RELATED TO GIVEN DEBITNOTE MEMO  
  SELECT  DISTINCT CITY.*,'OPS_CITY_UPLOAD' AS TARGET_TABLENAME  FROM OPS01106  (NOLOCK)  
 JOIN SKU (NOLOCK) ON OPS01106.product_code =SKU.product_code 
 JOIN LMP01106 (NOLOCK) ON LMP01106.AC_CODE =SKU.AC_CODE 
 JOIN AREA (NOLOCK) ON AREA.area_code =LMP01106.AREA_CODE  
 JOIN CITY (NOLOCK) ON CITY.CITY_CODE =AREA.city_code  
   
 SET @CSTEP=330  
 ---- SEND THE STATE OF LEDGER/CUSTOMER RELATED TO GIVEN DEBITNOTE MEMO  
  SELECT  DISTINCT CITY.*,'OPS_STATE_UPLOAD' AS TARGET_TABLENAME  FROM OPS01106  (NOLOCK)  
 JOIN SKU (NOLOCK) ON OPS01106.product_code =SKU.product_code 
 JOIN LMP01106 (NOLOCK) ON LMP01106.AC_CODE =SKU.AC_CODE 
 JOIN AREA (NOLOCK) ON AREA.area_code =LMP01106.AREA_CODE  
 JOIN CITY (NOLOCK) ON CITY.CITY_CODE =AREA.city_code  
  JOIN STATE (NOLOCK) ON STATE.state_code =CITY.STATE_CODE  
   
 SET @CSTEP=340  
 ---- SEND THE ARTICLE RELATED TO GIVEN OPS MEMO  
 IF OBJECT_ID('TEMPDB..#TMPSKU','U') IS NOT NULL
    DROP TABLE #TMPSKU

	SELECT SKU.PRODUCT_CODE,SKU.ARTICLE_CODE ,SKU.PARA1_CODE,SKU.PARA2_CODE ,
	       SKU.PARA3_CODE,SKU.PARA4_CODE,SKU.PARA5_CODE,SKU.PARA6_CODE 
	INTO #TMPSKU
	FROM OPS01106  (NOLOCK)  
    JOIN SKU (NOLOCK) ON OPS01106.product_code =SKU.product_code 
  

 SELECT DISTINCT   A.*,'OPS_ARTICLE_UPLOAD' AS TARGET_TABLENAME FROM ARTICLE A (NOLOCK) 
 JOIN #TMPSKU B ON A.ARTICLE_CODE=B.article_code 
   
 SET @CSTEP=350  
 ---- SEND THE SECTIOND RELATED TO GIVEN OPS MEMO  
SELECT  DISTINCT SECTIOND.*,'OPS_SECTIOND_UPLOAD' AS TARGET_TABLENAME  FROM SECTIOND (NOLOCK)   
 JOIN  ARTICLE  (NOLOCK) ON ARTICLE.SUB_SECTION_CODE=SECTIOND.SUB_SECTION_CODE  
 JOIN #TMPSKU SKU ON ARTICLE.ARTICLE_CODE =SKU.article_code 
   
 SET @CSTEP=360  
 ---- SEND THE SECTIONM RELATED TO GIVEN OPS MEMO  
 SELECT  DISTINCT SECTIONM.* ,'OPS_SECTIONM_UPLOAD' AS TARGET_TABLENAME  FROM SECTIONM (NOLOCK)   
 JOIN  SECTIOND  (NOLOCK) ON SECTIOND.SECTION_CODE=SECTIONM.SECTION_CODE
 JOIN  ARTICLE  (NOLOCK) ON ARTICLE.SUB_SECTION_CODE=SECTIOND.SUB_SECTION_CODE  
 JOIN #TMPSKU SKU ON ARTICLE.ARTICLE_CODE =SKU.article_code 
   
 SET @CSTEP=370  
 ---- SEND THE PARA1 RELATED TO GIVEN OPS MEMO  
SELECT  DISTINCT PARA1.*,'OPS_PARA1_UPLOAD' AS TARGET_TABLENAME   FROM PARA1 (NOLOCK)   
JOIN #TMPSKU SKU   ON SKU.PARA1_CODE=PARA1.PARA1_CODE
   
 SET @CSTEP=380  
 ---- SEND THE PARA2 RELATED TO GIVEN OPS MEMO  
 SELECT  DISTINCT PARA2.*,'OPS_PARA2_UPLOAD' AS TARGET_TABLENAME   FROM PARA2 (NOLOCK)   
JOIN #TMPSKU SKU   ON SKU.PARA2_CODE=PARA2.PARA2_CODE
   
 SET @CSTEP=390  
 ---- SEND THE PARA3 RELATED TO GIVEN OPS MEMO  
 SELECT  DISTINCT PARA3.*,'OPS_PARA3_UPLOAD' AS TARGET_TABLENAME   FROM PARA3 (NOLOCK)   
JOIN #TMPSKU SKU   ON SKU.PARA3_CODE=PARA3.PARA3_CODE
   
 SET @CSTEP=400  
 ---- SEND THE PARA4 RELATED TO GIVEN OPS MEMO  
 SELECT  DISTINCT PARA3.*,'OPS_PARA3_UPLOAD' AS TARGET_TABLENAME   FROM PARA3 (NOLOCK)   
 JOIN #TMPSKU SKU   ON SKU.PARA3_CODE=PARA3.PARA3_CODE
   
 SET @CSTEP=410  
 ---- SEND THE PARA5 RELATED TO GIVEN OPS MEMO  
 SELECT  DISTINCT PARA4.*,'OPS_PARA4_UPLOAD' AS TARGET_TABLENAME   FROM PARA4 (NOLOCK)   
 JOIN #TMPSKU SKU   ON SKU.PARA4_CODE=PARA4.PARA4_CODE 
   
 SET @CSTEP=420  
 ---- SEND THE PARA6 RELATED TO GIVEN OPS MEMO  
 SELECT  DISTINCT PARA5.*,'OPS_PARA5_UPLOAD' AS TARGET_TABLENAME   FROM PARA5 (NOLOCK)   
 JOIN #TMPSKU SKU   ON SKU.PARA5_CODE=PARA5.PARA5_CODE 
   
 SET @CSTEP=460  
 ---- SEND THE ART_ATTR RELATED TO GIVEN OPS MEMO  
SELECT  DISTINCT PARA6.*,'OPS_PARA6_UPLOAD' AS TARGET_TABLENAME   FROM PARA6 (NOLOCK)   
 JOIN #TMPSKU SKU   ON SKU.PARA6_CODE=PARA6.PARA6_CODE 
   
 
  SET @CSTEP=481 
 ---- SEND THE PMT01106 RELATED TO GIVEN OPS MEMO  
 
  SELECT DISTINCT 'OPS_PMT01106_UPLOAD' AS TARGET_TABLENAME,A.DEPT_ID,A.product_code,A.BIN_ID,A.quantity_in_stock  
  FROM PMT01106 A (NOLOCK)  
  JOIN #TMPSKU B (NOLOCK) ON B.product_code=A.product_code
 
       


  
 GOTO END_PROC  
END TRY  
BEGIN CATCH  
 SET @CERRMSG='P: SP_SEND_MIRROR_OPS_DATA_NEW, STEP:'+@CSTEP+', MESSAGE:'+ERROR_MESSAGE()  
 GOTO END_PROC  
END CATCH     
END_PROC:  
  
END  
---END OF PROCEDURE - SP_SEND_MIRROR_OPS_DATA_NEW  