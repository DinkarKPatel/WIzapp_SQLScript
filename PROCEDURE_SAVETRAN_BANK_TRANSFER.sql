CREATE PROCEDURE SAVETRAN_BANK_TRANSFER  
(  
	 @NUPDATEMODE  NUMERIC(1,0),  
	 @NSPID    VARCHAR(50),  
	 @CMEMONOPREFIX  VARCHAR(50),  
	 @CFINYEAR   VARCHAR(10),  
	 @CMEMOID   VARCHAR(40)='',
	 @BCALLEDFROMSAVETRAN_LIFT BIT=0
)  
--WITH ENCRYPTION
AS  
BEGIN  
 DECLARE @CTEMPDBNAME   VARCHAR(100),  
   @CMASTERTABLENAME  VARCHAR(100),  
   @CDETAILTABLENAME  VARCHAR(100),  
   @CTEMPMASTERTABLENAME VARCHAR(100),  
   @CTEMPDETAILTABLENAME VARCHAR(100),  
   @CTEMPMASTERTABLE  VARCHAR(100),  
   @CTEMPDETAILTABLE  VARCHAR(100),  
   @CERRMSG    VARCHAR(500),  
   @CKEYFIELD1    VARCHAR(50),  
   @CKEYFIELDVAL1   VARCHAR(50),  
   @CMEMONO    VARCHAR(20),  
   @NMEMONOLEN    NUMERIC(20,0),  
   @CMEMONOVAL    VARCHAR(50),  
   @CCMD     NVARCHAR(4000),  
   @CCMDOUTPUT    NVARCHAR(4000),  
   @NSAVETRANLOOP   BIT,  
   @NSTEP    varchar(10),  
   @CDEPTID   VARCHAR(4),  
   @CMEMODEPTID   VARCHAR(4),
   @CPETYENABLE	  BIT,
   @CPETTYTYPE    VARCHAR(4),
   @CSHIFTID VARCHAR(20),
      @CHODEPTID VARCHAR(4),
   @CLOCATIONID VARCHAR (4)
  
  DECLARE @OUTPUT TABLE (MEMO_ID VARCHAR(30),ERRMSG VARCHAR(500)) 
        
  DECLARE @CSHIFT_ID VARCHAR(15),@NRECEIPTS NUMERIC(18,2),@NISSUE NUMERIC(18,2),@NTILL_LIMIT NUMERIC(18,2)
  
 SET @NSTEP = 0  -- SETTTING UP ENVIRONMENT  
  
 SET @CTEMPDBNAME = ''  
  
 SET @CMASTERTABLENAME = 'TILL_BANK_TRANSFER'  
  
 SET @CTEMPMASTERTABLENAME = 'BTF_TILL_BANK_TRANSFER_UPLOAD'
   
 SET @CTEMPMASTERTABLE = @CTEMPDBNAME + @CTEMPMASTERTABLENAME  
   
 SET @CERRMSG   = ''  
 SET @CKEYFIELD1   = 'MEMO_ID'  
  
 SET @CMEMONO   = 'MEMO_NO'  
 SET @NMEMONOLEN   = 10  

 set @nstep='3'

	SELECT @CDEPTID	=location_code  FROM BTF_TILL_BANK_TRANSFER_UPLOAD (nolock) WHERE SP_ID=@NSPID 
	IF @NUPDATEMODE=3
	BEGIN
		SELECT @CDEPTID	=location_code  FROM TILL_BANK_TRANSFER (nolock) WHERE MEMO_ID=@CMEMOID 
	END

	SET @CLOCATIONID=@CDEPTID
	SELECT @CHODEPTID=[VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'
   
 BEGIN TRY  
  IF @BCALLEDFROMSAVETRAN_LIFT=0
  BEGIN
	  BEGIN TRANSACTION   
  END

  set @nstep='3.6'
  IF ISNULL(@CLOCATIONID,'')=''
 BEGIN
    SET @CERRMSG = 'STEP- ' + @NSTEP+ ' LOCATION ID CAN NOT BE BLANK  '  
	GOTO END_PROC    
 END
  
  IF @NUPDATEMODE=3
  BEGIN
	set @nstep='4.1'
		SET @CKEYFIELDVAL1=@CMEMOID
  
		IF NOT EXISTS(SELECT TOP 1 'U' FROM TILL_BANK_TRANSFER WHERE MEMO_ID=@CKEYFIELDVAL1)
		BEGIN
			SET @CERRMSG='PLEASE PROVIDE A VALID MEMO_ID FOR CANCELLATION.'
			GOTO END_PROC
		END
		
		IF EXISTS (SELECT TOP 1 'U' FROM TILL_BANK_TRANSFER (NOLOCK) WHERE MEMO_ID=@CKEYFIELDVAL1 AND TRANSFERMODE =2)
		BEGIN
			set @nstep='4.5'
		     
			 IF EXISTS (SELECT TOP 1'U' FROM  TILL_BANK_TRANSFER A (NOLOCK) 
			 JOIN PCI_MST B (NOLOCK) ON A.REFLIFTID =B.MEMO_ID 
			 WHERE A.MEMO_ID=@CKEYFIELDVAL1 AND TRANSFERMODE =2 AND B.RECEIPT_DT <>'' AND B.CANCELLED =0)
			 BEGIN
			    
				SET @CERRMSG='Petty cash has Received You can not cancelled it.'
			   GOTO END_PROC

			 END

			 set @nstep='4.7'
			 UPDATE B SET CANCELLED=1 FROM  TILL_BANK_TRANSFER A (NOLOCK) 
			 JOIN PCI_MST B (NOLOCK) ON A.REFLIFTID =B.MEMO_ID 
			 WHERE A.MEMO_ID=@CKEYFIELDVAL1 AND TRANSFERMODE =2 AND B.RECEIPT_DT ='' AND B.CANCELLED =0

		END



		IF @BCALLEDFROMSAVETRAN_LIFT=0
		BEGIN
			set @nstep='5.2'
			EXEC SP3S_UPDATE_LOCKER
						 @CXN_TYPE='BTF'
						,@CXN_ID=@CKEYFIELDVAL1
						,@NMODE=2
						,@CERRMSGOUT=@CERRMSG OUTPUT 
						,@CLOCID =@CDEPTID
			
			IF ISNULL(@CERRMSG,'')<>''
				GOTO END_PROC
		END
		
		UPDATE TILL_BANK_TRANSFER SET CANCELLED=1 WHERE MEMO_ID=@CKEYFIELDVAL1
		
		GOTO END_PROC
  END
    
  IF @NUPDATEMODE = 1 -- ADDMODE   
  BEGIN   
   SET @NSTEP = 20  -- GENERATING NEW KEY  
   
   -- GENERATING NEW JOB ORDER NO    
   SET @NSAVETRANLOOP=0  
   WHILE @NSAVETRANLOOP=0  
   BEGIN  
    EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,  
					@CFINYEAR,0,@CMEMONOVAL OUTPUT     
      
    PRINT @CMEMONOVAL  
    SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+'   
							WHERE '+@CMEMONO+'='''+@CMEMONOVAL+'''   
							AND FIN_YEAR = '''+@CFINYEAR+''' )  
				SET @NLOOPOUTPUT=0  
			   ELSE  
				SET @NLOOPOUTPUT=1'  
    PRINT @CCMD  
    EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT  
   END  
   
   IF @CMEMONOVAL IS NULL OR @CMEMONOVAL LIKE '%LATER%'
   BEGIN  
      SET @CERRMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'   
      GOTO END_PROC      
   END  
  
   SET @NSTEP = 30    
  
   SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+REPLICATE('0', (22-LEN(@CLOCATIONID + @CFINYEAR))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
   
   IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'    
   BEGIN  
      SET @CERRMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
      GOTO END_PROC  
   END  
  
   SET @NSTEP = 40  -- UPDATING NEW ID INTO TEMP TABLES  
   SET @CCMD = 'UPDATE ' +@CTEMPMASTERTABLE + ' SET ' +@CMEMONO+'=''' + @CMEMONOVAL+''',' 
						 +@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+@NSPID+''' '  
   PRINT @CCMD  
   EXEC SP_EXECUTESQL @CCMD  
    
  END     -- END OF ADDMODE  
  ELSE    -- CALLED FROM EDITMODE  
  BEGIN    -- START OF EDITMODE  
    
	   SET @NSTEP = 50  -- GETTING ID INFO FROM TEMP TABLE  
	   -- GETTING JOB ORDER ID WHICH IS BEING EDITED  
	   SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ' + @CKEYFIELD1 + ', @CMEMONOVAL = ' + @CMEMONO + ' FROM '  
		  +@CMASTERTABLENAME + ' WHERE MEMO_ID='''+@CMEMOID+''''   
	     
	   EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT',   
			  @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
	          
	   IF (@CKEYFIELDVAL1 IS NULL) OR (@CMEMONOVAL IS NULL)  
	   BEGIN  
		  SET @CERRMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'  
		  GOTO END_PROC      
	   END  
	   IF @BCALLEDFROMSAVETRAN_LIFT=0
	   BEGIN
		   EXEC SP3S_UPDATE_LOCKER
						 @CXN_TYPE='BTF'
						,@CXN_ID=@CKEYFIELDVAL1
						,@NMODE=2
						,@CERRMSGOUT=@CERRMSG OUTPUT 
						,@CLOCID =@CDEPTID
			
		   IF ISNULL(@CERRMSG,'')<>''
				GOTO END_PROC
	   END		
  END     -- END OF EDITMODE  
  
  SET @NSTEP = 95  
  -- RECHECKING IF ID IS STILL LATER  
  IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
  BEGIN  
	  SET @CERRMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
	  GOTO END_PROC  
  END
  
  SET @NSTEP = 100  -- UPDATING MASTER TABLE  
  IF @BCALLEDFROMSAVETRAN_LIFT=0
  BEGIN
		SET @CCMD=N'UPDATE '+@CTEMPMASTERTABLE+' SET REFLIFTID=NULL WHERE SP_ID='''+@NSPID+''' and  TRANSFERMODE <>2'
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD
  END
   

    DECLARE @CWHERECLAUSE VARCHAR(1000)
    SET @CWHERECLAUSE = ' SP_ID='''+LTRIM(RTRIM((@NSPID)))+''''

  EXEC UPDATEMASTERXN   
      @CSOURCEDB = @CTEMPDBNAME  
    , @CSOURCETABLE = @CTEMPMASTERTABLE  
    , @CDESTDB  = ''  
    , @CDESTTABLE = @CMASTERTABLENAME  
    , @CKEYFIELD1 = @CKEYFIELD1  
    , @BALWAYSUPDATE = 1
	,@CFILTERCONDITION=@CWHERECLAUSE
    -- , @LUPDATEXNS = 1  

  --UPDATE THE LOCKER AMOUNT
  IF @BCALLEDFROMSAVETRAN_LIFT=0			
  BEGIN
	  EXEC SP3S_UPDATE_LOCKER
						 @CXN_TYPE='BTF'
						,@CXN_ID=@CKEYFIELDVAL1
						,@NMODE=1
						,@CERRMSGOUT=@CERRMSG OUTPUT 
						,@CLOCID =@CDEPTID
			
	  IF ISNULL(@CERRMSG,'')<>''
		 GOTO END_PROC		
		 

IF EXISTS (SELECT TOP 1 'U' FROM TILL_BANK_TRANSFER (NOLOCK) WHERE MEMO_ID=@CKEYFIELDVAL1 AND TRANSFERMODE =2 )
BEGIN
--LOCKET TO PETTY CASH ENTRY

     IF EXISTS (SELECT TOP 1 'U' FROM  TILL_BANK_TRANSFER A (NOLOCK) 
	 JOIN PCI_MST B ON A.REFLIFTID =B.MEMO_ID 
	 WHERE A.MEMO_ID=@CKEYFIELDVAL1 AND TRANSFERMODE =2 AND B.CANCELLED =0
	 )
	 BEGIN
	    -- SELECT 'ROHIT'
		 --SET @CERRMSG='Petty cash has Received You can not modify it.'
		 --GOTO END_PROC
		 UPDATE A SET A.REMARKS=B.REMARKS
		 FROM PCI_MST A
		 JOIN TILL_BANK_TRANSFER B ON B.RefLiftID=A.memo_id
		 WHERE B.MEMO_ID=@CKEYFIELDVAL1
	 END
	 ELSE
	 BEGIN
           SET @NSTEP = 500
			PRINT 'CREATING A PETTY CASH CREDIT ENTRY'
			DECLARE @CPETTYCASHID VARCHAR(25),@CPETTYCASHNO VARCHAR(15),@CPETTYCASHPREFIX VARCHAR(5)
			
			SET @CPETTYCASHPREFIX=@CDEPTID+@CDEPTID
			
			--GENERATING NEW MEMO_ID FOR PCI_MST
			GENPETTYKEY:
			EXEC GETNEXTKEY 
					 @CTABLENAME='PCI_MST'
					,@CCOLNAME='MEMO_NO'
					,@NWIDTH=10
					,@CPREFIX=@CPETTYCASHPREFIX
					,@NLZEROS=1
					,@CFINYEAR=@CFINYEAR
					,@NROWCOUNT=0
					,@CNEWKEYVAL=@CPETTYCASHNO OUTPUT
			
			IF ISNULL(@CPETTYCASHNO,'')=''
			BEGIN
				SET @CERRMSG='ERROR GENERATING PETTY CASH IN MEMO.CANNOT PROCEED.'
				GOTO END_PROC
			END	
			
			IF EXISTS(SELECT TOP 1 'U' FROM PCI_MST WHERE FIN_YEAR=@CFINYEAR AND MEMO_NO=@CPETTYCASHNO)
				GOTO GENPETTYKEY
			 
			SET @CPETTYCASHID=@CDEPTID+@CFINYEAR+REPLICATE(0,5)+@CPETTYCASHNO
			--SELECT @CPETTYCASHID
			SET @NSTEP = 560
			INSERT PCI_MST	( MEMO_ID, MEMO_NO, MEMO_DT, AMOUNT, FIN_YEAR, RECEIPT_DT, RECEIVED_BY
							, LAST_UPDATE, USER_CODE, REMARKS, REFLIFTID, SHIFT_ID, CANCELLED ,location_Code,source_location_code)  
			SELECT 	@CPETTYCASHID AS MEMO_ID,@CPETTYCASHNO AS MEMO_NO, MEMO_DT, amount, FIN_YEAR
				  ,'' AS RECEIPT_DT,'' AS RECEIVED_BY,GETDATE() AS LAST_UPDATE, USER_CODE, REMARKS
				  ,MEMO_ID AS REFLIFTID,null AS SHIFT_ID, CANCELLED ,location_code,location_code as source_location_code
			FROM TILL_BANK_TRANSFER
			WHERE MEMO_ID=@CKEYFIELDVAL1 AND TRANSFERMODE =2

			
			update  TILL_BANK_TRANSFER set RefLiftID =@CPETTYCASHID WHERE MEMO_ID=@CKEYFIELDVAL1 AND TRANSFERMODE =2
--
		END
     END
END





  END TRY  
 BEGIN CATCH  
    SET @CERRMSG = 'STEP- ' + @NSTEP + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
 END CATCH 
   
END_PROC:  

	print 'last step:'+@nStep
	
	INSERT INTO @OUTPUT(MEMO_ID,ERRMSG)
	SELECT @CKEYFIELDVAL1,ISNULL(@CERRMSG,'') 
  
IF @@TRANCOUNT>0  AND @BCALLEDFROMSAVETRAN_LIFT=0
BEGIN  
  IF ISNULL(@CERRMSG,'')='' 
  BEGIN
        UPDATE till_bank_transfer set last_update=getdate() where memo_id=@CKEYFIELDVAL1
		UPDATE till_bank_transfer set HO_SYNCH_LAST_UPDATE='' where memo_id=@CKEYFIELDVAL1
		COMMIT TRANSACTION 
  END
  ELSE  
		ROLLBACK  
END  


DELETE A FROM BTF_TILL_BANK_TRANSFER_UPLOAD A (NOLOCK) WHERE SP_ID=@NSPID

			

IF @BCALLEDFROMSAVETRAN_LIFT=0
BEGIN			
	SELECT MEMO_ID,ERRMSG FROM @OUTPUT
END
ELSE
BEGIN
	INSERT #PROCOUTPUT(MEMOID,ERRMSG)
	SELECT MEMO_ID,ERRMSG FROM @OUTPUT
END


END        
---------- END OF PROCEDURE SAVETRAN_BANK_TRANSFER
