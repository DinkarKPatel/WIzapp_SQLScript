-- PROCEDURE TO SAVE A RETAIL SALE FROM TEMPORARY TABLES TO ACTUAL TABLES
create PROCEDURE SAVETRAN_SLSSET
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CMEMONOPREFIX		VARCHAR(50),
	@CFINYEAR			VARCHAR(10),
	@CMACHINENAME		VARCHAR(100)='',
	@CWINDOWUSERNAME	VARCHAR(100)='',
	@CWIZAPPUSERCODE	VARCHAR(10)='0000000',
	@CMEMOID			VARCHAR(40)=''
)
--WITH ENCRYPTION
AS
BEGIN
	--changes by Dinkar in location id varchar(4)..
	-- @NUPDATEMODE:	1- NEW RETAIL SALE ADDED, 
	--					2- NOT APPLICABLE, 
	--					3- CURRENT RETAIL SALE CANCELLED, 
	--					4- EXISTING RETAIL SALE EDITED
	
	-- @CMEMOID:		MEMOID IS REQUIRED IF @NUPDATEMODE IS 3 (FROM CANCELLATION)
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME2		VARCHAR(100),
			--@CDETAILTABLENAME3		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME2	VARCHAR(100),
			--@CTEMPDETAILTABLENAME3	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE2		VARCHAR(100),
			--@CTEMPDETAILTABLE3		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			--@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CKEYFIELD1_DETAIL2		VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(4),
			@CLOCATIONID			VARCHAR(4),
			@CHODEPTID				VARCHAR(4),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@BNEGSTOCKFOUND BIT,@CLOCID VARCHAR(4)

	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	SET @NSTEP = 0		-- SETTTING UP ENVIRONMENT
	SET @CTEMPDBNAME = ''

	SET @CMASTERTABLENAME	= 'SLSMST'
	SET @CDETAILTABLENAME	= 'SLSDET'
	SET @CDETAILTABLENAME2	= 'SLSBC'
	--SET @CDETAILTABLENAME3	= ''

	SET @CTEMPMASTERTABLENAME	= 'TEMP_SLSMST_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME	='TEMP_SLSDET_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME2	= 'TEMP_SLSBC_'+LTRIM(RTRIM(STR(@NSPID)))
	--SET @CTEMPDETAILTABLENAME3	=''-- 'TEMP_CMR01106_'+LTRIM(RTRIM(STR(@NSPID)))

	SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME
	SET @CTEMPDETAILTABLE2	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME2
	--SET @CTEMPDETAILTABLE3	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME3
	
	SET @CERRORMSG			= ''
	--SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'SLS_MEMO_NO'

	SET @CKEYFIELD1_DETAIL2	= 'SLS_MEMO_NO'

	SET @CMEMONO			= 'SLS_MEMO_NO'
	SET @NMEMONOLEN			= 7
    
    SET @CCMD = 'SELECT @CLOCID = location_code  FROM '+@CTEMPMASTERTABLE
	EXEC SP_EXECUTESQL @CCMD, N'@CLOCID VARCHAR(4) OUTPUT', @CLOCID OUTPUT

	IF @CLOCID =''
	SELECT @CLOCATIONID		=DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 
	ELSE
    SET @CLOCATIONID=@CLOCID

	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		

	SET @NSTEP = 10		-- GETTING DEPTID INFO FROM TEMP TABLE
	
	BEGIN TRANSACTION
	
	BEGIN TRY
		IF @NUPDATEMODE = 3 AND ISNULL(@CMEMOID,'') = ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED IF CALLED FROM CANCELLATION'
			GOTO END_PROC  		
		END

	
		-- GETTING DEPT_ID FROM TEMP MASTER TABLE
		SET @CCMD = 'SELECT @CMEMODEPTID =location_code  FROM ' 
					+ (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME ELSE @CTEMPMASTERTABLE END )
		EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(4) OUTPUT', 
						   @CMEMODEPTID OUTPUT
		IF (@CMEMODEPTID IS NULL )
		BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'
			  GOTO END_PROC  		
		END

		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	

		IF ISNULL(@CLOCATIONID,'')=''
		 BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
			GOTO END_PROC    
		 END


			SET @NSTEP = 20		-- GENERATING NEW KEY
			
			-- GENERATING NEW JOB ORDER NO		
			SET @NSAVETRANLOOP=0
			WHILE @NSAVETRANLOOP=0
			BEGIN
				EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
								'',0, @CMEMONOVAL OUTPUT   
				
				PRINT @CMEMONOVAL
				SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
										WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' )
								SET @NLOOPOUTPUT=0
							ELSE
								SET @NLOOPOUTPUT=1'
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
			END


			IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
				  GOTO END_PROC  		
			END

			SET @NSTEP = 30		-- GENERATING NEW ID

			-- GENERATING NEW MEMO ID
			--SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+ REPLICATE('0', 15-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL))
			SET @CKEYFIELDVAL1 = @CMEMONOVAL
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
				  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
				  GOTO END_PROC
			END

			SET @NSTEP = 40		-- UPDATING NEW ID INTO TEMP TABLES

			-- UPDATING NEWLY GENERATED JOB ORDER NO AND JOB ORDER ID IN PIM AND PID TEMP TABLES
			SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''''
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
		
			--SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
			--PRINT @CCMD
			--EXEC SP_EXECUTESQL @CCMD

			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE2 + ' SET '+@CKEYFIELD1_DETAIL2+' = '''+@CKEYFIELDVAL1+''''
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD

			--SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE3 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
			--PRINT @CCMD
			--EXEC SP_EXECUTESQL @CCMD
		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
		
			SET @NSTEP = 50		-- GETTING ID INFO FROM TEMP TABLE

			-- GETTING JOB ORDER ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ' + @CKEYFIELD1 + ', @CMEMONOVAL = ' + @CMEMONO + ' FROM '
						+ (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME ELSE @CTEMPMASTERTABLE END )
			
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  GOTO END_PROC  		
			END
			
			IF @NUPDATEMODE = 3			
			BEGIN
				SET @NSTEP = 65
				-- UPDATING SENTTOHO FLAG
				SET @CCMD = N'UPDATE ' + @CMASTERTABLENAME + ' SET CANCELLED = 1,LAST_UPDATE=GETDATE() ' + 
							N' WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + ''''
				EXEC SP_EXECUTESQL @CCMD
			END
			
			ELSE
			BEGIN
				-- ENTRY IN AUDIT TRAIL (ONLY WHEN USER EXPLICITLY CLICKED ON EDIT BUTTON)
				SET @NSTEP = 70		-- AUDIT TRIAL ENTRY

				EXEC AUDITLOGENTRY
					  @CXNTYPE		= 'SLSMST'
					, @CXNID		= @CKEYFIELDVAL1
					, @CDEPTID		= @CMEMODEPTID
					, @CCOMPUTERNAME= @CMACHINENAME
					, @CWINUSERNAME = @CWINDOWUSERNAME
					, @CWIZUSERCODE = @CWIZAPPUSERCODE
			END

		END					-- END OF EDITMODE

		SET @NSTEP = 95
		
		-- RECHECKING IF ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END

		-- UPDATING MASTER TABLE (PIM01106) FROM TEMP TABLE
		SET @NSTEP = 100		-- UPDATING MASTER TABLE

		IF @NUPDATEMODE <> 3
		BEGIN
		
			EXEC UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPMASTERTABLENAME
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CMASTERTABLENAME
				, @CKEYFIELD1	= @CKEYFIELD1
				, @BALWAYSUPDATE = 1

			-- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE
			SET @NSTEP = 110		-- UPDATING TRANSACTION TABLE

			---- UPDATING ROW_ID IN TEMP TABLES - CMD01106
			--SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
			--			  WHERE LEFT(ROW_ID,5) = ''LATER'''
			--EXEC SP_EXECUTESQL @CCMD

			--SET @NSTEP = 111		-- UPDATING TRANSACTION TABLE - PAYMODE_XN_DET

			-- UPDATING ROW_ID IN TEMP TABLES - PAYMODE_XN_DET
			SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE2 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
						  WHERE LEFT(ROW_ID,5) = ''LATER'''
			EXEC SP_EXECUTESQL @CCMD

			SET @NSTEP = 112		-- UPDATING TRANSACTION TABLE - CMR01106

			---- UPDATING ROW_ID IN TEMP TABLES - CMR01106
			--SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE3 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
			--			  WHERE LEFT(ROW_ID,5) = ''LATER'''
			--EXEC SP_EXECUTESQL @CCMD

			-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
			--SET @NSTEP = 114		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES

			---- CMD01106
			--SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + ' 
			--			WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
			--			AND ROW_ID IN 
			--			(
			--				SELECT A.ROW_ID 
			--				FROM ' + @CDETAILTABLENAME + ' A 
			--				LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B ON A.ROW_ID = B.ROW_ID
			--				WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
			--				AND   B.ROW_ID IS NULL
			--			)'
			--EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 115

			-- PAYMODE_XN_DET
			SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME2 + ' 
						WHERE ' + @CKEYFIELD1_DETAIL2 + ' = ''' + @CKEYFIELDVAL1 + '''
						AND ROW_ID IN 
						(
							SELECT A.ROW_ID 
							FROM ' + @CDETAILTABLENAME2 + ' A 
							LEFT OUTER JOIN ' + @CTEMPDETAILTABLE2 + ' B ON A.ROW_ID = B.ROW_ID
							WHERE A.' + @CKEYFIELD1_DETAIL2 + ' = ''' + @CKEYFIELDVAL1 + '''
							AND   B.ROW_ID IS NULL
						)'
			EXEC SP_EXECUTESQL @CCMD

			--SET @NSTEP = 116
			
			---- CMR01106
			--SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME3 + ' 
			--			WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
			--			AND ROW_ID IN 
			--			(
			--				SELECT A.ROW_ID 
			--				FROM ' + @CDETAILTABLENAME3 + ' A 
			--				LEFT OUTER JOIN ' + @CTEMPDETAILTABLE3 + ' B ON A.ROW_ID = B.ROW_ID
			--				WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
			--				AND   B.ROW_ID IS NULL
			--			)'
			--EXEC SP_EXECUTESQL @CCMD

			-- INSERTING/UPDATING THE ENTRIES IN PRD_JID TABLE FROM TEMPTABLE
			SET @NSTEP = 117		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

			---- CMD01106
			--EXEC UPDATEMASTERXN 
			--	  @CSOURCEDB	= @CTEMPDBNAME
			--	, @CSOURCETABLE = @CTEMPDETAILTABLENAME
			--	, @CDESTDB		= ''
			--	, @CDESTTABLE	= @CDETAILTABLENAME
			--	, @CKEYFIELD1	= 'ROW_ID'
			--	,@BALWAYSUPDATE = 1

			-- PAYMODE_XN_DET
			EXEC UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPDETAILTABLENAME2
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CDETAILTABLENAME2
				, @CKEYFIELD1	= 'ROW_ID'
				, @BALWAYSUPDATE = 1				

		END

		-- VALIDATING ENTRIES 
		SET @NSTEP = 150		-- VALIDATING ENTRIES

		EXEC VALIDATEXN
			  @CXNTYPE	= 'SLSSET'
			, @CXNID	= @CKEYFIELDVAL1
			, @NUPDATEMODE = @NUPDATEMODE			
			, @CCMD		= @CCMDOUTPUT OUTPUT

		IF @CCMDOUTPUT <> ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION FAILED : ' + @CCMDOUTPUT + '...'
			GOTO END_PROC
		END
		
		-- AFTER SUCCESSFUL SAVING , JUST DROP THE TEMP TABLES CREATED BY APPLICATION
		SET @NSTEP = 160
		
	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'
		
		GOTO END_PROC
	END CATCH
	
END_PROC:

	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
		BEGIN
			COMMIT TRANSACTION
		END	
		ELSE
			ROLLBACK
	END
	
	IF ISNULL(@BNEGSTOCKFOUND,0)=0
	BEGIN
		INSERT @OUTPUT ( ERRMSG, MEMO_ID)
				VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )

		SELECT * FROM @OUTPUT	
	END	

	EXEC SP_DROPTEMPTABLES_XNS 'XNSSCH',@NSPID	
	
END						-- SAVETRAN_SLSSET
------------------------------------------------------ END OF PROCEDURE SAVETRAN_SLSSET
