-- PROCEDURE TO GENERATE BARCODES FOR A GIVEN MRR_ID OR PO_ID  
create PROCEDURE SAVETRAN_BOM_ISSUE
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				varchar(50),
	@CMEMONOPREFIX		VARCHAR(50)='',
	@CFINYEAR			VARCHAR(10)='',
	@CMACHINENAME		VARCHAR(100)='',
	@CWINDOWUSERNAME	VARCHAR(100)='',
	@CWIZAPPUSERCODE	VARCHAR(10)='0000000',
	@CXNMEMOID			VARCHAR(40)=''
	
)
--WITH ENCRYPTION
AS
BEGIN
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME1		VARCHAR(100),
			@CDETAILTABLENAME2		VARCHAR(100),
			
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME1	VARCHAR(100),
			@CTEMPDETAILTABLENAME2	VARCHAR(100),
			
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE1		VARCHAR(100),
			@CTEMPDETAILTABLE2		VARCHAR(100),
			
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(4),
			@CLOCATIONID			VARCHAR(4),
			@CHODEPTID				VARCHAR(4),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@LENABLETEMPDATABASE	BIT,
			@NOUTFLAG INT=-1,
			@BOM_DET_ROW_ID VARCHAR(40),@CLOCID	VARCHAR(4)

	DECLARE @OUTPUT TABLE (ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))
    SET @NSTEP = 10		-- SETTTING UP ENVIRONMENT

	SET @CTEMPDBNAME = ''
	
	SET @CMASTERTABLENAME	= 'BOM_ISSUE_MST'
	SET @CDETAILTABLENAME	= 'BOM_ISSUE_DET'
	SET @CDETAILTABLENAME1	= 'BOM_ISSUE_REF'
	
	SET @CTEMPMASTERTABLENAME	= 'MIS_BOM_ISSUE_MST_UPLOAD'
	SET @CTEMPDETAILTABLENAME	= 'MIS_BOM_ISSUE_DET_UPLOAD'
	SET @CTEMPDETAILTABLENAME1	= 'MIS_BOM_ISSUE_REF_UPLOAD'
	
	SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME
	SET @CTEMPDETAILTABLE1	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME1
	
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'ISSUE_ID'
	SET @CMEMONO			= 'ISSUE_NO'
	SET @NMEMONOLEN			= 15
	
	
	select @CLOCID=location_Code  from MIS_BOM_ISSUE_MST_UPLOAD where SP_ID=@NSPID
	if @NUPDATEMODE=3
  BEGIN
	SELECT @CLOCID=location_code from BOM_ISSUE_MST where issue_id=@CXNMEMOID
  END
	SELECT @CLOCATIONID=@CLOCID
		
	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		

	BEGIN TRANSACTION
	
	BEGIN TRY

	   IF ISNULL(@CLOCATIONID,'')=''
		 BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
			GOTO END_PROC    
		 END
		
		SET @NSTEP = 20

		IF ISNULL(@CXNMEMOID,'') = '' AND @NUPDATEMODE IN (3)
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ISSUE ID REQUIRED '
			GOTO END_PROC  		
		END
		
		IF @NUPDATEMODE=3
		BEGIN
		
           EXEC VALIDATEXN_BOM_BEFORE_CANCELLED @CMEMO_ID=@CKEYFIELDVAL1,@CERRORMSG=@CERRORMSG OUTPUT 
           IF ISNULL(@CERRORMSG,'')<>''
           GOTO END_PROC

		    INSERT pmt01106	( BIN_ID, DEPT_ID, DEPT_ID_NOT_STUFFED, last_update, product_code, quantity_in_stock, rep_id, STOCK_RECO_QUANTITY_IN_STOCK,bo_order_id )  
			 SELECT B.BIN_ID, B.DEPT_ID,'' DEPT_ID_NOT_STUFFED,A.LAST_UPDATE  LASTUPDATE, B.PRODUCT_CODE,0 QUANTITY_IN_STOCK,'' REP_ID,0 STOCK_RECO_QUANTITY_IN_STOCK ,
			        CASE WHEN ISNULL(B.BOM_ORDER_ID,'')<>'' THEN B.BOM_ORDER_ID ELSE NULL END AS BOM_ORDER_ID
			 FROM BOM_ISSUE_MST A (NOLOCK)
			 JOIN BOM_ISSUE_DET B (NOLOCK) ON  A.ISSUE_ID =B.ISSUE_ID
			 LEFT JOIN PMT01106 C (NOLOCK) ON B.DEPT_ID =C.DEPT_ID AND B.BIN_ID =C.BIN_ID AND B.PRODUCT_CODE =C.PRODUCT_CODE and isnull(BOM_ORDER_ID,'')=isnull(c.bo_order_id,'') 
			 WHERE C.PRODUCT_CODE IS NULL AND A.issue_id =@CXNMEMOID
			 GROUP BY B.BIN_ID, B.DEPT_ID,A.LAST_UPDATE  , B.PRODUCT_CODE ,CASE WHEN ISNULL(B.BOM_ORDER_ID,'')<>'' THEN B.BOM_ORDER_ID ELSE NULL END 
		    
		    
				
		    UPDATE BOM_ISSUE_MST SET CANCELLED=1,LAST_UPDATE=GETDATE() WHERE ISSUE_ID=@CXNMEMOID
		    UPDATE A SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK+
		    ((CASE WHEN ISNULL(MST.ISSUE_TYPE,0)=0 THEN 1 ELSE -1 END) * X.STOCK_QTY)
		    FROM PMT01106 A  
		    JOIN BOM_ISSUE_DET X (NOLOCK) 
		    ON A.PRODUCT_CODE = X.PRODUCT_CODE AND A.BIN_ID = X.BIN_ID AND A.DEPT_ID = X.DEPT_ID AND  isnull(X.BOM_ORDER_ID,'')=isnull(A.bo_order_id,'')
		    JOIN BOM_ISSUE_MST MST (NOLOCK) ON MST.ISSUE_ID =X.ISSUE_ID
		    WHERE X.ISSUE_ID=@CXNMEMOID
		    IF @@ERROR=0
		       SET @CERRORMSG=''
		    ELSE 
		       SET @CERRORMSG=ERROR_MESSAGE()   
		    
		    IF ISNULL(@CERRORMSG,'')<>''
		    BEGIN
		    
				IF EXISTS (SELECT TOP 1 'U' FROM PMT01106 A
				JOIN BOM_ISSUE_DET B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.DEPT_ID =B.dept_id AND A.BIN_ID =B.BIN_ID 
				WHERE B.ISSUE_ID=@CXNMEMOID AND quantity_in_stock <0)
				BEGIN
			    
			         SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' STOCK GOING NEGATIVE PLEASE CHECK '
			         GOTO END_PROC  		
			    
				END
		    END


			EXEC SP3S_upd_qty_lastupdate
			@nUpdateMode=3,
			@cXnType='MIS',
			@cMasterTable='Bom_issue_mst',
			@cMemoIdCol='issue_id',
			@cMemoId=@CXNMEMOID,
			@CERRORMSG=@CERRORMSG OUTPUT

			GOTO END_PROC
		       
			SET @NSTEP = 35       
		    GOTO END_PROC
		END
		
		
		SET @NSTEP = 40
		
		--GETTING DEPT_ID FROM TEMP MASTER TABLE
		SET @CCMD = 'SELECT @CMEMODEPTID = DEPT_ID, @CKEYFIELDVAL1 = ISSUE_ID FROM ' + @CTEMPMASTERTABLE +' where sp_id ='''+@NSPID+''' '
		EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT, @CKEYFIELDVAL1 VARCHAR(50) OUTPUT', 
								  @CMEMODEPTID OUTPUT, @CKEYFIELDVAL1 OUTPUT
		PRINT @CCMD						  
		IF (@CMEMODEPTID IS NULL)
		BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED...'
			  GOTO END_PROC  		
		END

		 IF @NUPDATEMODE<>3  
		BEGIN
		  
		  EXEC SP3S_NORMALIZE_FIX_PRODUCT_CODE 'MIS',@NSPID,@NUPDATEMODE,
		  @CTEMPDETAILTABLE,@CXNMEMOID,@CERRORMSG OUTPUT,'',@CLOCID
		  IF ISNULL(@CERRORMSG,'')<>''
		  BEGIN
			   SET @CERRORMSG='ERROR IN NORMALIZATION'+@CERRORMSG
			   GOTO END_PROC
		  END
		END  

		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	
		
		--DECLARE @CMANUALPREFIX VARCHAR(25)
  --      SET @CMANUALPREFIX=''
		
		--SET @CCMD=N'SELECT @CMANUALPREFIX=MEMO_PREFIX FROM '+@CTEMPMASTERTABLE+' '
		--PRINT @CCMD		
		--EXEC SP_EXECUTESQL @CCMD,N'@CMANUALPREFIX VARCHAR(25) OUTPUT',@CMANUALPREFIX OUTPUT
		
		--IF ISNULL(@CMANUALPREFIX,'')<>''
		--SET @NMEMONOLEN=15
		
		
			SET @NSTEP = 50		-- GENERATING NEW KEY
			SET @NOUTFLAG=-1
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%' 
			BEGIN
				-- GENERATING NEW MRR_NO		
				SET @NSAVETRANLOOP=0
				WHILE @NSAVETRANLOOP=0
				BEGIN
					EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
									@CFINYEAR,0, @CMEMONOVAL OUTPUT   
					
					SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
											WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
											AND FIN_YEAR = '''+@CFINYEAR+''' )
									SET @NLOOPOUTPUT=0
								ELSE
									SET @NLOOPOUTPUT=1'
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
				END

				IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT ISSUE NO....'	
					  GOTO END_PROC  		
				END

				SET @NSTEP = 60		-- GENERATING NEW ID

				-- GENERATING NEW ORDER ID
				SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+REPLICATE('0', (22-LEN(@CLOCATIONID + @CFINYEAR))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))

				
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT ISSUE ID....'
					  GOTO END_PROC
				END
				
				SET @NSTEP = 70
				-- CHECK WETHER THE MEMO ID IS STILL LATER
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT ISSUE ID....'
					  GOTO END_PROC
				END

				SET @NSTEP = 80		-- UPDATING NEW ID INTO TEMP TABLES

				-- UPDATING NEWLY GENERATED MEMO NO AND MEMO ID IN BOM_ISSUE_MST AND BOM_ISSUE_DET TEMP TABLES
				SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
							@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' where sp_id='''+@NSPID+''' '
				PRINT @CCMD		
				EXEC SP_EXECUTESQL @CCMD
				
				SET @NSTEP = 90
				SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' where sp_id='''+@NSPID+''''
				PRINT @CCMD	
				EXEC SP_EXECUTESQL @CCMD
				
				--SET @NSTEP = 98
				--SET @CCMD = N'ALTER TABLE '+@CTEMPDETAILTABLE+' ADD OLD_ROW_ID VARCHAR(50)'
				--PRINT @CCMD	
				--EXEC SP_EXECUTESQL @CCMD
				
				SET @NSTEP = 99
				SET @CCMD = N'UPDATE '+@CTEMPDETAILTABLE+' SET OLD_ROW_ID=ROW_ID where sp_id='''+@NSPID+''' '
				PRINT @CCMD	
				EXEC SP_EXECUTESQL @CCMD
				
				SET @NSTEP = 100
				SET @CCMD = N'UPDATE '+ @CTEMPDETAILTABLE + ' SET ROW_ID = NEWID() WHERE LEFT(ROW_ID,5) = ''LATER'' and sp_id='''+@NSPID+''''
				PRINT @CCMD	
				EXEC SP_EXECUTESQL @CCMD
				
				SET @NSTEP = 101
				SET @CCMD = N'UPDATE '+ @CTEMPDETAILTABLE1 + ' SET ROW_ID = NEWID(),BOM_ISSUE_ID = '''+@CKEYFIELDVAL1+''' where sp_id='''+@NSPID+''''
				PRINT @CCMD	
				EXEC SP_EXECUTESQL @CCMD

				SET @NSTEP = 102
				SET @CCMD = N'UPDATE A SET A.BOM_DET_ROW_ID = B.ROW_ID
				FROM '+@CTEMPDETAILTABLE1+' A JOIN '+@CTEMPDETAILTABLE+' B ON A.BOM_DET_ROW_ID=B.OLD_ROW_ID and a.sp_id= b.sp_id 
				where a.sp_id='''+@NSPID+''''
				PRINT @CCMD	
				EXEC SP_EXECUTESQL @CCMD
				


				--return module se stock qty nahi aa raha hai
					  
				  SET @CCMD = N'UPDATE A SET 
				  STOCK_QTY=CASE WHEN ISNULL(UC.CONVERSION_VALUE,0) =0 THEN ISNULL(A.QUANTITY,0)
	              ELSE (ISNULL(A.QUANTITY,0))/ISNULL(UC.CONVERSION_VALUE,0) END 
				  from  '+ @CTEMPDETAILTABLE + ' a 
				  JOIN '+@CTEMPMASTERTABLE+' MST (NOLOCK) ON  a.sp_id= mst.sp_id 
				  JOIN SKU (NOLOCK) ON A.PRODUCT_CODE=SKU.PRODUCT_CODE 
				  JOIN ARTICLE ART (NOLOCK) ON ART.ARTICLE_CODE=SKU.ARTICLE_CODE
				  JOIN UOM (NOLOCK) ON UOM.UOM_CODE= ART.UOM_CODE 
				  LEFT OUTER JOIN UOM_CONVERSION UC ON UC.UOM_CODE=UOM.UOM_CODE
                  LEFT OUTER JOIN BOM_UOM BU ON BU.CONVERSION_UOM_CODE=UC.CONVERSION_UOM_CODE       
				  where a.sp_id='''+@NSPID+''' and isnull(mst.issue_type,0)=1 '
				  PRINT @CCMD	
				  EXEC SP_EXECUTESQL @CCMD
				

		
				--CHANGES FOR CONVERT STOCK UOM FROM BOM UOM
				  
				  --SET @CCMD = N'UPDATE A SET 
				  --STOCK_QTY=CASE WHEN ISNULL(UC.CONVERSION_VALUE,0) =0 THEN ISNULL(A.QUANTITY,0)
	     --         ELSE (ISNULL(A.QUANTITY,0))/ISNULL(UC.CONVERSION_VALUE,0) END 
				  --from  '+ @CTEMPDETAILTABLE + ' a 
				  --JOIN SKU (NOLOCK) ON A.PRODUCT_CODE=SKU.PRODUCT_CODE 
				  --JOIN ARTICLE ART (NOLOCK) ON ART.ARTICLE_CODE=SKU.ARTICLE_CODE
				  --JOIN UOM (NOLOCK) ON UOM.UOM_CODE= ART.UOM_CODE 
				  --LEFT OUTER JOIN UOM_CONVERSION UC ON UC.UOM_CODE=UOM.UOM_CODE
      --            LEFT OUTER JOIN BOM_UOM BU ON BU.CONVERSION_UOM_CODE=UC.CONVERSION_UOM_CODE       
				  --where a.sp_id='''+@NSPID+''''
				  --PRINT @CCMD	
				  --EXEC SP_EXECUTESQL @CCMD
				
				-- end
				
				
			END--WHILE		 
		END--IF -- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
			SET @NSTEP = 110		-- GETTING ID INFO FROM TEMP TABLE

			
			
      
			SET @NSTEP = 112				
			-- GETTING ORDER_ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ISSUE_ID, @CMEMONOVAL = ISSUE_NO FROM ' + @CTEMPMASTERTABLE +' where sp_id='''+@NSPID+''''
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
							   
			SET @NSTEP = 115
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT ISSUE ID....'
					  GOTO END_PROC
			END
			
			
			
			
			IF  EXISTS (SELECT TOP 1 'U' FROM BOM_ISSUE_DET (NOLOCK) WHERE ISSUE_ID =@CKEYFIELDVAL1) and @NUPDATEMODE=2
            BEGIN
           
		     IF OBJECT_ID('TEMPDB..#TMPPRODUCT1','U') IS NOT NULL
		        DROP TABLE #TMPPRODUCT1
		   
			   SELECT DISTINCT  A.PRODUCT_CODE,A.QUANTITY ,A.job_code 
			        INTO #TMPPRODUCT1 
			   FROM JOBWORK_ISSUE_DET  A (NOLOCK)
			   JOIN JOBWORK_ISSUE_MST  B (NOLOCK) ON A.ISSUE_ID  =B.ISSUE_ID
			   JOIN(
				  SELECT DISTINCT JOBWORK_ISSUE_ID FROM  BOM_ISSUE_MST (NOLOCK) WHERE ISSUE_ID =@CKEYFIELDVAL1
				) BM ON BM.JOBWORK_ISSUE_ID =B.ISSUE_ID 
			   WHERE B.CANCELLED =0
					
				
			
				 IF OBJECT_ID ('TEMPDB..#TEMPISSUED1','U') IS NOT NULL
                  DROP TABLE #TEMPISSUED1
				
				SELECT  A1.REF_ROW_ID , A1.ARTICLE_CODE ,A1.PARA1_CODE ,A1.PARA2_CODE,
				A1.AVG_QUANTITY+ISNULL(A1.ADD_AVG_QUANTITY,0) AS  AVG_QUANTITY,
				SUM(CASE WHEN ISNULL(UC.CONVERSION_VALUE,0) =0 THEN ISNULL(A6.QUANTITY,0)
	             ELSE (ISNULL(A6.QUANTITY,0))/ISNULL(UC.CONVERSION_VALUE,0) END) ISSUED_QTY,
			--	SUM(A6.QUANTITY) AS ISSUED_QTY,
				isnull(A4.PURCHASE_PRICE,0) AS RATE
				INTO #TEMPISSUED1
				FROM BOM_ISSUE_DET A4 (NOLOCK) 
				JOIN BOM_ISSUE_MST A5  (NOLOCK) ON A5.ISSUE_ID=A4.ISSUE_ID
				JOIN BOM_ISSUE_REF A6  (NOLOCK) ON A5.ISSUE_ID=A6.BOM_ISSUE_ID AND A4.ROW_ID=A6.BOM_DET_ROW_ID
				JOIN ORD_PLAN_BOM_DET A1  (NOLOCK) ON A1.ROW_ID=A6.ORD_PLAN_BOM_DET_ROW_ID
				JOIN SKU ON SKU.PRODUCT_CODE =A4.PRODUCT_CODE 
				JOIN article art  (NOLOCK) ON art.article_code   = a1.ARTICLE_CODE 
				LEFT OUTER JOIN UOM_CONVERSION UC (NOLOCK) ON UC.UOM_CODE=art.UOM_CODE
                LEFT OUTER JOIN BOM_UOM BU (NOLOCK) ON BU.CONVERSION_UOM_CODE=UC.CONVERSION_UOM_CODE  
				WHERE  A5.ISSUE_ID  =@CKEYFIELDVAL1
				GROUP BY A1.REF_ROW_ID ,A1.ARTICLE_CODE ,A1.PARA1_CODE ,A1.PARA2_CODE,A1.AVG_QUANTITY+ISNULL(A1.ADD_AVG_QUANTITY,0),
				A4.PURCHASE_PRICE
				
				
				IF OBJECT_ID ('TEMPDB..#TEMPBOMVALUE1','U') IS NOT NULL
                  DROP TABLE #TEMPBOMVALUE1
                  
				SELECT A.ARTICLE_CODE,A.PARA1_CODE ,A.PARA2_CODE ,
				       RATE=RATE /REC_QTY 
				 INTO #TEMPBOMVALUE1
				FROM
				(
				SELECT ARTICLE_CODE ,PARA1_CODE ,PARA2_CODE,
				       SUM(RATE*ISSUED_QTY ) AS RATE   
				FROM #TEMPISSUED1 A
				GROUP BY ARTICLE_CODE ,PARA1_CODE ,PARA2_CODE
				) A
				JOIN
				(
					 SELECT BD.ARTICLE_CODE,BD.PARA1_CODE,BD.PARA2_CODE ,COUNT(*) AS REC_QTY 
					 FROM #TMPPRODUCT1 A
					 JOIN ORD_PLAN_BARCODE_DET B (NOLOCK) ON A.product_code=B.PRODUCT_CODE
					 JOIN ORD_PLAN_DET OD (NOLOCK) ON OD.ROW_ID  =B.REFROW_ID 
					 JOIN ORD_PLAN_MST OM (NOLOCK) ON OM.MEMO_ID =OD.MEMO_ID 
					 JOIN ORD_PLAN_BOM_DET BD (NOLOCK)ON BD.REF_ROW_ID =OD.ROW_ID AND A.job_code =BD.JOB_CODE  AND OM.MEMO_ID=BD.MEMO_ID
					 where om.CANCELLED =0
					 GROUP BY BD.ARTICLE_CODE,BD.PARA1_CODE,BD.PARA2_CODE 
				) B ON  A.ARTICLE_CODE =B.ARTICLE_CODE AND A.PARA1_CODE =B.PARA1_CODE AND A.PARA2_CODE =B.PARA2_CODE 
				
				
			
				
				IF EXISTS (SELECT TOP 1 'U' FROM #TEMPBOMVALUE1)
		        BEGIN
				
				  UPDATE PMT SET BOM_VALUE=ISNULL(PMT.BOM_VALUE ,0)-TMP.RATE
				  FROM JOBWORK_PMT PMT
				  JOIN
				  (
				    SELECT A.product_code ,SUM(TMP.RATE) AS RATE
				    FROM #TMPPRODUCT1 A
					JOIN ORD_PLAN_BARCODE_DET B (NOLOCK) ON A.product_code=B.PRODUCT_CODE
					JOIN ORD_PLAN_DET OD (NOLOCK) ON OD.ROW_ID  =B.REFROW_ID 
					JOIN ORD_PLAN_MST OM (NOLOCK) ON OM.MEMO_ID =OD.MEMO_ID 
					JOIN ORD_PLAN_BOM_DET BD (NOLOCK)ON BD.REF_ROW_ID =OD.ROW_ID AND A.job_code =BD.JOB_CODE AND OM.MEMO_ID=BD.MEMO_ID  
					JOIN #TEMPBOMVALUE1 TMP ON TMP.ARTICLE_CODE =BD.ARTICLE_CODE AND TMP.PARA1_CODE =BD.PARA1_CODE AND TMP.PARA2_CODE=BD.PARA2_CODE 
					where om.CANCELLED =0
				    GROUP BY A.product_code 
				  ) TMP ON PMT.PRODUCT_CODE=TMP.product_code 
					
				end
				
	
      END
      
	
			SET @NSTEP = 120		-- UPDATING SENT_TO_HO FLAG TEMP TABLE
			
			SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE LEFT(ISSUE_ID,5) = ''LATER'' and sp_id='''+@NSPID+''''
			PRINT @CCMD	
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 130	
			SET @CCMD = N'UPDATE '+ @CTEMPDETAILTABLE + ' SET ROW_ID = NEWID() WHERE LEFT(ROW_ID,5) = ''LATER'' and sp_id='''+@NSPID+''''
			PRINT @CCMD	
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 135	
			SET @CCMD = N'UPDATE '+ @CTEMPDETAILTABLE1 + ' SET ROW_ID = NEWID() WHERE LEFT(ROW_ID,5) = ''LATER'' and sp_id='''+@NSPID+''''
			PRINT @CCMD	
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 140
			--DELETE  FROM BOM_ISSUE_REF WHERE BOM_ISSUE_ID  = @CKEYFIELDVAL1
			
			
			
	    END-- END OF EDITMODE	


			IF @NUPDATEMODE IN (1,2)
		BEGIN
			SET @nSTEP = 142
			UPDATE a SET total_quantity=b.total_quantity FROM MIS_BOM_ISSUE_MST_UPLOAD A WITH (ROWLOCK) 
			JOIN (SELECT sp_id,sum(quantity) as total_quantity FROM MIS_BOM_ISSUE_det_UPLOAD b (NOLOCK)  
					WHERE sp_id=@nSpId GROUP BY sp_id) b ON a.sp_id=b.sp_id
			
		
           EXEC SP3S_upd_qty_lastupdate
			@nUpdateMode=@NUPDATEMODE,
			@cXnType='MIS',
			@cMasterTable='BOM_ISSUE_MST',
			@nSpId=@nSpId,
			@cMemoIdCol='issue_id',
			@cMemoId=@CKEYFIELDVAL1,
			@cXnDtCol='issue_dt',
			@CERRORMSG=@CERRORMSG OUTPUT

			IF ISNULL(@CERRORMSG,'')<>''
		       GOTO END_PROC


		END		
	
		DECLARE @CWHERECLAUSE VARCHAR(1000)
	   SET @CWHERECLAUSE='  SP_ID='''+ LTRIM(RTRIM((@NSPID)))+''''  

		SET @NSTEP = 150
		EXEC UPDATEMASTERXN_MIRROR--UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			, @BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@CWHERECLAUSE
		
		SET @NSTEP = 160		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

		EXEC UPDATEMASTERXN_MIRROR--UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME
			, @CKEYFIELD1	= 'ROW_ID'
			, @BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@CWHERECLAUSE
		
		SET @NSTEP = 165		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

		EXEC UPDATEMASTERXN_MIRROR--UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME1
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME1
			, @CKEYFIELD1	= 'ROW_ID'
			, @BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@CWHERECLAUSE
			
	   SET @NSTEP = 170
		
		IF @NUPDATEMODE=1
		BEGIN

		     SET @CXNMEMOID =@CKEYFIELDVAL1
			INSERT pmt01106	( BIN_ID, DEPT_ID, DEPT_ID_NOT_STUFFED, last_update, product_code, quantity_in_stock, rep_id, STOCK_RECO_QUANTITY_IN_STOCK,bo_order_id )  
			 
			 SELECT B.BIN_ID, B.DEPT_ID,'' DEPT_ID_NOT_STUFFED,A.LAST_UPDATE  LASTUPDATE, B.PRODUCT_CODE,0 QUANTITY_IN_STOCK,'' REP_ID,0 STOCK_RECO_QUANTITY_IN_STOCK ,
			        CASE WHEN ISNULL(B.BOM_ORDER_ID ,'')<>'' THEN B.BOM_ORDER_ID ELSE NULL END AS bo_order_id
			 FROM BOM_ISSUE_MST A (NOLOCK)
			 JOIN BOM_ISSUE_DET B (NOLOCK) ON  A.ISSUE_ID =B.ISSUE_ID
			 LEFT JOIN PMT01106 C (NOLOCK) ON B.DEPT_ID =C.DEPT_ID AND B.BIN_ID =C.BIN_ID AND B.PRODUCT_CODE =C.PRODUCT_CODE AND ISNULL(C.bo_order_id,'')=ISNULL(B.BOM_ORDER_ID ,'')
			 WHERE C.PRODUCT_CODE IS NULL AND A.issue_id =@CXNMEMOID
			 GROUP BY B.BIN_ID, B.DEPT_ID,A.LAST_UPDATE  , B.PRODUCT_CODE ,CASE WHEN ISNULL(B.BOM_ORDER_ID ,'')<>'' THEN B.BOM_ORDER_ID ELSE NULL END
		
			SET @CCMD='UPDATE A SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK + 
			((CASE WHEN ISNULL(MST.ISSUE_TYPE,0)=0 THEN -1 ELSE 1 END) * X.STOCK_QTY)
			FROM PMT01106 A  
			JOIN '+@CTEMPDETAILTABLENAME+' X
			ON A.PRODUCT_CODE = X.PRODUCT_CODE AND A.BIN_ID = X.BIN_ID AND A.DEPT_ID = X.DEPT_ID AND  ISNULL(A.bo_order_id,'''')=ISNULL(X.BOM_ORDER_ID ,'''')
			JOIN '+@CTEMPMASTERTABLE+' MST (NOLOCK) ON MST.ISSUE_ID =X.ISSUE_ID and x.sp_id= mst.sp_id 
			AND '+CAST(@NUPDATEMODE AS VARCHAR)+'=1 
			where x.sp_id ='''+@NSPID+''' '
			PRINT @CCMD
			EXEC(@CCMD)
			
			
			IF EXISTS (SELECT TOP 1 'U' FROM PMT01106 A
			JOIN BOM_ISSUE_DET B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.DEPT_ID =B.dept_id AND A.BIN_ID =B.BIN_ID  AND ISNULL(A.bo_order_id,'')=ISNULL(B.BOM_ORDER_ID ,'')
			WHERE B.ISSUE_ID=@CXNMEMOID AND quantity_in_stock <0)
			BEGIN
			
			     SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' STOCK GOING NEGATIVE PLEASE CHECK '
			     GOTO END_PROC  		
			    
		     END
			
		END
		
		--GST CALCULATION--
		DECLARE @CGSTCUTOFFDATE VARCHAR(100),@BGSTBILL BIT,@DISSUE_DT DATETIME,
		        @CPARTY_GSTN_NO VARCHAR(50),@CPARTYSTATECODE VARCHAR(2),@BREGISTERED INT
	    SELECT @CGSTCUTOFFDATE=VALUE FROM CONFIG WHERE CONFIG_OPTION ='GST_CUT_OFF_DATE'
	    
	    SELECT @DISSUE_DT=ISSUE_DT FROM BOM_ISSUE_MST WHERE ISSUE_ID =@CKEYFIELDVAL1
	    
	    IF @DISSUE_DT>=CONVERT(DATE,@CGSTCUTOFFDATE)
		 SET @BGSTBILL=1
	    
	    IF (@BGSTBILL=1 OR ISNULL(@CGSTCUTOFFDATE,'')='')
	    BEGIN
	    
			DELETE FROM  GST_TAXINFO_CALC WHERE SP_ID =RTRIM(LTRIM(STR(@NSPID)))
			
			SELECT TOP 1 @CPARTY_GSTN_NO=AC_GST_NO,@CPARTYSTATECODE=AC_GST_STATE_CODE,
			            @BREGISTERED=REGISTERED_GST_DEALER
			FROM  BOM_ISSUE_MST A (NOLOCK)
			JOIN PRD_AGENCY_MST B (NOLOCK) ON A.AGENCY_CODE =B.AGENCY_CODE 
			JOIN LMP01106 C (NOLOCK) ON C.AC_CODE=B.AC_CODE
			WHERE A.ISSUE_ID = @CKEYFIELDVAL1
			
			 INSERT GST_TAXINFO_CALC	( PRODUCT_CODE, SP_ID, NET_VALUE, HSN_CODE,  ROW_ID, TAX_METHOD, QUANTITY, 
			 NET_VALUE_WOTAX, MEMO_DT )  
			 SELECT 	  PRODUCT_CODE,RTRIM(LTRIM(STR(@NSPID))) AS  SP_ID, 
				 (A.PURCHASE_PRICE*STOCK_QTY) AS  NET_VALUE, HSN_CODE,
				 ROW_ID,1 AS  TAX_METHOD, STOCK_QTY,(A.PURCHASE_PRICE*STOCK_QTY) AS  NET_VALUE_WOTAX, 
				 B.ISSUE_DT AS  MEMO_DT 
			  FROM BOM_ISSUE_DET A
			  JOIN BOM_ISSUE_MST B ON A.ISSUE_ID =B.ISSUE_ID 
			  WHERE A.ISSUE_ID = @CKEYFIELDVAL1
			  
			  	EXEC SP3S_GST_TAX_CAL
					@CXN_TYPE='MIS',
					@CMEMO_ID='',
					@DMEMO_DT=@DISSUE_DT,
					@NSPID=@NSPID,
					@CPARTYSTATE_CODE=@CPARTYSTATECODE,
					@BPARTYREGISTERED=@BREGISTERED,
					@CPARTY_GSTN_NO=@CPARTY_GSTN_NO,
					@CERRMSG=@CERRORMSG OUTPUT,
					@cLocationId=@CLOCID
				  
					IF ISNULL(@CERRORMSG,'')<>''
						 GOTO END_PROC
	
					UPDATE A SET HSN_CODE=ISNULL(B.HSN_CODE,'0000000000'),
					       XN_VALUE_WITHOUT_GST=ISNULL(B.XN_VALUE_WITHOUT_GST,0),
					       GST_PERCENTAGE=ISNULL(B.GST_PERCENTAGE,0),
					       IGST_AMOUNT=ISNULL(B.IGST_AMOUNT,0),
					       CGST_AMOUNT=ISNULL(B.CGST_AMOUNT,0),
					       SGST_AMOUNT=ISNULL(B.SGST_AMOUNT,0),
					       XN_VALUE_WITH_GST=ISNULL(B.XN_VALUE_WITH_GST,0),
					       CESS_AMOUNT=ISNULL(B.CESS_AMOUNT,0),
						   gst_CESS_PERCENTAGE =ISNULL(B.gst_CESS_PERCENTAGE,0),
						   gst_CESS_Amount =ISNULL(B.gst_CESS_Amount,0)

					FROM BOM_ISSUE_DET A
					JOIN GST_TAXINFO_CALC B ON A.ROW_ID =B.ROW_ID 
					WHERE A.ISSUE_ID =	@CKEYFIELDVAL1 AND
					B.SP_ID = RTRIM(LTRIM(STR(@NSPID)))
						 
		  
		  END
		  
           
		SET @NSTEP=200    
		
		 if @NUPDATEMODE<>1 and ISNULL(@CKEYFIELDVAL1,'')=''
           set @CKEYFIELDVAL1=@CXNMEMOID 
          
       IF EXISTS (SELECT TOP 1'U' FROM BOM_ISSUE_MST  WHERE ISSUE_ID=@CKEYFIELDVAL1 AND   ISNULL(JOBCARDTYPE,0)=0)
	   BEGIN

			IF  EXISTS (SELECT  TOP 1 'U' FROM BOM_ISSUE_DET WHERE ISSUE_ID=@CKEYFIELDVAL1)
			AND NOT EXISTS (SELECT  TOP 1 'U' FROM BOM_ISSUE_REF  WHERE BOM_ISSUE_ID =@CKEYFIELDVAL1)
			BEGIN
		    
					 SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + 'BLANK DETAILS NOT SAVED'
					 GOTO END_PROC  		
			    
		
			END
	  END
		
		
		DECLARE @CJOBWORK_ISSUE_ID VARCHAR(50),@NAuto_Created_Through_Challan INT
		SELECT @CJOBWORK_ISSUE_ID=JOBWORK_ISSUE_ID FROM BOM_ISSUE_MST WHERE ISSUE_ID =@CKEYFIELDVAL1
		
		IF (NOT EXISTS (SELECT TOP 1 'U' FROM BOM_ISSUE_MST WHERE issue_id <@CKEYFIELDVAL1 AND JOBWORK_ISSUE_ID=@CJOBWORK_ISSUE_ID)
		  OR NOT EXISTS (SELECT TOP 1 'U' FROM BOM_ISSUE_DET WHERE issue_id =@CKEYFIELDVAL1 ))
		  SET @NAuto_Created_Through_Challan=1
	    ELSE
	    SET @NAuto_Created_Through_Challan=1
	    
	    UPDATE  BOM_ISSUE_MST SET Auto_Created_Through_Challan=@NAuto_Created_Through_Challan WHERE issue_id =@CKEYFIELDVAL1
		
		UPDATE A SET Total_Gst_Cess_Amount = B.Gst_Cess_Amount
		FROM BOM_ISSUE_MST A (nolock)
		join
		(
		   SELECT issue_id  ,sum(Gst_Cess_Amount)  AS Gst_Cess_Amount
		    from BOM_ISSUE_DET 
		   WHERE issue_id =@CKEYFIELDVAL1
		   GROUP BY  issue_id 
		) B ON A.issue_id =B.issue_id
          WHERE A.issue_id =@CKEYFIELDVAL1

		       
		       
		--IF EXISTS(SELECT TOP 1'U' 
		--FROM BOM_ISSUE_DET  A
		--LEFT JOIN 
		--(
		 
		--SELECT BOM_ISSUE_ID ,BOM_DET_ROW_ID,
		--	   SUM(QUANTITY) AS ORDER_PLAN_QTY

		--FROM BOM_ISSUE_REF 
		--WHERE BOM_issue_id=@CKEYFIELDVAL1
		--GROUP BY BOM_ISSUE_ID ,BOM_DET_ROW_ID
		--) B ON A.issue_id =B.BOM_ISSUE_ID AND A.row_id =B.BOM_DET_ROW_ID
		--WHERE A.issue_id=@CKEYFIELDVAL1
		--AND A.QUANTITY<>ISNULL(B.ORDER_PLAN_QTY,0))
		--BEGIN
		--	 SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MISMATCH BETWEEN BOM ISSUE QTY AND ORDER PLAN ASSIGN QTY '
		--	 GOTO END_PROC 
		--END

		--RFOPT MAINTENANCE
		SET @NSTEP = 180

		EXEC SP3S_UPDATE_PMTLOCS_REBUILD_STARTDATE
		@cXnType='BOM',
		@cMemoId=@CKEYFIELDVAL1 

	END TRY
	
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		GOTO END_PROC
	END CATCH    
	
	
END_PROC:

     --bom value calculation
      if @NUPDATEMODE<>1 and ISNULL(@CKEYFIELDVAL1,'')=''
        set @CKEYFIELDVAL1=@CXNMEMOID 
           
      IF   ISNULL(@CERRORMSG,'')='' AND EXISTS (SELECT TOP 1 'U' FROM BOM_ISSUE_DET (NOLOCK) WHERE ISSUE_ID =@CKEYFIELDVAL1)
      BEGIN
           
          
		    
        IF OBJECT_ID('TEMPDB..#TMPPRODUCT','U') IS NOT NULL
		   DROP TABLE #TMPPRODUCT
		   
			   SELECT DISTINCT  A.PRODUCT_CODE,A.QUANTITY ,A.job_code 
			        INTO #TMPPRODUCT 
			   FROM JOBWORK_ISSUE_DET  A (NOLOCK)
			   JOIN JOBWORK_ISSUE_MST  B (NOLOCK) ON A.ISSUE_ID  =B.ISSUE_ID
			   JOIN(
				  SELECT DISTINCT JOBWORK_ISSUE_ID FROM  BOM_ISSUE_MST (NOLOCK) WHERE ISSUE_ID =@CKEYFIELDVAL1
				) BM ON BM.JOBWORK_ISSUE_ID =B.ISSUE_ID 
			   WHERE B.CANCELLED =0
					
				
				 IF OBJECT_ID ('TEMPDB..#TEMPISSUED','U') IS NOT NULL
                  DROP TABLE #TEMPISSUED


				 IF OBJECT_ID ('TEMPDB..#TEMPISSUED','U') IS NOT NULL
                  DROP TABLE #TEMPISSUED


				SELECT a1.MEMO_ID ,  a6.ORD_PLAN_BOM_DET_ROW_ID , A1.ARTICLE_CODE ,A1.PARA1_CODE ,A1.PARA2_CODE,
				A1.AVG_QUANTITY+ISNULL(A1.ADD_AVG_QUANTITY,0) AS  AVG_QUANTITY,
				SUM((case when isnull(a5.issue_type,0)=0 then 1  else -1 end )* (CASE WHEN ISNULL(UC.CONVERSION_VALUE,0) =0 THEN ISNULL(a6.QUANTITY,0)
	             ELSE (ISNULL(a6.QUANTITY,0))/ISNULL(UC.CONVERSION_VALUE,0) END)) qty,
			--	SUM(A6.QUANTITY) AS ISSUED_QTY,
				isnull(A4.PURCHASE_PRICE,0) AS RATE,od.ARTICLE_CODE As FG_Article_code
				INTO #TEMPISSUED
				FROM BOM_ISSUE_DET A4 (NOLOCK) 
				JOIN BOM_ISSUE_MST A5  (NOLOCK) ON A5.ISSUE_ID=A4.ISSUE_ID
				JOIN BOM_ISSUE_REF A6  (NOLOCK) ON A5.ISSUE_ID=A6.BOM_ISSUE_ID AND A4.ROW_ID=A6.BOM_DET_ROW_ID
				JOIN ORD_PLAN_BOM_DET A1  (NOLOCK) ON A1.ROW_ID=a6.ORD_PLAN_BOM_DET_ROW_ID --and A1.JOB_CODE='DEF0002'
				join ORD_PLAN_DET od on od.ROW_ID=a1.REF_ROW_ID
				JOIN SKU ON SKU.PRODUCT_CODE =A4.PRODUCT_CODE 
				JOIN article art  (NOLOCK) ON art.article_code   = a1.ARTICLE_CODE 
				LEFT OUTER JOIN UOM_CONVERSION UC (NOLOCK) ON UC.UOM_CODE=art.UOM_CODE
                LEFT OUTER JOIN BOM_UOM BU (NOLOCK) ON BU.CONVERSION_UOM_CODE=UC.CONVERSION_UOM_CODE  
				WHERE  A5.ISSUE_ID  =@CKEYFIELDVAL1
				GROUP BY a1.MEMO_ID , a6.ORD_PLAN_BOM_DET_ROW_ID ,A1.ARTICLE_CODE ,A1.PARA1_CODE ,A1.PARA2_CODE,A1.AVG_QUANTITY+ISNULL(A1.ADD_AVG_QUANTITY,0),isnull(A4.PURCHASE_PRICE,0)
				,od.ARTICLE_CODE
				



				 IF OBJECT_ID ('TEMPDB..#TEMPBOMVALUE','U') IS NOT NULL
                  DROP TABLE #TEMPBOMVALUE

				SELECT A.MEMO_ID,a.ARTICLE_CODE  ,SUM(QTY*RATE )/TOTAL_QTY AS Rate
				into #TEMPBOMVALUE
				FROM
				(
				SELECT D.MEMO_ID,C.ARTICLE_CODE ,COUNT(*) AS TOTAL_QTY 
				FROM #TMPPRODUCT A
				JOIN ORD_PLAN_BARCODE_DET B (NOLOCK) ON A.PRODUCT_CODE =B.PRODUCT_CODE 
				JOIN ORD_PLAN_DET C (NOLOCK) ON B.REFROW_ID =C.ROW_ID 
				JOIN ORD_PLAN_MST D (NOLOCK) ON C.MEMO_ID =D.MEMO_ID 
				WHERE D.CANCELLED =0
				GROUP BY D.MEMO_ID ,C.ARTICLE_CODE
				) A
				JOIN #TEMPISSUED B ON A.MEMO_ID =B.MEMO_ID and b.FG_ARTICLE_CODE=a.ARTICLE_CODE
				GROUP BY A.MEMO_ID,a.ARTICLE_CODE ,TOTAL_QTY




				
				
				
				IF EXISTS  (SELECT TOP 1 'U' FROM #TEMPBOMVALUE)
		        BEGIN
				
				 update pmt set  BOM_VALUE=ISNULL(PMT.BOM_VALUE ,0)+
					CASE WHEN @NUPDATEMODE  IN(1,2) THEN  BOM.Rate 
					     WHEN @NUPDATEMODE=3 THEN  -1* BOM.Rate 
					     ELSE 0 END 
				  FROM JOBWORK_PMT PMT
				  JOIN #TMPPRODUCT P ON PMT.PRODUCT_CODE =P.PRODUCT_CODE
				  JOIN ORD_PLAN_BARCODE_DET B (NOLOCK) ON p.PRODUCT_CODE =B.PRODUCT_CODE 
				  JOIN ORD_PLAN_DET C (NOLOCK) ON B.REFROW_ID =C.ROW_ID 
				  JOIN ORD_PLAN_MST D (NOLOCK) ON C.MEMO_ID =D.MEMO_ID 
				  join #TEMPBOMVALUE bom on bom.MEMO_ID =d.MEMO_ID and bom.ARTICLE_CODE=c.ARTICLE_CODE
				  WHERE D.CANCELLED =0
				
					
				end
				else
				BEGIN
				   
				    UPDATE A SET BOM_VALUE=0 
				    FROM JOBWORK_PMT A (NOLOCK)
			        JOIN #TMPPRODUCT TMP ON A.PRODUCT_CODE =TMP.PRODUCT_CODE 
				
				END

				UPDATE A SET JWI_BOM_VALUE =PMT.BOM_VALUE 
				FROM JOBWORK_ISSUE_DET A (NOLOCK)
				JOIN JOBWORK_PMT PMT(NOLOCK) ON A.PRODUCT_CODE =PMT.PRODUCT_CODE 
			   JOIN
			   (
				  SELECT DISTINCT JOBWORK_ISSUE_ID FROM  BOM_ISSUE_MST (NOLOCK) WHERE ISSUE_ID =@CKEYFIELDVAL1
			   ) BM ON BM.JOBWORK_ISSUE_ID =A.ISSUE_ID

			
				
      END
	  UPDATE BOM_ISSUE_MST SET LAST_UPDATE=GETDATE() WHERE ISSUE_ID=@CKEYFIELDVAL1
	  UPDATE BOM_ISSUE_MST SET HO_SYNCH_LAST_UPDATE='' WHERE ISSUE_ID=@CKEYFIELDVAL1

	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
		   commit TRANSACTION
		ELSE
			ROLLBACK
	END
	
	INSERT @OUTPUT ( ERRMSG, MEMO_ID)
		VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )

	SELECT * FROM @OUTPUT	

	DELETE A FROM MIS_BOM_ISSUE_MST_UPLOAD (NOLOCK) A WHERE SP_ID=@NSPID 
	DELETE A FROM MIS_BOM_ISSUE_DET_UPLOAD (NOLOCK) A WHERE SP_ID=@NSPID 
	DELETE A FROM MIS_BOM_ISSUE_REF_UPLOAD (NOLOCK) A WHERE SP_ID=@NSPID 



	
END	



