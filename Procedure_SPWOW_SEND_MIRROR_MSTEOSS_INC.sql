CREATE PROCEDURE SPWOW_SEND_MIRROR_MSTEOSS_INC
(
	@CTARGETLOCID VARCHAR(5)='',
	@NMODE NUMERIC(1,0)=1,    -----  1. SEND THE LIST OF ALL SCHEME SETUP MEMOS ONLY RELATED TO TARGET LOCATION
							  ----   2. SEND THE LIST OF ALL ACTIVE SCHEME SETUP TITLES ONLY RELATED TO TARGET LOCATION
							  ----   3. SEND ALL TABLES INFO RELATED TO A GIVEN TITLE TO TARGET LOCATION
							  ----   4. ACK FOR LOCATION ID	
	@CSCHEMEROWID VARCHAR(50)=''
)
--WITH ENCRYPTION
AS
BEGIN
	
	BEGIN TRY
		
		DECLARE @CERRORMSG VARCHAR(1000),@CCURDEPTID VARCHAR(5),@CHODEPTID VARCHAR(5),@NSTEP INT,@CSPID VARCHAR(5),@bdonot_merge_eoss BIT
		        

		
		SET @NSTEP=10	
		
		SET @CSPID=@CTARGETLOCID
		
		
		SET @NSTEP=15
		DECLARE @TRETMSG TABLE  (MEMO_ID VARCHAR(40),ERRMSG VARCHAR(MAX))

		SELECT @CCURDEPTID = VALUE FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID'
		SELECT @CHODEPTID = VALUE FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		
		
		SELECT TOP 1 @bdonot_merge_eoss=ISNULL(donot_merge_eoss,0) FROM location WHERE dept_id=@CTARGETLOCID
			
		IF @CCURDEPTID<>@CHODEPTID
		BEGIN
			SET @CERRORMSG='EOSS SENDING  CANNOT BE CALLED FROM NON-HO LOCATION'
			GOTO END_PROC
		END	
		ELSE
		IF @bdonot_merge_eoss=1
		BEGIN
			SET @CERRORMSG='EOSS Merging cannot be done for this Location'
			GOTO END_PROC
		END
		ELSE
		IF @NMODE IN (1,2,4)
		BEGIN
			IF @NMODE=1 ---- GET THE LIST OF ALL SCHEME SETUP MEMOS RELATED TO TARGET LOCATION
			BEGIN
				SET @NSTEP=20
				SELECT 'MSTEOSS_wow_SchemeSetup_Mst_MIRROR' AS TARGET_TABLENAME,A.* FROM wow_SchemeSetup_Mst A  (NOLOCK)
				JOIN wow_SchemeSetup_title_det b (NOLOCK) ON b.setupId=a.setupId
				LEFT OUTER JOIN wow_SchemeSetup_locs c (NOLOCK) ON c.schemeRowId =B.schemeRowId AND c.locationId=@CTARGETLOCID
				WHERE (b.locApplicableMode=1 OR c.locationId IS NOT NULL)
				
			
			END
			ELSE
			IF @NMODE=2 ---- GET THE LIST OF ALL ACTIVE SCHEME SETUP TITLES RELATED TO TARGET LOCATION
			BEGIN
				SET @NSTEP=35
				SELECT 'MSTEOSS_WOWSCHEMESINFO_MIRROR' AS TARGET_TABLENAME,A.schemeRowId AS schemeRowId,
				a.schemeLastUpdate ,CONVERT(BIT,0) AS DELETEDTITLE,A.schemeName
				FROM wow_SchemeSetup_Title_Det A
				JOIN wow_SchemeSetup_Mst B ON A.setupId=B.setupId
				LEFT OUTER JOIN wow_SchemeSetup_locs c (NOLOCK) ON c.schemeRowId =a.schemeRowId AND c.locationId=@CTARGETLOCID
				WHERE (b.locApplicableMode=1 OR C.locationId IS NOT NULL)
		    	AND c.applicableToDt >=  CONVERT(DATE,GETDATE())
			END
			
			IF @NMODE=4 ---- ACK FOR LOCATION ID
			BEGIN

				IF EXISTS (SELECT TOP 1 'U' FROM SCHEME_SETUP_ACK_LOG WHERE DEPT_ID=@CTARGETLOCID)
				   UPDATE SCHEME_SETUP_ACK_LOG SET LAST_UPDATE=GETDATE() WHERE DEPT_ID =@CTARGETLOCID
				ELSE
				BEGIN
				   INSERT INTO SCHEME_SETUP_ACK_LOG (DEPT_ID,LAST_UPDATE)
					SELECT @CTARGETLOCID,GETDATE()
				END
				
			
			END	

			GOTO END_PROC
		END	
		
		
			
	
LBLSEND:
				
		DECLARE @CTMPLOCUSERSTABLENAME VARCHAR(500),@CTMPUSERTABLENAME VARCHAR(500),@CTMPUSERROLETABLENAME VARCHAR(500),
				@CTMPBINUSERTABLENAME VARCHAR(500)
		
		---- RETURN THE DETAILS RELATED TO A GIVEN TITLE FOR TARGET LOCATION
		SET @NSTEP=50				
		SELECT 'MSTEOSS_wow_SchemeSetup_Title_Det_MIRROR' AS TARGET_TABLENAME,A.* FROM wow_SchemeSetup_Title_Det A (NOLOCK)		
		WHERE schemeRowId=@CSCHEMEROWID
		
		SET @NSTEP=60				
		SELECT 'MSTEOSS_wow_SchemeSetup_locs_MIRROR' AS TARGET_TABLENAME,A.* FROM wow_SchemeSetup_locs A (NOLOCK)		
		WHERE schemeRowId=@CSCHEMEROWID and a.locationId=@CTARGETLOCID
				
		SET @NSTEP=100		
		SELECT 'MSTEOSS_wow_SchemeSetup_slabs_Det_MIRROR' AS TARGET_TABLENAME,A.* FROM wow_SchemeSetup_slabs_Det A (NOLOCK)	
		WHERE schemeRowId=@CSCHEMEROWID 
						
		SET @NSTEP=110				
		SELECT 'MSTEOSS_wow_SchemeSetup_slsbc_get_MIRROR' AS TARGET_TABLENAME,A.* FROM wow_SchemeSetup_slsbc_get A (NOLOCK)	
		WHERE schemeRowId=@CSCHEMEROWID 

		SET @NSTEP=120				
		SELECT 'MSTEOSS_wow_SchemeSetup_slsbc_buy_MIRROR' AS TARGET_TABLENAME,A.* FROM wow_SchemeSetup_slsbc_buy A (NOLOCK)	
		WHERE schemeRowId=@CSCHEMEROWID 

		SET @NSTEP=130				
		SELECT 'MSTEOSS_wow_SchemeSetup_slsbc_flat_MIRROR' AS TARGET_TABLENAME,A.* FROM wow_SchemeSetup_slsbc_flat A (NOLOCK)	
		WHERE schemeRowId=@CSCHEMEROWID 
		

		SET @NSTEP=140				
		SELECT 'MSTEOSS_wow_SchemeSetup_para_combination_buy_MIRROR' AS TARGET_TABLENAME,A.* FROM wow_SchemeSetup_para_combination_buy A (NOLOCK)	
		WHERE schemeRowId=@CSCHEMEROWID 
	
		SET @NSTEP=150				
		SELECT 'MSTEOSS_wow_SchemeSetup_para_combination_config_MIRROR' AS TARGET_TABLENAME,A.* FROM wow_SchemeSetup_para_combination_config A (NOLOCK)	
		WHERE schemeRowId=@CSCHEMEROWID 

		SET @NSTEP=160				
		SELECT 'MSTEOSS_wow_SchemeSetup_para_combination_flat_MIRROR' AS TARGET_TABLENAME,A.* FROM wow_SchemeSetup_para_combination_flat A (NOLOCK)	
		WHERE schemeRowId=@CSCHEMEROWID 

		SET @NSTEP=170				
		SELECT 'MSTEOSS_wow_SchemeSetup_para_combination_get_MIRROR' AS TARGET_TABLENAME,A.* FROM wow_SchemeSetup_para_combination_get A (NOLOCK)	
		WHERE schemeRowId=@CSCHEMEROWID 


		SET @NSTEP=180
		SELECT 'msteoss_wow_schemesetup_happyhours_mirror' AS TARGET_TABLENAME,A.* FROM wow_schemesetup_happyhours A (NOLOCK)	
		WHERE schemeRowId=@CSCHEMEROWID 
		GOTO END_PROC
		
	END TRY

	BEGIN CATCH
		
		PRINT 'UNTRAPPED ERROR'		
		SELECT @CERRORMSG='PROCEDURE SPWOW_SEND_MIRROR_MSTEOSS_INC : STEP: '+STR(@NSTEP)+' LINE NO. :'+
		ISNULL(LTRIM(RTRIM(STR(ERROR_LINE()))),'NULL LINE')+'MSG :'+ISNULL(ERROR_MESSAGE(),'NULL MSG')
		
		GOTO END_PROC
	END CATCH

END_PROC:
	
	
	
	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')=''
			COMMIT
		ELSE
			ROLLBACK	
	END
	
	IF ISNULL(@CERRORMSG,'')<>'' OR @NMODE=4
		SELECT ISNULL(@CERRORMSG,'') AS ERRMSG
    
    
		
END
--- 'END OF CREATING PROCEDURE SPWOW_SEND_MIRROR_MSTEOSS_INC
