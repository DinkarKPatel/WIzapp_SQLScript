CREATE PROCEDURE SP_RESENDXNSDATA_OFFLINE
--WITH ENCRYPTION
AS  
BEGIN  
   
 DECLARE @CTABLENAME VARCHAR(100),@CCMD NVARCHAR(MAX),@CKEYFIELD VARCHAR(100),@CREFXNTYPE VARCHAR(10),  
   @NSTEP INT,@CERRORMSG VARCHAR(MAX),@CXNTYPE VARCHAR(10),@CSEARCHXNTYPE VARCHAR(10),@CMEMO_ID VARCHAR(50)   
   
 BEGIN TRY  
    
  BEGIN TRANSACTION  
    
  DECLARE @TRETMSG TABLE (ERRMSG VARCHAR(MAX))   
    
  SET @NSTEP=10   
    
  SET @CERRORMSG=''  
      
  IF NOT EXISTS (SELECT TOP 1 XN_TYPE FROM DATASENT_OFFLINE(NOLOCK))  
   GOTO LBLLAST  
      
  IF CURSOR_STATUS('GLOBAL','RESENDCUR') IN (0,1)    
  BEGIN    
    CLOSE RESENDCUR    
    DEALLOCATE RESENDCUR    
  END    
    
  IF OBJECT_ID('TEMPDB..#TMPRESENDCUR','U') IS NOT NULL  
   DROP TABLE #TMPRESENDCUR  
     
  SELECT DISTINCT XN_TYPE,MEMO_ID  
  INTO #TMPRESENDCUR FROM  DATASENT_OFFLINE(NOLOCK) 
    
  DECLARE RESENDCUR CURSOR FOR SELECT DISTINCT XN_TYPE,MEMO_ID FROM #TMPRESENDCUR  
    
  OPEN RESENDCUR  
  FETCH NEXT FROM RESENDCUR INTO @CXNTYPE  ,@CMEMO_ID 
    
  WHILE @@FETCH_STATUS=0  
  BEGIN  
			SET @CSEARCHXNTYPE=(CASE WHEN @CXNTYPE='XNSUNC' THEN 'XNSCNC' WHEN @CXNTYPE='XNSCHO' THEN 'XNSWSL'
									 WHEN @CXNTYPE='XNSCHI' THEN 'XNSPUR' ELSE @CXNTYPE END)
									 
			SELECT TOP 1  @CTABLENAME=TABLENAME,@CKEYFIELD=KEYFIELD FROM XNSINFO 
			WHERE XN_TYPE=@CSEARCHXNTYPE AND  MASTERTABLE=1 AND (ISNULL(MEMODTCOL,'')<>'' OR TABLENAME='COM01106')
			
			SET @NSTEP=20
			IF @CSEARCHXNTYPE='DOCCHO'
			BEGIN
				SET @CCMD=N'UPDATE INM01106 SET UPLOADED_TO_ACTIVSTREAM=0,EXPORTED=1 WHERE '+@CKEYFIELD+' IN ('
			END	
			ELSE
			IF @CSEARCHXNTYPE='XNSAPR'
			BEGIN
				SET @CCMD=N'UPDATE CMM01106 SET LAST_UPDATE=GETDATE() WHERE CM_ID IN ('			
			END	
			ELSE
			IF @CSEARCHXNTYPE='XNSPUR'
			BEGIN
				SET @CCMD=N'UPDATE PIM01106 SET LAST_UPDATE=GETDATE() WHERE MRR_ID IN ('			
			END	
			ELSE
			IF @CSEARCHXNTYPE='XNSOPS'
			BEGIN
				SET @CCMD=N'UPDATE OPS01106 SET LAST_UPDATE=GETDATE()'			
			END
			ELSE				
			BEGIN
				SET @CCMD=N'UPDATE '+@CTABLENAME+' SET LAST_UPDATE=GETDATE() WHERE '+@CKEYFIELD +' IN ('
			END
								
			SET @NSTEP=30
			--SET @CCMD=@CCMD+' SELECT MEMO_ID FROM #TMPRESENDCUR (NOLOCK) WHERE XN_TYPE='''+@CXNTYPE+''')'
			SET @CCMD=@CCMD + (CASE WHEN @CXNTYPE NOT IN ('XNSOPS') THEN ' SELECT MEMO_ID FROM #TMPRESENDCUR (NOLOCK) WHERE XN_TYPE='''+@CXNTYPE+''')'    ELSE '' END)

			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
			
   --SELECT TOP 1  @CTABLENAME=TABLENAME,@CKEYFIELD=KEYFIELD FROM XNSINFO   
   --WHERE XN_TYPE=@CXNTYPE AND  MASTERTABLE=1 AND (ISNULL(MEMODTCOL,'')<>'' OR TABLENAME='COM01106')  
     
   --SET @NSTEP=20  
   --IF @CXNTYPE='DOCCHO'  
   --BEGIN  
   -- SET @CCMD=N'UPDATE COM01106 SET UPLOADED_TO_ACTIVSTREAM=0,COMPLETED=1 WHERE '+@CKEYFIELD+' IN ('  
   --END   
   --ELSE  
   --IF @CXNTYPE='XNSAPR'  
   --BEGIN  
   -- SET @CCMD=N'UPDATE CMM01106 SET SENT_TO_HO=0 WHERE CM_ID IN ('     
   --END   
   --ELSE  
   --IF @CXNTYPE='XNSPUR'  
   --BEGIN  
   -- SET @CCMD=N'UPDATE PIM01106 SET SENT_TO_HO=0,COMPLETED=1 WHERE MRR_ID IN ('     
   --END   
   --ELSE  
   --IF @CXNTYPE='XNSCHO'  
   --BEGIN  
   -- SET @CCMD=N'UPDATE COM01106 SET SENT_TO_HO=0,COMPLETED=1 WHERE CHALLAN_ID IN ('     
   --END   
   --ELSE  
   --IF @CXNTYPE='XNSOPS'  
   --BEGIN  
   -- SET @CCMD=N'UPDATE OPS01106 SET SENT_TO_HO=0'     
   --END     
   --ELSE      
   --BEGIN  
   -- SET @CCMD=N'UPDATE '+@CTABLENAME+' SET SENT_TO_HO=0 WHERE '+@CKEYFIELD +' IN ('  
   --END  
          
   --SET @NSTEP=30  
   --SET @CCMD=@CCMD+' SELECT MEMO_ID FROM #TMPRESENDCUR (NOLOCK) WHERE XN_TYPE='''+@CXNTYPE+''')'  
   --PRINT @CCMD  
   --EXEC SP_EXECUTESQL @CCMD  
    
   FETCH NEXT FROM RESENDCUR INTO @CXNTYPE,@CMEMO_ID  
  END   
    
  CLOSE RESENDCUR  
  DEALLOCATE RESENDCUR  
    
  SET @NSTEP=40  
  DELETE A FROM DATASENT_OFFLINE A JOIN #TMPRESENDCUR B ON A.MEMO_ID=B.MEMO_ID  
   
  GOTO LBLLAST  
    
 END TRY  
   
 BEGIN CATCH  
    
  SELECT @CERRORMSG='PROCEDURE : SP_RESENDXNSDATA_OFFLINE STEP: '+STR(@NSTEP)+' LINE NO. :'+  
  ISNULL(LTRIM(RTRIM(STR(ERROR_LINE()))),'NULL LINE')+'MSG :'+ISNULL(ERROR_MESSAGE(),'NULL MSG')  
    
 END CATCH  
  
LBLLAST:  
 IF @@TRANCOUNT>0  
 BEGIN  
  IF ISNULL(@CERRORMSG,'')=''  
   COMMIT TRANSACTION  
  ELSE  
   ROLLBACK   
 END   
    
 INSERT @TRETMSG   
 SELECT ISNULL(@CERRORMSG,'')  
   
 SELECT * FROM @TRETMSG  
END  
--********************************************** END OF PROCEDURE SP_RESENDXNSDATA_OFFLINE
