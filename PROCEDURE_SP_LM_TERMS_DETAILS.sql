CREATE PROCEDURE SP_LM_TERMS_DETAILS
(
  @NSTEP INT,
  @AC_CODE VARCHAR(100)=''
)
AS
BEGIN
IF @NSTEP=1
GOTO LBL_VIEW
IF @NSTEP=2
GOTO LBL_ADD
IF @NSTEP=3
GOTO LBL_EDIT
    
    LBL_VIEW:
    
    
    
    SELECT CAST(1 AS BIT) AS CHK ,A.AC_CODE,A.APPROVED,A.ROW_ID,B.REMARKS,B.TERMS_NAME,B.TERMS,
    B.EOSS_DISCOUNT_SHARE,B.EOSS_DISCOUNT_PER,B.TERMS_CODE  FROM LM_TERMS A 
    JOIN LEDGER_TERMS B ON B.TERMS_CODE=A.TERMS_CODE
    WHERE AC_CODE=@AC_CODE
    ORDER BY B.TERMS_NAME
    GOTO END_PROC
    
    LBL_ADD:
    SELECT CAST(0 AS BIT) AS CHK , CAST(0 AS BIT) AS APPROVED,AC_CODE=CAST('' AS VARCHAR(100)),REMARKS,TERMS_NAME,TERMS,
    TERMS_CODE,EOSS_DISCOUNT_SHARE,EOSS_DISCOUNT_PER,TERMS_CODE 
    FROM LEDGER_TERMS WHERE INACTIVE=0
    ORDER BY TERMS_NAME
    
    GOTO END_PROC
    
    LBL_EDIT:
    SELECT CAST(CASE WHEN B.AC_CODE IS  NULL THEN 0 ELSE 1 END AS BIT) AS CHK,A.TERMS,A.REMARKS,A.TERMS_NAME,
    A.TERMS_CODE,ISNULL(B.APPROVED,0) AS APPROVED ,A.EOSS_DISCOUNT_SHARE,A.EOSS_DISCOUNT_PER,A.TERMS_CODE,
    AC_CODE=@AC_CODE 
    FROM LEDGER_TERMS A (NOLOCK)
    LEFT JOIN  LM_TERMS B (NOLOCK) ON A.TERMS_CODE=B.TERMS_CODE AND B.AC_CODE=@AC_CODE 
    WHERE A.INACTIVE=0 ORDER BY CHK,A.TERMS_NAME
    GOTO END_PROC

END_PROC:
END
--END OF PROCEDURE SP_LM_TERMS_DETAILS
