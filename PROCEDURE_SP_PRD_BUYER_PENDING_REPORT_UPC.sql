CREATE  PROCEDURE SP_PRD_BUYER_PENDING_REPORT_UPC  
(  
 @NQUERYID INT=0,  
 @CAC_CODE VARCHAR(MAX)='',  
 @CARTICLE_CODE VARCHAR(MAX)='',  
 @CPARA1_CODE VARCHAR(MAX)='',  
 @CPARA2_CODE VARCHAR(MAX)=''  
)  
AS  
BEGIN  
  
--DECLARE LOCAL VARIABLE  
DECLARE @CFILTER_CAC_CODE VARCHAR(MAX)  
       ,@CFILTER_ARTICLE_CODE VARCHAR(MAX)  
       ,@CFILTER_ARTICLE_CODE1 VARCHAR(MAX)  
       ,@CFILTER_PARA1_CODE VARCHAR(MAX)  
       ,@CFILTER_PARA2_CODE VARCHAR(MAX)  
       ,@STRQUERY NVARCHAR(MAX)  
  
 IF ISNULL(@CAC_CODE,'')=''  
    SET @CFILTER_CAC_CODE='1=1'  
 ELSE  
    SET @CFILTER_CAC_CODE='B.AC_CODE '+@CAC_CODE  
  
   
 IF ISNULL(@CARTICLE_CODE,'')=''  
    BEGIN  
     SET @CFILTER_ARTICLE_CODE='1=1'  
     SET @CFILTER_ARTICLE_CODE1='1=1'  
    END  
 ELSE  
    BEGIN  
     SET @CFILTER_ARTICLE_CODE='A.ARTICLE_CODE '+@CARTICLE_CODE  
     SET @CFILTER_ARTICLE_CODE1='B.ARTICLE_SET_CODE '+@CARTICLE_CODE  
    END  
      
 IF ISNULL(@CPARA1_CODE,'')=''  
    SET @CFILTER_PARA1_CODE='1=1'  
 ELSE  
    SET @CFILTER_PARA1_CODE='A.PARA1_CODE '+@CPARA1_CODE  
      
 IF ISNULL(@CPARA2_CODE,'')=''  
    SET @CFILTER_PARA2_CODE='1=1'  
 ELSE  
    SET @CFILTER_PARA2_CODE='A.PARA2_CODE '+@CPARA2_CODE  
  
  
IF OBJECT_ID('TEMPDB..#TMPORDER','U') IS NOT NULL  
   DROP TABLE #TMPORDER  
   CREATE TABLE #TMPORDER  
 (  
  AC_CODE VARCHAR(100)  
 ,ORDER_STATUS INT  
 ,ORDER_ID VARCHAR(100)  
 ,ORDER_NO VARCHAR(100)  
 ,ORDER_DT DATETIME  
 ,ARTICLE_CODE VARCHAR(100)  
 ,PARA1_CODE VARCHAR(100)  
 ,PARA2_CODE VARCHAR(100)  
 ,ORD_QTY INT  
 )  
  
--ALL ORDER   
   SET @STRQUERY=N'INSERT INTO #TMPORDER(AC_CODE,ORDER_STATUS,ORDER_ID,ORDER_NO,ORDER_DT  
                                        ,ARTICLE_CODE,PARA1_CODE,PARA2_CODE,ORD_QTY)  
                 SELECT B.AC_CODE, B.ORDER_STATUS, A.ORDER_ID ,B.ORDER_NO,B.ORDER_DT,   
                  A.ARTICLE_CODE ,A.PARA1_CODE ,A.PARA2_CODE,  
                  CAST(SUM(A.QUANTITY) AS NUMERIC(10,0)) AS ORD_QTY   
                FROM BUYER_ORDER_DET A  
      JOIN BUYER_ORDER_MST B ON A.ORDER_ID =B.ORDER_ID   
       WHERE B.CANCELLED =0 AND B.ORDER_DT>=''2017-01-01''  
         AND  '+@CFILTER_CAC_CODE+' AND '+@CFILTER_ARTICLE_CODE+'  
               AND '+@CFILTER_PARA1_CODE+' AND '+@CFILTER_PARA2_CODE+'  
          GROUP BY  B.AC_CODE,B.ORDER_STATUS,A.ORDER_ID ,B.ORDER_NO,B.ORDER_DT,A.ARTICLE_CODE   
              ,A.PARA1_CODE ,A.PARA2_CODE'  
   PRINT @STRQUERY  
   EXEC SP_EXECUTESQL @STRQUERY  
  
  IF OBJECT_ID('TEMPDB..#TMPSTOCK','U') IS NOT NULL  
      DROP TABLE #TMPSTOCK  
    CREATE TABLE #TMPSTOCK  
   (  
    WO_ID VARCHAR(100)  
   ,ARTICLE_CODE VARCHAR(100)  
   ,PARA1_CODE VARCHAR(100)  
   ,PARA2_CODE VARCHAR(100)  
   ,QTY INT  
   )  
 SET @STRQUERY=N'INSERT INTO #TMPSTOCK(WO_ID,ARTICLE_CODE,PARA1_CODE,PARA2_CODE,QTY)  
  SELECT A.REF_PRD_WORKORDER_MEMOID AS WO_ID, A.ARTICLE_CODE,A.PARA1_CODE,A.PARA2_CODE,   
     CAST(SUM(QTY) AS NUMERIC(10,0)) AS QTY  
  FROM PRD_TRANSFER_MAIN_DET  A  
  JOIN PRD_TRANSFER_MAIN_MST B ON A.MEMO_ID =B.MEMO_ID  
  JOIN PMT01106 C ON C.PRODUCT_CODE =A.PRODUCT_CODE   
  WHERE B.CANCELLED =0 AND C.QUANTITY_IN_STOCK >0  
  AND '+@CFILTER_ARTICLE_CODE+'  
     AND '+@CFILTER_PARA1_CODE+'   
     AND '+@CFILTER_PARA2_CODE+'  
  GROUP BY A.REF_PRD_WORKORDER_MEMOID,A.ARTICLE_CODE,A.PARA1_CODE,A.PARA2_CODE'  
    PRINT @STRQUERY +'CHECK' 
   EXEC SP_EXECUTESQL @STRQUERY  
   
  
  
--IN HOUSE ORDER ALLOCATE QTY  
IF OBJECT_ID('TEMPDB..#TMPINHOUSE_ALLOCATE','U') IS NOT NULL    
    DROP TABLE #TMPINHOUSE_ALLOCATE    
   CREATE TABLE #TMPINHOUSE_ALLOCATE  
  (  
   ORDER_ID VARCHAR(100)  
  ,ARTICLE_CODE VARCHAR(100)  
  ,MEMO_ID VARCHAR(100)  
  ,PARA1_CODE VARCHAR(100)  
  ,PARA2_CODE VARCHAR(100)  
  ,QUANTITY INT  
  ,STK_QTY INT  
  )  
   SET @STRQUERY=N'INSERT INTO #TMPINHOUSE_ALLOCATE(ORDER_ID,ARTICLE_CODE,MEMO_ID,PARA1_CODE,PARA2_CODE,QUANTITY,STK_QTY)  
     SELECT A.ORDER_ID,C.ARTICLE_SET_CODE AS ARTICLE_CODE,A.MEMO_ID,  
     PMT.PARA1_CODE,PMT.PARA2_CODE,  
     ISNULL(PMT.PRD_QTY,0)-ISNULL(QTY,0) AS QUANTITY,  
     ISNULL(QTY,0) AS STK_QTY  
     FROM    
    (SELECT DISTINCT * FROM PRD_WO_ORDERS) A    
    JOIN BUYER_ORDER_MST MST ON MST.ORDER_ID =A.ORDER_ID          
    JOIN PRD_WO_MST C ON C.MEMO_ID=A.MEMO_ID           
    JOIN  
    (  
     SELECT A.WO_ID,A.PARA1_CODE,A.PARA2_CODE,COUNT(*) AS PRD_QTY   
     FROM PRD_UPCPMT  A  
     WHERE ISNULL(ORDER_ID,'''')<>''''  
     GROUP BY A.WO_ID,A.PARA1_CODE,A.PARA2_CODE  
    ) PMT ON PMT.WO_ID=C.MEMO_ID   
    LEFT OUTER JOIN  
    (  
     SELECT A.WO_ID ,A.PARA1_CODE ,A.PARA2_CODE ,SUM(QTY) AS QTY   
     FROM #TMPSTOCK A  
     GROUP BY A.WO_ID ,A.PARA1_CODE ,A.PARA2_CODE  
    ) STK ON STK.WO_ID=A.MEMO_ID  
    AND STK.PARA1_CODE=PMT.PARA1_CODE
    AND STK.PARA2_CODE=PMT.PARA2_CODE
    AND MST.ORDER_STATUS=1  
    WHERE C.CANCELLED=0 AND MST.CANCELLED =0   
   AND '+REPLACE(@CFILTER_CAC_CODE,'B.','MST.')+'  
   AND '+REPLACE(@CFILTER_ARTICLE_CODE1,'B.','C.')+'  
   AND '+REPLACE(@CFILTER_PARA1_CODE,'A.','PMT.')+'  
   AND '+REPLACE(@CFILTER_PARA2_CODE,'A.','PMT.')+' '  
      PRINT @STRQUERY  
     EXEC SP_EXECUTESQL @STRQUERY   
  
  
 
 --BUYER ALLOCATION PENDING  
 IF OBJECT_ID('TEMPDB..#TMPBUYER_ALLOCATE','U') IS NOT NULL    
    DROP TABLE #TMPBUYER_ALLOCATE   
    CREATE TABLE #TMPBUYER_ALLOCATE  
    (  
   WO_ID VARCHAR(100)  
  ,ORDER_ID VARCHAR(100)  
  ,ARTICLE_CODE VARCHAR(100)  
  ,PARA1_CODE VARCHAR(100)  
  ,PARA2_CODE VARCHAR(100)  
  ,PRD_QTY INT  
  ,STK_QTY INT  
    )  
   SET @STRQUERY=N'INSERT INTO #TMPBUYER_ALLOCATE(WO_ID,ORDER_ID,ARTICLE_CODE,PARA1_CODE,PARA2_CODE,PRD_QTY,STK_QTY)  
  SELECT A.WO_ID,  A.ORDER_ID,B.ARTICLE_SET_CODE AS ARTICLE_CODE ,  
  A.PARA1_CODE,A.PARA2_CODE,
  COUNT(*)-(ISNULL(QTY,0)) AS PRD_QTY,  
  (ISNULL(QTY,0)) AS STK_QTY   
  FROM PRD_UPCPMT  A  
  JOIN PRD_WO_MST B ON A.WO_ID=B.MEMO_ID  
  JOIN BUYER_ORDER_MST MST ON MST.ORDER_ID =A.ORDER_ID    
  LEFT OUTER JOIN  
  (  
   SELECT A.WO_ID ,A.ARTICLE_CODE, A.PARA1_CODE ,A.PARA2_CODE ,QTY AS QTY   
   FROM #TMPSTOCK A  
   GROUP BY A.WO_ID,A.ARTICLE_CODE ,A.PARA1_CODE ,A.PARA2_CODE,QTY  
  ) STK ON STK.WO_ID=A.WO_ID    
   AND B.ARTICLE_SET_CODE=STK.ARTICLE_CODE   
   AND  A.PARA1_CODE=STK.PARA1_CODE   
   AND  A.PARA2_CODE=STK.PARA2_CODE   
  WHERE ISNULL(A.ORDER_ID,'''')<>'''' AND MST.ORDER_STATUS=2  
  AND MST.CANCELLED =0  
  AND '+@CFILTER_ARTICLE_CODE1+'  
  AND '+@CFILTER_PARA1_CODE+'  
  AND '+@CFILTER_PARA2_CODE+'  
  GROUP BY (ISNULL(QTY,0)),A.WO_ID,A.ORDER_ID,B.ARTICLE_SET_CODE,A.PARA1_CODE,A.PARA2_CODE'  
   PRINT @STRQUERY  
   EXEC SP_EXECUTESQL @STRQUERY  
  
   
   
   --SELECT * FROM #TMPBUYER_ALLOCATE
  IF OBJECT_ID('TEMPDB..#TMPWSP','U') IS NOT NULL  
      DROP TABLE #TMPWSP  
   CREATE TABLE #TMPWSP  
   (  
   AC_CODE VARCHAR(100)  
  ,ORDER_ID VARCHAR(100)  
  ,ARTICLE_CODE VARCHAR(100)  
  ,PARA1_CODE VARCHAR(100)  
  ,PARA2_CODE VARCHAR(100)  
  ,WPS_QTY INT  
   )  
       
   SET @STRQUERY=N'INSERT INTO #TMPWSP(AC_CODE,ORDER_ID,ARTICLE_CODE,PARA1_CODE,PARA2_CODE,WPS_QTY)  
   SELECT B.AC_CODE, A.ORDER_ID,A.PACKSLIP_ARTICLE_CODE AS ARTICLE_CODE,   
   A.PACKSLIP_PARA1_CODE AS PARA1_CODE,  
   A.PACKSLIP_PARA2_CODE AS PARA2_CODE,  
   CAST(SUM(QUANTITY) AS NUMERIC(10,0)) AS WPS_QTY  
   FROM WPS_DET A  
   JOIN WPS_MST B ON A.PS_ID=B.PS_ID  
   WHERE B.CANCELLED=0 AND A.ORDER_ID<>''''  
   AND '+@CFILTER_CAC_CODE+'  
   AND '+REPLACE(@CFILTER_ARTICLE_CODE,'A.ARTICLE_CODE','A.PACKSLIP_ARTICLE_CODE')+'  
   AND '+REPLACE(@CFILTER_PARA1_CODE,'A.PARA1_CODE','A.PACKSLIP_PARA1_CODE')+'  
   AND '+REPLACE(@CFILTER_PARA2_CODE,'A.PARA2_CODE','A.PACKSLIP_PARA2_CODE')+'  
   GROUP BY B.AC_CODE,A.ORDER_ID,A.PACKSLIP_ARTICLE_CODE ,A.PACKSLIP_PARA1_CODE ,  
   A.PACKSLIP_PARA2_CODE'      
 --PRINT @STRQUERY  
 EXEC SP_EXECUTESQL @STRQUERY  
     
     
IF OBJECT_ID('TEMPDB..#TMPORDER_SUMMARY','U') IS NOT NULL  
   DROP TABLE #TMPORDER_SUMMARY   
   
 SELECT A.ORDER_NO,A.ORDER_DT, A.ORDER_STATUS, A.AC_CODE , A.ORDER_ID, A.ARTICLE_CODE ,A.PARA1_CODE ,A.PARA2_CODE,  
 A.ORD_QTY,  
 ISNULL(WSP.WPS_QTY,0) AS WPS_QTY,  
 ISNULL(B.STK_QTY,0)+ISNULL(C.STK_QTY,0) AS STK_QTY,  
 ISNULL(INHOUSE_QTY,0) AS INHOUSE_QTY,  
 CASE WHEN A.ORDER_STATUS=1 THEN  A.ORD_QTY-(ISNULL(INHOUSE_QTY,0)+ISNULL(WSP.WPS_QTY,0)+ISNULL(B.STK_QTY,0)) ELSE 0 END AS INHOUSE_PENDING,  
 ISNULL(C.BUYER_QTY,0) AS BUYER_QTY,  
 CASE WHEN A.ORDER_STATUS=2 THEN  A.ORD_QTY-(ISNULL(C.BUYER_QTY,0)+ISNULL(WSP.WPS_QTY,0)+ISNULL(C.STK_QTY,0)) ELSE 0 END AS BUYER_PENDING     
 INTO #TMPORDER_SUMMARY  
 FROM #TMPORDER A  
 LEFT OUTER JOIN  
 (  
  SELECT A.ORDER_ID,A.ARTICLE_CODE,  
  A.PARA1_CODE,A.PARA2_CODE  ,  
  SUM(A.QUANTITY) AS INHOUSE_QTY,  
  SUM(A.STK_QTY) AS STK_QTY  
  FROM #TMPINHOUSE_ALLOCATE A   
  GROUP BY A.ORDER_ID,A.ARTICLE_CODE,A.PARA1_CODE,A.PARA2_CODE   
 ) B ON A.ORDER_ID =B.ORDER_ID   
 AND A.ARTICLE_CODE =B.ARTICLE_CODE   
 AND A.PARA1_CODE =B.PARA1_CODE   
 AND A.PARA2_CODE =B.PARA2_CODE   
 LEFT OUTER JOIN  
 (  
   SELECT A.ORDER_ID,A.ARTICLE_CODE,  
   A.PARA1_CODE,A.PARA2_CODE  ,  
   SUM(A.PRD_QTY ) AS BUYER_QTY,  
   SUM(A.STK_QTY) AS STK_QTY  
  FROM #TMPBUYER_ALLOCATE A   
  GROUP BY A.ORDER_ID,A.ARTICLE_CODE,A.PARA1_CODE,A.PARA2_CODE   
 ) C ON A.ORDER_ID =C.ORDER_ID   
 AND A.ARTICLE_CODE =C.ARTICLE_CODE   
 AND A.PARA1_CODE =C.PARA1_CODE   
 AND A.PARA2_CODE =C.PARA2_CODE   
 LEFT OUTER JOIN  
 (  
  SELECT ORDER_ID,ARTICLE_CODE,PARA1_CODE,PARA2_CODE,  
         SUM(WPS_QTY) AS WPS_QTY   
  FROM #TMPWSP  
  GROUP BY ORDER_ID,ARTICLE_CODE,PARA1_CODE,PARA2_CODE  
 )WSP   
 ON A.ORDER_ID =WSP.ORDER_ID   
 AND A.ARTICLE_CODE =WSP.ARTICLE_CODE   
 AND A.PARA1_CODE =WSP.PARA1_CODE   
 AND A.PARA2_CODE =WSP.PARA2_CODE   
   
   
   --SELECT * FROM #TMPORDER_SUMMARY
   --RETURN
  
  
IF @NQUERYID=1  
BEGIN   
  SELECT A.ARTICLE_CODE ,ART.ARTICLE_NO,  
         A.PARA1_CODE ,P1.PARA1_NAME,  
         A.PARA2_CODE,P2.PARA2_NAME,  
         SUM(INHOUSE_PENDING) AS INHOUSE_PENDING,  
         (STK_QTY) AS QUANTITY_IN_STOCK,  
         SUM(BUYER_PENDING) AS BUYER_PENDING  ,  
         (SUM(INHOUSE_PENDING)+SUM(STK_QTY))- SUM(BUYER_PENDING) AS PENDING_QTY  
  FROM #TMPORDER_SUMMARY  A  
  JOIN ARTICLE ART ON A.ARTICLE_CODE =ART.ARTICLE_CODE   
  JOIN PARA1 P1 ON P1.PARA1_CODE =A.PARA1_CODE   
  JOIN PARA2 P2 ON P2.PARA2_CODE =A.PARA2_CODE   
  GROUP BY STK_QTY, A.ARTICLE_CODE ,ART.ARTICLE_NO,  
         A.PARA1_CODE ,P1.PARA1_NAME,  
         A.PARA2_CODE,P2.PARA2_NAME  
  ORDER BY ART.ARTICLE_NO,P1.PARA1_NAME,P2.PARA2_NAME  
  
  
  
END  
ELSE  
BEGIN           
    
  SELECT A.AC_CODE,LM.AC_NAME,  
         A.ARTICLE_CODE ,ART.ARTICLE_NO,  
         A.PARA1_CODE ,P1.PARA1_NAME,  
         A.PARA2_CODE,P2.PARA2_NAME,  
         SUM(A.ORD_QTY) AS ORD_QUANTITY,  
         ISNULL(WSP_QTY,0) AS DLVRD_QTY ,  
         STK_QTY AS QUANTITY_IN_STOCK,  
         SUM(BUYER_QTY) AS ALLOCATE_QTY  ,  
         SUM(A.ORD_QTY)-(ISNULL(WSP_QTY,0)+ SUM(BUYER_QTY)+SUM(STK_QTY)) AS PENDING_QTY       
  FROM #TMPORDER_SUMMARY A  
  JOIN LM01106 LM ON LM.AC_CODE =A.AC_CODE   
  LEFT OUTER JOIN  
  (  
   SELECT AC_CODE ,SUM(A.WPS_QTY) AS WSP_QTY  
   FROM #TMPWSP A  
   GROUP BY AC_CODE  
  ) WPS ON WPS.AC_CODE=A.AC_CODE   
  JOIN ARTICLE ART ON A.ARTICLE_CODE =ART.ARTICLE_CODE   
  JOIN PARA1 P1 ON P1.PARA1_CODE =A.PARA1_CODE   
  JOIN PARA2 P2 ON P2.PARA2_CODE =A.PARA2_CODE   
    
  WHERE A.ORDER_STATUS =2  
  GROUP BY STK_QTY,A.AC_CODE,LM.AC_NAME ,ISNULL(WSP_QTY,0)  
  ,A.ARTICLE_CODE ,ART.ARTICLE_NO,  
  A.PARA1_CODE ,P1.PARA1_NAME,  
  A.PARA2_CODE,P2.PARA2_NAME  
  ORDER BY LM.AC_NAME  
  
END  
END
