CREATE PROCEDURE SP3S_PETTYCASH
(
	----LIST OF INPUT PARAMETERS WITH DESCRIPTION
	 @NQUERY_ID NUMERIC(3)
	,@DMEMO_DT DATETIME=''
	,@CDEPT_ID VARCHAR(5)=''
)
AS
/*
EXEC SP3S_PETTYCASH 1,'2014-11-12','01'
EXEC SP3S_PETTYCASH 2,'2014-11-13','01'
AUTHOR		  : 
CREATION DATE :
DESCRIPTION	  :
TEST DATA	  :

MODIFICATION HISTORY
MODIFIED BY	  :
MODIFIED DATE :
DESCRIPTION	  :

MODIFIED BY	  :
MODIFIED DATE :
DESCRIPTION	  :
*/
BEGIN
---DECLARE PROC VARIABLES
DECLARE @CERRMSG VARCHAR(500),@CSTEP VARCHAR(5),@NEXPENSES NUMERIC(18,2),@NIN NUMERIC(18,2),@NOUT NUMERIC(18,2)
		,@DOP_DT DATETIME,@NOP_AMOUNT NUMERIC(18,2),@NCL_AMOUNT NUMERIC(18,2),@NCASH_RECEIPTS NUMERIC(18,2)
		,@CCONSIDERALLCASHXN VARCHAR(1)
DECLARE @TOP_BAL TABLE(AMOUNT NUMERIC(18,2))		
BEGIN TRY
	IF @NQUERY_ID=1
		GOTO LBL_VALIDATEEXPENSEDATE
	IF @NQUERY_ID=2
		GOTO LBL_GETXNDETAILS		

LBL_VALIDATEEXPENSEDATE:
	IF EXISTS(SELECT TOP 1 'U' FROM LOC_REQ WHERE DEPT_ID=@CDEPT_ID AND OPENING_CASH_DATE>@DMEMO_DT)
	BEGIN
		SET @CERRMSG='EXPENSE DATE CANNOT BE LESS THAN THE OPENING CASH DATE..CANNOT PROCEED.'
		SELECT @CERRMSG AS ERRMSG
	END	
	ELSE
		SELECT '' AS ERRMSG
	
	RETURN
		
LBL_GETXNDETAILS:
    
    --GETTING THE OPENING BALANCE TILL PREVIOUS DATE
    SET @DOP_DT=CONVERT(DATETIME,@DMEMO_DT,110)-1  
    INSERT @TOP_BAL(AMOUNT)
    EXEC SP_CASHXN @CDEPT_ID,'',@DOP_DT,0,0,1
  
    SELECT @NOP_AMOUNT=AMOUNT FROM @TOP_BAL
	
	--SELECT @NEXPENSES=SUM(CASE WHEN A.XN_TYPE='DR' THEN A.XN_AMOUNT ELSE 0 END)
	SELECT @NEXPENSES=SUM(CASE WHEN A.XN_TYPE='DR' THEN A.XN_AMOUNT ELSE -A.XN_AMOUNT END)
	FROM PED01106 A  
	JOIN PEM01106 B ON A.PEM_MEMO_ID = B.PEM_MEMO_ID  
	WHERE B.PEM_MEMO_DT=@DMEMO_DT
	AND B.location_Code=@CDEPT_ID
	AND B.CANCELLED=0
	
	SELECT @NIN=SUM(AMOUNT) FROM PCI_MST
	WHERE RECEIPT_DT=@DMEMO_DT AND location_Code=@CDEPT_ID 
	AND ISNULL(RECEIPT_DT,'')<>'' AND CANCELLED=0
	
	SELECT @NOUT=SUM(AMOUNT) FROM PCO_MST
	WHERE MEMO_DT=@DMEMO_DT AND location_Code=@CDEPT_ID 
	AND CANCELLED=0
	
	SELECT TOP 1 @CCONSIDERALLCASHXN=VALUE FROM CONFIG (NOLOCK) WHERE CONFIG_OPTION='CONSIDER_ALL_CASH_RECEIPTS'
	SET @CCONSIDERALLCASHXN=ISNULL(@CCONSIDERALLCASHXN,0)
	SET @NCASH_RECEIPTS=0
	
	IF @CCONSIDERALLCASHXN=1
	BEGIN
	--OTHER_SOURCE
	--GET ALL THE CASH IN FROM OTHER TRANSACTIONS...
		 --NET CASH FROM SALES
		SELECT @NCASH_RECEIPTS=SUM(CR.IN_AMOUNT)
		FROM
		(
			 SELECT SUM(D.CASH_AMOUNT) AS IN_AMOUNT
			 FROM CMM01106 A  
			 JOIN VW_BILL_PAYMODE D ON A.CM_ID = D.MEMO_ID AND D.XN_TYPE = 'SLS'  
			 WHERE A.CANCELLED = 0 AND A.CM_DT = @DMEMO_DT
			 AND  A.location_Code = @CDEPT_ID 
			 AND   ISNULL(D.CASH_AMOUNT,0) <> 0  
			 AND ISNULL(A.MEMO_TYPE,0) IN(0,1)
			 UNION ALL   
			 --NET CASH FROM RECEIPTS
			 SELECT SUM(CASE WHEN ARC_TYPE=1 THEN D.CASH_AMOUNT ELSE -D.CASH_AMOUNT END ) AS IN_AMOUNT 
			 FROM ARC01106 A  
			 JOIN VW_BILL_PAYMODE D ON A.ADV_REC_ID = D.MEMO_ID AND D.XN_TYPE = 'ARC'  
			 WHERE A.CANCELLED = 0  AND D.CASH_AMOUNT <> 0  
			 AND   A.location_Code=@CDEPT_ID
			 AND   A.ADV_REC_DT = @DMEMO_DT
			 UNION ALL  
			 --NET CASH FROM WHOLE SALE TRANSACTION
			 SELECT SUM(D.CASH_AMOUNT) AS IN_AMOUNT
			 FROM INM01106 A  
			 JOIN VW_BILL_PAYMODE D ON A.INV_ID = D.MEMO_ID AND D.XN_TYPE = 'WSL'  
			 WHERE A.CANCELLED = 0 AND 
			 A.location_Code  = @CDEPT_ID AND D.CASH_AMOUNT <> 0  
			 AND INV_DT = @DMEMO_DT
			 AND ISNULL(A.MEMO_TYPE,0) IN(0,1)
			 UNION ALL   
			 --NET CASH OUT FROM WHOLE SALE RETURN TRANSACTION
			 SELECT SUM(-D.CASH_AMOUNT) AS IN_AMOUNT  
			 FROM CNM01106 A  
			 JOIN VW_BILL_PAYMODE D ON A.CN_ID = D.MEMO_ID AND D.XN_TYPE = 'WSR'  
			 WHERE A.location_Code  = @CDEPT_ID AND D.CASH_AMOUNT <> 0  
			 AND CANCELLED = 0  
			 AND CN_DT = @DMEMO_DT
			 AND ISNULL(A.MEMO_TYPE,0) IN(0,1)
		 )CR
	END
	
	SET @NIN=ISNULL(@NIN,0)+ISNULL(@NCASH_RECEIPTS,0)
	
	SET @NCL_AMOUNT=ISNULL(@NOP_AMOUNT,0)+ISNULL(@NIN,0)-ISNULL(@NOUT,0)-ISNULL(@NEXPENSES,0)
	
	SELECT ISNULL(@NOP_AMOUNT,0) AS OPENING,ISNULL(@NIN,0) AS [IN],ISNULL(@NOUT,0) AS [OUT],ISNULL(@NEXPENSES,0) AS EXPENSES
		   ,ISNULL(@NCL_AMOUNT,0) AS CLOSING	
	
	RETURN							
		
END TRY
BEGIN CATCH
	SET @CERRMSG='PROCEDURE - SP3S_PETTYCASH, STEP - '+@CSTEP+', MESSAGE - '+ERROR_MESSAGE()
END CATCH
END_PROC:
	IF ISNULL(@CERRMSG,'')<>''
		SELECT @CERRMSG AS ERRMSG 
END
--END OF PROCEDURE - SP3S_PETTYCASH
