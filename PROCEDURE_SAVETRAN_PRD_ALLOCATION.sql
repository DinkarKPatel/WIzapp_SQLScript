CREATE PROCEDURE SAVETRAN_PRD_ALLOCATION
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CFINYEAR			VARCHAR(10),
	@CXNMEMOID			VARCHAR(40)='',
	@CLOCID				VARCHAR(2)=''
)
--WITH ENCRYPTION
AS
BEGIN
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME1		VARCHAR(100),
			@CDETAILTABLENAME3		VARCHAR(100),
			@CDETAILTABLENAME4		VARCHAR(100),
			
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME1	VARCHAR(100),
			@CTEMPDETAILTABLENAME3	VARCHAR(100),
			@CTEMPDETAILTABLENAME4	VARCHAR(100),
			
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE1		VARCHAR(100),
			@CTEMPDETAILTABLE3		VARCHAR(100),
			@CTEMPDETAILTABLE4		VARCHAR(100),
			
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(2),
			@CLOCATIONID			VARCHAR(2),
			@CHODEPTID				VARCHAR(2),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT

	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	SET @NSTEP = 0		-- SETTTING UP ENVIRONMENT
	-- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
	SET @CTEMPDBNAME = ''
	SET @CMASTERTABLENAME	= 'PRD_BUYER_ORDER_ALLOCATE_MST'
	SET @CDETAILTABLENAME1	= 'PRD_BUYER_ORDER_ALLOCATE_DET'
	SET @CDETAILTABLENAME3	= 'PRD_BUYER_ORDER_ALLOCATE_SUB_DET'
	SET @CDETAILTABLENAME4	= 'PRD_BUYER_ORDER_ALLOCATE_BARCODE'

	
	--PRD_AGENCY_ISSUE_ROW_MATERIAL_DET
	SET @CTEMPMASTERTABLENAME	= 'TEMP_'+@CMASTERTABLENAME+'_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME1	= 'TEMP_'+@CDETAILTABLENAME1+'_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME3	= 'TEMP_'+@CDETAILTABLENAME3+'_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME4	= 'TEMP_'+@CDETAILTABLENAME4+'_'+LTRIM(RTRIM(STR(@NSPID)))
	
	SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE1	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME1
	SET @CTEMPDETAILTABLE3	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME3
	SET @CTEMPDETAILTABLE4	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME4
	
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'MEMO_ID'
	SET @CMEMONO			= 'MEMO_NO'
	SET @NMEMONOLEN			= 10
	
	IF ISNULL(@CLOCID,'')=''
		SELECT @CLOCATIONID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID'
	ELSE
		SET @CLOCATIONID=@CLOCID
	
	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		

	SET @NSTEP = 10		-- GETTING DEPTID INFO FROM TEMP TABLE
	BEGIN TRY
		BEGIN TRANSACTION
		IF @NUPDATEMODE = 3
		BEGIN
		   SET @CKEYFIELDVAL1=@CXNMEMOID
		   IF ISNULL(@CKEYFIELDVAL1,'')=''
		   BEGIN
		    SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED FOR CANCELLION...'
			GOTO END_PROC  	
			END
			
			UPDATE PRD_BUYER_ORDER_ALLOCATE_MST SET CANCELLED =1 WHERE MEMO_ID =@CKEYFIELDVAL1
			
			UPDATE PMT SET ORDER_ID=NULL 
			FROM PRD_BUYER_ORDER_ALLOCATE_MST A
			JOIN PRD_BUYER_ORDER_ALLOCATE_DET B ON A.MEMO_ID =B.MEMO_ID 
			JOIN PRD_BUYER_ORDER_ALLOCATE_SUB_DET C ON B.ROW_ID=C.REF_ROW_ID 
			JOIN PRD_BUYER_ORDER_ALLOCATE_BARCODE D ON C.ROW_ID =D.REF_ROW_ID 
			JOIN PRD_UPCPMT PMT ON PMT.PRODUCT_CODE =D.PRODUCT_CODE
			WHERE A.MEMO_ID =@CKEYFIELDVAL1
			
			GOTO END_PROC  	
		END
		
		SET @NSTEP = 15
		-- GETTING DEPT_ID FROM TEMP MASTER TABLE
		SET @CCMD = 'SELECT @CMEMODEPTID = LEFT(MEMO_ID,2), @CKEYFIELDVAL1 = MEMO_ID FROM ' + @CTEMPMASTERTABLE
		EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT, @CKEYFIELDVAL1 VARCHAR(50) OUTPUT', 
								  @CMEMODEPTID OUTPUT, @CKEYFIELDVAL1 OUTPUT
		IF (@CMEMODEPTID IS NULL )
		BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED...'
			  GOTO END_PROC  		
		END
		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	
			SET @NSTEP = 20		-- GENERATING NEW KEY
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN
				-- GENERATING NEW MRR_NO		
				SET @NSAVETRANLOOP=0
				WHILE @NSAVETRANLOOP=0
				BEGIN
					SET @NSTEP = 23
					EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CLOCATIONID, 1,
									@CFINYEAR,0, @CMEMONOVAL OUTPUT   
					SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
											WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
											AND FIN_YEAR = '''+@CFINYEAR+''' )
									SET @NLOOPOUTPUT=0
								ELSE
									SET @NLOOPOUTPUT=1'
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
				END

				IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
					  GOTO END_PROC  		
				END

				SET @NSTEP = 30		-- GENERATING NEW ID
				-- GENERATING NEW ORDER ID
				SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+ REPLICATE('0', 15-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL))
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  GOTO END_PROC
				END
				
				SET @NSTEP = 35
				-- CHECK WETHER THE MEMO ID IS STILL LATER
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  GOTO END_PROC
				END

				SET @NSTEP = 40		-- UPDATING NEW ID INTO TEMP TABLES
				-- UPDATING NEWLY GENERATED WORK ORDER NO AND ID IN MASTER & DETAIL TABLES
				SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
							@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
				EXEC SP_EXECUTESQL @CCMD
				
				SET @NSTEP = 50
				
				SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD
				
			END
		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
			SET @NSTEP = 50		-- GETTING ID INFO FROM TEMP TABLE
			-- GETTING ORDER_ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = MEMO_ID, @CMEMONOVAL = MEMO_NO FROM ' + @CTEMPMASTERTABLE
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  GOTO END_PROC  		
			END
			
			SET @NSTEP = 60		-- UPDATING SENT_TO_HO FLAG TEMP TABLE
			
			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET LAST_UPDATE=GETDATE() '
			EXEC SP_EXECUTESQL @CCMD
			
				
		END	-- END OF EDITMODE

		SET @NSTEP = 95

		-- CHECK WETHER THE MEMO ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END

		-- UPDATING MASTER TABLE (PIM01106) FROM TEMP TABLE
		SET @NSTEP = 100		-- UPDATING MASTER TABLE

		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			, @BALWAYSUPDATE = 1
			
		

		SET @NSTEP = 130
		SET @CCMD = N'ALTER TABLE '+@CTEMPDETAILTABLE1+' ADD OLD_ROW_ID VARCHAR(40)'
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD
		
		
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET OLD_ROW_ID = ROW_ID'
        PRINT @CCMD  
        EXEC SP_EXECUTESQL @CCMD  
		
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(38), NEWID())  
        WHERE LEFT(ROW_ID,5) = ''LATER'''
        PRINT @CCMD  
        EXEC SP_EXECUTESQL @CCMD  
              
		
		 SET @CCMD = N'UPDATE B SET REF_ROW_ID=A.ROW_ID FROM ' + @CTEMPDETAILTABLE1 + ' A
		 JOIN ' + @CTEMPDETAILTABLE3 + ' B ON A.OLD_ROW_ID=B.REF_ROW_ID' 
		 PRINT @CCMD 
         EXEC SP_EXECUTESQL @CCMD 
         
         

		SET @NSTEP = 135
		SET @CCMD = N'ALTER TABLE '+@CTEMPDETAILTABLE3+' ADD OLD_ROW_ID VARCHAR(40)'
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD
		
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE3 + ' SET OLD_ROW_ID = ROW_ID'
        PRINT @CCMD  
        EXEC SP_EXECUTESQL @CCMD  
        
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE3 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(38), NEWID())  
        WHERE LEFT(ROW_ID,5) = ''LATER'''
        PRINT @CCMD  
        EXEC SP_EXECUTESQL @CCMD  
              
		
		 SET @CCMD = N'UPDATE B SET REF_ROW_ID=A.ROW_ID FROM ' + @CTEMPDETAILTABLE3 + ' A
		 JOIN ' + @CTEMPDETAILTABLE4 + ' B ON A.OLD_ROW_ID=B.REF_ROW_ID' 
		 PRINT @CCMD 
         EXEC SP_EXECUTESQL @CCMD 
         
         SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE4 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(38), NEWID())  
        WHERE LEFT(ROW_ID,5) = ''LATER'''
        PRINT @CCMD  
        EXEC SP_EXECUTESQL @CCMD  
         
         
 --        SET @CDETAILTABLENAME1	= 'PRD_BUYER_ORDER_ALLOCATE_DET'
	--SET @CDETAILTABLENAME3	= 'PRD_BUYERORDER_ALLOCATE_SUB_DET'
	--SET @CDETAILTABLENAME4 
             
         	
		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME1
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME1
			, @CKEYFIELD1	= 'ROW_ID'
			, @BALWAYSUPDATE = 1
		
		    		
		-- INSERTING/UPDATING THE ENTRIES IN [PRD_BUYER_ORDER_ALLOCATE_SUB_DET] TABLE FROM TEMPTABLE
		SET @NSTEP = 145		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES
		
		--SELECT * FROM [TEMP_PRD_BUYER_ORDER_ALLOCATE_MST_140]
		--SELECT * FROM [TEMP_PRD_BUYER_ORDER_ALLOCATE_DET_140]
		
		--SELECT * FROM [TEMP_PRD_BUYER_ORDER_ALLOCATE_SUB_DET_140]
		--SELECT * FROM [TEMP_PRD_BUYER_ORDER_ALLOCATE_BARCODE_140]
		
			EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME3
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME3
			, @CKEYFIELD1	= 'ROW_ID'
			, @BALWAYSUPDATE = 1
	
		
			EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME4
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME4
			, @CKEYFIELD1	= 'ROW_ID'
			, @BALWAYSUPDATE = 1
		
       --SELECT * FROM TEMP_PRD_AGENCY_ISSUE_ROW_MATERIAL_DET_61
	
	
UPDATE_UPC:	
	IF @NUPDATEMODE IN(1)
	BEGIN
	    
	    DECLARE @ENABLEUPC VARCHAR(10)
	    SELECT TOP 1 @ENABLEUPC=VALUE FROM CONFIG WHERE CONFIG_OPTION='ENABLED_UPC' 
	    
	    IF ISNULL(@ENABLEUPC,'')='1'
	    BEGIN
	     
	     UPDATE A SET ORDER_ID=BUYER_ORDER_ID FROM PRD_UPCPMT A
	     JOIN PRD_BUYER_ORDER_ALLOCATE_BARCODE B ON A.PRODUCT_CODE=B.PRODUCT_CODE
	     JOIN PRD_BUYER_ORDER_ALLOCATE_SUB_DET C ON C.ROW_ID=B.REF_ROW_ID
	     JOIN PRD_BUYER_ORDER_ALLOCATE_DET D ON D.ROW_ID=C.REF_ROW_ID
	     WHERE D.MEMO_ID=@CKEYFIELDVAL1
	   END
	 
         	
	GOTO END_PROC
	END
	

	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(STR(@NSTEP))) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		
		GOTO END_PROC
	END CATCH
	
END_PROC:
     

	IF ISNULL(@CCMDOUTPUT,'') = ''
	BEGIN
		INSERT @OUTPUT ( ERRMSG, MEMO_ID)
				VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )
		
		SELECT * FROM @OUTPUT	
	END
	ELSE
		EXEC SP_EXECUTESQL @CCMDOUTPUT
	
	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CCMDOUTPUT,'') = '' AND ISNULL(@CERRORMSG,'') = ''
			COMMIT TRANSACTION
		ELSE
			ROLLBACK
	END			
	
	
	
	SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPDETAILTABLE1 + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPDETAILTABLE1 +'
                  IF OBJECT_ID( ''' + @CTEMPMASTERTABLE + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPMASTERTABLE +'
                  IF OBJECT_ID( ''' + @CTEMPDETAILTABLE3 + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPDETAILTABLE3 +' 
                  IF OBJECT_ID( ''' + @CTEMPDETAILTABLE4 + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPDETAILTABLE4 +''
	 EXEC SP_EXECUTESQL @CCMD
	 
END			
------------------------------------------------------ END OF PROCEDURE SAVETRAN_PRD_AGENCY_ISSUEMATERIAL
