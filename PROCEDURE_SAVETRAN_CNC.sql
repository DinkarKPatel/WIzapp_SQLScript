CREATE PROCEDURE SAVETRAN_CNC
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				varchar(40),
	@CMEMONOPREFIX		VARCHAR(50),
	@CFINYEAR			VARCHAR(10),
	@CMACHINENAME		VARCHAR(100)='',
	@CWINDOWUSERNAME	VARCHAR(100)='',
	@CWIZAPPUSERCODE	VARCHAR(10)='0000000',
	@CMEMOID			VARCHAR(40)='',
	@bFromMBO			BIT=0
)
--WITH ENCRYPTION
AS
BEGIN
	-- @NUPDATEMODE:	1- NEW STOCK ADJUSTMENT MEMO ADDED, 
	--					2- NOT APPLICABLE, 
	--					3- CURRENT STOCK ADJUSTMENT MEMO CANCELLED, 

	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(4),
			@CLOCATIONID			VARCHAR(4),
			@CHODEPTID				VARCHAR(4),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@BNEGSTOCKFOUND BIT,
			@NCNCTYPE				INT,
			@CXNTYPE				VARCHAR(10),
			@CLOCID				VARCHAR(4)
			
			
	DECLARE @CWHERECLAUSE VARCHAR(1000)
    SET @CWHERECLAUSE = ' SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''

	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))
    
     
	    
	SET @NSTEP = 0 -- SETTING UP ENVIRONMENT

	
	IF @NUPDATEMODE>3
	BEGIN
		SET @CERRORMSG='INVALID UPDATE MODE :'+LTRIM(RTRIM(STR(@NUPDATEMODE)))+' PASSED ONTO SAVETRAN'
		GOTO END_PROC
	END
	-- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
	SET @CTEMPDBNAME = ''
    
	SET @CMASTERTABLENAME	= 'ICM01106'
	SET @CDETAILTABLENAME	= 'ICD01106'
	--SET @CDETAILTABLENAME2	= 'PRD_JID_RM'
	
	--SET @CTEMPMASTERTABLENAME	= 'TEMP_ICM01106_'+LTRIM(RTRIM(STR(@NSPID)))
	--SET @CTEMPDETAILTABLENAME	= 'TEMP_ICD01106_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDBNAME = ''
	SET @CTEMPMASTERTABLENAME	= 'CNC_ICM01106_UPLOAD'
	SET @CTEMPDETAILTABLENAME	= 'CNC_ICD01106_UPLOAD'


	SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME
	
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'CNC_MEMO_ID'
	SET @CMEMONO			= 'CNC_MEMO_NO'
	SET @NMEMONOLEN			= 10
	
	
	if @NUPDATEMODE<>3
		select @CLOCID=Location_code from CNC_ICM01106_UPLOAD where SP_ID=@NSPID 
	else
		select @CLOCID=Location_code from icm01106 (nolock) where cnc_memo_id=@CMEMOID
	
	SELECT @CLOCATIONID=@CLOCID
	
	SELECT @CHODEPTID = [VALUE] FROM CONFIG WHERE  CONFIG_OPTION='HO_LOCATION_ID'		


	SET @NSTEP = 10		-- GETTING DEPTID INFO FROM TEMP TABLE
	BEGIN TRANSACTION
	
	BEGIN TRY

	IF ISNULL(@CLOCATIONID,'')=''
	 BEGIN
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
		GOTO END_PROC    
	 END
        
        -- GETTING DEPT_IDA FROM TEMP MASTER TABLE
		SET @CCMD = 'SELECT @CMEMODEPTID = DEPT_ID, @NCNCTYPE = CNC_TYPE FROM ' 
					+(CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME + ' WHERE CNC_MEMO_ID='''+@CMEMOID+'''' ELSE @CTEMPMASTERTABLE+' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+'''' END )--UPLOAD_TAB
		PRINT @CCMD					
		
		EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT, @NCNCTYPE INT OUTPUT',@CMEMODEPTID OUTPUT, @NCNCTYPE OUTPUT

		IF (@CMEMODEPTID IS NULL )
		BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'
			  GOTO END_PROC  		
		END

		SET @NSTEP = 11

		IF (ISNULL(@NCNCTYPE,0) NOT IN (1,2) )
		BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'
			  GOTO END_PROC  		
		END
		--PRINT '@NCNCTYPE ' + STR(@NCNCTYPE)

		SET @NSTEP = 12

		SET @CXNTYPE = (CASE WHEN @NCNCTYPE=1 THEN 'CNC' ELSE 'UNC' END)
		IF (ISNULL(@CXNTYPE,'') NOT IN ('CNC','UNC') )
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'
			GOTO END_PROC  		
		END

		--PRINT '@CXNTYPE ' + @CXNTYPE
        
        
        IF @NUPDATEMODE<>3
		BEGIN
		     
		  
            /*
              as discuss with sanjiv sir 
              auto batch pick in fix code  has been discarded . The barcode or batch barcode  entered by the user will only be saved.
              
            */
            
		
			IF @CXNTYPE<>'UNC'
			begin
			
				  EXEC SP3S_NORMALIZE_FIX_PRODUCT_CODE 
				  @CXNTYPE
				  ,@NSPID
				  ,@NUPDATEMODE
				  ,@CTEMPDETAILTABLE
				  ,@CMEMOID
				  ,@CERRORMSG OUTPUT
			  
				  IF ISNULL(@CERRORMSG,'')<>''
				  BEGIN
					   SET @CERRORMSG='ERROR IN NORMALIZATION'+@CERRORMSG
					   GOTO END_PROC
				  END
				END  

		END
        
        
		IF OBJECT_ID('TEMPDB..#TMPPMT','U') IS NOT NULL
			DROP TABLE #TMPPMT
		
		SELECT PRODUCT_CODE INTO #TMPPMT FROM SKU WHERE 1=2

		IF OBJECT_ID('TEMPDB..#TMPXNSTK','U') IS NOT NULL
			DROP TABLE #TMPXNSTK						   
		
		SELECT PRODUCT_CODE,QUANTITY_IN_STOCK AS XN_STOCK INTO #TMPXNSTK FROM PMT01106 WHERE 1=2
		SET @NSTEP = 15

		IF @NUPDATEMODE<>3
		BEGIN
			EXEC SP_VALIDATEXN_BEFORESAVE 'CNC',@NSPID,'0000000',@NUPDATEMODE,@CCMDOUTPUT OUTPUT,@BNEGSTOCKFOUND OUTPUT
			IF ISNULL(@CCMDOUTPUT,'') <> ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION ON TEMP DATA FAILED : ' + @CCMDOUTPUT + '...'
				GOTO END_PROC
			END
		END
	SET @NSTEP = 18
		
		IF @NUPDATEMODE = 3 AND ISNULL(@CMEMOID,'') = ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED IF CALLED FROM CANCELLATION'
			GOTO END_PROC  		
		END
		--SHIFT UP CNC TYPE
			SET @NSTEP = 20
		IF @NUPDATEMODE IN (1,2)
		BEGIN
			UPDATE a SET total_quantity=b.total_quantity FROM CNC_ICM01106_UPLOAD A WITH (ROWLOCK) 
			JOIN (SELECT sp_id,sum(quantity) as total_quantity FROM CNC_ICD01106_UPLOAD b (NOLOCK)  
				  WHERE sp_id=rtrim(ltrim(str(@nSpId))) GROUP BY sp_id) b ON a.sp_id=b.sp_id
		 
		 EXEC SP3S_upd_qty_lastupdate
			@nUpdateMode=@NUPDATEMODE,
			@cXnType='CNC',
			@cMasterTable='ICM01106',
			@nSpId=@nSpId,
			@cMemoIdCol='cnc_Memo_id',
			@cMemoId=@CKEYFIELDVAL1,
			@cXnDtCol='CNC_MEMO_DT',
			@CERRORMSG=@CERRORMSG OUTPUT

			IF ISNULL(@CERRORMSG,'')<>''
		       GOTO END_PROC


		END

			SET @NSTEP = 25
		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	

			SET @NSTEP = 20		-- GENERATING NEW KEY
			
			-- GENERATING NEW JOB ORDER NO		
			SET @NSAVETRANLOOP=0
			WHILE @NSAVETRANLOOP=0
			BEGIN
				EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
								@CFINYEAR,0, @CMEMONOVAL OUTPUT   
				
				PRINT @CMEMONOVAL
				SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
										WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
										AND FIN_YEAR = '''+@CFINYEAR+''' )
								SET @NLOOPOUTPUT=0
							ELSE
								SET @NLOOPOUTPUT=1'
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
			END

			IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
				  GOTO END_PROC  		
			END

			SET @NSTEP = 30		-- GENERATING NEW ID

			-- GENERATING NEW JOB ORDER ID
			SET @CKEYFIELDVAL1 = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
			
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
				  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
				  GOTO END_PROC
			END

			SET @NSTEP = 40		-- UPDATING NEW ID INTO TEMP TABLES

			-- UPDATING NEWLY GENERATED JOB ORDER NO AND JOB ORDER ID IN PIM AND PID TEMP TABLES
			SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
						@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''--UPLOAD_TAB
			EXEC SP_EXECUTESQL @CCMD
		
			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''--UPLOAD_TAB
			EXEC SP_EXECUTESQL @CCMD

		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
		
			SET @NSTEP = 50		-- GETTING ID INFO FROM TEMP TABLE

			-- GETTING JOB ORDER ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ' + @CKEYFIELD1 + ', @CMEMONOVAL = ' + @CMEMONO + ' FROM ' 
						+ (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME + ' WHERE CNC_MEMO_ID = ''' + @CMEMOID + '''' 
								ELSE @CTEMPMASTERTABLE +' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''END )--UPLOAD_TAB
						
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  GOTO END_PROC  		
			END

			SET @NSTEP = 55		-- STORING OLD STATUS OF BARCODES 
			 EXEC SP3SBUILDCNC
				@CXNID=@CKEYFIELDVAL1
				,@NUPDATEMODE=3
				,@CERRMSG=@CERRORMSG OUTPUT  

			IF ISNULL(@CERRORMSG,'')<>''
				GOTO END_PROC
			
			IF @NUPDATEMODE = 3			
			BEGIN
				SET @NSTEP = 60
				-- UPDATING SENTTOHO FLAG
				SET @CCMD = N'UPDATE ' + @CMASTERTABLENAME + ' SET CANCELLED = 1,LAST_UPDATE=GETDATE() ' + 
							N' WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + ''''--UPLOAD_TAB
				EXEC SP_EXECUTESQL @CCMD
			END
			
			ELSE
			BEGIN
                 
                 SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''' AND LEFT(CNC_MEMO_ID,5)=''LATER'' '--UPLOAD_TAB
			     EXEC SP_EXECUTESQL @CCMD
						
				-- ENTRY IN AUDIT TRAIL (ONLY WHEN USER EXPLICITLY CLICKED ON EDIT BUTTON)
				SET @NSTEP = 70		-- AUDIT TRIAL ENTRY

				--EXEC AUDITLOGENTRY
				--	  @CXNTYPE		= @CXNTYPE
				--	, @CXNID		= @CKEYFIELDVAL1
				--	, @CDEPTID		= @CMEMODEPTID
				--	, @CCOMPUTERNAME= @CMACHINENAME
				--	, @CWINUSERNAME = @CWINDOWUSERNAME
				--	, @CWIZUSERCODE = @CWIZAPPUSERCODE
			END
						
		
			-- REVERTING BACK THE STOCK OF PMT W.R.T CURRENT ISSUE
			SET @NSTEP = 80		-- REVERTING STOCK

			EXEC UPDATEPMT
				  @CXNTYPE			= @CXNTYPE
				, @CXNNO			= @CMEMONOVAL
				, @CXNID			= @CKEYFIELDVAL1
				, @NREVERTFLAG		= 1
				, @NALLOWNEGSTOCK	= 1
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= @NUPDATEMODE				
				, @CCMD				= @CCMDOUTPUT OUTPUT

			IF (@NUPDATEMODE = 3) 
			BEGIN
				IF @CCMDOUTPUT <> ''
				BEGIN
					SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'
					SET @BNEGSTOCKFOUND=1
					EXEC SP_EXECUTESQL @CCMDOUTPUT
				END	

			EXEC SP3S_upd_qty_lastupdate
			@nUpdateMode=3,
			@cXnType='cnc',
			@cMasterTable='ICM01106',
			@cMemoIdCol='cnc_memo_id',
			@cMemoId=@CKEYFIELDVAL1,
			@CERRORMSG=@CERRORMSG OUTPUT


				GOTO END_PROC
			END

			
			-- REVERTING BACK THE STOCK OF JOBPMT W.R.T CURRENT ISSUE
			SET @NSTEP = 85		-- REVERTING STOCK

		END					-- END OF EDITMODE

		SET @NSTEP = 95


		-- RECHECKING IF ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END


		IF @NUPDATEMODE <> 3
		BEGIN
		

			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET SENT_TO_HO = 0,LAST_UPDATE=GETDATE() WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''--UPLOAD_TAB
			EXEC SP_EXECUTESQL @CCMD
				
			-- UPDATING MASTER TABLE (PIM01106) FROM TEMP TABLE
			SET @NSTEP = 100		-- UPDATING MASTER TABLE

			EXEC UPDATEMASTERXN_OPT---UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPMASTERTABLENAME
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CMASTERTABLENAME
				, @CKEYFIELD1	= @CKEYFIELD1
				, @BALWAYSUPDATE = 1
				, @CFILTERCONDITION=@CWHERECLAUSE--UPLOAD_TAB

			-- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE
			SET @NSTEP = 110		-- UPDATING TRANSACTION TABLE

			-- UPDATING ROW_ID IN TEMP TABLES
			SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
							  WHERE LEFT(ROW_ID,5) = ''LATER'' AND SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''--UPLOAD_TAB
			EXEC SP_EXECUTESQL @CCMD

				-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
				SET @NSTEP = 114		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES

				SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + ' 
							WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
							AND ROW_ID IN 
							(
								SELECT A.ROW_ID 
								FROM ' + @CDETAILTABLENAME + ' A 
								LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B ON A.ROW_ID = B.ROW_ID AND B.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+'''
								WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
								AND   B.ROW_ID IS NULL
								
							)'--UPLOAD_TAB
				EXEC SP_EXECUTESQL @CCMD

				-- INSERTING/UPDATING THE ENTRIES IN PRD_JID TABLE FROM TEMPTABLE
				SET @NSTEP = 116		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

				EXEC UPDATEMASTERXN_OPT --UPDATEMASTERXN
					  @CSOURCEDB	= @CTEMPDBNAME
					, @CSOURCETABLE = @CTEMPDETAILTABLENAME
					, @CDESTDB		= ''
					, @CDESTTABLE	= @CDETAILTABLENAME
					, @CKEYFIELD1	= 'ROW_ID'
					, @BALWAYSUPDATE = 1
					, @CFILTERCONDITION=@CWHERECLAUSE--UPLOAD_TAB

			-- UPDATING STOCK OF PMT W.R.T. CURRENT MEMO
			SET @NSTEP = 130		-- UPDATING PMT TABLE
		
	
			PRINT 'CALLING UPDATEPMT'
			EXEC UPDATEPMT 
				  @CXNTYPE			= @CXNTYPE
				, @CXNNO			= @CMEMONOVAL
				, @CXNID			= @CKEYFIELDVAL1
				, @NREVERTFLAG		= 0
				, @NALLOWNEGSTOCK	= 0
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= @NUPDATEMODE				
				, @CCMD				= @CCMDOUTPUT OUTPUT
			
			IF @CCMDOUTPUT <> ''
			BEGIN
				
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'
				-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
				IF @bFromMBO=0
				BEGIN
					SET @BNEGSTOCKFOUND=1
					EXEC SP_EXECUTESQL @CCMDOUTPUT
				END
				GOTO END_PROC
			END
		END
		
		SET @NSTEP=145
		DECLARE @STR VARCHAR(MAX),@STR1 VARCHAR(MAX)
		SET @STR=NULL
		SET @STR1=NULL

		SELECT  @STR1=CNC_MEMO_ID,@STR =  COALESCE(@STR +  '/ ', ' ' ) + (''+C.UOM_NAME+': '+CAST(SUM(QUANTITY) AS VARCHAR) +' ')  
		FROM ICD01106 A 
		JOIN SKU S ON S.PRODUCT_CODE=A.PRODUCT_CODE
		JOIN ARTICLE B ON S.ARTICLE_CODE=B.ARTICLE_CODE
		JOIN UOM C ON C.UOM_CODE=B.UOM_CODE
		WHERE CNC_MEMO_ID=@CKEYFIELDVAL1 GROUP BY C.UOM_NAME ,CNC_MEMO_ID
		
		UPDATE ICM01106 SET TOTAL_QUANTITY_STR =@STR WHERE CNC_MEMO_ID =@STR1

		
		-- VALIDATING ENTRIES 
		SET @NSTEP = 150		-- VALIDATING ENTRIES
		
		EXEC VALIDATEXN
			  @CXNTYPE	= 'CNC'
			, @CXNID	= @CKEYFIELDVAL1
			, @NUPDATEMODE = @NUPDATEMODE			
			, @CCMD		= @CCMDOUTPUT OUTPUT

		IF @CCMDOUTPUT <> ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION FAILED : ' + @CCMDOUTPUT + '...'
			GOTO END_PROC
		END

		-- AFTER SUCCESSFUL SAVING , JUST DROP THE TEMP TABLES CREATED BY APPLICATION
		SET @NSTEP = 160
		IF EXISTS (SELECT TOP 1'U' FROM icm01106 (NOLOCK) WHERE CNC_MEMO_ID=@CKEYFIELDVAL1 AND cnc_type=2)
		BEGIN 
		     EXEC SP3S_UPD_SKUXFPNEW 'CNC',@CKEYFIELDVAL1,0

		END
		
	
	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'
		
		GOTO END_PROC
	END CATCH
	
END_PROC:
	 
    
	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
		BEGIN
			
			UPDATE ICM01106 SET LAST_UPDATE=GETDATE(),reconciled=0 WHERE CNC_MEMO_ID=@CKEYFIELDVAL1
			UPDATE XNLOG SET LAST_UPDATE=GETDATE() WHERE TABLENAME='ICM01106'
			UPDATE ICM01106 SET HO_SYNCH_LAST_UPDATE=''  WHERE cnc_memo_id=@CKEYFIELDVAL1
			
			commit TRANSACTION
			
			
		END	
		ELSE
			ROLLBACK
	END
	
	IF ISNULL(@BNEGSTOCKFOUND,0)=0
	   BEGIN
		  INSERT @OUTPUT (ERRMSG, MEMO_ID) VALUES (ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )
		  SELECT * FROM @OUTPUT	
	   END	
	   
	SET @CCMD='DELETE '+@CTEMPMASTERTABLE+' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
	EXEC SP_EXECUTESQL @CCMD
	SET @CCMD='DELETE '+@CTEMPDETAILTABLE+' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
	EXEC SP_EXECUTESQL @CCMD
END						-- SAVETRAN_CNC
