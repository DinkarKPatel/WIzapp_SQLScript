CREATE procedure Sp3s_insert_XNRECON_RPT
(
   
  @CMEMO_ID VARCHAR(50) 
)

as
begin

    DECLARE @XN_TYPE VARCHAR(10)  ,@CSTEP VARCHAR(10),@CERRORMSG VARCHAR(1000)

	SET @CERRORMSG=''
	SET @CSTEP=10


	BEGIN TRAN
    BEGIN TRY

			SELECT TOP 1 @XN_TYPE=XN_TYPE FROM XNRECONM A (NOLOCK) WHERE (RECONCILED=1) AND A.RECON_ID =@CMEMO_ID  


			
			delete  from XNRECON_HIST_MST where recon_id =@CMEMO_ID
			delete  from XNRECON_HIST_det where recon_id =@CMEMO_ID
			IF ISNULL(@XN_TYPE,'')=''
			BEGIN
			  SET @CERRORMSG='RECONCILE IS NOT COMPLETED '
			  GOTO END_PROC
			END


			 SELECT MANUAL_INV_NO AS SOURCE_MEMO_NO, CN_NO AS MEMO_NO,RECON_ID=CAST('' AS VARCHAR(100)),CN_ID AS MEMO_ID,  
			 RECEIPT_DT  
			 INTO #TMPMEMO  
			 FROM CNM01106   WHERE 1=2  

			IF @XN_TYPE='WSR'
			BEGIN
			     
				
				INSERT INTO #TMPMEMO(SOURCE_MEMO_NO,MEMO_NO,RECON_ID,MEMO_ID,RECEIPT_DT)  
				SELECT B.MANUAL_INV_NO,CN_NO,A.RECON_ID,CN_ID,B.RECEIPT_DT FROM XNRECONMEMO  (NOLOCK)A  
				JOIN CNM01106 (NOLOCK) B  ON A.XN_ID =B.CN_ID   
				WHERE A.RECON_ID =@CMEMO_ID  


	
				IF OBJECT_ID('TEMPDB..#TMPRECOWSR','U') IS NOT NULL
				   DROP TABLE #TMPRECOWSR
		
					print 'step #5:'+convert(varchar,getdate(),113)

				   SELECT  a.memo_id,a.recon_id,b.PRODUCT_CODE,B.QUANTITY inwards_qty,ISNULL(C.QUANTITY,0) as scan_qty
				   INTO #TMPRECOWSR 
				   FROM #TMPMEMO A  
				   JOIN 
				   (
				     SELECT   LEFT(b.PRODUCT_CODE, ISNULL(NULLIF(CHARINDEX ('@',b.PRODUCT_CODE)-1,-1),LEN(b.PRODUCT_CODE ))) AS PRODUCT_CODE,
					sum(quantity) quantity
					FROM cnd01106 b (NOLOCK)
					JOIN #TMPMEMO a ON b.CN_ID  =a.Memo_ID  
					GROUP BY LEFT(b.PRODUCT_CODE, ISNULL(NULLIF(CHARINDEX ('@',b.PRODUCT_CODE)-1,-1),LEN(b.PRODUCT_CODE )))
				   ) b on 1=1	
				   LEFT JOIN
				   (
					   SELECT B.RECON_ID ,
						  LEFT(b.PRODUCT_CODE, ISNULL(NULLIF(CHARINDEX ('@',b.PRODUCT_CODE)-1,-1),LEN(b.PRODUCT_CODE ))) AS PRODUCT_CODE,
						  SUM(B.QUANTITY) AS QUANTITY
					   FROM  XNRECONP B (NOLOCK) 
					   WHERE RECON_ID =@CMEMO_ID  
					   GROUP BY B.RECON_ID ,
					   LEFT(b.PRODUCT_CODE, ISNULL(NULLIF(CHARINDEX ('@',b.PRODUCT_CODE)-1,-1),LEN(b.PRODUCT_CODE )))
				  ) C  ON A.RECON_ID =C.RECON_ID 
				   and b.PRODUCT_CODE =c.PRODUCT_CODE 
				   WHERE  A.RECON_ID =@CMEMO_ID  


				   INSERT INTO XNRECON_HIST_MST(XN_TYPE,RECON_ID,Recon_dt,RECON_NO,SCAN_QTY,RECIVE_QTY,SHORTAGE_QTY,EXCESS_QTY,last_update,Memo_id)
				   SELECT 'WSR' XN_TYPE,@CMEMO_ID RECON_ID,b.Recon_dt,b.RECON_NO,
				          sum(A.SCAN_QTY) as SCAN_QTY,
						  sum(a.inwards_qty) as  RECIVE_QTY,
				          SHORTAGE_QTY=sum(CASE WHEN A.INWARDS_QTY-A.SCAN_QTY>0 THEN A.INWARDS_QTY-A.SCAN_QTY ELSE 0 END) ,
						  EXCESS_QTY=sum(CASE WHEN A.INWARDS_QTY-A.SCAN_QTY<0 THEN A.INWARDS_QTY-A.SCAN_QTY ELSE 0 END) ,
						  last_update =getdate(),a.MEMO_ID
				   FROM #TMPRECOWSR a
				   join XNRECONM b on a.RECON_ID =b.recon_id 
				   group by b.Recon_dt,b.RECON_NO,a.MEMO_ID

				   INSERT XNRECON_HIST_DET	(RECON_ID, EXCESS_QTY, Memo_id, PRODUCT_CODE, RECIVE_QTY, ROW_ID, SCAN_QTY, SHORTAGE_QTY )  
				   SELECT 	  @CMEMO_ID RECON_ID,EXCESS_QTY=(CASE WHEN A.INWARDS_QTY-A.SCAN_QTY<0 THEN A.INWARDS_QTY-A.SCAN_QTY ELSE 0 END) , 
				              Memo_id, 
							  PRODUCT_CODE, 
							  RECIVE_QTY=inwards_qty , 
							  ROW_ID=newid(), 
							  SCAN_QTY, 
							  SHORTAGE_QTY =(CASE WHEN A.INWARDS_QTY-A.SCAN_QTY>0 THEN A.INWARDS_QTY-A.SCAN_QTY ELSE 0 END) 
				   FROM #TMPRECOWSR a
				   where inwards_qty<>scan_qty






			END
			ELSE
			BEGIN
			     

				 INSERT INTO #TMPMEMO(SOURCE_MEMO_NO,MEMO_NO,RECON_ID,MEMO_ID ,RECEIPT_DT)  
				SELECT B.INV_NO,MRR_NO,A.RECON_ID,B.MRR_ID,B.RECEIPT_DT FROM XNRECONMEMO  (NOLOCK)A  
				JOIN PIM01106 (NOLOCK) B  ON A.XN_ID =B.MRR_ID   
				WHERE A.RECON_ID =@CMEMO_ID--'0101117000000100000019'  

   

					 IF OBJECT_ID('TEMPDB..#TMPPUR','U') IS NOT NULL
						DROP TABLE #TMPPUR
		
				
				   SELECT  a.memo_id,a.recon_id,b.PRODUCT_CODE,  B.QUANTITY inwards_qty,ISNULL(C.QUANTITY,0) as scan_qty
				   INTO #TMPPUR 
				   FROM #TMPMEMO A  
				   JOIN 
				   (SELECT   LEFT(b.PRODUCT_CODE, ISNULL(NULLIF(CHARINDEX ('@',b.PRODUCT_CODE)-1,-1),LEN(b.PRODUCT_CODE ))) AS PRODUCT_CODE,
					sum(quantity) quantity
					FROM PID01106 b (NOLOCK)
					JOIN #TMPMEMO a ON b.mrr_ID =a.Memo_ID  
					GROUP BY LEFT(b.PRODUCT_CODE, ISNULL(NULLIF(CHARINDEX ('@',b.PRODUCT_CODE)-1,-1),LEN(b.PRODUCT_CODE )))
				   ) b on 1=1	
				   LEFT JOIN
				   (
				   SELECT B.RECON_ID ,
					  LEFT(b.PRODUCT_CODE, ISNULL(NULLIF(CHARINDEX ('@',b.PRODUCT_CODE)-1,-1),LEN(b.PRODUCT_CODE ))) AS PRODUCT_CODE,
					  SUM(B.QUANTITY) AS QUANTITY
				   FROM  XNRECONP B (NOLOCK) 
				   WHERE RECON_ID =@CMEMO_ID  
				   GROUP BY B.RECON_ID ,
				   LEFT(b.PRODUCT_CODE, ISNULL(NULLIF(CHARINDEX ('@',b.PRODUCT_CODE)-1,-1),LEN(b.PRODUCT_CODE )))
	   
				  ) C  ON A.RECON_ID =C.RECON_ID 
				   and b.PRODUCT_CODE =c.PRODUCT_CODE 
				   WHERE  A.RECON_ID =@CMEMO_ID  

				  


				   INSERT INTO XNRECON_HIST_MST(XN_TYPE,RECON_ID,Recon_dt,RECON_NO,SCAN_QTY,RECIVE_QTY,SHORTAGE_QTY,EXCESS_QTY,last_update,Memo_id)
				   SELECT 'PUR' XN_TYPE,@CMEMO_ID RECON_ID,b.Recon_dt,b.RECON_NO,
				          sum(A.SCAN_QTY) as SCAN_QTY,
						  sum(a.inwards_qty) RECIVE_QTY,
				          SHORTAGE_QTY=sum(CASE WHEN A.INWARDS_QTY-A.SCAN_QTY>0 THEN A.INWARDS_QTY-A.SCAN_QTY ELSE 0 END) ,
						  EXCESS_QTY=sum(CASE WHEN A.INWARDS_QTY-A.SCAN_QTY<0 THEN A.INWARDS_QTY-A.SCAN_QTY ELSE 0 END) ,
						  last_update =getdate(),a.MEMO_ID
				   FROM #TMPPUR a
				   join XNRECONM b on a.RECON_ID =b.recon_id 
				   group by b.Recon_dt,b.RECON_NO,a.MEMO_ID

				 


				    INSERT XNRECON_HIST_DET	(RECON_ID, EXCESS_QTY, Memo_id, PRODUCT_CODE, RECIVE_QTY, ROW_ID, SCAN_QTY, SHORTAGE_QTY )  
				   SELECT 	 @CMEMO_ID as recon_id, EXCESS_QTY=(CASE WHEN A.INWARDS_QTY-A.SCAN_QTY<0 THEN A.INWARDS_QTY-A.SCAN_QTY ELSE 0 END) , 
				              a.Memo_id, 
							  PRODUCT_CODE, 
							  RECIVE_QTY=inwards_qty , 
							  ROW_ID=newid(), 
							  SCAN_QTY, 
							  SHORTAGE_QTY =(CASE WHEN A.INWARDS_QTY-A.SCAN_QTY>0 THEN A.INWARDS_QTY-A.SCAN_QTY ELSE 0 END) 
				   FROM #TMPPUR a
				   where inwards_qty<>scan_qty


			END






    END TRY  
  BEGIN CATCH
  print 'enter catch of sp3s_Tcscal'
  SELECT @CERRORMSG='ERROR MESSAGE IN PROCEDURE sp3s_Tcscal STEP#'+@CSTEP+' '+CAST(ERROR_MESSAGE() AS VARCHAR(1000))
  END CATCH  

  END_PROC: 
 
 
   IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' 
		BEGIN
		      update XNRECON_HIST_MST set HO_SYNCH_LAST_UPDATE ='' where recon_id =@CMEMO_ID
			  commit TRANSACTION
		END	
		ELSE
		begin
			ROLLBACK
		end
	END

end