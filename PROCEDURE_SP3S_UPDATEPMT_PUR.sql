CREATE PROCEDURE SP3S_UPDATEPMT_PUR  
  @CXNID VARCHAR(40),  
  @NREVERTFLAG BIT = 0,  
  @NALLOWNEGSTOCK BIT = 0,  
  @NUPDATEMODE INT=0,   
  @nBoxNo NUMERIC(4,0)=0,
  @cProductCode VARCHAR(50)='',
  @CCMD NVARCHAR(4000) OUTPUT  
  --*** PARAMETERS :  
  --*** @CXNID			- TRANSACTION ID ( MEMO ID OF MASTER TABLE )  
  --*** @NREVERTFLAG	- A FLAG TO INDICATE WHETHER THIS PROCEDURE IS CALLED TO REVERT STOCK  
  --*** @NALLOWNEGSTOCK - FLAG TO INDICATE WHETHER OR NOT ALLOW NEGATIVE STOCK  
  --*** @NRETVAL		- OUTPUT PARAMETER RETURNED BY THIS PROCEDURE (BIT 1-SUCCESS, 0-UNSUCCESS)  
--WITH ENCRYPTION
AS  
BEGIN  
DECLARE @NOUTFLAG INT, @NRETVAL BIT,@CXNTABLE VARCHAR(50),@CEXPR NVARCHAR(500),@CXNIDPARA VARCHAR(50),  
		@BCANCELLED BIT,@NENTRYMODE INT  ,@CHECK_UNIQUE_STOCK INT ,@CUSERCODE VARCHAR(10),@BBIN_TRANSFER BIT
		,@BSLRRECONREQD BIT
   
 SET @NRETVAL = 0  
 SET @CCMD = ''  
 --*** CHECKING FOR NEGATIVE STOCK OF BAR CODES WHICH R REMOVED FROM DETAIL FILE  
 --*** IF USER OPTED NOT TO ALLOW NEGATIVE STOCK   
 
 SELECT @CHECK_UNIQUE_STOCK = ISNULL(VALUE,1) FROM CONFIG WHERE CONFIG_OPTION ='ALLOW_STOCK_UNIQUE>1' 
  
 
  IF @NREVERTFLAG = 1  
		SET @NOUTFLAG =  1  
  ELSE  
		SET @NOUTFLAG = -1  
  
  INSERT PMT01106 (PRODUCT_CODE,  QUANTITY_IN_STOCK, DEPT_ID,BIN_ID, LAST_UPDATE )  
  SELECT DISTINCT B.PRODUCT_CODE,0 AS QUANTITY_IN_STOCK,A.DEPT_ID,A.BIN_ID,GETDATE() AS LAST_UPDATE  
  FROM PID01106 B WITH (NOLOCK)  
  JOIN PIM01106 A WITH (NOLOCK) ON A.MRR_ID=B.MRR_ID
  JOIN SKU D WITH (NOLOCK) ON B.PRODUCT_CODE = D.PRODUCT_CODE  
  JOIN ARTICLE E WITH (NOLOCK) ON D.ARTICLE_CODE = E.ARTICLE_CODE  
  LEFT OUTER JOIN PMT01106 PMT WITH (NOLOCK) ON PMT.PRODUCT_CODE = B.PRODUCT_CODE 
  AND PMT.DEPT_ID = A.DEPT_ID AND PMT.BIN_ID = A.BIN_ID
  WHERE A.MRR_ID = @CXNID AND PMT.PRODUCT_CODE IS NULL 
  AND (box_no=@nBoxNo OR @nUpdatemode<>4) AND (b.product_code=@cProductCode OR @nUpdatemode<>5)
  
  IF EXISTS (SELECT TOP 1 A.MEMO_ID FROM STMH01106 A WITH (NOLOCK) 
             JOIN PMT01106 B WITH (NOLOCK) ON A.REP_ID=B.REP_ID
			 AND B.BIN_ID=A.RECON_BIN_ID
			 JOIN PID01106 C ON C.PRODUCT_CODE=B.PRODUCT_CODE
			 JOIN PIM01106 D ON D.MRR_ID=C.MRR_ID AND D.BIN_ID=B.BIN_ID
			 WHERE D.MRR_ID=@CXNID AND LEFT(D.mrr_id,2)= B.DEPT_ID
			 AND (box_no=@nBoxNo OR @nUpdatemode<>4) AND (b.product_code=@cProductCode OR @nUpdatemode<>5))
  BEGIN
		SET @CCMD = N'SELECT DISTINCT ''PUR'' AS XN_TYPE
					  ,(CASE WHEN D.INV_MODE=2 THEN D.INV_NO ELSE D.MRR_NO END) AS MEMO_NO,
					  C.PRODUCT_CODE,0 AS QUANTITY_IN_STOCK,''FOLLOWING BAR CODES ARE PART OF STOCK RECONCILIATION'' AS ERRMSG
					 
					  FROM STMH01106 A WITH (NOLOCK) JOIN PMT01106 B WITH (NOLOCK) ON A.REP_ID=B.REP_ID
					  AND B.BIN_ID=A.RECON_BIN_ID
					  JOIN PID01106 C WITH (NOLOCK) ON C.PRODUCT_CODE=B.PRODUCT_CODE
					  JOIN PIM01106 D WITH (NOLOCK) ON D.MRR_ID=C.MRR_ID AND D.BIN_ID=B.BIN_ID
					  WHERE D.MRR_ID='''+@CXNID+''''+
					  (CASE WHEN @nUpdatemode=4 THEN ' AND box_no='+LTRIM(RTRIM(STR(@nBoxNo))) ELSE '' END)+
					  (CASE WHEN @nUpdatemode=5 THEN ' AND b.product_code='''+@cProductCode+'''' ELSE '' END)
		RETURN					
  END	  
  
  --*** UPDATING THE QUANTITY IN STOCK FROM PMT FOR THE GIVEN MEMO  
  --,   
  --  QUANTITY_PURCHASED = QUANTITY_PURCHASED - ( @NOUTFLAG * B.QUANTITY )  
  --AND E.STOCK_NA = 0

     
  UPDATE A SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK - ( @NOUTFLAG * X.QUANTITY )  
   FROM   PMT01106 A
   JOIN
   ( 
		SELECT B.PRODUCT_CODE, C.DEPT_ID, C.BIN_ID, 
		SUM(QUANTITY-ISNULL(B.GRN_QTY,0)) AS QUANTITY
		--SUM( QUANTITY) AS QUANTITY   
		FROM PID01106 B WITH (NOLOCK)  
		JOIN PIM01106 C WITH (NOLOCK) ON B.MRR_ID = C.MRR_ID  
		JOIN SKU D WITH (NOLOCK) ON B.PRODUCT_CODE = D.PRODUCT_CODE  
		JOIN ARTICLE E WITH (NOLOCK) ON D.ARTICLE_CODE = E.ARTICLE_CODE  
		WHERE B.MRR_ID = @CXNID AND B.PRODUCT_CODE<>'' 
		AND (box_no=@nBoxNo OR @nUpdatemode<>4) AND (b.product_code=@cProductCode OR @nUpdatemode<>5)
		GROUP BY B.PRODUCT_CODE,C.DEPT_ID, C.BIN_ID  
   ) X  ON A.PRODUCT_CODE = X.PRODUCT_CODE   
   AND A.DEPT_ID = X.DEPT_ID  
   AND A.BIN_ID = X.BIN_ID  
  
  SET @NRETVAL = 1  --*** SUCCESS  
    
  SELECT @BCANCELLED=CANCELLED,@CUSERCODE=USER_CODE FROM PIM01106 WHERE MRR_ID=@CXNID  
  ---NEGATIVE STOCK SHOULD NOT BE ALLOWED FOR SUPER USER
  IF @CUSERCODE='0000000'
	SET @NALLOWNEGSTOCK=0
    
  --*** CHECKING FOR NEGATIVE STOCK  
  --*** IF USER OPTED NOT TO ALLOW NEGATIVE STOCK AND STOCK IS GOING OUT  
  IF (@NREVERTFLAG = 0 AND @NALLOWNEGSTOCK = 0 AND @NOUTFLAG = 1) OR @BCANCELLED=1 OR @NUPDATEMODE IN (4,5)  
  BEGIN  
   --PRINT 'CHECKING FOR NEGATIVE STOCK'  
	   IF EXISTS ( SELECT A.PRODUCT_CODE FROM PMT01106 A 
				  JOIN  
				  (
					  SELECT B.PRODUCT_CODE,C.DEPT_ID,C.BIN_ID , SUM(B.QUANTITY) AS QUANTITY   
					  FROM PID01106 B WITH (NOLOCK)  
					  JOIN PIM01106 C WITH (NOLOCK) ON C.MRR_ID=B.MRR_ID  
					  JOIN SKU D WITH (NOLOCK) ON B.PRODUCT_CODE = D.PRODUCT_CODE  
					  JOIN ARTICLE E WITH (NOLOCK) ON D.ARTICLE_CODE = E.ARTICLE_CODE  
					  WHERE B.MRR_ID = @CXNID AND E.STOCK_NA=0  
					  AND (box_no=@nBoxNo OR @nUpdatemode<>4) AND (b.product_code=@cProductCode OR @nUpdatemode<>5)
					  GROUP BY B.PRODUCT_CODE,C.DEPT_ID,C.BIN_ID  
				  ) X ON X.PRODUCT_CODE=A.PRODUCT_CODE AND X.DEPT_ID=A.DEPT_ID AND X.BIN_ID=A.BIN_ID  
				  WHERE A.QUANTITY_IN_STOCK < 0
				 )  
	   BEGIN  
			SET @NRETVAL = 0  --*** UNSUCCESS  
			SET @CCMD = N'SELECT DISTINCT ''PUR'' AS XN_TYPE,X.MEMO_NO,A.PRODUCT_CODE, A.QUANTITY_IN_STOCK,''FOLLOWING BAR CODES ARE GOING NEGATIVE STOCK'' AS ERRMSG
						  FROM PMT01106 A WITH (NOLOCK)  
						  JOIN  
			  (
				  SELECT (CASE WHEN C.INV_MODE=2 THEN C.INV_NO ELSE C.MRR_NO END) AS MEMO_NO
						 ,B.PRODUCT_CODE,C.DEPT_ID,C.BIN_ID, SUM(B.QUANTITY) AS QUANTITY   
				  FROM PID01106 B WITH (NOLOCK)  
				  JOIN PIM01106 C WITH (NOLOCK) ON C.MRR_ID=B.MRR_ID  
				  JOIN SKU D WITH (NOLOCK) ON B.PRODUCT_CODE = D.PRODUCT_CODE  
				  JOIN ARTICLE E WITH (NOLOCK) ON D.ARTICLE_CODE = E.ARTICLE_CODE  
				  WHERE B.MRR_ID = '''+@CXNID+''' AND E.STOCK_NA=0 '+
				  (CASE WHEN @nUpdatemode=4 THEN ' AND box_no='+LTRIM(RTRIM(STR(@nBoxNo))) ELSE '' END)+
				  (CASE WHEN @nUpdatemode=5 THEN ' AND b.product_code='''+@cProductCode+'''' ELSE '' END)+
				  ' GROUP BY (CASE WHEN C.INV_MODE=2 THEN C.INV_NO ELSE C.MRR_NO END), 
				  
							B.PRODUCT_CODE,C.DEPT_ID ,C.BIN_ID
			  ) X ON X.PRODUCT_CODE=A.PRODUCT_CODE AND X.DEPT_ID=A.DEPT_ID AND X.BIN_ID=A.BIN_ID  
			  WHERE A.QUANTITY_IN_STOCK < 0 '  
	   END  
  END   
 
  IF ISNULL(@CHECK_UNIQUE_STOCK,1)<>1 AND @NUPDATEMODE IN (1,2)
  BEGIN
    IF EXISTS(SELECT DISTINCT A.PRODUCT_CODE, A.QUANTITY_IN_STOCK FROM PMT01106 A WITH (NOLOCK)  JOIN  
		     (
			  SELECT B.PRODUCT_CODE,C.DEPT_ID,C.BIN_ID, SUM(B.QUANTITY) AS QUANTITY   
			  FROM PID01106 B WITH (NOLOCK)  
			  JOIN PIM01106 C WITH (NOLOCK) ON C.MRR_ID=B.MRR_ID  
			  JOIN SKU D WITH (NOLOCK) ON B.PRODUCT_CODE = D.PRODUCT_CODE  
			  JOIN ARTICLE E WITH (NOLOCK) ON D.ARTICLE_CODE = E.ARTICLE_CODE  
			  WHERE B.MRR_ID = @CXNID AND E.STOCK_NA=0  AND E.CODING_SCHEME = 3 
			  AND (box_no=@nBoxNo OR @nUpdatemode<>4) AND (b.product_code=@cProductCode OR @nUpdatemode<>5)
			  GROUP BY B.PRODUCT_CODE,C.DEPT_ID ,C.BIN_ID
		    ) X ON X.PRODUCT_CODE=A.PRODUCT_CODE AND X.DEPT_ID=A.DEPT_ID AND X.BIN_ID=A.BIN_ID  
		     WHERE A.QUANTITY_IN_STOCK > 1)
	  SET @CCMD = N'SELECT DISTINCT A.PRODUCT_CODE, A.QUANTITY_IN_STOCK,''FOLLOWING Unique BAR CODES stock is going more than 1'' AS ERRMSG 
			  FROM PMT01106 A WITH (NOLOCK)
			  JOIN  
		     (
			  SELECT B.PRODUCT_CODE,C.DEPT_ID,C.BIN_ID, SUM(B.QUANTITY) AS QUANTITY   
			  FROM PID01106 B WITH (NOLOCK)  
			  JOIN PIM01106 C WITH (NOLOCK) ON C.MRR_ID=B.MRR_ID  
			  JOIN SKU D WITH (NOLOCK) ON B.PRODUCT_CODE = D.PRODUCT_CODE  
			  JOIN ARTICLE E WITH (NOLOCK) ON D.ARTICLE_CODE = E.ARTICLE_CODE  
			  WHERE B.MRR_ID = '''+@CXNID+''' AND E.STOCK_NA=0  AND E.CODING_SCHEME = 3 '+
			  (CASE WHEN @nUpdatemode=4 THEN ' AND box_no='+LTRIM(RTRIM(STR(@nBoxNo))) ELSE '' END)+
			  (CASE WHEN @nUpdatemode=5 THEN ' AND b.product_code='''+@cProductCode+'''' ELSE '' END)+			  
			  ' GROUP BY B.PRODUCT_CODE,C.DEPT_ID ,C.BIN_ID
		    ) X ON X.PRODUCT_CODE=A.PRODUCT_CODE AND X.DEPT_ID=A.DEPT_ID AND X.BIN_ID=A.BIN_ID  
		     WHERE A.QUANTITY_IN_STOCK > 1 '  
   END
   
  
 PRINT ' NOW CHECK FINAL STOCK'+STR(@NUPDATEMODE)  
   
END_PROC:  
   
END