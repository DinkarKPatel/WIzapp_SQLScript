CREATE PROCEDURE SP3S_IMPORT_MBOSLS
(
	@NSPID INT
   ,@CUSER_CODE VARCHAR(7)	
)	
--WITH ENCRYPTION
AS
BEGIN
/*
	**THIS PROCEDURE WILL CREATE SALE MEMOS AT HO ONLY, FOR ANY OF ITS LOCATION OR ITSELF.
	**STOCK WOULD BE REDUCED AT HO, IF SALE OF HO IS IMPORTED OTHERWISE ONLY CASH MEMO WOULD BE IMPORTED.
	**EXISTING SALE DATA WOULD BE DELETED AND AGAIN INSERTED IF THE BILL_NO EXISTS.
*/
BEGIN TRY
DECLARE @CSOURCETABLE VARCHAR(100),@CERRMSG VARCHAR(500),@CSTEP VARCHAR(500)
	   ,@CDEPT_ID VARCHAR(5),@CHODEPT_ID VARCHAR(5),@CCMD NVARCHAR(MAX)
	   ,@BNEGATIVESTOCK BIT,@cBillPrefix CHAR(2)
	   ,@BMBOSLS BIT /*VARIABLE TO IDENTIFY IF THE IMPORTED SALE IS FOR MBO MARKED BIN OR LOCATION*/
	
SET @BMBOSLS=0
---
IF EXISTS(SELECT TOP 1 'U' FROM BIN WHERE MBO_COUNTER=1)
	SET @BMBOSLS=1

SET @CSTEP=10
--VALIDATE IF RECORD EXISTS IN THE SOURCE TABLE
IF OBJECT_ID('TEMPDB..#SLSIMPORT','U') IS NOT NULL
	DROP TABLE #SLSIMPORT

SET @CSTEP=20
CREATE TABLE #SLSIMPORT
(
    SR_NO			NUMERIC(18)
   ,BILL_NO			VARCHAR(MAX)
   ,CM_DT			VARCHAR(MAX)
   ,BIN_ID			VARCHAR(MAX)
   ,PRODUCT_CODE	VARCHAR(MAX)
   ,QUANTITY		VARCHAR(MAX)
   ,AMOUNT			VARCHAR(MAX)
   ,CANCELLED		VARCHAR(MAX)
   ,MRP             VARCHAR(MAX)
   ,DISCOUNT_amt        VARCHAR(MAX)
   ,ERROR_MESSAGE   VARCHAR(MAX)
)	

SET @CSTEP=30
SET @CSOURCETABLE='TEMP_SLS_'+LTRIM(RTRIM(STR(@NSPID)))

SET @CSTEP=40
--VALIDATIONS ON TEMPERORY TABLE WHERE FROM SALE IS TO BE IMPORTED.
IF OBJECT_ID(@CSOURCETABLE,'U') IS NULL
BEGIN
	SET @CERRMSG='SOURCE TABLE NOT FOUND TO IMPORT DATA.'
	GOTO END_PROC
END

SET @CSTEP=50
--FOR NON-HO LOCATION,SALE CANNOT BE IMPORTED.
SELECT @CDEPT_ID=VALUE FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID' 
SELECT @CHODEPT_ID=VALUE FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID' 
IF @CDEPT_ID<>@CHODEPT_ID
BEGIN
	SET @CERRMSG='SALE CAN BE IMPORTED ONLY AT HEAD OFFICE.CANNOT PROCEED.'
	GOTO END_PROC
END

SET @CSTEP=60
--VALIDATE IF PASSED USER_CODE IS VALID USER
IF NOT EXISTS(SELECT TOP 1 'U' FROM USERS WHERE USER_CODE=@CUSER_CODE)
BEGIN
	SET @CERRMSG='INVALID USER FOUND..CANNOT PROCEED.'
	GOTO END_PROC
END

SET @CSTEP=70
if @BMBOSLS=1
SET @CCMD=N'SELECT SR_NO,BILL_NO,CM_DT,BIN_ID,PRODUCT_CODE,QUANTITY,AMOUNT,CANCELLED,ERROR_MESSAGE,MRP,DISCOUNT_amt
			FROM '+@CSOURCETABLE
else 
SET @CCMD=N'SELECT SR_NO,BILL_NO,CM_DT,BIN_ID,PRODUCT_CODE,QUANTITY,AMOUNT,CANCELLED,ERROR_MESSAGE,MRP,[DISCOUNT amt]
			FROM '+@CSOURCETABLE			
PRINT @CCMD

SET @CSTEP=80
INSERT #SLSIMPORT(SR_NO,BILL_NO,CM_DT,BIN_ID,PRODUCT_CODE,QUANTITY,AMOUNT,CANCELLED,ERROR_MESSAGE,MRP,DISCOUNT_AMT)  
EXEC SP_EXECUTESQL @CCMD

SET @CSTEP=90
IF NOT EXISTS(SELECT TOP 1 'U' FROM #SLSIMPORT)
BEGIN
	SET @CERRMSG='NO DATA FOUND TO IMPORT SALE.CANNOT PROCEED.'
	GOTO END_PROC
END
/*
LIST OF VALIDATIONS REQUIRED ON THE DATA COLUMNS OF IMPORT TABLE.
SR_NO   - FOR IDENTIFYING THE ERRORNEOUS ROW (VALIDATION NOT REQUIRED)

BILL_NO - ** CANNOT BE BLANK. 
		  ** SHOUD NOT BE MORE THAN 40 CHARACTERS.

CM_DT	- SHOULD NOT BE BLANK.
		  SHOULD BE IN DATE FORMAT.
		  
BIN_ID  - ** CANNOT BE BLANK.
		  ** BIN_ID SHOULD BELONG TO MBO COUNTER ONLY.
		  
PRODUCT_CODE - ** CANNOT BE BLANK. 
			   ** SHOULD EXISTS WITH THE SAME BIN IN PMT01106. 

QUANTITY	- ** CANNOT BE BLANK 
			  ** SHOULD BE NUMERIC.
			  ** SHOULD NOT BE ZERO

AMOUNT		- SHOULD HAVE NUMERIC DATA ONLY.

CANCELLED	- ** CANNOT BE BLANK.
			  ** SHOULD BE T,F,Y,N,0,1.				
*/
/**BILL NO CANNOT BE BLANK.**/ 
SET @CSTEP=100
UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG
FROM #SLSIMPORT A
JOIN 
(
  SELECT A.SR_NO,'INVALID BILLNO.' AS MSG
  FROM #SLSIMPORT A
  WHERE ISNULL(A.BILL_NO,'')=''
)B ON A.SR_NO=B.SR_NO

/*SHOUD NOT BE MORE THAN 40 CHARACTERS.*/
SET @CSTEP=110
UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG
FROM #SLSIMPORT A
JOIN 
(
  SELECT A.SR_NO,'LENGTH OF BILL NO CANNOT BE GREATER THAN 40 CHARACTERS.' AS MSG
  FROM #SLSIMPORT A
  WHERE LEN(A.BILL_NO)>40
)B ON A.SR_NO=B.SR_NO

/*VALIDATION ON CM_DT*/
/*CM_DT SHOULD NOT BE BLANK.*/
SET @CSTEP=120
UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG
FROM #SLSIMPORT A
JOIN 
(
  SELECT A.SR_NO,'INVALID BILL DATE.' AS MSG
  FROM #SLSIMPORT A
  WHERE ISNULL(A.CM_DT,'')=''
)B ON A.SR_NO=B.SR_NO

/*CM_DT SHOULD BE IN DATE FORMAT.*/
SET @CSTEP=130
UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG
FROM #SLSIMPORT A
JOIN 
(
  SELECT A.SR_NO,'INVALID BILL DATE FORMAT.' AS MSG
  FROM #SLSIMPORT A
  WHERE ISDATE(A.CM_DT)=0
)B ON A.SR_NO=B.SR_NO

/*VALIDATION ON BIN_ID*/		  
/*BIN_ID SHOULD BELONG TO MBO COUNTER ONLY.*/
SET @CSTEP=140
---SKIP THIS VALIDATION FOR SALE IMPORT FOR LOCATION
IF @BMBOSLS=1
UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG
FROM #SLSIMPORT A
JOIN 
(
  SELECT A.SR_NO,'INVALID BIN ID.' AS MSG
  FROM #SLSIMPORT A
  LEFT JOIN BIN B(NOLOCK) ON A.BIN_ID=B.BIN_ID AND B.MBO_COUNTER=1
  WHERE B.BIN_ID IS NULL
)B ON A.SR_NO=B.SR_NO

IF @BMBOSLS=0
/*BIN_ID STANDS FOR LOCATION ID AND VALIDATE IF THE LOCATION IS A VALID LOCATION*/
UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG
FROM #SLSIMPORT A
JOIN 
(
  SELECT A.SR_NO,'INVALID LOCATION ID.' AS MSG
  FROM #SLSIMPORT A
  LEFT JOIN LOCATION B(NOLOCK) ON A.BIN_ID=B.DEPT_ID 
  WHERE B.DEPT_ID IS NULL
)B ON A.SR_NO=B.SR_NO


/*VALIDATION ON PRODUCT_CODE*/			
/**PRODUCT_CODE - ** CANNOT BE BLANK. 
 **SHOULD EXISTS WITH THE SAME BIN IN PMT01106. 
*/
SET @CSTEP=150
IF @BMBOSLS=1
UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG
FROM #SLSIMPORT A
JOIN 
(
  SELECT A.PRODUCT_CODE,A.BIN_ID,'INVALID PRODUCT_CODE FOR THE BIN.' AS MSG
  FROM #SLSIMPORT A
  LEFT JOIN PMT01106 B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.BIN_ID=B.BIN_ID AND B.DEPT_ID=@CDEPT_ID
  WHERE (B.PRODUCT_CODE IS NULL OR A.PRODUCT_CODE='') 
)B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.BIN_ID=B.BIN_ID

/*
	QUANTITY- ** CANNOT BE BLANK 
			  ** SHOULD BE NUMERIC.
			  ** SHOULD NOT BE ZERO
*/

IF @BMBOSLS=0
/*JUST VALIDATE THAT THE PRODUCT CODE BEING IMPORTED SHOULD EXIST IN SKU*/
UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG
FROM #SLSIMPORT A
JOIN 
(
  SELECT A.PRODUCT_CODE,'INVALID PRODUCT_CODE.' AS MSG
  FROM #SLSIMPORT A
  LEFT JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE 
  WHERE (B.PRODUCT_CODE IS NULL OR A.PRODUCT_CODE='') 
)B ON A.PRODUCT_CODE=B.PRODUCT_CODE 


SET @CSTEP=170
UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG
FROM #SLSIMPORT A
JOIN 
(
  SELECT A.QUANTITY,'INVALID QUANTITY.' AS MSG
  FROM #SLSIMPORT A
  WHERE ISNULL(A.QUANTITY,'')='' OR ISNUMERIC(A.QUANTITY)=0 OR A.QUANTITY='0'
)B ON A.QUANTITY=B.QUANTITY

/*AMOUNT
** CANNOT BE BLANK.
** SHOULD BE NUMERIC.
*/
SET @CSTEP=180
UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG
FROM #SLSIMPORT A
JOIN 
(
  SELECT A.AMOUNT,'INVALID AMOUNT.' AS MSG
  FROM #SLSIMPORT A
  WHERE ISNUMERIC(A.AMOUNT)=0 AND (isnull(CAST(quantity AS INT),0)*ISNULL(CAST(A.MRP AS INT),0))<>ISNULL(CAST(A.DISCOUNT_amt AS INT),0)
  --ISNULL(A.AMOUNT,'')='' OR ISNUMERIC(A.AMOUNT)=0 OR A.AMOUNT='0'
)B ON A.AMOUNT=B.AMOUNT

SET @CSTEP=190
UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG
FROM #SLSIMPORT A
JOIN 
(
  SELECT A.QUANTITY,A.AMOUNT,'MISMATCH BETWEEN QUANTITY AND AMOUNT.' AS MSG
  FROM #SLSIMPORT A
  WHERE (A.QUANTITY>'0' AND A.AMOUNT<'0') OR (A.QUANTITY<'0' AND A.AMOUNT>'0')
)B ON A.QUANTITY=B.QUANTITY AND A.AMOUNT=B.AMOUNT

/*CANCELLED
** CANNOT BE BLANK.
** SHOULD BE T,F,Y,N,0,1.
*/
SET @CSTEP=200
UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG
FROM #SLSIMPORT A
JOIN 
(
  SELECT A.CANCELLED,'INVALID CANCELLED VALUE.' AS MSG
  FROM #SLSIMPORT A
  WHERE A.CANCELLED NOT IN ('T','F','Y','N','0','1')
)B ON A.CANCELLED=B.CANCELLED

/*CANCELLED
**A BILL CANNOT HAVE MULTIPLE CANCELLED STATUS..
*/
SET @CSTEP=210
UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG
FROM #SLSIMPORT A
JOIN 
(
  SELECT A.BIN_ID,A.BILL_NO,'MULTIPLE CANCELLED STATUS FOUND FOR THE BILL.' AS MSG
  FROM #SLSIMPORT A
  GROUP BY A.BIN_ID,A.BILL_NO
  HAVING COUNT(DISTINCT (CASE WHEN A.CANCELLED IN ('T','Y','1') THEN 1 
							  WHEN A.CANCELLED IN ('F','N','0') THEN 0 END))>1
)B ON A.BIN_ID=B.BIN_ID AND A.BILL_NO=B.BILL_NO

SET @CSTEP=220
--END OF VALIDATION PART....IF ANY VALIDATION HAS FAILED DONOT PROCEED FURTHER RETURN THE ERROR MESSAGE
IF EXISTS(SELECT TOP 1 'U' FROM #SLSIMPORT WHERE ISNULL(ERROR_MESSAGE,'')<>'')
	GOTO END_PROC

SET @CSTEP=230
ALTER TABLE #SLSIMPORT ADD FIN_YEAR VARCHAR(10)

SET @CSTEP=240
UPDATE #SLSIMPORT SET FIN_YEAR='01'+DBO.FN_GETFINYEAR(CM_DT)

SET @CSTEP=250
UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG
FROM #SLSIMPORT A
JOIN 
(
  SELECT A.BIN_ID,A.BILL_NO,'THIS BILL IS ALREADY CANCELLED.CANNOT MODIFY THIS BILL.' AS MSG
  FROM #SLSIMPORT A
  JOIN CMM01106 B(NOLOCK) ON A.BIN_ID+'-'+A.BILL_NO=B.REF_NO AND A.FIN_YEAR=B.FIN_YEAR
  WHERE B.CANCELLED=1
)B ON A.BIN_ID=B.BIN_ID AND A.BILL_NO=B.BILL_NO

SET @CSTEP=255
IF @BMBOSLS=1
UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG
FROM #SLSIMPORT A
JOIN 
(
  SELECT A.BIN_ID,A.BILL_NO,'CREDIT NOTE ALREADY GENERATED FOR THIS BILL.CANNOT MODIFY THIS BILL.' AS MSG
  FROM #SLSIMPORT A
  JOIN CMM01106 B(NOLOCK) ON A.BIN_ID+'-'+A.BILL_NO=B.REF_NO AND A.FIN_YEAR=B.FIN_YEAR
  JOIN SLS_WSR_LINK C(NOLOCK) ON B.CM_ID=C.CM_ID
)B ON A.BIN_ID=B.BIN_ID AND A.BILL_NO=B.BILL_NO

SET @CSTEP=260
/*CM_DT SHOULD BE UNIQUE FOR EACH BIN_ID+BILL_NO COMBINATION*/
UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG
FROM #SLSIMPORT A
JOIN 
(
  SELECT A.BIN_ID,A.BILL_NO,A.FIN_YEAR,'MULTIPLE DATE FOUND FOR THIS BILL NO.' AS MSG
  FROM #SLSIMPORT A
  GROUP BY A.BIN_ID,A.BILL_NO,A.FIN_YEAR
  HAVING COUNT(DISTINCT A.CM_DT)>1
)B ON A.BIN_ID=B.BIN_ID AND A.BILL_NO=B.BILL_NO AND A.FIN_YEAR=B.FIN_YEAR

SET @CSTEP=270
--END OF VALIDATION PART....IF ANY VALIDATION HAS FAILED DONOT PROCEED FURTHER RETURN THE ERROR MESSAGE
IF EXISTS(SELECT TOP 1 'U' FROM #SLSIMPORT WHERE ISNULL(ERROR_MESSAGE,'')<>'')
	GOTO END_PROC

BEGIN TRANSACTION

SET @CSTEP=280
--GETTING LIST OF EXISTING BILLS.
IF OBJECT_ID('TEMPDB..#EXISTINGBILLS','U') IS NOT NULL
	DROP TABLE #EXISTINGBILLS

SET @CSTEP=290	
IF OBJECT_ID('TEMPDB..#NEWBILLS','U') IS NOT NULL
	DROP TABLE #NEWBILLS

SET @CSTEP=300
--LIST OF EXISTING BILLS
SELECT B.CM_ID
	  ,B.CM_NO	
	  ,A.BILL_NO
	  ,CONVERT(DATETIME,A.CM_DT) AS CM_DT
	  ,A.BIN_ID
	  ,A.PRODUCT_CODE
	  ,CONVERT(NUMERIC(10,3),QUANTITY) AS QUANTITY
	  ,CONVERT(NUMERIC(18,2),A.AMOUNT) AS AMOUNT
	  ,CONVERT(BIT,(CASE WHEN A.CANCELLED IN ('T','Y','1') THEN 1 ELSE 0 END)) AS CANCELLED
	  ,A.FIN_YEAR
INTO #EXISTINGBILLS
FROM #SLSIMPORT A
JOIN CMM01106 B(NOLOCK) ON A.BIN_ID+'-'+A.BILL_NO=B.REF_NO AND A.FIN_YEAR=B.FIN_YEAR

SET @CSTEP=310
--LIST OF NEW BILLS
SELECT CONVERT(VARCHAR(50),'') AS CM_ID,CONVERT(VARCHAR(50),'') AS CM_NO
	  ,A.BILL_NO
	  ,CONVERT(DATETIME,A.CM_DT) AS CM_DT
	  ,A.BIN_ID
	  ,A.PRODUCT_CODE
	  ,CONVERT(NUMERIC(10,3),QUANTITY) AS QUANTITY
	  ,CONVERT(NUMERIC(18,2),A.AMOUNT) AS AMOUNT
	  ,CONVERT(BIT,(CASE WHEN A.CANCELLED IN ('T','Y','1') THEN 1 ELSE 0 END)) AS CANCELLED
	  ,A.FIN_YEAR
INTO #NEWBILLS
FROM #SLSIMPORT A
LEFT JOIN CMM01106 B(NOLOCK) ON A.BIN_ID+'-'+A.BILL_NO=B.REF_NO AND A.FIN_YEAR=B.FIN_YEAR
WHERE B.CM_ID IS NULL

IF @BMBOSLS=1
BEGIN
--START OF STOCK UPDATION PROCESS IN CASE THE BILL IS FOR MBO MARKED BIN
SET @CSTEP=320
/*STORING THE BARCODES WITH NET QUANTITY TO BE REDUCED FROM PMT01106 FOR ALL CASH MEMOS..*/
IF OBJECT_ID('TEMPDB..#SOLDBARCODES','U') IS NOT NULL
	DROP TABLE #SOLDBARCODES  

SET @CSTEP=330
SELECT PRODUCT_CODE,DEPT_ID,BIN_ID,QUANTITY_IN_STOCK AS XN_QTY
INTO #SOLDBARCODES  
FROM PMT01106 WHERE 1=2

SET @CSTEP=340
PRINT '1'
--LIST OF BARCODES WHOSE STOCK NEEDS TO BE REVERTED: CASE OF EXISTING BILLS...
INSERT #SOLDBARCODES(PRODUCT_CODE,DEPT_ID,BIN_ID,XN_QTY)
SELECT A.PRODUCT_CODE,@CDEPT_ID,A.BIN_ID,-SUM(A.QUANTITY) AS XN_QTY
FROM CMD01106 A (NOLOCK)
JOIN 
(
	SELECT DISTINCT CM_ID FROM #EXISTINGBILLS
)B ON A.CM_ID=B.CM_ID
GROUP BY A.PRODUCT_CODE,A.BIN_ID

SET @CSTEP=350
--LIST OF BARCODES WHOSE STOCK NEEDS TO BE ADDED : CASE OF NEW BILLS
INSERT #SOLDBARCODES(PRODUCT_CODE,DEPT_ID,BIN_ID,XN_QTY)
SELECT PRODUCT_CODE,@CDEPT_ID,BIN_ID,QUANTITY
FROM #SLSIMPORT
WHERE CANCELLED NOT IN ('T','Y','1')

SET @CSTEP=360
--GETTING LIST OF BARCODES WITH NETQUANTITY TO BE REDUCED FROM STOCK
IF OBJECT_ID('TEMPDB..#SOLDBARCODES_NET','U') IS NOT NULL
	DROP TABLE #SOLDBARCODES_NET
	
SET @CSTEP=370
SELECT PRODUCT_CODE,DEPT_ID,BIN_ID,SUM(XN_QTY) AS NET_QTY
INTO #SOLDBARCODES_NET	
FROM #SOLDBARCODES
GROUP BY PRODUCT_CODE,DEPT_ID,BIN_ID

SET @CSTEP=380
/*UPDATE THE STOCK IN PMT01106 AND AFTER STOCK UPDATE,
  CHECK IF NEGATIVE STOCK EXISTS FOR THESE BARCODES,IF EXISTS SET THE @BNEGATIVESTOCK TO TRUE*/
UPDATE A SET QUANTITY_IN_STOCK=QUANTITY_IN_STOCK-B.NET_QTY
FROM PMT01106 A
JOIN #SOLDBARCODES_NET B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID

SET @CSTEP=390
IF EXISTS(SELECT TOP 1 'U' FROM PMT01106 A 
		  JOIN #SOLDBARCODES_NET B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID
		  WHERE A.QUANTITY_IN_STOCK<0)
BEGIN 
	SET @BNEGATIVESTOCK=1
	
	SET @CSTEP=400
	SELECT A.PRODUCT_CODE,A.QUANTITY_IN_STOCK,A.BIN_ID,'STOCK GOING NEGATIVE'  AS ERROR
	FROM PMT01106 A 
    JOIN #SOLDBARCODES_NET B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.DEPT_ID=B.DEPT_ID AND A.BIN_ID=B.BIN_ID
    WHERE A.QUANTITY_IN_STOCK<0
    
    GOTO END_PROC
END		   	
END
---END OF STOCK UPDATION WHICH IS REQUIRED IN CASE OF MBO SALE...

SET @CSTEP=410
--STOCK IS NOT FOUND NEGATIVE, SO LETS PROCEED FOR CREATING ENTRY IN CMM01106,CMD01106 AND PAYMODE_XN_DET
DELETE PAYMODE_XN_DET WHERE XN_TYPE='SLS' AND MEMO_ID IN 
(SELECT DISTINCT CM_ID FROM #EXISTINGBILLS)

SET @CSTEP=420
DELETE CMD01106 WHERE CM_ID IN 
(SELECT DISTINCT CM_ID FROM #EXISTINGBILLS)

SET @CSTEP=430
DELETE CMM01106 WHERE CM_ID IN 
(SELECT DISTINCT CM_ID FROM #EXISTINGBILLS)

SET @CSTEP=440
DECLARE @CBIN_ID VARCHAR(10),@CBILL_NO VARCHAR(40),@CFINYEAR VARCHAR(10)
	   ,@CMEMOPREFIX VARCHAR(10),@NMEMONOLEN NUMERIC(3),@CMEMONOLEN VARCHAR(5)	
	   ,@CMEMONOVAL	VARCHAR(50),@CKEYSTABLE VARCHAR(100)

SET @CSTEP=450
SELECT TOP 1 @CMEMONOLEN=VALUE FROM CONFIG WHERE CONFIG_OPTION='SLS_MEMO_LEN'
	
SET @CSTEP=460	
IF ISNULL(@CMEMONOLEN,'')<>''
	SET @NMEMONOLEN=CONVERT(INT,@CMEMONOLEN)
ELSE 
	SET @NMEMONOLEN=10	

SET @CSTEP=470

IF @BMBOSLS=1
SET @CKEYSTABLE='KEYS_CMM_'+LTRIM(RTRIM(@CDEPT_ID))

SET @CSTEP=480
---GENERATING CM_NO AND CM_ID FOR NEW_MEMO
WHILE EXISTS(SELECT TOP 1 'U' FROM #NEWBILLS WHERE ISNULL(CM_NO,'')='')
BEGIN
	SET @CBIN_ID=''
	SET @CBILL_NO=''
	SET @CFINYEAR=''
	SET @CMEMONOVAL=''	
	SET @CSTEP=490	
	
	IF @BMBOSLS=1
	BEGIN	
		SELECT TOP 1 @CBIN_ID=b.BIN_ID,@CBILL_NO=BILL_NO,@CFINYEAR=FIN_YEAR,@cBillPrefix=b.bill_prefix 
		FROM #NEWBILLS a JOIN bin b ON a.bin_id=b.bin_id WHERE ISNULL(CM_NO,'')='' ORDER BY CM_DT,BILL_NO ASC
		
		SET @CMEMOPREFIX=@CDEPT_ID+@cBillPrefix+'-'	
	END	
	ELSE
	BEGIN
		SELECT TOP 1 @CBIN_ID=A.BIN_ID,@CBILL_NO=BILL_NO,@CFINYEAR=FIN_YEAR
		FROM #NEWBILLS a WHERE ISNULL(CM_NO,'')='' ORDER BY CM_DT,BILL_NO ASC
		
		SET @CKEYSTABLE='KEYS_CMM_'+LTRIM(RTRIM(@CBIN_ID))
		SET @CMEMOPREFIX=LTRIM(RTRIM(@CBIN_ID))+LTRIM(RTRIM(@CBIN_ID))+'-'	
	END
		
LBLGENKEY:
	SET @CSTEP=500
	EXEC GETNEXTKEY_OPT 'CMM01106', 'CM_NO', @NMEMONOLEN, @CMEMOPREFIX, 1,
								@CFINYEAR,0, @CKEYSTABLE,@CMEMONOVAL OUTPUT   			
	
	SET @CSTEP=510
	IF EXISTS(SELECT TOP 1 'U' FROM CMM01106 WHERE CM_NO=@CMEMONOVAL AND FIN_YEAR=@CFINYEAR)
		GOTO LBLGENKEY
	
	SET @CSTEP=520
	IF ISNULL(@CMEMONOVAL,'')=''
	BEGIN
		SET @CERRMSG='ERROR GENERATING CM NO.'
		GOTO END_PROC
	END
	
	SET @CSTEP=530	
	UPDATE #NEWBILLS SET CM_NO=@CMEMONOVAL WHERE BIN_ID=@CBIN_ID AND BILL_NO=@CBILL_NO AND FIN_YEAR=@CFINYEAR
			
END

SET @CSTEP=540
UPDATE #NEWBILLS SET CM_ID=(CASE WHEN @BMBOSLS=1 THEN @CDEPT_ID ELSE LTRIM(RTRIM(BIN_ID)) END)
						   +FIN_YEAR+REPLICATE('0',15-LEN(LTRIM(RTRIM(CM_NO))))+LTRIM(RTRIM(CM_NO))

SET @CSTEP=550
IF EXISTS(SELECT TOP 1 'U' FROM #NEWBILLS WHERE ISNULL(CM_ID,'')='' OR ISNULL(CM_NO,'')='')
BEGIN
	SET @CERRMSG='ERROR GENERATING CM NO.'
	GOTO END_PROC
END

SET @CSTEP=560
INSERT CMM01106	( REMARKS, SENT_FOR_RECON, PARTY_TYPE, AC_CODE, MANUAL_DISCOUNT, MANUAL_ROUNDOFF
				, BIN_ID, PATCHUP_RUN, SUBTOTAL_R, PASSPORT_NO, TICKET_NO, FLIGHT_NO, MRP_WSP
				, MANUAL_BILL, FC_RATE, POSTEDINAC, CM_NO, CM_DT, CM_MODE, SUBTOTAL, DT_CODE
				, DISCOUNT_PERCENTAGE, DISCOUNT_AMOUNT, NET_AMOUNT, CUSTOMER_CODE, CANCELLED, USER_CODE
				, LAST_UPDATE, EXEMPTED,  SENT_TO_HO, CM_TIME, CM_ID, REF_CM_ID, FIN_YEAR
				, ATD_CHARGES, COPIES_PTD, ROUND_OFF, MEMO_TYPE, PAY_MODE, SMS_SENT, AUTOENTRY, CASH_TENDERED
				, PAYBACK, ECOUPON_ID, CAMPAIGN_GC_OTP, SALESSETUPINEFFECT, EDT_USER_CODE, GV_AMOUNT, REF_NO
				, SENT_FOR_GR )  
SELECT DISTINCT 'IMPORTED SALE.' AS REMARKS,0 AS SENT_FOR_RECON,1 AS PARTY_TYPE,'0000000000' AS AC_CODE
		,0 AS MANUAL_DISCOUNT,0 AS MANUAL_ROUNDOFF,(CASE WHEN @BMBOSLS=1 THEN BIN_ID ELSE '000' END),0 AS PATCHUP_RUN
		,SUM(CASE WHEN AMOUNT<0 THEN AMOUNT ELSE 0 END) AS SUBTOTAL_R,'' AS PASSPORT_NO,'' AS TICKET_NO,'' AS FLIGHT_NO,
		0 AS MRP_WSP,0 AS MANUAL_BILL,0 AS FC_RATE
		,0 AS POSTEDINAC, CM_NO
		,CM_DT,1 AS CM_MODE
		,SUM(CASE WHEN AMOUNT>0 THEN AMOUNT ELSE 0 END) AS SUBTOTAL
		,'0000000' AS DT_CODE,0 AS DISCOUNT_PERCENTAGE,0 AS DISCOUNT_AMOUNT
		,ROUND(SUM(AMOUNT),0) AS NET_AMOUNT
		,'000000000000' AS CUSTOMER_CODE, CANCELLED,@CUSER_CODE AS USER_CODE,GETDATE() AS LAST_UPDATE
		,0 AS EXEMPTED,0 AS SENT_TO_HO,GETDATE() AS CM_TIME, CM_ID,'' AS REF_CM_ID
		, FIN_YEAR,0 AS ATD_CHARGES,0 AS COPIES_PTD,(ROUND(SUM(AMOUNT),0)-SUM(AMOUNT)) AS ROUND_OFF,1 AS MEMO_TYPE,1 AS PAY_MODE,0 AS SMS_SENT
		,0 AS AUTOENTRY,0 AS CASH_TENDERED
		,0 AS PAYBACK,'' AS ECOUPON_ID,'' AS CAMPAIGN_GC_OTP
		,0 AS SALESSETUPINEFFECT,@CUSER_CODE AS EDT_USER_CODE,0 AS GV_AMOUNT
		,BIN_ID+'-'+BILL_NO AS REF_NO,0 AS SENT_FOR_GR 
FROM #EXISTINGBILLS
GROUP BY BIN_ID,CM_NO,CM_DT,CANCELLED,CM_ID,FIN_YEAR,BILL_NO
UNION 
SELECT DISTINCT 'IMPORTED SALE.' AS REMARKS,0 AS SENT_FOR_RECON,1 AS PARTY_TYPE,'0000000000' AS AC_CODE
		,0 AS MANUAL_DISCOUNT,0 AS MANUAL_ROUNDOFF, (CASE WHEN @BMBOSLS=1 THEN BIN_ID ELSE '000' END),0 AS PATCHUP_RUN
		,SUM(CASE WHEN AMOUNT<0 THEN AMOUNT ELSE 0 END) AS SUBTOTAL_R,'' AS PASSPORT_NO,'' AS TICKET_NO,'' AS FLIGHT_NO,0 AS MRP_WSP,0 AS MANUAL_BILL,0 AS FC_RATE
		,0 AS POSTEDINAC, CM_NO
		,CM_DT,1 AS CM_MODE
		,SUM(CASE WHEN AMOUNT>0 THEN AMOUNT ELSE 0 END) AS SUBTOTAL
		,'0000000' AS DT_CODE,0 AS DISCOUNT_PERCENTAGE,0 AS DISCOUNT_AMOUNT
		,ROUND(SUM(AMOUNT),0) AS NET_AMOUNT
		,'000000000000' AS CUSTOMER_CODE, CANCELLED,@CUSER_CODE AS USER_CODE,GETDATE() AS LAST_UPDATE
		,0 AS EXEMPTED,0 AS SENT_TO_HO,GETDATE() AS CM_TIME, CM_ID,'' AS REF_CM_ID
		, FIN_YEAR,0 AS ATD_CHARGES,0 AS COPIES_PTD,(ROUND(SUM(AMOUNT),0)-SUM(AMOUNT)) AS ROUND_OFF,1 AS MEMO_TYPE,1 AS PAY_MODE,0 AS SMS_SENT
		,0 AS AUTOENTRY,0 AS CASH_TENDERED
		,0 AS PAYBACK,'' AS ECOUPON_ID,'' AS CAMPAIGN_GC_OTP
		,0 AS SALESSETUPINEFFECT,@CUSER_CODE AS EDT_USER_CODE,0 AS GV_AMOUNT
		,BIN_ID+'-'+BILL_NO AS REF_NO,0 AS SENT_FOR_GR  
FROM #NEWBILLS
GROUP BY BIN_ID,CM_NO,CM_DT,CANCELLED,CM_ID,FIN_YEAR,BILL_NO

SET @CSTEP=570
/*
TAX_METHOD : 1 FOR INCLUSIVE AND 2 FOR EXCLUSIVE
*/
INSERT CMD01106	( PRODUCT_CODE, QUANTITY, MRP, NET, DISCOUNT_PERCENTAGE, DISCOUNT_AMOUNT, ROW_ID, LAST_UPDATE
				, TAX_PERCENTAGE, TAX_AMOUNT, EMP_CODE, SLSDET_ROW_ID, DEPT_ID, OLD_MRP, REF_SLS_MEMO_ID
				, REALIZE_SALE, CM_ID, RFNET, TAX_TYPE, TAX_METHOD, EAN, EMP_CODE1, EMP_CODE2, ITEM_DESC
				, WEIGHTED_AVG_DISC_PCT, WEIGHTED_AVG_DISC_AMT, MANUAL_DISCOUNT, FIX_MRP, SR_NO, HOLD_FOR_ALTER
				, PACK_SLIP_ID, XN_TYPE, REPEAT_PUR_ORDER, BIN_ID, REF_ORDER_ID, FOC_QUANTITY, CMM_DISCOUNT_AMOUNT
				, NRM_ID )  
SELECT 	  A.PRODUCT_CODE, A.QUANTITY, B.MRP,A.AMOUNT AS NET
,(CASE WHEN ABS(A.AMOUNT)<ABS(A.QUANTITY*B.MRP) THEN 
  ((ABS(A.QUANTITY*B.MRP)-ABS(A.AMOUNT))/ABS(A.QUANTITY*B.MRP))*100 
  ELSE 0 END) AS DISCOUNT_PERCENTAGE
		,(CASE WHEN A.QUANTITY>0 THEN 1 ELSE -1 END)*
		(CASE WHEN ABS(A.AMOUNT)<ABS(A.QUANTITY*B.MRP) THEN 
		 (ABS(A.QUANTITY*B.MRP)-ABS(A.AMOUNT)) 
		 ELSE 0 END)
		AS DISCOUNT_AMOUNT
		,(CASE WHEN @BMBOSLS=1 THEN @CDEPT_ID ELSE A.BIN_ID END)+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID,GETDATE() AS LAST_UPDATE
		,0 AS TAX_PERCENTAGE,0 AS TAX_AMOUNT,'0000000' AS EMP_CODE,'' AS SLSDET_ROW_ID,(CASE WHEN @BMBOSLS=1 THEN @CDEPT_ID ELSE A.BIN_ID END) AS DEPT_ID,0 AS OLD_MRP
		,'' AS REF_SLS_MEMO_ID,0 AS REALIZE_SALE
		,A.CM_ID AS CM_ID,0 AS RFNET,1 AS TAX_TYPE,1 AS TAX_METHOD,'' AS EAN,'0000000' AS EMP_CODE1
		,'0000000' AS EMP_CODE2,'' AS ITEM_DESC,0 AS WEIGHTED_AVG_DISC_PCT
		,0 AS WEIGHTED_AVG_DISC_AMT,0 AS MANUAL_DISCOUNT,0 AS FIX_MRP,0 AS SR_NO,0 AS HOLD_FOR_ALTER,'' AS PACK_SLIP_ID
		,'' AS XN_TYPE
		,0 AS REPEAT_PUR_ORDER,(CASE WHEN @BMBOSLS=1 THEN A.BIN_ID ELSE '000' END) AS BIN_ID,'' AS REF_ORDER_ID
		,0 AS FOC_QUANTITY,0 AS CMM_DISCOUNT_AMOUNT,'' AS NRM_ID 
FROM #EXISTINGBILLS A
JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE
UNION 
SELECT 	  A.PRODUCT_CODE, A.QUANTITY, B.MRP,A.AMOUNT AS NET
,(CASE WHEN ABS(A.AMOUNT)<ABS(A.QUANTITY*B.MRP) THEN 
  ((ABS(A.QUANTITY*B.MRP)-ABS(A.AMOUNT))/ABS(A.QUANTITY*B.MRP))*100 
  ELSE 0 END)
AS DISCOUNT_PERCENTAGE
		,(CASE WHEN A.QUANTITY>0 THEN 1 ELSE -1 END)*
		 (CASE WHEN ABS(A.AMOUNT)<ABS(A.QUANTITY*B.MRP) THEN 
		 (ABS(A.QUANTITY*B.MRP)-ABS(A.AMOUNT)) 
		 ELSE 0 END)
		AS DISCOUNT_AMOUNT
		,(CASE WHEN @BMBOSLS=1 THEN @CDEPT_ID ELSE A.BIN_ID END)+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID,GETDATE() AS LAST_UPDATE
		,0 AS TAX_PERCENTAGE,0 AS TAX_AMOUNT,'0000000' AS EMP_CODE,'' AS SLSDET_ROW_ID
		,(CASE WHEN @BMBOSLS=1 THEN @CDEPT_ID ELSE A.BIN_ID END) AS DEPT_ID,0 AS OLD_MRP
		,'' AS REF_SLS_MEMO_ID,0 AS REALIZE_SALE
		,A.CM_ID AS CM_ID,0 AS RFNET,1 AS TAX_TYPE,1 AS TAX_METHOD,'' AS EAN,'0000000' AS EMP_CODE1
		,'0000000' AS EMP_CODE2,'' AS ITEM_DESC,0 AS WEIGHTED_AVG_DISC_PCT
		,0 AS WEIGHTED_AVG_DISC_AMT,0 AS MANUAL_DISCOUNT,0 AS FIX_MRP,0 AS SR_NO,0 AS HOLD_FOR_ALTER,'' AS PACK_SLIP_ID
		,'' AS XN_TYPE
		,0 AS REPEAT_PUR_ORDER,(CASE WHEN @BMBOSLS=1 THEN A.BIN_ID ELSE '000' END) AS BIN_ID,'' AS REF_ORDER_ID,0 AS FOC_QUANTITY
		,0 AS CMM_DISCOUNT_AMOUNT,'' AS NRM_ID 
FROM #NEWBILLS A
JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE

SET @CSTEP=580
INSERT PAYMODE_XN_DET( MEMO_ID, XN_TYPE, PAYMODE_CODE, ROW_ID, AMOUNT, LAST_UPDATE, REF_NO
					 , ADJ_MEMO_ID, CURRENCY_CONVERSION_RATE, REMARKS, GV_SRNO, GV_SCRATCH_NO)  
SELECT 	CM_ID AS MEMO_ID,'SLS' AS XN_TYPE,'0000000' AS PAYMODE_CODE
,(CASE WHEN @BMBOSLS=1 THEN @CDEPT_ID ELSE BIN_ID END)+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID
	  ,SUM(AMOUNT) AS AMOUNT,GETDATE() AS LAST_UPDATE,'' AS REF_NO,'' AS ADJ_MEMO_ID
	  ,1 AS CURRENCY_CONVERSION_RATE,'SALE IMPORTED' AS REMARKS,'' AS GV_SRNO,'' AS GV_SCRATCH_NO 
FROM #EXISTINGBILLS
GROUP BY CM_ID,BIN_ID
UNION 
SELECT 	CM_ID AS MEMO_ID,'SLS' AS XN_TYPE,'0000000' AS PAYMODE_CODE
	,(CASE WHEN @BMBOSLS=1 THEN @CDEPT_ID ELSE BIN_ID END)+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID
	,SUM(AMOUNT) AS AMOUNT,GETDATE() AS LAST_UPDATE,'' AS REF_NO,'' AS ADJ_MEMO_ID
	,1 AS CURRENCY_CONVERSION_RATE,'SALE IMPORTED' AS REMARKS,'' AS GV_SRNO,'' AS GV_SCRATCH_NO 
FROM #NEWBILLS
GROUP BY CM_ID,BIN_ID

SET @CSTEP=590
--UPDATING RFNET COLUMN OF CMD01106
IF OBJECT_ID('#IMPORTEDBILLS','U') IS NOT NULL
	DROP TABLE #IMPORTEDBILLS

SET @CSTEP=600
SELECT DISTINCT CM_ID
INTO #IMPORTEDBILLS
FROM #EXISTINGBILLS
UNION 
SELECT DISTINCT CM_ID
FROM #NEWBILLS

SET @CSTEP=610
DECLARE @CCMID VARCHAR(50),@DCMDT DATETIME,@CTEMPCMDTABLE VARCHAR(200) 

SET @CTEMPCMDTABLE='TMPCMD_'+LTRIM(RTRIM(STR(@@SPID)))

SET @CSTEP=620
WHILE EXISTS(SELECT TOP 1 'U' FROM #IMPORTEDBILLS)
BEGIN
	SET @CCMID=''
	SET @CSTEP=630
	SELECT TOP 1 @CCMID=CM_ID FROM #IMPORTEDBILLS
	
	IF @BMBOSLS<>1
	BEGIN
		--CURRENTLY USED BY BLACKBERRY
		/*
			IF THE RETAIL SALE OF LOCATION IS BEING IMPORTED AT HEAD OFFICE THEN THE TAX WILL BE CONSIDERED AS 
			INCLUSIVE ONLY(AS PER SANJAY SIR)
			TAX STRUCTURE WOULD BE RETURNED BY SP_APPLYSLSDISCTAX
		*/
		IF OBJECT_ID(@CTEMPCMDTABLE,'U') IS NOT NULL
 		BEGIN
 			SET @CCMD=N'DROP TABLE '+@CTEMPCMDTABLE
 			EXEC SP_EXECUTESQL @CCMD
 		END	
		
		SET @DCMDT=''
		SELECT @DCMDT=CM_DT FROM CMM01106 WHERE cm_id=@CCMID
		
		SET @cCmd=N'SELECT product_code,quantity,discount_percentage,mrp,net,row_id,pack_slip_id,tax_percentage,
 				discount_amount AS cmm_discount_amount,discount_amount
 				INTO '+@cTempCmdTable+' FROM cmd01106 (NOLOCK) WHERE cm_id='''+@cCmId+''''
 		EXEC SP_EXECUTESQL @cCmd
		
		SET @cStep=90
		
		EXEC SP3S_EOSS_APPLY_SLSDISCTAX
		@CPRODUCTCODEPARA='',
		@dXnDt=@dCmDt,
		@BSALESSETUPINEFFECT=0,
		@NCMMDISCAMT=0,
		@NDISCPICKINGMODE=1,
		@CUSERCODE='0000000',
		@CCUSTOMERCODE='000000000000',
		@bCalledFromMboSls=1
		
		SET @CCMD=N'UPDATE A SET tax_percentage=B.TAX_PERCENTAGE
								,TAX_AMOUNT=(A.NET*B.TAX_PERCENTAGE)/(100+B.TAX_PERCENTAGE)
					FROM CMD01106 A
					JOIN '+@CTEMPCMDTABLE+' B ON A.ROW_ID=B.ROW_ID
					WHERE A.CM_ID='''+@CCMID+''''
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD
							
	END
	
	
	SET @CSTEP=640
	EXEC UPDATERFNET 'SLS',@CCMID
	
	SET @CSTEP=650
	DELETE #IMPORTEDBILLS WHERE CM_ID=@CCMID
END

END TRY
BEGIN CATCH
	SET @CERRMSG='SP3S_IMPORT_MBOSLS : AT STEP - '+@CSTEP+', MESSAGE - '+ERROR_MESSAGE()
END CATCH

END_PROC:
SELECT ISNULL(@CERRMSG,'') AS ERRMSG
SELECT   SR_NO
		,BILL_NO
		,CM_DT
		,BIN_ID
		,PRODUCT_CODE
		,QUANTITY
		,AMOUNT
		,CANCELLED
		,ERROR_MESSAGE
FROM #SLSIMPORT WHERE ISNULL(ERROR_MESSAGE,'')<>''

IF @@TRANCOUNT>0
BEGIN
	IF ISNULL(@CERRMSG,'')='' AND NOT EXISTS(SELECT TOP 1 'U' FROM #SLSIMPORT WHERE ISNULL(ERROR_MESSAGE,'')<>'') 
							  AND ISNULL(@BNEGATIVESTOCK,0)=0
	BEGIN						  
		PRINT 'COMMITING TRANSACTION'
		COMMIT TRANSACTION
		UPDATE XNLOG SET LAST_UPDATE=GETDATE() WHERE TABLENAME='CMM01106'
	END	
	ELSE
	BEGIN
		PRINT 'ROLLBACK TRANSACTION'
		ROLLBACK
	END	
END

SET @CCMD=N'IF OBJECT_ID('''+@CSOURCETABLE+''',''U'') IS NOT NULL
					DROP TABLE '+@CSOURCETABLE
PRINT @CCMD
EXEC SP_EXECUTESQL @CCMD					

END
--END OF PROCEDURE - SP3S_IMPORT_MBOSLS
