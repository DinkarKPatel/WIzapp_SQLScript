CREATE PROCEDURE SAVETRAN_PRD_WO_CNC_MST
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CMEMONOPREFIX		VARCHAR(50),
	@CFINYEAR			VARCHAR(10),
	@CMEMOID			VARCHAR(40)='',
	@CLOCID				VARCHAR(2)=''
)
--WITH ENCRYPTION
AS
BEGIN
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(2),
			@CLOCATIONID			VARCHAR(2),
			@CHODEPTID				VARCHAR(2),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@NSUBTOTAL NUMERIC(20,2),
			@BNEGSTOCKFOUND BIT,
			@CWSLINVOICEID	VARCHAR(22),
			@BPURTHROUGHIMPORT	BIT,@CMSG VARCHAR(200),@NTAX NUMERIC(20,2)
			
			DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	BEGIN TRY
		
		BEGIN TRANSACTION
			SET @NSTEP = 10	-- SETTTING UP ENVIRONMENT

			-- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
			SET @CTEMPDBNAME = ''

			SET @CMASTERTABLENAME	= 'PRD_WO_CNC_MST'
			SET @CDETAILTABLENAME	= 'PRD_WO_CNC_DET'
		
			
			SET @CTEMPMASTERTABLENAME	= 'TEMP_PRD_WO_CNC_MST_'+LTRIM(RTRIM(STR(@NSPID)))
			SET @CTEMPDETAILTABLENAME	= 'TEMP_PRD_WO_CNC_DET_'+LTRIM(RTRIM(STR(@NSPID)))
		
			
			SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
			SET @CTEMPDETAILTABLE	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME
		
			
			SET @CERRORMSG			= ''
			SET @CKEYFIELD1			= 'MEMO_ID'
			SET @CMEMONO			= 'MEMO_NO'
			SET @NMEMONOLEN			= 10
			SET @NSTEP = 20
			
			IF ISNULL(@CLOCID,'')=''
				SELECT @CLOCATIONID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID'
			ELSE
				SELECT @CLOCATIONID=@CLOCID
			
          --- AND THEN AFTER CANCELLING THE MEMO JUST PROCEED TOWARDS VALIDATIONS TO BE DONE AFTER CANCEL
		IF @NUPDATEMODE = 3
		BEGIN
		   SET @CKEYFIELDVAL1=@CMEMOID
			SET @CCMD=N'UPDATE '+@CMASTERTABLENAME+' SET CANCELLED=1,LAST_UPDATE=GETDATE() WHERE MEMO_ID='''+@CMEMOID+''''
		    PRINT @CCMD
		    EXEC SP_EXECUTESQL @CCMD
			GOTO UPDATE_UPC
		END	
			
			
			IF @NUPDATEMODE = 1 -- ADDMODE	
			BEGIN	
				SET @CCMD = 'SELECT @CKEYFIELDVAL1 = MEMO_ID FROM '+@CTEMPMASTERTABLE
				EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT', 
								  @CKEYFIELDVAL1 OUTPUT
				--SELECT @CKEYFIELDVAL1				  
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
				BEGIN
					PRINT 'GENERATING NEW KEY'
					SET @NSAVETRANLOOP=0
					WHILE @NSAVETRANLOOP=0
					BEGIN
						SET @NSTEP=40
						EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
										@CFINYEAR,0, @CMEMONOVAL OUTPUT   
						
						PRINT @CMEMONOVAL
						
						SET @NSTEP=50
						SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
												WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
												AND FIN_YEAR = '''+@CFINYEAR+''' )
										SET @NLOOPOUTPUT=0
									ELSE
										SET @NLOOPOUTPUT=1'
						PRINT @CCMD
						EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
					END
					PRINT 'GENERATING NEW KEY... START'			

					SET @NSTEP = 60		-- GENERATING NEW ID

					-- GENERATING NEW MRR ID
					SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+ REPLICATE('0', 15-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL))
					IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
					BEGIN
						  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
						  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
						  GOTO END_PROC
					END
					
					SET @NSTEP = 70
					
					-- RECHECKING IF ID IS STILL LATER
					IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
					BEGIN
						SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
						GOTO END_PROC
					END	
					SET @NSTEP = 80		-- UPDATING NEW ID INTO TEMP TABLES

					-- UPDATING NEWLY GENERATED MRR NO AND MRR ID IN PIM AND PID TEMP TABLES
					SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
								@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD
				
					SET @NSTEP = 90		-- UPDATING NEW ID INTO TEMP TABLES
					
					SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD
				
								
				END
			END
			ELSE --CALLED FROM EDIT MODE
			BEGIN
				SET @NSTEP = 100		-- GETTING ID INFO FROM TEMP TABLE

				-- GETTING MRR_ID WHICH IS BEING EDITED
				SET @CCMD = 'SELECT @CKEYFIELDVAL1 = MEMO_ID, @CMEMONOVAL = MEMO_NO FROM '+@CTEMPMASTERTABLE
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
								   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
				IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
					  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
					  
					  GOTO END_PROC  		
				END
				
	
			END
			
			SET @NSTEP = 120

			-- RECHECKING IF ID IS STILL LATER
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
				GOTO END_PROC
			END				
			
			SET @NSTEP=130						 
			
			EXEC UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPMASTERTABLENAME
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CMASTERTABLENAME
				, @CKEYFIELD1	= @CKEYFIELD1
				, @BALWAYSUPDATE = 1
			
			SET @NSTEP = 140		-- UPDATING TRANSACTION TABLE
			
			SET @CCMD=N'ALTER TABLE '+@CTEMPDETAILTABLE +' ADD OLD_ROW_ID VARCHAR(40)' 
		     PRINT @CCMD 
             EXEC SP_EXECUTESQL @CCMD  

			-- UPDATING ROW_ID IN TEMP TABLES
			SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET OLD_ROW_ID=ROW_ID, ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
						  WHERE LEFT(ROW_ID,5) = ''LATER'''
			EXEC SP_EXECUTESQL @CCMD
			
		
	
			-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
			SET @NSTEP = 160		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES

			DELETE FROM PRD_WO_CNC_DET WHERE MEMO_ID =@CKEYFIELD1 
			
	
			-- INSERTING/UPDATING THE ENTRIES IN PID01106 TABLE FROM TEMPTABLE
			SET @NSTEP = 170		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

			EXEC UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPDETAILTABLENAME
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CDETAILTABLENAME
				, @CKEYFIELD1	= 'ROW_ID'
				, @BALWAYSUPDATE = 1
			
		
	UPDATE_UPC:	
	IF @NUPDATEMODE IN(1,3)
	BEGIN
	    
	    DECLARE @ENABLEUPC VARCHAR(10)
	    SELECT TOP 1 @ENABLEUPC=VALUE FROM CONFIG WHERE CONFIG_OPTION='ENABLED_UPC' 
	    
	    IF ISNULL(@ENABLEUPC,'')='1'
	    BEGIN
	       
	       EXEC SAVETRAN_PRD_WO_CANCELLEDUPC   
			    @NUPDATEMODE=@NUPDATEMODE,
                @NSPID=@NSPID,
                @CMEMO_ID=@CKEYFIELDVAL1, 
                @DEPT_ID= @CLOCATIONID,
			    @CERRORMSG    = @CERRORMSG OUTPUT  
		
		
		
		IF @CERRORMSG <> ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE UNIQUE STOCK STATUS IN PMT....'
				GOTO END_PROC
			END	 
	   
	    
	    IF @NUPDATEMODE=1
	    BEGIN
	        --UNIQUE BARCODE VALIDATE 
	        IF EXISTS (SELECT TOP 1 'U' FROM PRD_WO_CNC_DET A
	         LEFT OUTER JOIN
	         (
	          SELECT UPC.REF_ROW_ID,SUM(QUANTITY) AS QUANTITY 
	          FROM PRD_WO_CNC_UPC UPC
	          WHERE UPC.MEMO_ID=@CKEYFIELDVAL1
	          GROUP BY UPC.REF_ROW_ID
	         ) B ON A.ROW_ID=B.REF_ROW_ID
	         WHERE A.MEMO_ID=@CKEYFIELDVAL1
	         AND A.QUANTITY-ISNULL(B.QUANTITY,0)<>0
	         )
	         BEGIN
	            SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' PLEASE CHECK UNIQUE BARCODE....'
	            GOTO END_PROC
	         END
	         
	      
	     
	     
	          
	    END
	END  
	    
	    	
	GOTO END_PROC
	END
    
	
		END TRY
		BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'
		SELECT 'ERROR',@CERRORMSG	
		GOTO END_PROC
		END CATCH
	
END_PROC:

    
	IF @@TRANCOUNT>0
	BEGIN
		
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
		BEGIN
			COMMIT TRANSACTION
		END
		ELSE
			ROLLBACK
	END
	
	
		INSERT @OUTPUT ( ERRMSG, MEMO_ID)
				VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )

		SELECT * FROM @OUTPUT	

  
	
	SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPDETAILTABLE + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPDETAILTABLE
	EXEC SP_EXECUTESQL @CCMD

    SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPMASTERTABLE + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPMASTERTABLE
	EXEC SP_EXECUTESQL @CCMD
		
END
