-- PROCEDURE TO SAVE A DEBITNOTE PACKING SLIP
CREATE PROCEDURE SAVETRAN_DNPS
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				varchar(40),
	@CMEMONOPREFIX		VARCHAR(50)='',
	@CFINYEAR			VARCHAR(10)='',
	@CMACHINENAME		VARCHAR(100)='',
	@CWINDOWUSERNAME	VARCHAR(100)='',
	@CWIZAPPUSERCODE	VARCHAR(10)='0000000',
	@CMEMOID			VARCHAR(40)=''
	
)
--WITH ENCRYPTION
AS
BEGIN
	-- @NUPDATEMODE:	1- NEW DEBITNOTE PS ADDED,  USE RAJ_HO
	--					2- EDIT A GIVEN PS
	--					3- CURRENT MEMO CANCELLED, 
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),
			--@CTEMPMASTERTABLENAME	VARCHAR(100),
			--@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(4),
			@CLOCATIONID			VARCHAR(4),
			@CHODEPTID				VARCHAR(4),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@BNEGSTOCKFOUND			BIT,
			@CMSG					VARCHAR(MAX),
			@BPURLOC				BIT,
			@CPRIFIX				VARCHAR(10),
			@BPREFIXLZEROS			BIT,
			@nBillChallanMode NUMERIC(1,0),@nMode NUMERIC(1,0),
			@CDONOTCHECKSTOCK varchar(5),@BDONOTCHECKSTOCK bit,
			@CLOCID	VARCHAR(4)


	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	SET @NSTEP = 0		-- SETTTING UP ENVIRONMENT
	
	-- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
	SET @CTEMPDBNAME = ''

	SET @CMASTERTABLENAME	= 'DNPS_MST'
	SET @CDETAILTABLENAME	= 'DNPS_DET'

	--SET @CTEMPMASTERTABLENAME	= 'TEMP_'+@CMASTERTABLENAME+'_'+LTRIM(RTRIM(@NSPID))
	--SET @CTEMPDETAILTABLENAME	= 'TEMP_'+@CDETAILTABLENAME+'_'+LTRIM(RTRIM(@NSPID))

	SET @CTEMPMASTERTABLE	= 'DNPS_DNPS_MST_UPLOAD'
	SET @CTEMPDETAILTABLE	= 'DNPS_DNPS_DET_UPLOAD'
	
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'PS_ID'
	SET @CMEMONO			= 'PS_NO'
	SET @NMEMONOLEN			= 10
	SET @BPREFIXLZEROS=0

   IF EXISTS (SELECT TOP 1 'U' FROM dnps_dnps_mst_UPLOAD WHERE sp_id=@nSpId AND PS_DT>='2022-04-01')
   BEGIN

		SET @NMEMONOLEN			= LEN(@CMEMONOPREFIX)+6
		SET @BPREFIXLZEROS=0

	END
	
	if @nUpdatemode<>3
		select @CLOCID=location_code from DNPS_DNPS_MST_UPLOAD WHERE sp_id=@nSpId
	else
		select @CLOCID=location_code from DNPS_MST (NOLOCK) WHERE ps_id=@CMEMOID
	
    SET @CLOCATIONID= @CLOCID
			
	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE  CONFIG_OPTION='HO_LOCATION_ID'		

	SET @NSTEP = 5		-- GETTING DEPTID INFO FROM TEMP TABLE
	
	
	BEGIN TRANSACTION

	IF @NUPDATEMODE<>1
	BEGIN
		IF @NUPDATEMODE=2
			SELECT TOP 1 @cMemoId=ps_id FROM  dnps_dnps_mst_UPLOAD (NOLOCK) WHERE sp_id=@nSpId
		
	END
	
	BEGIN TRY

	  IF ISNULL(@CLOCATIONID,'')=''
		 BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
			GOTO END_PROC    
		 END
					
		IF OBJECT_ID('TEMPDB..#TMPPMT','U') IS NOT NULL
			DROP TABLE #TMPPMT
		
		SELECT PRODUCT_CODE INTO #TMPPMT FROM SKU WHERE 1=2

		IF OBJECT_ID('TEMPDB..#TMPXNSTK','U') IS NOT NULL
			DROP TABLE #TMPXNSTK						   
		
		SELECT PRODUCT_CODE,QUANTITY_IN_STOCK AS XN_STOCK INTO #TMPXNSTK FROM PMT01106 WHERE 1=2
		
		      set @BDONOTCHECKSTOCK=0
			
			   SELECT TOP 1 @CDONOTCHECKSTOCK =VALUE FROM USER_ROLE_DET A(NOLOCK)    
			   JOIN USERS B(NOLOCK) ON A.ROLE_ID=B.ROLE_ID    
			   WHERE USER_CODE=@CWIZAPPUSERCODE     
			   AND FORM_NAME='FRMSALE'     
			   AND FORM_OPTION='ALLOW_NEG_STOCK'      
	       
			   IF ISNULL(@CDONOTCHECKSTOCK,'')='1'    
				SET @BDONOTCHECKSTOCK = 1    
				

		IF @NUPDATEMODE IN (3)			
		BEGIN
			SET @NSTEP = 10
			
			IF ISNULL(@CMEMOID,'') = ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED .....CANNOT PROCEED'
				GOTO END_PROC  		
			END

			
			
			PRINT 'REVERING BACK STOCK'
			EXEC UPDATEPMT 
				  @CXNTYPE			= 'DNPS'  
				, @CXNNO			= @CMEMONOVAL
				, @CXNID			= @CMEMOID
				, @NREVERTFLAG		= 1
				, @NALLOWNEGSTOCK	= 1
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= @NUPDATEMODE				
				, @CCMD				= @CCMDOUTPUT OUTPUT
			
			IF @CCMDOUTPUT <> ''
			BEGIN
				PRINT @CCMDOUTPUT
				
				SET @NSTEP = 19
					
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'
				SET @BNEGSTOCKFOUND=1				
				EXEC SP_EXECUTESQL @CCMDOUTPUT
				GOTO END_PROC
			END
			
			SET @NSTEP = 22
			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE ' + @CMASTERTABLENAME + ' SET CANCELLED = 1,LAST_UPDATE=GETDATE() ' + 
						N' WHERE ' + @CKEYFIELD1 + ' = ''' + @CMEMOID + ''''
			EXEC SP_EXECUTESQL @CCMD
			
			SET @CKEYFIELDVAL1=@CMEMOID
			
			IF EXISTS (SELECT TOP 1 'U' FROM dnps_mst (NOLOCK) WHERE PS_ID=@CMEMOID AND ISNULL(GITBIN_INV_ID,'')<>'')
			begin
			    
			    select GITBIN_PS_ID,GITBIN_INV_ID INTO #TMPINV  from DNPS_MST a (nolock)
			    where a.ps_Id=@CMEMOID
			    group by GITBIN_PS_ID,GITBIN_INV_ID
			    
			    Update a set GIT_RECEIVED =1 from XNRECON_GITBIN a
			    join #TMPINV b on a.PS_ID=b.GITBIN_PS_ID and a.INV_ID =b.GITBIN_INV_ID 
			    
			    UPDATE A SET COMPLETED =0 FROM FLOOR_ST_MST A (NOLOCK)
			    JOIN #TMPINV B ON A.INV_ID=B.GITBIN_INV_ID AND A.PS_ID =B.GITBIN_PS_ID 
			    
			  
			
			end
			EXEC SP3S_upd_qty_lastupdate
			@nUpdateMode=3,
			@cXnType='DNPS',
			@cMasterTable='DNPS_mst',
			@cMemoIdCol='PS_id',
			@cMemoId=@CKEYFIELDVAL1,
			@CERRORMSG=@CERRORMSG OUTPUT
			
			
			
			GOTO END_PROC
		END
		
		
		
		IF @NUPDATEMODE IN (1,2)
		BEGIN
			
			SELECT TOP 1 @nBillChallanMode=bill_challan_mode,@nMode=ps_mode FROM DNPS_DNPS_MST_UPLOAD (NOLOCK)
			WHERE sp_id=@nSpId

			IF @nMode=1
			BEGIN
				SET @NSTEP = 44
				EXEC SP3S_VALIDATE_PRT_BILLCHALLANMODE
				 @nBillChallanMode=@nBillChallanMode,
				 @cSourceTable='DNPS_DNPS_DET_UPLOAD',
				 @cSpid=@nSpId,
				 @cErrormsg=@cErrormsg OUTPUT

				 IF ISNULL(@cErrormsg,'')<>''
				 BEGIN
					GOTO END_PROC
				 END
			 END
		END
		
		PRINT 'START NORMALIZE_FIX_PRODUCT_CODE '
		IF @NUPDATEMODE<>3
		BEGIN
		   
		   
			SET @NSTEP = 46		-- GENERATING NEW KEY
			
		  EXEC SP3S_NORMALIZE_FIX_PRODUCT_CODE 'DNPS',@NSPID,@NUPDATEMODE,
		  @CTEMPDETAILTABLE,@CMEMOID,@CERRORMSG OUTPUT,@CTEMPMASTERTABLE,@CLOCID,@CWIZAPPUSERCODE=@CWIZAPPUSERCODE
		  IF ISNULL(@CERRORMSG,'')<>''
		  BEGIN
			   SET @CERRORMSG='ERROR IN NORMALIZATION'+@CERRORMSG
			   GOTO END_PROC
		  END
		END  
	
		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	
			-- GENERATING NEW JOB ORDER NO		
			SET @NSAVETRANLOOP=0
			WHILE @NSAVETRANLOOP=0
			BEGIN
			
				SET @NSTEP = 48		-- GENERATING NEW KEY
				
				EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX,@BPREFIXLZEROS,
								@CFINYEAR,0, @CMEMONOVAL OUTPUT   
			
				SET @NSTEP = 50
				
				PRINT @CMEMONOVAL
				SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
										WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
										AND FIN_YEAR = '''+@CFINYEAR+''' )
								SET @NLOOPOUTPUT=0
							ELSE
								SET @NLOOPOUTPUT=1'
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
			END

			IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
				  GOTO END_PROC  		
			END

			SET @NSTEP = 55		-- GENERATING NEW ID
			-- GENERATING NEW JOB ORDER ID
			SET @CKEYFIELDVAL1 = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
			
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
				  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
				  GOTO END_PROC
			END

			SET @NSTEP = 60		-- UPDATING NEW ID INTO TEMP TABLES

			-- UPDATING NEWLY GENERATED JOB ORDER NO AND JOB ORDER ID IN PIM AND PID TEMP TABLES
			SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
						@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' where sp_id='''+LTRIM(RTRIM(@NSPID))+''' '
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
		
			SET @NSTEP = 65
			
			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' where  sp_id='''+LTRIM(RTRIM(@NSPID))+''''
			
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 70
			
			-- GETTING DEPT_ID FROM TEMP MASTER TABLE
			SET @CCMD = 'SELECT @CMEMODEPTID = LEFT(PS_NO,2) FROM ' + @CTEMPMASTERTABLE +' where  sp_id='''+LTRIM(RTRIM(@NSPID))+''''
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT', 
							   @CMEMODEPTID OUTPUT
			IF (@CMEMODEPTID IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'
				  GOTO END_PROC  		
			END
		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
		
			SET @NSTEP = 75		-- GETTING ID INFO FROM TEMP TABLE

			-- GETTING DEPT_ID FROM TEMP MASTER TABLE
			SET @CCMD = 'SELECT @CMEMODEPTID = LEFT(PS_NO,2) FROM ' + @CMASTERTABLENAME 
			
			EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT', 
							   @CMEMODEPTID OUTPUT
							   
			IF (@CMEMODEPTID IS NULL)
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'
				  GOTO END_PROC  		
			END

			SET @NSTEP = 80
			
			-- GETTING MEMO ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ' + @CKEYFIELD1 + ', @CMEMONOVAL = ' + @CMEMONO + ' FROM '
						+ (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME + ' WHERE PS_ID = ''' + @CMEMOID + '''' 
								ELSE @CTEMPMASTERTABLE +' where sp_id='''+LTRIM(RTRIM(@NSPID))+'''' END )
			
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
							   
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  GOTO END_PROC  		
			END
			
			SET @NSTEP = 85		-- STORING OLD STATUS OF BARCODES 
		
			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET LAST_UPDATE=GETDATE() '
			EXEC SP_EXECUTESQL @CCMD
			
			-- ENTRY IN AUDIT TRAIL (ONLY WHEN USER EXPLICITLY CLICKED ON EDIT BUTTON)
			SET @NSTEP = 90		-- AUDIT TRIAL ENTRY

			EXEC AUDITLOGENTRY
				  @CXNTYPE		= 'DNPS'
				, @CXNID		= @CKEYFIELDVAL1
				, @CDEPTID		= @CMEMODEPTID
				, @CCOMPUTERNAME= @CMACHINENAME
				, @CWINUSERNAME = @CWINDOWUSERNAME
				, @CWIZUSERCODE = @CWIZAPPUSERCODE

			-- REVERTING BACK THE STOCK OF PMT W.R.T CURRENT ISSUE
			SET @NSTEP = 95		-- REVERTING STOCK

			EXEC UPDATEPMT 
				  @CXNTYPE			= 'DNPS'  
				, @CXNNO			= @CMEMONOVAL
				, @CXNID			= @CKEYFIELDVAL1
				, @NREVERTFLAG		= 1
				, @NALLOWNEGSTOCK	= @BDONOTCHECKSTOCK
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= @NUPDATEMODE				
				, @CCMD				= @CCMDOUTPUT OUTPUT
			
			IF @CCMDOUTPUT <> ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'
				SET @BNEGSTOCKFOUND=1					
				EXEC SP_EXECUTESQL @CCMDOUTPUT
				GOTO END_PROC
			END	
		END					-- END OF EDITMODE
		--EXEC SP_VALIDATEXN_BEFORESAVE 'DNPS',@NSPID,'0000000',@NUPDATEMODE,@CCMDOUTPUT OUTPUT,@BNEGSTOCKFOUND OUTPUT
		--IF ISNULL(@CCMDOUTPUT,'') <> ''
		--BEGIN
		--	SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION ON TEMP DATA FAILED : ' + @CCMDOUTPUT + '...'
		--	GOTO END_PROC
		--END

		SET @NSTEP = 98
		
		-- RECHECKING IF ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END

		SET @NSTEP = 100		-- UPDATING MASTER TABLE

		SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET EDT_USER_CODE=(CASE WHEN ISNULL(EDT_USER_CODE,'''')=''''
					 THEN ''0000000'' ELSE EDT_USER_CODE END) where  sp_id='''+LTRIM(RTRIM(@NSPID))+''''
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD

		IF @NUPDATEMODE IN (1,2)
		BEGIN
			SET @NSTEP = 102
			UPDATE a SET total_quantity=b.total_quantity FROM DNPS_DNPS_MST_UPLOAD A WITH (ROWLOCK) 
			JOIN (SELECT sp_id,sum(quantity) as total_quantity FROM DNPS_DNPS_DET_UPLOAD b (NOLOCK)  
				  WHERE sp_id=@nSpId GROUP BY sp_id) b ON a.sp_id=b.sp_id

			EXEC SP3S_upd_qty_lastupdate
			@nUpdateMode=@NUPDATEMODE,
			@cXnType='DNPS',
			@nSpId=@nSpId,
			@cMasterTable='DNPS_MST',
			@cMemoIdCol='PS_ID',
			@cMemoId=@CKEYFIELDVAL1,
			@cXnDtCol='ps_dt',
			@CERRORMSG=@CERRORMSG OUTPUT

			IF ISNULL(@CERRORMSG,'')<>''
		       GOTO END_PROC

		END
		
		SET @NSTEP = 105
		
		declare @CWHERECLAUSE varchar(100)
	    SET @CWHERECLAUSE = ' SP_ID='''+LTRIM(RTRIM(@NSPID))+''''
		    
		EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLE
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			,@BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@CWHERECLAUSE

		-- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE
		SET @NSTEP = 110		-- UPDATING TRANSACTION TABLE

		-- UPDATING ROW_ID IN TEMP TABLES
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE LEFT(ROW_ID,5) = ''LATER'' and sp_id='''+LTRIM(RTRIM(@NSPID))+''''
		EXEC SP_EXECUTESQL @CCMD

		-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
		SET @NSTEP = 114		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES

		SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + ' 
					WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
					AND ROW_ID IN 
					(
						SELECT A.ROW_ID 
						FROM ' + @CDETAILTABLENAME + ' A 
						LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B ON A.ROW_ID = B.ROW_ID and b.sp_id='''+LTRIM(RTRIM(@NSPID))+'''
						WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
						AND   B.ROW_ID IS NULL
					)'
		EXEC SP_EXECUTESQL @CCMD

		SET @NSTEP = 120		-- UPDATING TRANSACTION TABLE

		-- INSERTING/UPDATING THE ENTRIES IN ACTUAL TABLE FROM TEMPTABLE
		SET @NSTEP = 125		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

		EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLE
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME
			, @CKEYFIELD1	= 'ROW_ID'
			,@BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@CWHERECLAUSE

	LBLUPDATESTOCK:
		-- UPDATING STOCK OF PMT W.R.T. CURRENT MEMO
		SET @NSTEP = 130		-- UPDATING PMT TABLE

		EXEC UPDATEPMT 
			  @CXNTYPE			= 'DNPS'  
			, @CXNNO			= @CMEMONOVAL
			, @CXNID			= @CKEYFIELDVAL1
			, @NREVERTFLAG		= 0
			, @NALLOWNEGSTOCK	= @BDONOTCHECKSTOCK
			, @NCHKDELBARCODES	= 1
			, @NUPDATEMODE		= @NUPDATEMODE				
			, @CCMD				= @CCMDOUTPUT OUTPUT
		
		IF @CCMDOUTPUT <> ''
		BEGIN
			PRINT @CCMDOUTPUT
			
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'
			SET @BNEGSTOCKFOUND=1				
			EXEC SP_EXECUTESQL @CCMDOUTPUT
			GOTO END_PROC
		END

				
		--EXEC UPDATERFNET 'DNPS',@CKEYFIELDVAL1
		
		-- VALIDATING ENTRIES
		
		
		SET @NSTEP = 140	
		DECLARE @STR VARCHAR(MAX),@STR1 VARCHAR(MAX)
	    SET @STR=NULL
	    SET @STR1=NULL

		 SELECT  @STR1=PS_ID,@STR =  COALESCE(@STR +  '/ ', ' ' ) + (''+C.UOM_NAME+': '+CAST(SUM(QUANTITY) AS VARCHAR) +' ')  
		 FROM DNPS_DET A
		 JOIN SKU S ON S.PRODUCT_CODE=A.PRODUCT_CODE
		 JOIN ARTICLE B ON S.ARTICLE_CODE=B.ARTICLE_CODE
		 JOIN UOM C ON C.UOM_CODE=B.UOM_CODE
		 WHERE PS_ID=@CKEYFIELDVAL1 GROUP BY C.UOM_NAME ,PS_ID
		
		UPDATE DNPS_MST SET TOTAL_QUANTITY_STR =@STR WHERE PS_ID =@STR1
		 
		SET @NSTEP = 175		-- VALIDATING ENTRIES

		EXEC VALIDATEXN
			  @CXNTYPE	= 'DNPS'  
			, @CXNID	= @CKEYFIELDVAL1
			, @NUPDATEMODE = @NUPDATEMODE			
			, @CCMD		= @CCMDOUTPUT OUTPUT

		IF @CCMDOUTPUT <> ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION FAILED : ' + @CCMDOUTPUT + '...'
			GOTO END_PROC
		END


		IF @nMode=1
		BEGIN
			SET @NSTEP = 178		-- VALIDATING ENTRIES
			EXEC SP3S_VALIDATE_DNps_CDPCT
			@cMemoId=@CKEYFIELDVAL1,
			@cErrormsg=@cErrormsg OUTPUT 

			IF ISNULL(@cErrormsg,'')<>''
			GOTO END_PROC
		END	

	IF EXISTS(SELECT TOP 1 A.ps_id  FROM DNPS_DET A (nolock) JOIN DNPS_MST B (nolock) ON  A.ps_id=B.ps_id
			  JOIN SKU (nolock) ON SKU.PRODUCT_CODE=A.PRODUCT_CODE
			  WHERE a.PS_ID=@CKEYFIELDVAL1 and  (ISNULL(B.MEMO_TYPE,0)<>2 AND ISNULL(SKU.ER_FLAG,0)=2) OR (ISNULL(B.MEMO_TYPE,0)=2 AND ISNULL(SKU.ER_FLAG,0)<>2))
	BEGIN
		
		declare @CERRORPC varchar(50)
		
		SELECT TOP 1 @CERRORPC=A.PRODUCT_CODE FROM DNPS_DET A (nolock) JOIN DNPS_MST B (nolock) ON  A.ps_id=B.ps_id
 	    JOIN SKU (nolock) ON SKU.PRODUCT_CODE=A.PRODUCT_CODE
		WHERE a. PS_ID=@CKEYFIELDVAL1 and  (ISNULL(B.MEMO_TYPE,0)<>2 AND ISNULL(SKU.ER_FLAG,0)=2) OR (ISNULL(B.MEMO_TYPE,0)=2 AND ISNULL(SKU.ER_FLAG,0)<>2)
			  
		SET @CERRORMSG='MEMO TYPE OF ITEM CODE :'+@CERRORPC+' DOES NOT MATCH WITH THAT OF MEMO....PLEASE CHECK'
			GOTO END_PROC
	END



		set @NSTEP=180
		EXEC SP3S_UPDATE_PMTLOCS_REBUILD_STARTDATE
		@cXnType='DNPS',
		@cMemoId=@CKEYFIELDVAL1 
		
		-- AFTER SUCCESSFUL SAVING , JUST DROP THE TEMP TABLES CREATED BY APPLICATION
		GOTO END_PROC
		
	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'
		GOTO END_PROC
	END CATCH
	
END_PROC:
     
    UPDATE dnps_mst SET last_update=getdate() WHERE ps_id=@CKEYFIELDVAL1

	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
		BEGIN
			commit TRANSACTION
			DELETE A  FROM XNTYPE_CHECKSUM_MST A  WITH (ROWLOCK)  WHERE SP_ID=@NSPID
		     UPDATE dnps_mst SET HO_SYNCH_LAST_UPDATE='' WHERE ps_id=@CKEYFIELDVAL1
		END	
		ELSE
		BEGIN
			ROLLBACK
			DELETE A  FROM XNTYPE_CHECKSUM_MST A  WITH (ROWLOCK)  WHERE SP_ID=@NSPID
		END
	END
	
	


	IF ISNULL(@BNEGSTOCKFOUND,0)=0
	BEGIN
		INSERT @OUTPUT (ERRMSG,MEMO_ID)
				VALUES (ISNULL(@CERRORMSG,''),ISNULL(@CKEYFIELDVAL1,''))
		SELECT * FROM @OUTPUT	
	END	
	
	
	
	DELETE FROM DNPS_DNPS_MST_UPLOAD WHERE SP_ID =LTRIM(RTRIM(@NSPID))
	DELETE FROM DNPS_DNPS_det_UPLOAD WHERE SP_ID =LTRIM(RTRIM(@NSPID))
		
END						
------------------------------------------------------ END OF PROCEDURE SAVETRAN_DNPS