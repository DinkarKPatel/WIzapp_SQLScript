CREATE PROCEDURE SP3S_SYNCH_MBO_SLS_DATA_OPC
@CLOCID VARCHAR(10),
@BGENERRMSG BIT=0
AS
BEGIN
	DECLARE @DSEARCHXNDT DATETIME,@CSOURCEDB VARCHAR(200),@CTEMPTABLENAME VARCHAR(200),@CTEMPTABLE VARCHAR(200),
	@CCMD NVARCHAR(MAX),@CSTEP VARCHAR(10),@CERRMSG VARCHAR(MAX),@CUSER_CODE CHAR(7),@DMEMODT DATETIME
     , @CFILTEROPC NVARCHAR(MAX),@ONLINE_PRODUCT_CODE VARCHAR(500),@ONLINE_QTY NUMERIC(10,3)
    ,@ROW_ID VARCHAR(MAX),@BIN VARCHAR(3),@BILL_NO	VARCHAR(MAX)

BEGIN TRY
	SET @CUSER_CODE = '0000000'
	
	IF OBJECT_ID('TEMPDB..#SLSIMPORT','U') IS NOT NULL
		DROP TABLE #SLSIMPORT
		
   IF OBJECT_ID('TEMPDB..#SLSTMP','U') IS NOT NULL
		DROP TABLE #SLSTMP
		

	SET @CSTEP=10
	
	CREATE TABLE #SLSIMPORT
	(
		SR_NO			NUMERIC(18)
	   ,BILL_NO			VARCHAR(MAX)
	   ,CM_DT			VARCHAR(MAX)
	   ,DEPT_ID			VARCHAR(MAX)
	   ,PRODUCT_CODE	VARCHAR(MAX)
	   ,QUANTITY		VARCHAR(MAX)
	   ,AMOUNT			VARCHAR(MAX)
	   ,CANCELLED		VARCHAR(MAX)
	   ,MRP             VARCHAR(MAX)
	   ,DISCOUNT_AMT    VARCHAR(MAX)
	   ,ERROR_MESSAGE   VARCHAR(MAX)
	   ,FIN_YEAR		VARCHAR(10)
	   ,CASH            NUMERIC(12,2)
       ,CC_AMOUNT       NUMERIC(12,2)
       ,CC_NAME         VARCHAR(MAX)
       ,BIN_ID          VARCHAR(3)
       
	)
	
	CREATE TABLE #SLSIMPORTOPC
	(
		SR_NO			NUMERIC(18)
	   ,BILL_NO			VARCHAR(MAX)
	   ,CM_DT			VARCHAR(MAX)
	   ,DEPT_ID			VARCHAR(MAX)
	   ,PRODUCT_CODE	VARCHAR(MAX)
	   ,QUANTITY		VARCHAR(MAX)
	   ,AMOUNT			VARCHAR(MAX)
	   ,CANCELLED		VARCHAR(MAX)
	   ,MRP             VARCHAR(MAX)
	   ,DISCOUNT_AMT    VARCHAR(MAX)
	   ,ERROR_MESSAGE   VARCHAR(MAX)
	   ,FIN_YEAR		VARCHAR(10)
	   ,CASH            NUMERIC(12,2)
       ,CC_AMOUNT       NUMERIC(12,2)
       ,CC_NAME         VARCHAR(MAX)
       ,BIN_ID          VARCHAR(3)
       ,ROW_ID          VARCHAR(50)
       ,OPC             VARCHAR(MAX)
	)
	
	SELECT @BIN= VALUE FROM CONFIG WHERE CONFIG_OPTION='SALEBIN'
	
	SELECT * INTO #SLSTMP FROM SLS_MBODATA

	
	
	
    --SELECT * FROM #SLSIMPORTOPC
	
	SET @CSTEP=241
	WHILE EXISTS (SELECT TOP 1 'U' FROM #SLSTMP)
	BEGIN
	
	
	SET @CCMD=N'SELECT  0 AS SR_NO,MEMO_NO AS BILL_NO,MEMO_DT AS CM_DT,A.DEPT_ID,B.PRODUCT_CODE AS PRODUCT_CODE,QUANTITY,
	            NET AS AMOUNT,CANCELLED,'''' AS ERROR_MESSAGE,A.MRP,A.DISCOUNT_AMOUNT AS DISCOUNT_AMT,
	            CASH,CC_AMOUNT,CC_NAME,A.BIN_ID,A.PRODUCT_CODE
				FROM #SLSTMP A 
				 JOIN SKU B ON A.PRODUCT_CODE=B.ONLINE_PRODUCT_CODE 
			     JOIN PMT01106  PMT ON PMT.PRODUCT_CODE=B.PRODUCT_CODE AND PMT.BIN_ID='''+ @BIN +'''
				WHERE A.DEPT_ID='''+@CLOCID+''' AND A.BIN_ID='''+ @BIN +''' AND PMT.QUANTITY_IN_STOCK > 0'
	PRINT @CCMD

	SET @CSTEP=80
	INSERT #SLSIMPORTOPC (SR_NO,BILL_NO,CM_DT,DEPT_ID,PRODUCT_CODE,QUANTITY,AMOUNT,CANCELLED,ERROR_MESSAGE
					  ,MRP,DISCOUNT_AMT,CASH,CC_AMOUNT,CC_NAME,BIN_ID,OPC)  
	EXEC SP_EXECUTESQL @CCMD

	SET @CSTEP=240
	UPDATE #SLSIMPORTOPC SET FIN_YEAR='01'+DBO.FN_GETFINYEAR(CM_DT)
	
	
		
		 SELECT TOP 1 @ONLINE_PRODUCT_CODE=OPC,@ONLINE_QTY=QUANTITY,@BILL_NO=BILL_NO FROM #SLSIMPORTOPC
		 ;WITH CTE AS
		 (
		 SELECT ROW_NUMBER()OVER(ORDER BY PRODUCT_CODE) AS SRNO,* FROM #SLSIMPORTOPC 
		 WHERE OPC=@ONLINE_PRODUCT_CODE AND BILL_NO=@BILL_NO 
		 )
		 DELETE FROM CTE WHERE  SRNO > @ONLINE_QTY AND OPC=@ONLINE_PRODUCT_CODE AND BILL_NO= @BILL_NO
		 
		SET @CSTEP=242 
		 SET @CCMD=N'SELECT 0 AS SR_NO, BILL_NO, CM_DT,DEPT_ID,PRODUCT_CODE,1 AS QUANTITY,
					 AMOUNT,CANCELLED,'''' AS ERROR_MESSAGE,MRP, DISCOUNT_AMT,CASH,CC_AMOUNT,CC_NAME,BIN_ID,FIN_YEAR
					 FROM #SLSIMPORTOPC A
					 WHERE OPC='''+@ONLINE_PRODUCT_CODE+''' AND BILL_NO='''+@BILL_NO+''' '
		PRINT @CCMD

		SET @CSTEP=380
		INSERT #SLSIMPORT (SR_NO,BILL_NO,CM_DT,DEPT_ID,PRODUCT_CODE,QUANTITY,AMOUNT,CANCELLED,ERROR_MESSAGE
						  ,MRP,DISCOUNT_AMT,CASH,CC_AMOUNT,CC_NAME,BIN_ID,FIN_YEAR)  
		EXEC SP_EXECUTESQL @CCMD
		
		UPDATE P  SET QUANTITY_IN_STOCK=QUANTITY_IN_STOCK-1 FROM PMT01106 P JOIN #SLSIMPORTOPC SP 
		ON P.PRODUCT_CODE=SP.PRODUCT_CODE WHERE OPC=@ONLINE_PRODUCT_CODE AND BILL_NO=@BILL_NO
		
		DELETE FROM #SLSIMPORTOPC 
		DELETE FROM #SLSTMP WHERE PRODUCT_CODE=@ONLINE_PRODUCT_CODE AND MEMO_NO=@BILL_NO
		 
	END
	
	
	SET @CSTEP=255

	BEGIN TRANSACTION
	

	

	SET @CSTEP=280
	--GETTING LIST OF EXISTING BILLS.
	IF OBJECT_ID('TEMPDB..#EXISTINGBILLS','U') IS NOT NULL
		DROP TABLE #EXISTINGBILLS

	SET @CSTEP=290	
	IF OBJECT_ID('TEMPDB..#NEWBILLS','U') IS NOT NULL
		DROP TABLE #NEWBILLS
    
    
    SET @CSTEP=92
	
	
	SELECT TOP 1  @CERRMSG=BILL_NO+'DIFFERENCE IN CARD AMOUNT AND NET AMOUNT'   FROM 
	(
	 SELECT A.BILL_NO,SUM(CONVERT(NUMERIC(18,2),AMOUNT)) AS AMOUNT,
	 SUM(CONVERT(NUMERIC(18,2),CASH)) AS CASH,
	 SUM(CONVERT(NUMERIC(18,2),CC_AMOUNT)) AS CC_AMOUNT
	 FROM #SLSIMPORT A
	 GROUP BY A.BILL_NO
	 ) A
	WHERE A.AMOUNT<>CASE WHEN A.CASH+A.CC_AMOUNT=0 THEN A.AMOUNT ELSE  A.CASH+A.CC_AMOUNT END

	--UPDATE B SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+'DIFFERENCE IN CARD AMOUNT AND NET AMOUNT' 
	--FROM 
	--(
	-- SELECT A.BILL_NO,SUM(CONVERT(NUMERIC(18,2),AMOUNT)) AS AMOUNT,
	-- SUM(CONVERT(NUMERIC(18,2),CASH)) AS CASH,
	-- SUM(CONVERT(NUMERIC(18,2),CC_AMOUNT)) AS CC_AMOUNT
	-- FROM #SLSIMPORT A
	-- GROUP BY A.BILL_NO
	-- ) A
 --   JOIN #SLSIMPORT B ON A.	BILL_NO=B.BILL_NO
 --   WHERE A.AMOUNT<>CASE WHEN A.CASH+A.CC_AMOUNT=0 THEN A.AMOUNT ELSE  A.CASH+A.CC_AMOUNT END


	/**INVALID CARD NAME.**/ 
	SET @CSTEP=94
	UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG
	FROM #SLSIMPORT A
	JOIN 
	(
	  SELECT A.SR_NO,'INVALID CARD NAME.' AS MSG
	  FROM #SLSIMPORT A
	  LEFT JOIN PAYMODE_MST B ON A.CC_NAME =B.PAYMODE_NAME 
	  WHERE CC_AMOUNT<>0 AND  B.PAYMODE_NAME  IS NULL
	)B ON A.SR_NO=B.SR_NO
---

    SET @CSTEP=96
	UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG
	FROM #SLSIMPORT A
	JOIN 
	(
	  SELECT A.SR_NO,A.PRODUCT_CODE+'BARCODE NOT FOUND.' AS MSG
	  FROM #SLSIMPORT A
	  LEFT JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE WHERE DEPT_ID=@CLOCID
	  AND B.PRODUCT_CODE IS NULL
	)B ON A.SR_NO=B.SR_NO


        IF ISNULL(@CERRMSG,'')=''
		SELECT TOP 1 @CERRMSG=ERROR_MESSAGE FROM #SLSIMPORT WHERE ISNULL(ERROR_MESSAGE,'')<>''
		
		IF ISNULL(@CERRMSG,'')<>''
        GOTO END_PROC
	SET @CSTEP=300
	--LIST OF EXISTING BILLS
	SELECT B.CM_ID
		  ,B.CM_NO	
		  ,A.BILL_NO
		  ,CONVERT(DATETIME,A.CM_DT) AS CM_DT
		  ,A.DEPT_ID
		  ,A.PRODUCT_CODE
		  ,CONVERT(NUMERIC(10,3),QUANTITY) AS QUANTITY
		  ,CONVERT(NUMERIC(18,2),A.AMOUNT) AS AMOUNT
		  ,CONVERT(BIT,(CASE WHEN A.CANCELLED IN ('T','Y','1') THEN 1 ELSE 0 END)) AS CANCELLED
		  ,A.FIN_YEAR
		  ,A.CASH
	      ,A.CC_NAME
	      ,A.CC_AMOUNT
	      ,A.MRP
	      ,A.DISCOUNT_AMT  
	INTO #EXISTINGBILLS
	FROM #SLSIMPORT A
	JOIN CMM01106 B(NOLOCK) ON A.DEPT_ID+'-'+A.BILL_NO=B.REF_NO AND A.FIN_YEAR=B.FIN_YEAR
	

	SET @CSTEP=310
	--LIST OF NEW BILLS
	SELECT CONVERT(VARCHAR(50),'') AS CM_ID,CONVERT(VARCHAR(50),'') AS CM_NO
		  ,A.BILL_NO
		  ,CONVERT(DATETIME,A.CM_DT) AS CM_DT
		  ,A.DEPT_ID
		  ,A.PRODUCT_CODE
		  ,CONVERT(NUMERIC(10,3),QUANTITY) AS QUANTITY
		  ,CONVERT(NUMERIC(18,2),A.AMOUNT) AS AMOUNT
		  ,CONVERT(BIT,(CASE WHEN A.CANCELLED IN ('T','Y','1') THEN 1 ELSE 0 END)) AS CANCELLED
		  ,A.FIN_YEAR
		  ,A.CASH
	      ,A.CC_NAME
	      ,A.CC_AMOUNT 
	      ,A.MRP
	      ,A.DISCOUNT_AMT 
	INTO #NEWBILLS
	FROM #SLSIMPORT A
	LEFT JOIN CMM01106 B(NOLOCK) ON A.DEPT_ID+'-'+A.BILL_NO=B.REF_NO AND A.FIN_YEAR=B.FIN_YEAR
	WHERE B.CM_ID IS NULL
	

	SET @CSTEP=410
	--STOCK IS NOT FOUND NEGATIVE, SO LETS PROCEED FOR CREATING ENTRY IN CMM01106,CMD01106 AND PAYMODE_XN_DET
	DELETE PAYMODE_XN_DET WHERE XN_TYPE='SLS' AND MEMO_ID IN 
	(SELECT DISTINCT CM_ID FROM #EXISTINGBILLS)

	SET @CSTEP=420
	DELETE CMD01106 WHERE CM_ID IN 
	(SELECT DISTINCT CM_ID FROM #EXISTINGBILLS)

	SET @CSTEP=430
	DELETE CMM01106 WHERE CM_ID IN 
	(SELECT DISTINCT CM_ID FROM #EXISTINGBILLS)

	SET @CSTEP=440
	DECLARE @CDEPT_ID VARCHAR(10),@CBILL_NO VARCHAR(40),@CFINYEAR VARCHAR(10)
		   ,@CMEMOPREFIX VARCHAR(10),@NMEMONOLEN NUMERIC(3),@CMEMONOLEN VARCHAR(5)	
		   ,@CMEMONOVAL	VARCHAR(50),@CKEYSTABLE VARCHAR(100)

	SET @CSTEP=450
	SET @NMEMONOLEN=12	

	SET @CSTEP=470

	SET @CKEYSTABLE='KEYS_CMM'

	SET @CSTEP=480
	
	
	---GENERATING CM_NO AND CM_ID FOR NEW_MEMO
	WHILE EXISTS(SELECT TOP 1 'U' FROM #NEWBILLS WHERE ISNULL(CM_NO,'')='')
	BEGIN
		
		SET @CDEPT_ID=''
		SET @CBILL_NO=''
		SET @CFINYEAR=''
		SET @CMEMONOVAL=''	
		SET @CSTEP=490	
		
		SELECT TOP 1 @CDEPT_ID=A.DEPT_ID,@CBILL_NO=BILL_NO,@CFINYEAR=FIN_YEAR,@DMEMODT=A.CM_DT
		FROM #NEWBILLS A WHERE ISNULL(CM_NO,'')='' ORDER BY CM_DT,BILL_NO ASC
		
		SET @CMEMOPREFIX=LTRIM(RTRIM(@CDEPT_ID))+RIGHT(CONVERT(VARCHAR,@DMEMODT,112),4)+'-'
		
	LBLGENKEY:
		
		
		SET @CSTEP=500
		EXEC GETNEXTKEY_OPT 'CMM01106', 'CM_NO', @NMEMONOLEN, @CMEMOPREFIX, 1,
									@CFINYEAR,0, @CKEYSTABLE,@CMEMONOVAL OUTPUT
									
		
		SET @CSTEP=510
		IF EXISTS(SELECT TOP 1 'U' FROM CMM01106 WHERE CM_NO=@CMEMONOVAL AND FIN_YEAR=@CFINYEAR)
			GOTO LBLGENKEY
		
		SET @CSTEP=520
		IF ISNULL(@CMEMONOVAL,'')=''
		BEGIN
			SET @CERRMSG='ERROR GENERATING CM NO.'
			GOTO END_PROC
		END
		
		SET @CSTEP=530	
		
		
		UPDATE #NEWBILLS SET CM_NO=@CMEMONOVAL 
		WHERE DEPT_ID=@CDEPT_ID AND BILL_NO=@CBILL_NO AND FIN_YEAR=@CFINYEAR AND CM_DT=@DMEMODT
				
	END

	SET @CSTEP=540
	UPDATE #NEWBILLS SET CM_ID=LTRIM(RTRIM(DEPT_ID))+FIN_YEAR+REPLICATE('0',15-LEN(LTRIM(RTRIM(CM_NO))))+LTRIM(RTRIM(CM_NO))

	SET @CSTEP=550
	IF EXISTS(SELECT TOP 1 'U' FROM #NEWBILLS WHERE ISNULL(CM_ID,'')='' OR ISNULL(CM_NO,'')='')
	BEGIN
		SET @CERRMSG='ERROR GENERATING CM NO.'
		GOTO END_PROC
	END


	SET @CSTEP=560
	INSERT CMM01106	( REMARKS, SENT_FOR_RECON, PARTY_TYPE, AC_CODE, MANUAL_DISCOUNT, MANUAL_ROUNDOFF
					, BIN_ID, PATCHUP_RUN, SUBTOTAL_R, PASSPORT_NO, TICKET_NO, FLIGHT_NO, MRP_WSP
					, MANUAL_BILL, FC_RATE, POSTEDINAC, CM_NO, CM_DT, CM_MODE, SUBTOTAL, DT_CODE
					, DISCOUNT_PERCENTAGE, DISCOUNT_AMOUNT, NET_AMOUNT, CUSTOMER_CODE, CANCELLED, USER_CODE
					, LAST_UPDATE, EXEMPTED, COMPUTER_NAME, SENT_TO_HO, CM_TIME, CM_ID, REF_CM_ID, FIN_YEAR
					, ATD_CHARGES, COPIES_PTD, ROUND_OFF, MEMO_TYPE, PAY_MODE, SMS_SENT, AUTOENTRY, CASH_TENDERED
					, PAYBACK, ECOUPON_ID, CAMPAIGN_GC_OTP, SALESSETUPINEFFECT, EDT_USER_CODE, GV_AMOUNT, REF_NO
					, SENT_FOR_GR )  
	SELECT DISTINCT 'IMPORTED SALE.' AS REMARKS,0 AS SENT_FOR_RECON,1 AS PARTY_TYPE,'0000000000' AS AC_CODE
			,0 AS MANUAL_DISCOUNT,0 AS MANUAL_ROUNDOFF,'MYN' AS BIN_ID,0 AS PATCHUP_RUN
			,SUM(CASE WHEN AMOUNT<0 THEN AMOUNT ELSE 0 END) AS SUBTOTAL_R,'' AS PASSPORT_NO,'' AS TICKET_NO,'' AS FLIGHT_NO,
			0 AS MRP_WSP,0 AS MANUAL_BILL,0 AS FC_RATE
			,0 AS POSTEDINAC, CM_NO
			,CM_DT,1 AS CM_MODE
			,SUM(CASE WHEN AMOUNT>0 THEN AMOUNT ELSE 0 END) AS SUBTOTAL
			,'0000000' AS DT_CODE,ABS(CONVERT(NUMERIC(14,3),((DISCOUNT_AMT/SUM(CASE WHEN AMOUNT>0 THEN AMOUNT ELSE 0 END))*100)))AS DISCOUNT_PERCENTAGE,DISCOUNT_AMT AS DISCOUNT_AMOUNT
			,ROUND(SUM(AMOUNT),0) AS NET_AMOUNT
			,'000000000000' AS CUSTOMER_CODE, CANCELLED,'0000000' AS USER_CODE,GETDATE() AS LAST_UPDATE
			,0 AS EXEMPTED,'' AS COMPUTER_NAME,0 AS SENT_TO_HO,GETDATE() AS CM_TIME, CM_ID,'' AS REF_CM_ID
			, FIN_YEAR,0 AS ATD_CHARGES,0 AS COPIES_PTD,(ROUND(SUM(AMOUNT),0)-SUM(AMOUNT)) AS ROUND_OFF,1 AS MEMO_TYPE,1 AS PAY_MODE,0 AS SMS_SENT
			,0 AS AUTOENTRY,0 AS CASH_TENDERED
			,0 AS PAYBACK,'' AS ECOUPON_ID,'' AS CAMPAIGN_GC_OTP
			,0 AS SALESSETUPINEFFECT,@CUSER_CODE AS EDT_USER_CODE,0 AS GV_AMOUNT
			,DEPT_ID+'-'+BILL_NO AS REF_NO,0 AS SENT_FOR_GR 
	FROM #EXISTINGBILLS
	GROUP BY DEPT_ID,CM_NO,CM_DT,CANCELLED,CM_ID,FIN_YEAR,BILL_NO,DISCOUNT_AMT
	UNION 
	SELECT DISTINCT 'IMPORTED SALE.' AS REMARKS,0 AS SENT_FOR_RECON,1 AS PARTY_TYPE,'0000000000' AS AC_CODE
			,0 AS MANUAL_DISCOUNT,0 AS MANUAL_ROUNDOFF,'MYN' AS BIN_ID,0 AS PATCHUP_RUN
			,SUM(CASE WHEN AMOUNT<0 THEN AMOUNT ELSE 0 END) AS SUBTOTAL_R,'' AS PASSPORT_NO,'' AS TICKET_NO,'' AS FLIGHT_NO,0 AS MRP_WSP,0 AS MANUAL_BILL,0 AS FC_RATE
			,0 AS POSTEDINAC, CM_NO
			,CM_DT,1 AS CM_MODE
			,SUM(CASE WHEN AMOUNT>0 THEN AMOUNT ELSE 0 END) AS SUBTOTAL
			,'0000000' AS DT_CODE,ABS(CONVERT(NUMERIC(14,3),((DISCOUNT_AMT/SUM(CASE WHEN AMOUNT>0 THEN AMOUNT ELSE 0 END))*100)))AS DISCOUNT_PERCENTAGE,DISCOUNT_AMT AS DISCOUNT_AMOUNT
			,ROUND(SUM(AMOUNT),0) AS NET_AMOUNT
			,'000000000000' AS CUSTOMER_CODE, CANCELLED,@CUSER_CODE AS USER_CODE,GETDATE() AS LAST_UPDATE
			,0 AS EXEMPTED,'' AS COMPUTER_NAME,0 AS SENT_TO_HO,GETDATE() AS CM_TIME, CM_ID,'' AS REF_CM_ID
			, FIN_YEAR,0 AS ATD_CHARGES,0 AS COPIES_PTD,(ROUND(SUM(AMOUNT),0)-SUM(AMOUNT)) AS ROUND_OFF,1 AS MEMO_TYPE,1 AS PAY_MODE,0 AS SMS_SENT
			,0 AS AUTOENTRY,0 AS CASH_TENDERED
			,0 AS PAYBACK,'' AS ECOUPON_ID,'' AS CAMPAIGN_GC_OTP
			,0 AS SALESSETUPINEFFECT,@CUSER_CODE AS EDT_USER_CODE,0 AS GV_AMOUNT
			,DEPT_ID+'-'+BILL_NO AS REF_NO,0 AS SENT_FOR_GR  
	FROM #NEWBILLS
	GROUP BY DEPT_ID,CM_NO,CM_DT,CANCELLED,CM_ID,FIN_YEAR,BILL_NO,DISCOUNT_AMT

	SET @CSTEP=570
	/*
	TAX_METHOD : 1 FOR INCLUSIVE AND 2 FOR EXCLUSIVE
	*/
	INSERT CMD01106	( PRODUCT_CODE, QUANTITY, MRP, NET, DISCOUNT_PERCENTAGE, DISCOUNT_AMOUNT, ROW_ID, LAST_UPDATE
					, TAX_PERCENTAGE, TAX_AMOUNT, EMP_CODE, SLSDET_ROW_ID, BIN_ID, OLD_MRP, REF_SLS_MEMO_ID
					, REALIZE_SALE, CM_ID, RFNET, TAX_TYPE, TAX_METHOD, EAN, EMP_CODE1, EMP_CODE2, ITEM_DESC
					, WEIGHTED_AVG_DISC_PCT, WEIGHTED_AVG_DISC_AMT, MANUAL_DISCOUNT, FIX_MRP, SR_NO, HOLD_FOR_ALTER
					, PACK_SLIP_ID, XN_TYPE, REPEAT_PUR_ORDER, DEPT_ID, REF_ORDER_ID, FOC_QUANTITY, CMM_DISCOUNT_AMOUNT
					, NRM_ID )  
	SELECT 	  A.PRODUCT_CODE, A.QUANTITY, A.MRP,A.AMOUNT AS NET
	,(CASE WHEN ABS(A.AMOUNT)<ABS(A.QUANTITY*A.MRP) THEN 
	  ((ABS(A.QUANTITY*A.MRP)-ABS(A.AMOUNT))/ABS(A.QUANTITY*A.MRP))*100 
	  ELSE 0 END) AS DISCOUNT_PERCENTAGE
			,(CASE WHEN A.QUANTITY>0 THEN 1 ELSE -1 END)*
			(CASE WHEN ABS(A.AMOUNT)<ABS(A.QUANTITY*A.MRP) THEN 
			 (ABS(A.QUANTITY*A.MRP)-ABS(A.AMOUNT)) 
			 ELSE 0 END)
			AS DISCOUNT_AMOUNT
			,A.DEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID,GETDATE() AS LAST_UPDATE
			,0 AS TAX_PERCENTAGE,0 AS TAX_AMOUNT,'0000000' AS EMP_CODE,'' AS SLSDET_ROW_ID,
			'MYN' AS BIN_ID,0 AS OLD_MRP,'' AS REF_SLS_MEMO_ID,0 AS REALIZE_SALE
			,A.CM_ID AS CM_ID,0 AS RFNET,1 AS TAX_TYPE,1 AS TAX_METHOD,'' AS EAN,'0000000' AS EMP_CODE1
			,'0000000' AS EMP_CODE2,'' AS ITEM_DESC,0 AS WEIGHTED_AVG_DISC_PCT
			,0 AS WEIGHTED_AVG_DISC_AMT,0 AS MANUAL_DISCOUNT,0 AS FIX_MRP,0 AS SR_NO,0 AS HOLD_FOR_ALTER,'' AS PACK_SLIP_ID
			,'' AS XN_TYPE
			,0 AS REPEAT_PUR_ORDER,A.DEPT_ID,'' AS REF_ORDER_ID
			,0 AS FOC_QUANTITY,0 AS CMM_DISCOUNT_AMOUNT,'' AS NRM_ID 
	FROM #EXISTINGBILLS A
	JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE
	UNION 
	SELECT 	  A.PRODUCT_CODE, A.QUANTITY, A.MRP,A.AMOUNT AS NET
	,(CASE WHEN ABS(A.AMOUNT)<ABS(A.QUANTITY*A.MRP) THEN 
	  ((ABS(A.QUANTITY*A.MRP)-ABS(A.AMOUNT))/ABS(A.QUANTITY*A.MRP))*100 
	  ELSE 0 END)
	AS DISCOUNT_PERCENTAGE
			,(CASE WHEN A.QUANTITY>0 THEN 1 ELSE -1 END)*
			 (CASE WHEN ABS(A.AMOUNT)<ABS(A.QUANTITY*A.MRP) THEN 
			 (ABS(A.QUANTITY*A.MRP)-ABS(A.AMOUNT)) 
			 ELSE 0 END)
			AS DISCOUNT_AMOUNT
			,A.DEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID,GETDATE() AS LAST_UPDATE
			,0 AS TAX_PERCENTAGE,0 AS TAX_AMOUNT,'0000000' AS EMP_CODE,'' AS SLSDET_ROW_ID
			,'MYN' AS BIN_ID,0 AS OLD_MRP,'' AS REF_SLS_MEMO_ID,0 AS REALIZE_SALE
			,A.CM_ID AS CM_ID,0 AS RFNET,1 AS TAX_TYPE,1 AS TAX_METHOD,'' AS EAN,'0000000' AS EMP_CODE1
			,'0000000' AS EMP_CODE2,'' AS ITEM_DESC,0 AS WEIGHTED_AVG_DISC_PCT
			,0 AS WEIGHTED_AVG_DISC_AMT,0 AS MANUAL_DISCOUNT,0 AS FIX_MRP,0 AS SR_NO,0 AS HOLD_FOR_ALTER,'' AS PACK_SLIP_ID
			,'' AS XN_TYPE
			,0 AS REPEAT_PUR_ORDER,A.DEPT_ID,'' AS REF_ORDER_ID,0 AS FOC_QUANTITY
			,0 AS CMM_DISCOUNT_AMOUNT,'' AS NRM_ID 
	FROM #NEWBILLS A
	JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE

	SET @CSTEP=580
	
	INSERT PAYMODE_XN_DET( MEMO_ID, XN_TYPE, PAYMODE_CODE, ROW_ID, AMOUNT, LAST_UPDATE, REF_NO
						 , ADJ_MEMO_ID, CURRENCY_CONVERSION_RATE, REMARKS, GV_SRNO, GV_SCRATCH_NO)  
	SELECT 	A.CM_ID AS MEMO_ID,'SLS' AS XN_TYPE,B.PAYMODE_CODE  AS PAYMODE_CODE
	,DEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID,SUM(CASH) AS AMOUNT,GETDATE() AS LAST_UPDATE,'' AS REF_NO,'' AS ADJ_MEMO_ID
    ,1 AS CURRENCY_CONVERSION_RATE,'SALE IMPORTED' AS REMARKS,'' AS GV_SRNO,'' AS GV_SCRATCH_NO 
	FROM #EXISTINGBILLS A
	JOIN PAYMODE_MST B ON B.PAYMODE_NAME='INR'
	WHERE CASH<>0
	GROUP BY CM_ID,DEPT_ID,B.PAYMODE_CODE
	UNION 
	SELECT 	A.CM_ID AS MEMO_ID,'SLS' AS XN_TYPE,B.PAYMODE_CODE  AS PAYMODE_CODE
		,DEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID
		,SUM(AMOUNT) AS AMOUNT,GETDATE() AS LAST_UPDATE,'' AS REF_NO,'' AS ADJ_MEMO_ID
		,1 AS CURRENCY_CONVERSION_RATE,'SALE IMPORTED' AS REMARKS,'' AS GV_SRNO,'' AS GV_SCRATCH_NO 
	FROM #NEWBILLS A
	JOIN PAYMODE_MST B ON B.PAYMODE_NAME='INR'
	WHERE CASH<>0
	GROUP BY CM_ID,DEPT_ID,B.PAYMODE_CODE
	
	INSERT PAYMODE_XN_DET( MEMO_ID, XN_TYPE, PAYMODE_CODE, ROW_ID, AMOUNT, LAST_UPDATE, REF_NO
						 , ADJ_MEMO_ID, CURRENCY_CONVERSION_RATE, REMARKS, GV_SRNO, GV_SCRATCH_NO)  
	SELECT 	A.CM_ID AS MEMO_ID,'SLS' AS XN_TYPE,B.PAYMODE_CODE  AS PAYMODE_CODE
	,DEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID,SUM(CC_AMOUNT) AS AMOUNT,GETDATE() AS LAST_UPDATE,'' AS REF_NO,'' AS ADJ_MEMO_ID
    ,1 AS CURRENCY_CONVERSION_RATE,'SALE IMPORTED' AS REMARKS,'' AS GV_SRNO,'' AS GV_SCRATCH_NO 
	FROM #EXISTINGBILLS A
	JOIN PAYMODE_MST B ON B.PAYMODE_NAME=A.CC_NAME
	WHERE CC_AMOUNT<>0
	GROUP BY CM_ID,DEPT_ID,B.PAYMODE_CODE
	UNION 
	SELECT 	A.CM_ID AS MEMO_ID,'SLS' AS XN_TYPE,B.PAYMODE_CODE  AS PAYMODE_CODE
		,DEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID
		,SUM(AMOUNT) AS AMOUNT,GETDATE() AS LAST_UPDATE,'' AS REF_NO,'' AS ADJ_MEMO_ID
		,1 AS CURRENCY_CONVERSION_RATE,'SALE IMPORTED' AS REMARKS,'' AS GV_SRNO,'' AS GV_SCRATCH_NO 
	FROM #NEWBILLS A
	JOIN PAYMODE_MST B ON B.PAYMODE_NAME=A.CC_NAME
	WHERE CC_AMOUNT<>0
	GROUP BY CM_ID,DEPT_ID,B.PAYMODE_CODE

	SET @CSTEP=590
    

	DECLARE @TRETMSG TABLE (ERRMSG VARCHAR(MAX))
		
	--UPDATING RFNET COLUMN OF CMD01106
	IF OBJECT_ID('#IMPORTEDBILLS','U') IS NOT NULL
		DROP TABLE #IMPORTEDBILLS

	SET @CSTEP=600
	SELECT DISTINCT CM_ID
	INTO #IMPORTEDBILLS
	FROM #EXISTINGBILLS
	UNION 
	SELECT DISTINCT CM_ID
	FROM #NEWBILLS

	SET @CSTEP=610
	DECLARE @CCMID VARCHAR(50),@DCMDT DATETIME,@CTEMPCMDTABLE VARCHAR(200) 

	SET @CTEMPCMDTABLE='TMPCMD_'+LTRIM(RTRIM(STR(@@SPID)))

	SET @CSTEP=620
	WHILE EXISTS(SELECT TOP 1 'U' FROM #IMPORTEDBILLS)
	BEGIN
		SET @CCMID=''
		SET @CSTEP=630
		SELECT TOP 1 @CCMID=CM_ID FROM #IMPORTEDBILLS
		
		SET @DCMDT=''
		SELECT @DCMDT=CM_DT FROM CMM01106 WHERE CM_ID=@CCMID
		
		SET @CSTEP=630

		IF OBJECT_ID('TEMPDB..#TMPCMDTAX','U') IS NOT NULL
			DROP TABLE #TMPCMDTAX
	
		SELECT SUB_SECTION_CODE,C.ROW_ID,C.TAX_PERCENTAGE,C.TAX_METHOD,C.NET,
		C.MRP,C.QUANTITY,B.USER_CODE,C.TAX_AMOUNT,C.PRODUCT_CODE,C.CMM_DISCOUNT_AMOUNT,
		C.DISCOUNT_PERCENTAGE,C.DISCOUNT_AMOUNT  AS CMD_DISCOUNT_AMOUNT,C.FORM_ID,
		CONVERT(BIT,0) AS APPLY_EXCLUSIVE_TAX,B.DISCOUNT_PERCENTAGE AS EXCLUSIVE_VAT_TO_DISC,
		C.PACK_SLIP_ID,
		MANUAL_TAX_METHOD
		INTO #TMPCMDTAX 
		FROM CMM01106 B 
		JOIN CMD01106 C ON C.CM_ID=B.CM_ID
		JOIN SKU D ON D.PRODUCT_CODE=C.PRODUCT_CODE
		JOIN ARTICLE E ON E.ARTICLE_CODE=D.ARTICLE_CODE
		WHERE B.CM_ID=@CCMID
		
		DELETE FROM @TRETMSG
		
		INSERT @TRETMSG
		EXEC SP_GETCMTAX
		@CUSERCODE='0000000',
		@DXNDT=@DCMDT,
		@NBILLLEVELDISCAMT=0,
		@BCALLEDFROMCASHMEMO=1,
		@BSALESSETUPINEFFECT=0,
		@BSALESSETUPDISABLED=1,
		@CDTCODE='0000000'
		
		SELECT TOP 1 @CERRMSG=ERRMSG FROM @TRETMSG WHERE ISNULL(ERRMSG,'')<>''
		
		IF ISNULL(@CERRMSG,'')<>''
			GOTO END_PROC
				
		SET @CSTEP=635
		
		UPDATE CMD01106 SET TAX_PERCENTAGE=B.TAX_PERCENTAGE,TAX_METHOD=1,TAX_AMOUNT=B.TAX_AMOUNT,
		RFNET=B.NET-ISNULL(B.CMM_DISCOUNT_AMOUNT,0),CMM_DISCOUNT_AMOUNT=ISNULL(B.CMM_DISCOUNT_AMOUNT,0)
		FROM #TMPCMDTAX B WHERE B.ROW_ID=CMD01106.ROW_ID
				
		SET @CSTEP=640
		EXEC UPDATERFNET 'SLS',@CCMID
		
		EXEC SP3SBUILDSLS
		 @CXNID=@CCMID
		,@NUPDATEMODE=2
		,@CERRMSG=@CERRMSG OUTPUT 
		
		IF ISNULL(@CERRMSG,'')<>''
			GOTO END_PROC
		
		SET @CSTEP=650
		DELETE #IMPORTEDBILLS WHERE CM_ID=@CCMID
	END
	
	DELETE A FROM SLS_MBODATA A JOIN #SLSIMPORT B ON A.MEMO_NO=B.BILL_NO AND A.MEMO_DT=B.CM_DT
	
	GOTO END_PROC
	
END TRY

BEGIN CATCH
	SET @CERRMSG='SP3S_SYNCH_MBO_SLS_DATA_OPC : AT STEP - '+@CSTEP+', MESSAGE - '+ERROR_MESSAGE()
		
END CATCH

END_PROC:

	IF ISNULL(@CERRMSG,'')=''
		SELECT TOP 1 @CERRMSG=ERROR_MESSAGE FROM #SLSIMPORT WHERE ISNULL(ERROR_MESSAGE,'')<>''

	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRMSG,'')=''  
		BEGIN						  
			PRINT 'COMMITING TRANSACTION'
			COMMIT TRANSACTION
			UPDATE XNLOG SET LAST_UPDATE=GETDATE() WHERE TABLENAME='CMM01106'
		END	
		ELSE
		BEGIN
			PRINT 'ROLLBACK TRANSACTION'
			ROLLBACK
			DELETE FROM SLS_MBODATA WHERE DEPT_ID=@CLOCID
		END	
	END
	
	IF ISNULL(@BGENERRMSG,0)=0
	SELECT @CERRMSG AS ERRMSG
	ELSE
	BEGIN
	INSERT INTO #TMPEER
	SELECT @CERRMSG
	END
	
END
------ END OF PROCEDURE SP3S_SYNCH_MBO_SLS_DATA_OPC
