-- PROCEDURE TO SAVE DEBIT NOTE RECONCILIATION FROM TEMPORARY TABLES TO ACTUAL TABLES
CREATE PROCEDURE SAVETRAN_DNRECON
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CMEMONOPREFIX		VARCHAR(50),
	@CFINYEAR			VARCHAR(10),
	@CXNMEMOID			VARCHAR(40)=''
	
)
--WITH ENCRYPTION
AS
BEGIN
	-- @NUPDATEMODE:	1- NEW MEMO ADDED, 
	--					2- EDIT THE MEMO
	--					3- CANCEL THE MEMO

	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(4),
			@CLOCATIONID			VARCHAR(4),
			@CHODEPTID				VARCHAR(4),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@CTEMPDNLISTTABLENAME	VARCHAR(200),
			@CLOCID				VARCHAR(4)

	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	SET @NSTEP = 0		-- SETTTING UP ENVIRONMENT
	-- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
	SET @CTEMPDBNAME = ''

	SET @CMASTERTABLENAME	= 'DEBIT_NOTE_RECON_MST'
	SET @CDETAILTABLENAME	= 'DEBIT_NOTE_RECON_DET'

	SET @CTEMPMASTERTABLENAME	= 'TEMP_DEBIT_NOTE_RECON_MST_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME	= 'TEMP_DEBIT_NOTE_RECON_DET_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDNLISTTABLENAME	= 'TEMP_DEBIT_NOTE_LIST_'+LTRIM(RTRIM(STR(@NSPID)))	
	
	SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME
	
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'MEMO_ID'
	SET @CMEMONO			= 'MEMO_NO'
	SET @NMEMONOLEN			= 10
	
	SET @CCMD = 'SELECT @CLOCID = location_code  FROM '+@CTEMPMASTERTABLE
	EXEC SP_EXECUTESQL @CCMD, N'@CLOCID VARCHAR(4) OUTPUT', @CLOCID OUTPUT
				
	SELECT @CLOCATIONID=@CLOCID
	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		

	BEGIN TRY
	
	if @NUPDATEMODE<>3
	begin
	
	

	 IF ISNULL(@CLOCATIONID,'')=''
	 BEGIN
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
		GOTO END_PROC    
	 END
	 
	 
	 end

		SET @NSTEP = 10	
		
		IF @NUPDATEMODE=3
		BEGIN
			UPDATE DEBIT_NOTE_RECON_MST SET CANCELLED=1,LAST_UPDATE=GETDATE() WHERE MEMO_ID=@CXNMEMOID
			SET @CKEYFIELDVAL1=@CXNMEMOID
			GOTO END_PROC
		END	
		
		IF OBJECT_ID('TEMPDB..#TMPRECON','U') IS NOT NULL
			DROP TABLE #TMPRECON

		IF OBJECT_ID('TEMPDB..#TMPRECONDIFF','U') IS NOT NULL
			DROP TABLE #TMPRECONDIFF
						
		SELECT RM_ID,PRODUCT_CODE,QUANTITY INTO #TMPRECON FROM RMD01106 WHERE 1=2
		SELECT RM_NO,RM_DT,PRODUCT_CODE,QUANTITY AS DN_QTY,QUANTITY AS SCANNED_QTY INTO #TMPRECONDIFF FROM RMD01106 A
		JOIN RMM01106 B ON A.RM_ID=B.RM_ID WHERE 1=2
		
		SET @NSTEP = 12
		
		SET @CCMD=N'SELECT RM_ID,PRODUCT_CODE,SUM(QUANTITY) AS QUANTITY FROM RMD01106 WHERE RM_ID IN (
					SELECT RM_ID FROM '+@CTEMPDBNAME+@CTEMPDNLISTTABLENAME+')
					GROUP BY RM_ID,PRODUCT_CODE'
		
		INSERT #TMPRECON
		EXEC SP_EXECUTESQL @CCMD
		
		SET @NSTEP = 14
		
		SET @CCMD=N'SELECT C.RM_NO,C.RM_DT,A.PRODUCT_CODE,A.QUANTITY,0 AS SCANNED_QTY FROM #TMPRECON A
					LEFT OUTER JOIN '+@CTEMPDETAILTABLE+' B
					ON A.PRODUCT_CODE=B.PRODUCT_CODE
					JOIN RMM01106 C ON C.RM_ID=A.RM_ID WHERE B.PRODUCT_CODE IS NULL'

		INSERT #TMPRECONDIFF
		EXEC SP_EXECUTESQL @CCMD
		
		SET @NSTEP = 16
		
		SET @CCMD=N'SELECT CONVERT(CHAR(10),'''') AS RM_NO,CONVERT(DATETIME,'''') AS RM_DT,
					ISNULL(A.PRODUCT_CODE,B.PRODUCT_CODE) AS PRODUCT_CODE,ISNULL(A.QUANTITY,0) AS DN_QTY,
					ISNULL(B.QUANTITY,0) AS SCANNED_QTY FROM 
					(SELECT PRODUCT_CODE,SUM(QUANTITY) AS QUANTITY FROM  #TMPRECON GROUP BY PRODUCT_CODE) A
					
					FULL OUTER JOIN 
					(SELECT PRODUCT_CODE,SUM(QUANTITY) AS QUANTITY FROM  '+@CTEMPDETAILTABLE+'
					 GROUP BY PRODUCT_CODE) B ON A.PRODUCT_CODE=B.PRODUCT_CODE 
					 WHERE ISNULL(A.PRODUCT_CODE,B.PRODUCT_CODE) NOT IN (SELECT PRODUCT_CODE FROM #TMPRECONDIFF)
					 AND ISNULL(A.QUANTITY,0)<>ISNULL(B.QUANTITY,0)'

		INSERT #TMPRECONDIFF
		EXEC SP_EXECUTESQL @CCMD
				
		IF EXISTS (SELECT TOP 1 PRODUCT_CODE FROM #TMPRECONDIFF)
		BEGIN
			SET @NSTEP = 18
			
			UPDATE A SET RM_NO=C.RM_NO,RM_DT=C.RM_DT FROM #TMPRECONDIFF A 
			JOIN #TMPRECON B ON A.PRODUCT_CODE=B.PRODUCT_CODE
			JOIN RMM01106 C ON C.RM_ID=B.RM_ID
			WHERE A.RM_NO=''
				
			SELECT A.RM_NO,A.RM_DT,A.DN_QTY,A.SCANNED_QTY,B.*,C.DT_CREATED AS SKU_DT_CREATED,D.DT_CREATED AS ART_DT_CREATED,
			E.DT_CREATED AS PARA3_DT_CREATED FROM #TMPRECONDIFF A JOIN ITV01106 B ON A.PRODUCT_CODE=B.PRODUCT_CODE
			JOIN SKU C ON A.PRODUCT_CODE=C.PRODUCT_CODE
			JOIN ARTICLE D ON D.ARTICLE_CODE=C.ARTICLE_CODE
			JOIN PARA3 E ON E.PARA3_CODE=C.PARA3_CODE
			
			RETURN
		END
		
		SET @NSTEP = 20	
		
		SET @CCMD = 'SELECT @CKEYFIELDVAL1 = MEMO_ID FROM ' + @CTEMPMASTERTABLE
		EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT',@CKEYFIELDVAL1 OUTPUT
		IF (@CKEYFIELDVAL1 IS NULL )
		BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED...'
			  --SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
			  GOTO END_PROC  		
		END
		
		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	

			SET @NSTEP = 22		-- GENERATING NEW KEY
			
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN
				-- GENERATING NEW MRR_NO		
				SET @NSAVETRANLOOP=0
				WHILE @NSAVETRANLOOP=0
				BEGIN
					SET @NSTEP = 25
					EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
									@CFINYEAR,0, @CMEMONOVAL OUTPUT   
					
					SET @NSTEP = 27
					
					SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
											WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
											AND FIN_YEAR = '''+@CFINYEAR+''' )
									SET @NLOOPOUTPUT=0
								ELSE
									SET @NLOOPOUTPUT=1'
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
				END

				IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
					  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
					  GOTO END_PROC  		
				END

				SET @NSTEP = 30		-- GENERATING NEW ID

				-- GENERATING NEW MEMO ID
				SET @CKEYFIELDVAL1 = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
				
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  GOTO END_PROC
				END
				
				SET @NSTEP = 40		-- UPDATING NEW ID INTO TEMP TABLES

				-- UPDATING NEWLY GENERATED PO NO AND PO ID IN POM AND POD TEMP TABLES
				SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
							@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
				EXEC SP_EXECUTESQL @CCMD
			
				SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
				EXEC SP_EXECUTESQL @CCMD
				
			END

		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
		
			SET @NSTEP = 50		-- GETTING ID INFO FROM TEMP TABLE

			-- GETTING PO_ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = PO_ID, @CMEMONOVAL = PO_NO FROM ' + @CTEMPMASTERTABLE
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
				  
				  GOTO END_PROC  		
			END
			
			SET @NSTEP = 60		-- UPDATING SENT_TO_HO FLAG TEMP TABLE
			
			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET SENT_TO_HO = 0 ,LAST_UPDATE=GETDATE()'
			EXEC SP_EXECUTESQL @CCMD
				
				
		END					-- END OF EDITMODE

		SET @NSTEP = 95

		-- CHECK WETHER THE MEMO ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END

		-- UPDATING MASTER TABLE (PIM01106) FROM TEMP TABLE
		SET @NSTEP = 100		-- UPDATING MASTER TABLE

		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			, @BALWAYSUPDATE = 1
			
		-- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE
		SET @NSTEP = 110		-- UPDATING TRANSACTION TABLE

			-- UPDATING ROW_ID IN TEMP TABLES
			SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
						  WHERE LEFT(ROW_ID,5) = ''LATER'''
			EXEC SP_EXECUTESQL @CCMD

			-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
			SET @NSTEP = 114		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES

			SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + ' 
						WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''' 
			EXEC SP_EXECUTESQL @CCMD

			-- INSERTING/UPDATING THE ENTRIES IN PID01106 TABLE FROM TEMPTABLE
			SET @NSTEP = 115		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

			EXEC UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPDETAILTABLENAME
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CDETAILTABLENAME
				, @CKEYFIELD1	= 'ROW_ID'
				, @BALWAYSUPDATE = 1		
				
	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		
		IF @@TRANCOUNT>0
			ROLLBACK

		IF CURSOR_STATUS('GLOBAL','DNRECONCUR') IN (0,1)
		BEGIN
			CLOSE DNRECONCUR
			DEALLOCATE DNRECONCUR
		END
				
		GOTO END_PROC
	END CATCH
	
END_PROC:
	INSERT @OUTPUT ( ERRMSG, MEMO_ID)
			VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )

	SELECT * FROM @OUTPUT	

LBLLAST:
	
END				
------------------------------------------------------ END OF PROCEDURE SAVETRAN_DNRECON
