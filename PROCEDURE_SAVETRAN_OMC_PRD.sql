CREATE PROCEDURE SAVETRAN_OMC_PRD
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CMEMONOPREFIX		VARCHAR(50),
	@CFINYEAR			VARCHAR(10),
	@CMACHINENAME		VARCHAR(100)='',
	@CWINDOWUSERNAME	VARCHAR(100)='',
	@CWIZAPPUSERCODE	VARCHAR(10)='0000000',
	@CMEMOID			VARCHAR(40)='',
	@CLOCID				VARCHAR(2)=''
)
--WITH ENCRYPTION
AS
BEGIN
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME1		VARCHAR(100),
			@CDETAILTABLENAME2		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME1	VARCHAR(100),
			@CTEMPDETAILTABLENAME2	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE1		VARCHAR(100),
			@CTEMPDETAILTABLE2		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(2),
			@CLOCATIONID			VARCHAR(2),
			@CHODEPTID				VARCHAR(2),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@NSUBTOTAL NUMERIC(20,2),
			@LENABLETEMPDATABASE	BIT,@BNEGSTOCKFOUND BIT,
			@CWSLINVOICEID	VARCHAR(22),
			@BPURTHROUGHIMPORT	BIT,@CMSG VARCHAR(200),@NTAX NUMERIC(20,2)

	BEGIN TRY
		
		BEGIN TRANSACTION
		
		SET @BPURTHROUGHIMPORT=0
		
		SET @NSTEP = 10

		SET @CTEMPDETAILTABLENAME	= 'TEMP_PRD_OP_MATERIAL_CON_DET_'+LTRIM(RTRIM(STR(@NSPID)))					
				
		SET @CTEMPDETAILTABLENAME1	= 'TEMP_PRD_OP_MATERIAL_CON_RWM_DET_'+LTRIM(RTRIM(STR(@NSPID)))					
				
		SET @CTEMPDETAILTABLENAME2	= 'TEMP_INSPECTION_XN_DET_'+LTRIM(RTRIM(STR(@NSPID)))	
		
		
		IF OBJECT_ID('TEMPDB..#TMPPMT','U') IS NOT NULL
			DROP TABLE #TMPPMT
		
		SELECT PRODUCT_CODE INTO #TMPPMT FROM SKU WHERE 1=2

		IF OBJECT_ID('TEMPDB..#TMPXNSTK','U') IS NOT NULL
			DROP TABLE #TMPXNSTK						   
		
		SELECT PRODUCT_UID,QUANTITY_IN_STOCK AS XN_STOCK INTO #TMPXNSTK FROM PRD_PMT WHERE 1=2
		


		IF @NUPDATEMODE=3			
		BEGIN
			SET @NSTEP = 25
						
			IF ISNULL(@CMEMOID,'') = ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED .....CANNOT PROCEED'
				GOTO END_PROC  		
			END
			
			SET @CKEYFIELDVAL1=@CMEMOID
			

			SET @NSTEP = 30				
		
			
			EXEC UPDATEPMT_PRD 
				  @CXNTYPE			= 'OMC'  
				, @CXNNO			= @CMEMONOVAL
				, @CXNID			= @CKEYFIELDVAL1
				, @NREVERTFLAG		= 1
				, @NALLOWNEGSTOCK	= 0
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= @NUPDATEMODE				
				, @CCMD				= @CCMDOUTPUT OUTPUT
			
			IF @CCMDOUTPUT <> ''
			BEGIN
				PRINT @CCMDOUTPUT
				
				SET @NSTEP = 35
					
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'
				SET @BNEGSTOCKFOUND=1				
				EXEC SP_EXECUTESQL @CCMDOUTPUT
				GOTO END_PROC
			END
		
			SET @NSTEP = 38
			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE PRD_OP_MATERIAL_CON_MST SET CANCELLED = 1,LAST_UPDATE=GETDATE() ' + 
						N' WHERE MEMO_ID = ''' + @CMEMOID + ''''
			EXEC SP_EXECUTESQL @CCMD
			
			GOTO END_PROC
		
		END

		SET @NSTEP = 50
        
				
		--SET @CCMD=N'DELETE FROM '+@CTEMPDETAILTABLENAME+' WHERE ISNULL(PRODUCT_UID,'''')='''''
		--EXEC SP_EXECUTESQL @CCMD
		
		SET @NSTEP = 55	
		IF @NUPDATEMODE<>2
				
		
		IF ISNULL(@CCMDOUTPUT,'') <> ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION ON TEMP DATA FAILED : ' + @CCMDOUTPUT + '...'
			GOTO END_PROC
		END
		
		DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

		SET @NSTEP = 60		-- SETTTING UP ENVIRONMENT

		SELECT @LENABLETEMPDATABASE = CAST([VALUE] AS BIT) FROM CONFIG WHERE CONFIG_OPTION = 'ENABLE_TEMP_DATABASE'
		IF @LENABLETEMPDATABASE IS NULL
			SET @LENABLETEMPDATABASE = 0

		-- CHECK TEMPORARY DATABASE TO HOLD TEMP TABLES 
		-- IF CONFIG SETTING SAYS TO DO SO
		IF @LENABLETEMPDATABASE = 1
			SET @CTEMPDBNAME = DB_NAME() + '_TEMP.DBO.'
		ELSE
			SET @CTEMPDBNAME = ''

		SET @CMASTERTABLENAME	= 'PRD_OP_MATERIAL_CON_MST'
		SET @CDETAILTABLENAME	= 'PRD_OP_MATERIAL_CON_DET'
		SET @CDETAILTABLENAME1	= 'PRD_OP_MATERIAL_CON_RWM_DET'
		SET @CDETAILTABLENAME2	= 'INSPECTION_XN_DET'
				

		SET @CTEMPMASTERTABLENAME	= 'TEMP_PRD_OP_MATERIAL_CON_MST_'+LTRIM(RTRIM(STR(@NSPID)))
		SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
		SET @CTEMPDETAILTABLE	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME
		SET @CTEMPDETAILTABLE1	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME1
		SET @CTEMPDETAILTABLE2	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME2
		
		SET @CERRORMSG			= ''
		SET @LDONOTUPDATESTOCK	= 0
		SET @CKEYFIELD1			= 'MEMO_ID'
		SET @CMEMONO			= 'MEMO_NO'
		SET @NMEMONOLEN			= 10
		
		IF ISNULL(@CLOCID,'')=''
			SELECT @CLOCATIONID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID'
		ELSE
			SELECT @CLOCATIONID=@CLOCID
		
		SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		
		
		SET @NSTEP=70
		
		-- GETTING DEPT_ID FROM TEMP MASTER TABLE
		SET @CCMD = 'SELECT @CMEMODEPTID = DEPT_ID, @CKEYFIELDVAL1 = MEMO_ID FROM '+@CTEMPMASTERTABLE
	
		EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT, @CKEYFIELDVAL1 VARCHAR(50) OUTPUT', 
								  @CMEMODEPTID OUTPUT, @CKEYFIELDVAL1 OUTPUT
		IF (@CMEMODEPTID IS NULL )
		BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED...'
			  --SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
			  GOTO END_PROC  		
		END


 
 
		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	

			SET @NSTEP = 80		-- GENERATING NEW KEY
PRINT 'GENERATING NEW KEY... START'			
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN
				-- GENERATING NEW MRR_NO		
				SET @NSAVETRANLOOP=0
				WHILE @NSAVETRANLOOP=0
				BEGIN
					SET @NSTEP=90
					EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
									@CFINYEAR,0, @CMEMONOVAL OUTPUT   
					
					PRINT @CMEMONOVAL
					
					
					SET @NSTEP=100
					SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
											WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
											AND FIN_YEAR = '''+@CFINYEAR+''' )
									SET @NLOOPOUTPUT=0
								ELSE
									SET @NLOOPOUTPUT=1'
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
				END

				IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
					  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
					  GOTO END_PROC  		
				END

                PRINT 'GENERATING NEW KEY... START'			

				SET @NSTEP = 110		-- GENERATING NEW ID
				

				-- GENERATING NEW MRR ID
				SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+ REPLICATE('0', 15-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL))
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
					  GOTO END_PROC
				END
				
				SET @NSTEP = 120
				
				-- RECHECKING IF ID IS STILL LATER
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
				BEGIN
					SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					GOTO END_PROC
				END				


				SET @NSTEP = 130		-- UPDATING NEW ID INTO TEMP TABLES

				-- UPDATING NEWLY GENERATED MRR NO AND MRR ID IN PIM AND PID TEMP TABLES
				SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
							@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
				EXEC SP_EXECUTESQL @CCMD
			
				SET @NSTEP = 135		-- UPDATING NEW ID INTO TEMP TABLES
				
				
				SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD
				
				
				SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD
				
				
				SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE2 + ' SET XN_MEMO_ID = '''+@CKEYFIELDVAL1+''''
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD
				
			END

		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
		      
			SET @NSTEP = 150		-- GETTING ID INFO FROM TEMP TABLE

			-- GETTING MRR_ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = MEMO_ID, @CMEMONOVAL = MEMO_NO FROM '+@CTEMPMASTERTABLE
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
				  
				  GOTO END_PROC  		
			END
			SET @NSTEP = 155		-- STORING OLD STATUS OF BARCODES 
			
			
		
			-- REVERTING BACK THE STOCK OF PMT W.R.T CURRENT PURCHASE
			SET @NSTEP = 170		-- REVERTING STOCK
			
		
			
				EXEC UPDATEPMT_PRD 
					  @CXNTYPE			= 'OMC'
					, @CXNNO			= @CMEMONOVAL
					, @CXNID			= @CKEYFIELDVAL1
					, @NREVERTFLAG		= 1
					, @NALLOWNEGSTOCK	= 0
					, @NCHKDELBARCODES	= 1
					, @NUPDATEMODE		= @NUPDATEMODE					
					, @CCMD				= @CCMDOUTPUT OUTPUT
			 	
		END					-- END OF EDITMODE

		SET @NSTEP = 180

		-- RECHECKING IF ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END				
		
		
		SET @NSTEP=210						 
		
		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			, @BALWAYSUPDATE = 1
			

		-- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE
		SET @NSTEP = 220		-- UPDATING TRANSACTION TABLE

		-- UPDATING ROW_ID IN TEMP TABLES
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE LEFT(ROW_ID,5) = ''LATER'''
		EXEC SP_EXECUTESQL @CCMD
		
		
		-- UPDATING ROW_ID IN TEMP TABLES 2
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE LEFT(ROW_ID,5) = ''LATER'''
		EXEC SP_EXECUTESQL @CCMD
					
					
			-- UPDATING ROW_ID IN TEMP TABLES 2
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE2 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE LEFT(ROW_ID,5) = ''LATER'''
		EXEC SP_EXECUTESQL @CCMD			
		
		-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
		SET @NSTEP = 230		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES

		SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + ' 
					WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
					AND ROW_ID IN 
					(
						SELECT A.ROW_ID 
						FROM ' + @CDETAILTABLENAME + ' A 
						LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B ON A.ROW_ID = B.ROW_ID
						WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
						AND B.ROW_ID IS NULL
					)'
		PRINT @CCMD
		
		
		EXEC SP_EXECUTESQL @CCMD
		
		
		
		-- DELETING EXISTING ENTRIES FROM RAW_CON TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
		SET @NSTEP = 230		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES

		SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME1 + ' 
					WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
					AND ROW_ID IN 
					(
						SELECT A.ROW_ID 
						FROM ' + @CDETAILTABLENAME1 + ' A 
						LEFT OUTER JOIN ' + @CTEMPDETAILTABLE1 + ' B ON A.ROW_ID = B.ROW_ID
						WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
						AND B.ROW_ID IS NULL
					)'
		PRINT @CCMD
		
		
		EXEC SP_EXECUTESQL @CCMD
		
		
		
		-- DELETING EXISTING ENTRIES FROM INSPECTION TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
		SET @NSTEP = 230		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES

		SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME2 + ' 
					WHERE XN_MEMO_ID = ''' + @CKEYFIELDVAL1 + '''
					AND ROW_ID IN 
					(
						SELECT A.ROW_ID 
						FROM ' + @CDETAILTABLENAME2 + ' A 
						LEFT OUTER JOIN ' + @CTEMPDETAILTABLE2 + ' B ON A.ROW_ID = B.ROW_ID
						WHERE A.XN_MEMO_ID = ''' + @CKEYFIELDVAL1 + '''
						AND B.ROW_ID IS NULL
					)'
		PRINT @CCMD
		
		
		EXEC SP_EXECUTESQL @CCMD
		
		
		--PRINT 'ROHIT'
		-- INSERTING/UPDATING THE ENTRIES IN PID01106 TABLE FROM TEMPTABLE
		SET @NSTEP = 240		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME
			, @CKEYFIELD1	= 'ROW_ID'
			, @BALWAYSUPDATE = 1
			--, @LUPDATEXNS	= 1
	
		     
				
		EXEC UPDATEMASTERXN 
		  @CSOURCEDB	= @CTEMPDBNAME
		, @CSOURCETABLE = @CTEMPDETAILTABLENAME1
		, @CDESTDB		= ''
		, @CDESTTABLE	= @CDETAILTABLENAME1
		, @CKEYFIELD1	= 'ROW_ID'
		, @BALWAYSUPDATE = 1
		--, @LUPDATEXNS	= 1
						
						
		EXEC UPDATEMASTERXN 
		  @CSOURCEDB	= @CTEMPDBNAME
		, @CSOURCETABLE = @CTEMPDETAILTABLENAME2
		, @CDESTDB		= ''
		, @CDESTTABLE	= @CDETAILTABLENAME2
		, @CKEYFIELD1	= 'ROW_ID'
		, @BALWAYSUPDATE = 1
		--, @LUPDATEXNS	= 1				
		
		PRINT 'UPDATESKU'
		
		
		EXEC SAVETRAN_UPDSKU_PRD 'OMC',@CKEYFIELDVAL1,@CERRORMSG OUTPUT 
		IF ISNULL(@CERRORMSG,'')<>''
				GOTO END_PROC
					
		

LBLUPDATESTOCK:						
		-- UPDATING STOCK OF PMT W.R.T. CURRENT PURCHASE
		SET @NSTEP = 270		-- UPDATING PMT TABLE
	PRINT 'STEP 9'

		
		  EXEC UPDATEPMT_PRD 
		  @CXNTYPE			= 'OMC'
		, @CXNNO			= @CMEMONOVAL
		, @CXNID			= @CKEYFIELDVAL1
		, @NREVERTFLAG		= 0
		, @NALLOWNEGSTOCK	= 0
		, @NCHKDELBARCODES	= 1
		, @NUPDATEMODE		= @NUPDATEMODE					
		, @CCMD				= @CCMDOUTPUT OUTPUT
		
		
		PRINT 'STEP 9.1'
			
		IF @CCMDOUTPUT <> ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT... STOCK IS GOING NEGATIVE'
			-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
			
			EXEC SP_EXECUTESQL @CCMDOUTPUT
			SET @BNEGSTOCKFOUND=1
			
			GOTO END_PROC
		END

		-- VALIDATING ENTRIES
				
		--SET @NSTEP = 350
		
		--EXEC VALIDATEXN_PUR_PRD			 
		--	  @CXNID	= @CKEYFIELDVAL1
		--	, @NUPDATEMODE = @NUPDATEMODE			
		--	, @CERRORMSG	= @CCMDOUTPUT OUTPUT

		--IF @CCMDOUTPUT <> ''
		--BEGIN
		--	SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION FAILED : ' + @CCMDOUTPUT + '...'
		--	GOTO END_PROC
		--END


	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'
			
		GOTO END_PROC
	END CATCH
	
	
END_PROC:
	
	
	
	
	IF @@TRANCOUNT>0
	BEGIN
		
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
		BEGIN
			
			COMMIT TRANSACTION
			--SELECT * FROM PRD_SKU
			--SELECT * FROM PRD_SKU_OH
			--SELECT * FROM PRD_STK_TRANSFER_MST
			--SELECT * FROM PRD_PMT
			--SELECT * FROM PMT01106 WHERE PRODUCT_CODE IN ('0123060001','0132060002')
			--ROLLBACK		
		END
		ELSE
			ROLLBACK
	END

		
	
	IF ISNULL(@BNEGSTOCKFOUND,0)=0
	BEGIN
		INSERT @OUTPUT ( ERRMSG, MEMO_ID)
				VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )

		SELECT * FROM @OUTPUT	
	END	

   		
	SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPDETAILTABLE + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPDETAILTABLE
	EXEC SP_EXECUTESQL @CCMD
	

    SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPMASTERTABLE + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPMASTERTABLE
	EXEC SP_EXECUTESQL @CCMD
	
	
		
END
------------------------------------------------------ END OF PROCEDURE SAVETRAN_OMC
