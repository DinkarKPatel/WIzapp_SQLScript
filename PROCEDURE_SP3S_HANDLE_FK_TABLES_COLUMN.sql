CREATE PROCEDURE SP3S_HANDLE_FK_TABLES_COLUMN  
(  
  @TABLE_NAME     VARCHAR(200)    
 ,@COLUMN_NAME    VARCHAR(200)   
 ,@FLAG           TINYINT     = 0 --CHANGE BELOW PARAMATER OF CODE BY JAI RAM KUMAR ON 2018-11-03
 ,@COLUMN_LENGTHPara  VARCHAR(50) = ''
 ,@SRNO           SMALLINT    = 0 
)  
AS  
BEGIN  
  
--BEGIN TRY  
  
--BEGIN TRAN  
  DECLARE @NROWCOUNT INT , @CSTRQUERY NVARCHAR(MAX) ,@CERRMSG NVARCHAR(MAX),@NSTEP INT   
           ,@NLOOP_START INT    
           ,@CSOURCETABLE VARCHAR(500)    
           ,@CTARGATETABLE VARCHAR(500)    
           ,@CSOURCECOLUMN VARCHAR(500)    
           ,@CTARGATECOLUMN VARCHAR(500)   
           ,@FOREIGNKEY VARCHAR(1000)   
           ,@CERORMSG VARCHAR(MAX)    
           ,@STRQUERY NVARCHAR(MAX)    
           ,@CDATABASENAME VARCHAR(100)    
           ,@UNIQUE_CONSTRAINT_COLUMN_NAME VARCHAR(200)  
           ,@RECORDS_EXISTS VARCHAR(100)  
           ,@STRSQL NVARCHAR(MAX)
           ,@CFLAG INT  
           ,@DATATYPE   VARCHAR(50)
           ,@CCOLUMN_LENGTH VARCHAR(50)
            
             
           SET @CFLAG=0  
    
  SET @NSTEP=10  
    
  IF OBJECT_ID('TEMPDB..#CONSTRAINT_DETAILS') IS NOT NULL    
        DROP TABLE #CONSTRAINT_DETAILS    
          
  IF OBJECT_ID('TEMPDB..#CONSTRAINT_DETAILS1') IS NOT NULL    
        DROP TABLE #CONSTRAINT_DETAILS1  
          
  CREATE TABLE #CONSTRAINT_DETAILS    
   (    
    ID INT IDENTITY(1,1)    
   ,SOURCE_TABLE VARCHAR(500)    
   ,SOURCE_COLUMN VARCHAR(500)    
   ,TARGAT_TABLE  VARCHAR(500)    
   ,TARGAT_COLUMN VARCHAR(500)    
   ,CONSTRAINTS_NAME VARCHAR(500)    
   )   
     
   CREATE TABLE #CONSTRAINT_DETAILS1    
   (    
    ID INT IDENTITY(1,1)    
   ,SOURCE_TABLE VARCHAR(500)    
   ,SOURCE_COLUMN VARCHAR(500)    
   ,TARGAT_TABLE  VARCHAR(500)    
   ,TARGAT_COLUMN VARCHAR(500)    
   ,CONSTRAINTS_NAME VARCHAR(500)    
   )    
  
  INSERT INTO #CONSTRAINT_DETAILS(SOURCE_TABLE,SOURCE_COLUMN,TARGAT_TABLE,TARGAT_COLUMN,CONSTRAINTS_NAME)    
  SELECT D.NAME AS  [SOURCE TABLE]    
     ,F.NAME AS [SOURCE COLUMN]    
     ,C.NAME AS [TARGATE TABLE]     
     ,E.NAME AS [TARGATE COLUMN]    
     ,B.NAME AS [FORIGEN KEY NAME]    
           
   FROM SYSREFERENCES A 
			   JOIN SYSOBJECTS B ON A.CONSTID = B.ID 
			   JOIN SYSOBJECTS C ON A.FKEYID = C.ID 
			   JOIN SYSOBJECTS D ON A.RKEYID = D.ID 
			   JOIN SYSCOLUMNS E ON A.FKEY1 = E.COLID AND A.FKEYID = E.ID 
			   JOIN SYSCOLUMNS F ON A.RKEY1 = F.COLID AND A.RKEYID = F.ID		   
	WHERE D.NAME=@TABLE_NAME  AND F.NAME=@COLUMN_NAME
  ORDER BY D.NAME, F.NAME

   SELECT i.name AS index_name  
    ,COL_NAME(ic.object_id,ic.column_id) AS column_name  
   INTO #indexCols	FROM sys.indexes AS i  
	INNER JOIN sys.index_columns AS ic
		ON i.object_id = ic.object_id AND i.index_id = ic.index_id  
	WHERE i.object_id = OBJECT_ID(@TABLE_NAME)
	and COL_NAME(ic.object_id,ic.column_id)=@COLUMN_NAME
	AND is_unique=0 AND is_primary_key=0

  --AND O1.NAME NOT IN ('LMP01106','LOCOB','CAMPAIGN_SECTIONM','CAMPAIGN_SECTIOND','SD_ATTR')      
  SET @NROWCOUNT = @@ROWCOUNT;    
  SET @NLOOP_START = 1;    
   
  WHILE @NROWCOUNT >=@NLOOP_START    
  BEGIN    
	   --DECLARE TARGATE TABLE AND TARGATE COLUMN NAME    
	   SELECT @CTARGATETABLE=TARGAT_TABLE,@CTARGATECOLUMN =TARGAT_COLUMN ,@FOREIGNKEY=CONSTRAINTS_NAME,  
	   @CSOURCECOLUMN=SOURCE_COLUMN  
	   FROM #CONSTRAINT_DETAILS WHERE ID=@NLOOP_START    
	          
	   SET @NSTEP=20   
	   -- DROP FOREIGN KEY   
	   SET @STRSQL = 'IF EXISTS (SELECT * FROM SYS.FOREIGN_KEYS WHERE OBJECT_ID = OBJECT_ID(N''' + QUOTENAME(SCHEMA_NAME()) + '.' + QUOTENAME(@FOREIGNKEY) + ''') AND PARENT_OBJECT_ID = OBJECT_ID(N''' + QUOTENAME(SCHEMA_NAME()) + '.' + QUOTENAME(@CTARGATETABLE) + '''))' + CHAR(13)  
	   + 'ALTER TABLE ' + QUOTENAME(SCHEMA_NAME()) + '.' + QUOTENAME(@CTARGATETABLE) + ' DROP CONSTRAINT ' + QUOTENAME(@FOREIGNKEY) + '' + CHAR(13) + CHAR(13)  
	   
	   PRINT 'FIRST DROP CONSTRAINT'
	   PRINT @STRSQL  
	   EXEC SP_EXECUTESQL @STRSQL 
	      
	   ----SELECT DATATYPE AND DATA LENGTH
	   SELECT  @DATATYPE =  CASE WHEN DATA_TYPE IN ('DECIMAL','NUMERIC') THEN DATA_TYPE +' ('+ CAST(NUMERIC_PRECISION_RADIX AS VARCHAR)+','+CAST(NUMERIC_SCALE AS VARCHAR)+')'
							WHEN DATA_TYPE IN ('VARCHAR','CHAR') THEN DATA_TYPE +' ('+ CASE CHARACTER_MAXIMUM_LENGTH WHEN '-1' THEN 'MAX' ELSE CAST(CHARACTER_MAXIMUM_LENGTH AS VARCHAR) END +')'
							WHEN DATA_TYPE IN ('NVARCHAR','NCHAR','VARBINARY') THEN DATA_TYPE +' ('+ CASE CHARACTER_maximum_LENGTH WHEN '-1' THEN 'MAX' ELSE CAST(CHARACTER_maximum_LENGTH AS VARCHAR) END +')'
							ELSE DATA_TYPE
							END
				,@CCOLUMN_LENGTH = CASE IS_NULLABLE WHEN 'YES' THEN 'NULL' WHEN 'NO' THEN 'NOT NULL' END
		FROM INF_SCHEMA_COLUMNS WITH(NOLOCK) WHERE TABLE_NAME = @CTARGATETABLE AND COLUMN_NAME = @CTARGATECOLUMN
	           
	    
		SET @NSTEP=30  
		--UPDATE AND CHANGE BELOW LINE OF CODE BY JAI RAM KUMAR ON 2018-11-03
		-- UPDATE VALUES IN TARGET TABLE  
		
		PRINT 'THEN ALTER COLUMN-1'
		SET @STRQUERY = N'ALTER TABLE DBO.['+@CTARGATETABLE+'] ALTER COLUMN ['+@CTARGATECOLUMN+']  '+@DATATYPE+'  '+@CCOLUMN_LENGTH+' '  
	       
	    
		PRINT @STRQUERY      
		EXEC SP_EXECUTESQL @STRQUERY  
	          
	    SET @NLOOP_START = @NLOOP_START+1;    
       
    END   
    
	DECLARE @cIndexName VARCHAR(500)

	WHILE EXISTS (SELECT TOP 1 * FROM #indexCols)
	BEGIN
		SET @nStep=32
		
		SELECT TOP 1 @cIndexName=index_name FROM #indexCols

		SET @STRQUERY = N'DROP INDEX '+@TABLE_NAME+'.'+@cIndexName
		PRINT @strquery
		EXEC SP_EXECUTESQL @strQuery

		DELETE FROM #indexCols WHERE index_name=@cIndexName
	END

    SET @NSTEP=35  
    ------------------UPDATE MAIN TABLE-----------------------
    DECLARE @TBLCONSTRAINT AS TABLE (CREATESCRIPT NVARCHAR(2000),DROPSCRIPT NVARCHAR(2000),SCRIPTTYPE VARCHAR(50),CREATEDEFAULT VARCHAR(2000),DROPDEFAULT VARCHAR(2000))
       
	INSERT INTO @TBLCONSTRAINT(CREATESCRIPT,DROPSCRIPT,SCRIPTTYPE)
	SELECT 'ALTER TABLE '+T1.TABLE_NAME + ' ADD CONSTRAINT '+T1.CONSTRAINT_NAME + ' PRIMARY KEY ('
		 + STUFF((SELECT ','+COLUMN_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE KU 
		  WHERE T1.CONSTRAINT_NAME = KU.CONSTRAINT_NAME ORDER BY KU.ORDINAL_POSITION FOR XML PATH('') ),1,1,'') 
		 +')'
	,'ALTER TABLE '+T1.TABLE_NAME + ' DROP CONSTRAINT '+T1.CONSTRAINT_NAME,'PRIMARY'
	FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS T1
	JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE TU ON T1.TABLE_NAME = TU.TABLE_NAME AND T1.CONSTRAINT_NAME = TU.CONSTRAINT_NAME
	WHERE  T1.CONSTRAINT_TYPE ='PRIMARY KEY' AND T1.TABLE_NAME = @TABLE_NAME AND TU.COLUMN_NAME = @COLUMN_NAME
	
	SET @NSTEP=40  
	----INSERT UNIQUE KEY CONSTRAINT SCRIPT----
	INSERT INTO @TBLCONSTRAINT(CREATESCRIPT,DROPSCRIPT,SCRIPTTYPE)
	SELECT 'ALTER TABLE '+T1.TABLE_NAME + ' ADD CONSTRAINT '+T1.CONSTRAINT_NAME + ' UNIQUE ('
		 + STUFF((SELECT ','+COLUMN_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE KU 
		  WHERE T1.CONSTRAINT_NAME = KU.CONSTRAINT_NAME ORDER BY KU.ORDINAL_POSITION FOR XML PATH('') ),1,1,'') 
		 +')'
	  ,'ALTER TABLE '+T1.TABLE_NAME + ' DROP CONSTRAINT '+T1.CONSTRAINT_NAME ,'UNIQUE'
	FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS T1
	JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE TU ON T1.TABLE_NAME = TU.TABLE_NAME AND T1.CONSTRAINT_NAME = TU.CONSTRAINT_NAME
	WHERE T1.CONSTRAINT_TYPE ='UNIQUE' AND T1.TABLE_NAME = @TABLE_NAME  AND TU.COLUMN_NAME = @COLUMN_NAME
	
	SET @NSTEP=45  
	--------CREATE AND DROP FOREIGN KEY SCRIPT-----------
	INSERT INTO @TBLCONSTRAINT(CREATESCRIPT,DROPSCRIPT,SCRIPTTYPE)
	SELECT 'ALTER TABLE '+CH.TABLE_NAME + ' WITH NOCHECK ADD CONSTRAINT '+RC.CONSTRAINT_NAME + ' FOREIGN KEY ('
			+ STUFF((SELECT ','+COLUMN_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE KU 
			  WHERE CH.CONSTRAINT_NAME = KU.CONSTRAINT_NAME ORDER BY KU.ORDINAL_POSITION FOR XML PATH('') ),1,1,'') 
			 +') REFERENCES '+ PT.TABLE_NAME + '('+STUFF((SELECT ','+COLUMN_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE KU 
			  WHERE PT.CONSTRAINT_NAME = KU.CONSTRAINT_NAME ORDER BY KU.ORDINAL_POSITION FOR XML PATH('') ),1,1,'')+')'
	,'ALTER TABLE '+CH.TABLE_NAME + ' DROP CONSTRAINT '+RC.CONSTRAINT_NAME ,'FOREIGN'
	FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC
	JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS CH ON RC.CONSTRAINT_NAME = CH.CONSTRAINT_NAME
	JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS PT ON RC.UNIQUE_CONSTRAINT_NAME = PT.CONSTRAINT_NAME
	JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE CU ON CU.CONSTRAINT_NAME = CH.CONSTRAINT_NAME AND CH.TABLE_NAME = CU.TABLE_NAME
	WHERE CH.TABLE_NAME = @TABLE_NAME AND CU.COLUMN_NAME  = @COLUMN_NAME
	
	----SCRIPT FOR ADD DEFAULT CONSTRAINT-----
	INSERT INTO @TBLCONSTRAINT(CREATEDEFAULT,scripttype)
	SELECT 'ALTER TABLE '+S.TABLE_NAME + ' ADD CONSTRAINT DF_'+S.TABLE_NAME+'_'+S.COLUMN_NAME+ ' DEFAULT '+ S.COLUMN_DEFAULT + ' FOR '+S.COLUMN_NAME,'DEFAULT'
	FROM INFORMATION_SCHEMA.COLUMNS S
	WHERE S.TABLE_NAME = @TABLE_NAME AND ISNULL(COLUMN_DEFAULT,'') <> ''
	AND S.COLUMN_NAME = @COLUMN_NAME
	ORDER BY S.TABLE_NAME
	
	----SCRIPT FOR DROP DEFAULT CONSTRAINT-----
	INSERT INTO @TBLCONSTRAINT(DROPDEFAULT,scripttype)
	SELECT 'ALTER TABLE '+ OBJECT_NAME(PARENT_OBJECT_ID) + ' DROP CONSTRAINT '+ NAME,'DEFAULT' 
	FROM SYS.DEFAULT_CONSTRAINTS
	WHERE OBJECT_NAME(PARENT_OBJECT_ID) = @TABLE_NAME AND COL_NAME (PARENT_OBJECT_ID, PARENT_COLUMN_ID) = @COLUMN_NAME

	--- Script for Drop & Create Check Constraint
	INSERT INTO @TBLCONSTRAINT(CREATESCRIPT,DROPSCRIPT,SCRIPTTYPE)
	SELECT 'ALTER TABLE '+ S.TABLE_NAME + ' with nocheck ADD CONSTRAINT '+S.CONSTRAINT_NAME + ' CHECK '+C.CHECK_CLAUSE
	  ,'ALTER TABLE '+s.TABLE_NAME + ' DROP CONSTRAINT '+s.CONSTRAINT_NAME ,'CHECK'
	FROM DBO.INF_SCHEMA_CONSTRAINT_COLUMN_USAGE S    
	JOIN  DBO.INF_SCHEMA_CHECK_CONSTRAINTS C ON S.CONSTRAINT_NAME = C.CONSTRAINT_NAME  
	WHERE s.TABLE_NAME=@TABLE_NAME AND s.COLUMN_NAME=@COLUMN_NAME
	
   ---DROP AND CREATE CONSTRAINT ON MAIN TABLE-----
   IF EXISTS(SELECT * FROM @TBLCONSTRAINT)
   BEGIN
	   
	   
	    
       IF EXISTS(SELECT * FROM @TBLCONSTRAINT WHERE SCRIPTTYPE ='PRIMARY')
       BEGIN
		   SET @NSTEP=52  	
		   SELECT @STRSQL = DROPSCRIPT +'; ' FROM @TBLCONSTRAINT WHERE SCRIPTTYPE ='PRIMARY'
		   PRINT @STRSQL
		   EXEC(@STRSQL)
       END
       IF EXISTS(SELECT * FROM @TBLCONSTRAINT WHERE SCRIPTTYPE ='UNIQUE')
       BEGIN
		   SET @NSTEP=55  	
		   SELECT @STRSQL = DROPSCRIPT +'; ' FROM @TBLCONSTRAINT WHERE SCRIPTTYPE ='UNIQUE'
		   PRINT @STRSQL
		   EXEC(@STRSQL)
       END
       IF EXISTS(SELECT * FROM @TBLCONSTRAINT WHERE SCRIPTTYPE ='FOREIGN')
       BEGIN
		   SET @NSTEP=60  	
		   SELECT @STRSQL = DROPSCRIPT +'; ' FROM @TBLCONSTRAINT WHERE SCRIPTTYPE ='FOREIGN'
		   PRINT @STRSQL
		   EXEC(@STRSQL)
       END

       IF EXISTS(SELECT * FROM @TBLCONSTRAINT WHERE SCRIPTTYPE ='CHECK')
       BEGIN
		   SET @NSTEP=60  	
		   SELECT @STRSQL = DROPSCRIPT +'; ' FROM @TBLCONSTRAINT WHERE SCRIPTTYPE ='CHECK'
		   PRINT @STRSQL
		   EXEC(@STRSQL)
       END

       IF EXISTS(SELECT * FROM @TBLCONSTRAINT WHERE ISNULL(DROPDEFAULT,'') <> '')
       BEGIN
		   SELECT @STRSQL = DROPDEFAULT +'; ' FROM @TBLCONSTRAINT
		   PRINT @STRSQL
		   EXEC(@STRSQL)
       END
   END
   
    SET @NSTEP=65  
    PRINT 'THEN ALTER COLUMN-2'
    SET @STRQUERY = N'ALTER TABLE DBO.['+@TABLE_NAME+'] ALTER COLUMN ['+@COLUMN_NAME+'] '+@COLUMN_LENGTHPara    
    PRINT @STRQUERY        
    EXEC SP_EXECUTESQL @STRQUERY
    
--    select 'check now',* from @TBLCONSTRAINT where scripttype='default'
    
	IF EXISTS(SELECT * FROM @TBLCONSTRAINT)
	BEGIN
	   IF EXISTS(SELECT * FROM @TBLCONSTRAINT WHERE SCRIPTTYPE ='PRIMARY')
       BEGIN
		   SET @NSTEP=70  
		   SELECT @STRSQL = CREATESCRIPT +'; ' FROM @TBLCONSTRAINT WHERE SCRIPTTYPE ='PRIMARY' 
		   PRINT @STRSQL
		   EXEC(@STRSQL)
       END
       IF EXISTS(SELECT * FROM @TBLCONSTRAINT WHERE SCRIPTTYPE ='UNIQUE')
       BEGIN
		   SET @NSTEP=75  
		   SELECT @STRSQL = CREATESCRIPT +'; ' FROM @TBLCONSTRAINT WHERE SCRIPTTYPE ='UNIQUE'
		   
		   PRINT @STRSQL
		   EXEC(@STRSQL)
       END
       IF EXISTS(SELECT * FROM @TBLCONSTRAINT WHERE SCRIPTTYPE ='FOREIGN')
       BEGIN
		   SET @NSTEP=80  
		   SELECT @STRSQL = CREATESCRIPT +'; ' FROM @TBLCONSTRAINT WHERE SCRIPTTYPE ='FOREIGN'
		   
		   PRINT @STRSQL
		   EXEC(@STRSQL)
       END
		
	--	select 'apply now',* from @TBLCONSTRAINT where scripttype='default'
       IF EXISTS(SELECT * FROM @TBLCONSTRAINT WHERE SCRIPTTYPE ='DEFAULT' and createdefault is not null)
       BEGIN
		   SET @NSTEP=80  
		   SELECT @STRSQL = CREATEDEFAULT +'; ' FROM @TBLCONSTRAINT WHERE SCRIPTTYPE ='DEFAULT' and 
		   createdefault is not null
		   
		  -- select 'applied',@STRSQL,* from @TBLCONSTRAINT where scripttype='default'
		   
		   PRINT @STRSQL
		   EXEC(@STRSQL)
       END

       IF EXISTS(SELECT * FROM @TBLCONSTRAINT WHERE SCRIPTTYPE ='CHECK')
       BEGIN
		   SET @NSTEP=80  
		   SELECT @STRSQL = CREATESCRIPT +'; ' FROM @TBLCONSTRAINT WHERE SCRIPTTYPE ='CHECK'
		   
		   PRINT @STRSQL
		   EXEC(@STRSQL)
       END
       
   END   
   
   SET @NSTEP=85  	
   UPDATE TBLMISMATCHSCRIPT SET FLAG = 1 WHERE SRNO = @SRNO
   
   DELETE FROM @TBLCONSTRAINT
   
    
   SET @NSTEP=90  
   INSERT INTO #CONSTRAINT_DETAILS1(SOURCE_TABLE,SOURCE_COLUMN,TARGAT_TABLE,TARGAT_COLUMN,CONSTRAINTS_NAME)  
   SELECT SOURCE_TABLE,SOURCE_COLUMN,TARGAT_TABLE,TARGAT_COLUMN,CONSTRAINTS_NAME FROM #CONSTRAINT_DETAILS     
  
   SET @NROWCOUNT = @@ROWCOUNT;    
   SET @NLOOP_START = 1;    
   
  
   
   WHILE @NROWCOUNT >=@NLOOP_START    
   BEGIN    
	   SET @NSTEP=95  
	   --DECLARE TARGATE TABLE AND TARGATE COLUMN NAME    
	   SELECT @CTARGATETABLE=TARGAT_TABLE,@CTARGATECOLUMN =TARGAT_COLUMN ,@FOREIGNKEY=CONSTRAINTS_NAME,  
	   @CSOURCECOLUMN=SOURCE_COLUMN  
	   FROM #CONSTRAINT_DETAILS WHERE ID=@NLOOP_START    
	          
	   IF  @CFLAG=0  
	   BEGIN  
		  SET @NSTEP=100  
		  
		  
			----SELECT DATATYPE AND DATA LENGTH
		   SELECT  @DATATYPE =  CASE WHEN DATA_TYPE IN ('DECIMAL','NUMERIC') THEN DATA_TYPE +' ('+ CAST(NUMERIC_PRECISION_RADIX AS VARCHAR)+','+CAST(NUMERIC_SCALE AS VARCHAR)+')'
								WHEN DATA_TYPE IN ('VARCHAR','CHAR') THEN DATA_TYPE +' ('+ CASE CHARACTER_MAXIMUM_LENGTH WHEN '-1' THEN 'MAX' ELSE CAST(CHARACTER_MAXIMUM_LENGTH AS VARCHAR) END +')'
								WHEN DATA_TYPE IN ('NVARCHAR','NCHAR','VARBINARY') THEN DATA_TYPE +' ('+ CASE CHARACTER_maximum_LENGTH WHEN '-1' THEN 'MAX' ELSE CAST(CHARACTER_maximum_LENGTH AS VARCHAR) END +')'
								ELSE DATA_TYPE
								END
					,@CCOLUMN_LENGTH = CASE IS_NULLABLE WHEN 'YES' THEN 'NULL' WHEN 'NO' THEN 'NOT NULL' END
			FROM INF_SCHEMA_COLUMNS WITH(NOLOCK) WHERE TABLE_NAME = @TABLE_NAME AND COLUMN_NAME = @CSOURCECOLUMN
		           
		    SET @NSTEP=105           
			
			PRINT 'THEN ALTER COLUMN-3'
			  
			SET @STRQUERY = N'ALTER TABLE DBO.['+@TABLE_NAME+'] ALTER COLUMN ['+@CSOURCECOLUMN+']  '+@DATATYPE+'  '+@CCOLUMN_LENGTH+' '  
			PRINT @STRQUERY      
			EXEC SP_EXECUTESQL @STRQUERY  
			  
			SET @CFLAG=1    
	    END  
	           
	  
	       
	  ----- ADD FOREIGN KEYS    
		SET @NSTEP=110   
	    SELECT @STRSQL=  
			'ALTER TABLE ' + QUOTENAME(SCHEMA_NAME()) + '.' + QUOTENAME(@CTARGATETABLE) + '   
			 WITH NOCHECK ADD CONSTRAINT ' + QUOTENAME(@FOREIGNKEY) + '   
			 FOREIGN KEY(' + QUOTENAME(@CTARGATECOLUMN) + ')   
			 REFERENCES ' + QUOTENAME(SCHEMA_NAME()) + '.' +   
			 QUOTENAME(@TABLE_NAME) + ' (' + QUOTENAME(@CSOURCECOLUMN) + ')' + CHAR(13)     
	    PRINT @STRSQL  
		EXEC SP_EXECUTESQL @STRSQL    
	         
	  
	    SET @NLOOP_START = @NLOOP_START+1;    
       
    END   
      
  
--END TRY  
--BEGIN CATCH  
     
--           SET @CERORMSG='ERROR IN PROCEDURE SP3S_UPDATE_FK_TABLES_DATA,STEP:'+LTRIM(RTRIM(@NSTEP))+'MESSAGE'+ERROR_MESSAGE()  
--           GOTO END_PROC  
--END CATCH  
  
END_PROC:  
  
--IF ISNULL(@CERORMSG,'')=''  
--	COMMIT  
--ELSE  
--	ROLLBACK  
  
  
SELECT ISNULL(@CERORMSG,'') AS ERRMSG  
           
END  
