-- PROCEDURE TO GENERATE BARCODES FOR A GIVEN MRR_ID OR PO_ID  
create PROCEDURE SAVETRAN_GENBARCODES_JOBCARD    
(    
 @CXNID VARCHAR(40),    
 @CPREFIX VARCHAR(50),    
 @NMODE INT= 1,    
 @NSPID INT=0,    
 @LOCID VARCHAR(2)='',    
 @CERRORMSG VARCHAR(MAX) OUTPUT    
)    
--WITH ENCRYPTION
AS     
BEGIN    
 -- @NMODE : SOURCE OF BARCODE GENERATION, 1- FROM PURCHASE, 2- FROM PO    
 --PRINT 'ROHIT 1'    
 -- THIS PROCEDURE ASSUMES THAT THE PID TABLE IS NORMALIZED FOR UNIQUE CODING    
 -- IF IT IS NOT NORMALIZED THEN THE PROCESS WILL FAIL    
     
 BEGIN TRY    
     
	 DECLARE @NROWS BIGINT,    
	   @NEANROWS BIGINT,    
	   @NFIXROWS BIGINT,    
	   @NCTR     BIGINT,    
	   @CPIDROWID   VARCHAR(50),    
	   @CNEXTPRODUCTCODE VARCHAR(50),    
	   @NNEXTKEYVALUE  NUMERIC(30,0),    
	   @CPIMDEPTID   VARCHAR(5),  
	   @CBIN_ALIAS	VARCHAR(10),  
	   @CLOCID    VARCHAR(2),@CHOLOCID VARCHAR(5),    
	   @CCMD NVARCHAR(MAX),@CTEMPIRDTABLE VARCHAR(MAX),@NWHCOUNT INT,    
	   @CBARCODEPREFIX VARCHAR(100),@CADDPREFIX VARCHAR(50),@DMEMODT DATETIME,    
	   @CPREFIXYEARCODE BIT,@CPREFIXLOCID BIT,@CYEARCODE CHAR(2),@CADDLOCIDPREFIX CHAR(2),    
	   @CTEMPIRMTABLE VARCHAR(500),@NSTEP INT,@CCUSTOMPREFIX VARCHAR(50),@BLOOP BIT,@NPURLOCCNT INT,    
	   @BRANDOMGEN BIT,@NBARCODELEN INT,@CARTICLENO VARCHAR(300),@CARTPREFIX VARCHAR(50),    
	   @BGENEANCODES BIT,@CGENEANCODES VARCHAR(5),    
	   @CEANPREFIX VARCHAR(10),@NEANLENGTH INT,@CEANLENGTH VARCHAR(5),@CPREFIXFLOORID VARCHAR(10),  
	   @CADDFLOORIDPREFIX VARCHAR(10),@NSNCROWS INT,@NLOOPQTY INT,@NBARCODEQTY INT,
	   @CMIXNMATCHACCODE CHAR(10),@NROWS1 INT,@NCODINGSCHEME INT,
	   @CPREFIXMONTHCODE VARCHAR(10),@MONTHCODE VARCHAR(2),@CXNBARCODEPREFIX VARCHAR(50)  ,
	   @bgeneratefixcode bit 
	  
	          
	 SELECT @CYEARCODE='',@CADDLOCIDPREFIX='',@CERRORMSG=''    
	     
	 SET @NSTEP=10    
	     
	 IF OBJECT_ID('TEMPDB..#PIDROWS','U') IS NOT NULL    
	    DROP TABLE #PIDROWS    
	    
	 IF OBJECT_ID('TEMPDB..#BARCODES','U') IS NOT NULL    
	    DROP TABLE #BARCODES    

	 --FOR SKU NAMES 
	 DECLARE @TAB VARCHAR(1000),@MYSQL VARCHAR(MAX)
	 SET @TAB='TEMPDB..##GEN_BARCODE_'+DB_NAME()
	 SET @MYSQL='IF OBJECT_ID('''+@TAB+''',''U'') IS NULL
     SELECT TOP 0 PRODUCT_CODE,GETDATE() INSERTED_ON INTO '+REPLACE(@TAB,'TEMPDB..','')+' FROM SKU;'
     EXEC(@MYSQL)  
	    
	 /*UNMERGED:16MAY2013*/    
	 SELECT A.ROW_ID AS PID_ROW_ID,B.CODING_SCHEME,A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,CONVERT(INT,0) AS SRNO  
	 ,CONVERT(BIT,0) AS GEN_EAN_CODES,cast('' as varchar(15)) as para1_code,cast('' as varchar(15)) as  para2_code  
	 INTO #PIDROWS   
	 FROM PID01106 A 
	 JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
	 WHERE 1=2    
	          
	 SELECT A.ROW_ID AS PID_ROW_ID,A.PRODUCT_CODE INTO #BARCODES FROM PID01106 A  WHERE 1=2    
	     
	 PRINT 'GENBC-1'    
	 SET @NSTEP=20    
	     
	 SET @NROWS = 0    
	 SET @NFIXROWS = 0    
	 SET @NEANROWS = 0    
	     
	     
	 SELECT TOP 1 @CGENEANCODES=VALUE FROM CONFIG WHERE CONFIG_OPTION='GEN_EAN_CODES'    
	 
	 IF @CGENEANCODES='1'    
	    SET @BGENEANCODES=1    
	 ELSE    
	    SET @BGENEANCODES=0    
	     
	 SELECT TOP 1 @CEANPREFIX=VALUE FROM CONFIG WHERE CONFIG_OPTION='EAN_PREFIX'    
	 SELECT TOP 1 @CEANLENGTH=VALUE FROM CONFIG WHERE CONFIG_OPTION='EAN_LENGTH'    
	     
	 IF ISNULL(@CEANLENGTH,'')=''    
	    SET @NEANLENGTH=12    
	 ELSE    
	    SET @NEANLENGTH=CONVERT(INT,@CEANLENGTH)     
	  
	  if isnull(@CEANPREFIX,'')=''
		    select @CEANPREFIX=loc_Ean_prefix from location  where dept_id=@CLOCID
	     
	 IF ISNULL(@LOCID,'')=''    
	    SELECT TOP 1 @CLOCID = DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID             
	 ELSE    
	    SELECT @CLOCID = @LOCID     
	        
     SELECT TOP 1 @CHOLOCID = [VALUE] FROM CONFIG WHERE CONFIG_OPTION = 'HO_LOCATION_ID'    
	      
	 IF ISNULL(@CLOCID,'') = ''     
		GOTO END_PROC      
	     
    
      PRINT 'ENTER BCGEN-1'    
	  SELECT @CPIMDEPTID = location_code ,@DMEMODT=MEMO_DT FROM ORD_PLAN_MST WHERE MEMO_ID = @CXNID    
	  IF ISNULL(@CPIMDEPTID,'') = ''    
		 GOTO END_PROC    
	      
    --FOR CUSTOMISE BARCODE
    
	 
	 IF OBJECT_ID ('SAVETRAN_GENCUSTOM_BARCODE','P')   IS NOT NULL
	 BEGIN
	   ALTER TABLE #PIDROWS ADD SUB_SECTION_CODE VARCHAR(10) DEFAULT('')
	   --ALTER TABLE #PIDROWS ADD PARA1_CODE VARCHAR(10) DEFAULT('')
	   --ALTER TABLE #PIDROWS ADD PARA2_CODE VARCHAR(10) DEFAULT('')
	   ALTER TABLE #PIDROWS ADD KEY_CODE VARCHAR(50) DEFAULT('')
	   ALTER TABLE #PIDROWS ADD GST_PERCENTAGE NUMERIC(10,2) DEFAULT(0)
	  
	   EXEC SAVETRAN_GENCUSTOM_BARCODE @CXNID,@CPREFIX,5,@NSPID ,@LOCID,@CERRORMSG  OUTPUT 
	   IF ISNULL(@CERRORMSG,'')<>''
	   GOTO END_PROC
	     
	   GOTO INS_CODES
	 END
	     
   
	 
	      
	  SET @NFIXROWS = @@ROWCOUNT    

	  --always generate Unique barocde
	      
	  PRINT 'ENTER BCGEN-3'    
	  -- BARCODE GENERATION FOR LOT AND UNIQUE CODES    
	  INSERT #PIDROWS ( PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,ARTICLE_NO,SRNO) /*UNMERGED:16MAY2013*/     
	  SELECT A.ROW_ID, 3 CODING_SCHEME, A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,A.SRNO    
	  FROM ORD_PLAN_DET A    
	  JOIN ARTICLE B ON A.ARTICLE_CODE = B.ARTICLE_CODE    
	  LEFT OUTER JOIN ORD_PLAN_BARCODE_DET C ON C.REFROW_ID=A.ROW_ID
	  WHERE A.MEMO_ID = @CXNID     
	  AND C.PRODUCT_CODE IS NULL 
	  AND B.ARTICLE_PRD_MODE  <>3
	  ORDER BY A.SRNO     
	      
	 SET @NROWS=@@ROWCOUNT    
     
	 --lot and fix also generate Unique barcode in Production module as Discuss with sanjiv sir 
	 Update #PIDROWS set coding_scheme =3 where isnull(coding_scheme,0)<>3

	  --One more barcode generate in case of fix and lot 

	   PRINT 'ENTER BCGEN-4'    
      
	  IF EXISTS(SELECT TOP 1'U'  FROM ORD_PLAN_DET A   (NOLOCK)  
	  JOIN ARTICLE B (NOLOCK) ON A.ARTICLE_CODE = B.ARTICLE_CODE    
	  WHERE A.MEMO_ID = @CXNID  AND B.CODING_SCHEME IN(2,1))
	  BEGIN

	  --  UPDATE A SET TRADING_PRODUCT_CODE=ISNULL(B.PRODUCT_CODE,'')  
	    ;with Cte_Trading as 
	    (
	    SELECT A.ROW_ID ,B.PRODUCT_CODE ,
	           FixSrNo =ROW_NUMBER() over(partition by a.row_id order by case when B.PRODUCT_CODE LIKE A1.EAN_PREFIX+'%' then 0 else 1 end )
		FROM ORD_PLAN_DET A  WITH (ROWLOCK)
		JOIN ARTICLE A1 (NOLOCK) ON A1.ARTICLE_CODE=A.ARTICLE_CODE  
		JOIN SKU B (NOLOCK) ON A.ARTICLE_CODE=B.ARTICLE_CODE AND A.PARA1_CODE=B.PARA1_CODE AND A.PARA2_CODE=B.PARA2_CODE  
		WHERE A.MEMO_ID = @CXNID    
		AND CHARINDEX('@',B.PRODUCT_CODE)=0
		AND ISNULL(A.TRADING_PRODUCT_CODE,'') =''
		and b.barcode_coding_scheme=1
	    and a1.coding_scheme=1
		AND B.PRODUCT_CODE <>''
		)
        UPDATE A SET TRADING_PRODUCT_CODE=ISNULL(B.PRODUCT_CODE,'') 
        FROM ORD_PLAN_DET A  WITH (ROWLOCK)
        join Cte_Trading b on a.ROW_ID =b.ROW_ID 
        WHERE A.MEMO_ID = @CXNID   and b.FixSrNo=1
	
		   -- BARCODE GENERATION FOR FIXED CODES  
		 INSERT #PIDROWS ( PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,ARTICLE_NO,SRNO,GEN_EAN_CODES,PARA1_CODE ,PARA2_CODE)  
		 SELECT LEFT(A.ROW_ID,38)+'ZZ' AS ROW_ID, B.CODING_SCHEME CODING_SCHEME, A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,A.SRNO ,B.GEN_EAN_CODES,
				 A.PARA1_CODE ,A.PARA2_CODE
		 FROM ORD_PLAN_DET A  
		 JOIN ARTICLE B ON A.ARTICLE_CODE = B.ARTICLE_CODE
		 WHERE A.MEMO_ID = @CXNID AND 
		 ISNULL(A.TRADING_PRODUCT_CODE,'') = ''  
		 AND B.ARTICLE_PRD_MODE  <>3
		 AND B.CODING_SCHEME<>3
		 AND (B.CODING_SCHEME<>1 OR (gen_ean_codes=1  AND @CGENEANCODES=1))
		 ORDER BY A.SRNO    

		 UPDATE #PIDROWS SET GEN_EAN_CODES =0 WHERE CODING_SCHEME=2 and GEN_EAN_CODES=1

		 SET @BGENERATEFIXCODE=1
   
    --END OF LOT OR FIX BARCODE GENERATION


   END
      
	
      
	 PRINT 'GENBC-4'    
	     
	 SET @NSTEP=90    
	    
	 IF NOT EXISTS ( SELECT NAME FROM SYSOBJECTS WHERE NAME = 'SP_GETNEWPREFIX' )    
	 BEGIN    
		  SELECT TOP 1 @CADDPREFIX = VALUE FROM CONFIG WHERE 
		  CONFIG_OPTION='barcode_prefix'
		      
		  SELECT TOP 1 @CPREFIXYEARCODE= VALUE FROM CONFIG WHERE
		  CONFIG_OPTION='YEAR_CODE_IN_PC'
		  
		  IF ISNULL(@CPREFIXYEARCODE,'')='1'    
			SET @CYEARCODE= RIGHT(LTRIM(RTRIM(STR(DATEPART(YY,@DMEMODT)))),2)     
		   
		    SELECT TOP 1 @CPREFIXMONTHCODE= VALUE FROM CONFIG WHERE CONFIG_OPTION='MONTH_CODE_IN_PC' 
		  IF ISNULL(@CPREFIXMONTHCODE,'')='1'
				SELECT @MONTHCODE=CASE WHEN MONTH(GETDATE())<10 THEN '0'+ CAST(MONTH(GETDATE()) AS VARCHAR(2)) ELSE CAST(MONTH(GETDATE())AS VARCHAR(2))  END
		   
		  
		  SELECT TOP 1 @CPREFIXFLOORID= VALUE FROM CONFIG WHERE 
		  CONFIG_OPTION='FLOOR_ID_IN_PC'
		  
		  IF ISNULL(@CPREFIXFLOORID,'')='1'    
				SET @CADDFLOORIDPREFIX=@CLOCID+ISNULL(@CBIN_ALIAS ,'')
		  ELSE  
				SET @CADDFLOORIDPREFIX=''  
		  
		      
		  SELECT TOP 1 @CPREFIXLOCID= VALUE FROM CONFIG WHERE 
		  CONFIG_OPTION='LOCATION_ID_IN_PC'
		  
		  IF ISNULL(@CPREFIXLOCID,'')='1' AND ISNULL(@CPREFIXFLOORID,'')<>'1'   
			 SET @CADDLOCIDPREFIX=@CLOCID    
		  ELSE    
		  IF @CADDFLOORIDPREFIX=''  
		  BEGIN    
			  --IN CASE THE PURCHASES ARE DONE AT MULTIPLE LOCATIONS, FORCE THE LOCATION ID IN PREFIX    
			  SELECT @NPURLOCCNT=COUNT(*) FROM LOCATION WHERE PUR_LOC = 1 OR DEPT_ID=@CHOLOCID    
			  IF ISNULL(@NPURLOCCNT,0)>1    
				BEGIN    
			  IF NOT EXISTS (SELECT TOP 1 CONFIG_OPTION FROM CONFIG WHERE  CONFIG_OPTION='LOCATION_ID_IN_PC')     
				INSERT CONFIG ( CONFIG_OPTION, VALUE, ROW_ID, LAST_UPDATE, REMARKS )     
				SELECT 'LOCATION_ID_IN_PC' AS CONFIG_OPTION,'1' AS VALUE,    
				'' AS ROW_ID,GETDATE() AS  LAST_UPDATE,'' AS  REMARKS
			  ELSE    
			   UPDATE CONFIG SET VALUE='1' WHERE CONFIG_OPTION='LOCATION_ID_IN_PC' 
			          
				  SET @CADDLOCIDPREFIX=@CLOCID    
		  END    
	  END    
	    
	  PRINT 'GENBC-5'    
	  
	   
	  SET @NSTEP=100    
	  SET  @CPREFIX = LTRIM(RTRIM(ISNULL(@CYEARCODE,''))) + 
	                  LTRIM(RTRIM(ISNULL(@MONTHCODE,''))) +
	                  LTRIM(RTRIM(ISNULL(@CADDLOCIDPREFIX,''))) +   
	                  LTRIM(RTRIM(ISNULL(@CADDFLOORIDPREFIX,''))) +  
	                  LTRIM(RTRIM(ISNULL(@CADDPREFIX,'')))    
	 END     
	 ELSE    
	 BEGIN    
		  -- GETTING CUSTOM PREFIX FOR THE CURRENT ROW OF PID    
		  EXEC SP_GETNEWPREFIX @CPIDROWID, 'PUR', @CCUSTOMPREFIX OUTPUT    
		  IF @CCUSTOMPREFIX IS NULL    
		   GOTO END_PROC    
		  SET @CPREFIX = @CCUSTOMPREFIX    
	 END    
	
	
	IF @NROWS  > 0 
	  BEGIN  
		 DECLARE @CEANSOURCEABLE VARCHAR(100)  
		 SET @CEANSOURCEABLE='ORD_PLAN_DET'  
		 SET @NSTEP=150  
		 PRINT 'GENERATE EAN CODE FOR :'+STR(@NEANROWS)+STR(@NROWS)
		 EXEC GETNEXTEANCODE @NEANLENGTH,@CEANPREFIX,1,'', @NEANROWS,@CEANSOURCEABLE,@CXNID,@CERRORMSG OUTPUT   
		   
		 IF @CERRORMSG<>''  
		 BEGIN  
		  PRINT 'GENBARCODE_JOBCARD-RETURND'  
		  GOTO END_PROC  
		 END    
	  END 


	 IF @NROWS > 0    
	 BEGIN    
	      
		  SET @NSTEP=110    
		      
		  PRINT 'BAR CODE PREFIX :'+@CPREFIX    
		      
		  PRINT 'GENBC-6'    
		     
		  --CHECKING IF BARCODE SHOULD BE GENERATED RANDOMLY OR USING GETNEXTKEY    
		  SELECT TOP 1 @BRANDOMGEN=ISNULL(VALUE,0) FROM CONFIG WHERE CONFIG_OPTION='PRODUCT_CODE_GENERATION_RANDOM' 
		  
		  SET @BRANDOMGEN=ISNULL(@BRANDOMGEN,0)   
		 
		   
		  IF @BRANDOMGEN=0  
		  BEGIN
			 -- GENERATE BARCODES FOR ARTICLES WHICH ARE CONSIDERED AS PREFIX FOR BAR CODE GENERATION    
			   IF EXISTS (SELECT TOP 1 PID_ROW_ID 
						  FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
						  WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=0 and isnull(a.GEN_EAN_CODES,0)=0  )     
			   BEGIN    		    
		  
			   
			  SELECT @NSNCROWS=SUM(QUANTITY) FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
			  WHERE B.CODING_SCHEME IN (2,3) and isnull(a.GEN_EAN_CODES,0)=0 
			
			
				-- CALLING GETNEXTKEY PROCEDURE TO GENERATE NEW CODES IN BULK    
				EXEC GETNEXTKEY 'SKU', 'PRODUCT_CODE', 50, @CPREFIX, 0, '', @NSNCROWS,@CNEXTPRODUCTCODE OUTPUT     
				IF @CNEXTPRODUCTCODE IS NULL    
					GOTO END_PROC    

			       
			   PRINT 'NEXT PRODUCT CODE AVAILABLE:'+@CNEXTPRODUCTCODE+STR(LEN(@CNEXTPRODUCTCODE))+STR(LEN(@CPREFIX))    
			   SET @NNEXTKEYVALUE = CONVERT(NUMERIC(30,0),RIGHT(LTRIM(RTRIM(@CNEXTPRODUCTCODE)),LEN(@CNEXTPRODUCTCODE)-LEN(@CPREFIX)))    
			       
			   PRINT 'NEXT PRODUCT CODE VALUE:'+STR(@NNEXTKEYVALUE)    
			       
			   PRINT 'GENBC-7'    
			   SET @NSTEP=120    
			       
			   -- GENERATING MULTIPLE ROWS FOR NEWLY GENERATED PRODUCT CODES    
			   DECLARE PID_CUR CURSOR FOR     

			   SELECT PID_ROW_ID,A.QUANTITY,a.coding_scheme  as CODING_SCHEME FROM #PIDROWS A
			   JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE
			   WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=0 and isnull(a.GEN_EAN_CODES,0)=0
			   ORDER BY A.SRNO ,a.PID_ROW_ID    
			       
			   OPEN PID_CUR    
			       
			   FETCH NEXT FROM PID_CUR INTO @CPIDROWID,@NBARCODEQTY,@NCODINGSCHEME    
			   WHILE @@FETCH_STATUS = 0    
			   BEGIN    
					SET @NSTEP=130     
				    
					PRINT 'GENBC-8'
				    
				 --   DELETE  AA FROM #BARCODES AA  JOIN #PIDROWS CC ON AA.PRODUCT_CODE =CC.ARTICLE_NO 
				 --   AND AA.PID_ROW_ID = CC.PID_ROW_ID JOIN ARTICLE B ON CC.ARTICLE_CODE=B.ARTICLE_CODE
					--WHERE AA.PID_ROW_ID = @CPIDROWID AND B.CODING_SCHEME =3
						    
					SET @NLOOPQTY=(CASE WHEN @NCODINGSCHEME=3 THEN @NBARCODEQTY ELSE 1 END)
				   
					WHILE @NLOOPQTY>0
					BEGIN    
						SET @BLOOP=1    
					        
						WHILE @BLOOP=1    
						BEGIN  
							 PRINT 'GENBC-9'  
							 
							 SET @NSTEP=135    
							 SET @CNEXTPRODUCTCODE = @CPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE)))       
						         
							 IF NOT EXISTS (SELECT TOP 1 PRODUCT_CODE FROM SKU WHERE PRODUCT_CODE=@CNEXTPRODUCTCODE)    
							 BEGIN    
								  SET @NSTEP=137    
								  INSERT #BARCODES ( PID_ROW_ID, PRODUCT_CODE )    
									VALUES   ( @CPIDROWID, @CNEXTPRODUCTCODE )    
							            
								  SET @BLOOP=0      
							 END       
						     
							 PRINT 'GENBC-10'    
						     
							 SET @NSTEP=138    
							 SET @NNEXTKEYVALUE = @NNEXTKEYVALUE + 1          
							 SET @NLOOPQTY=@NLOOPQTY-1
						END    
				         
					 END   
					 SET @NSTEP=140    
				        
					 FETCH NEXT FROM PID_CUR INTO @CPIDROWID,@NBARCODEQTY,@NCODINGSCHEME        
			   END    
			   CLOSE PID_CUR    
			   DEALLOCATE PID_CUR    
			   
			   PRINT 'GENBC-11'    
			   SET @NNEXTKEYVALUE = @NNEXTKEYVALUE - 1    
			   SET @CNEXTPRODUCTCODE = @CPREFIX + LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE)))    
			       
			   SET @NSTEP=150    
			       
			   ---- UPDATING KEYS TABLE WITH THE MAXIMUM BARCODE GENERATED     
			   UPDATE KEYS_PMT SET     
				LASTKEYVAL = LTRIM(RTRIM(@CNEXTPRODUCTCODE))     
			   WHERE TABLENAME = 'SKU'    
			   AND COLUMNNAME = 'PRODUCT_CODE'    
			   AND FINYEAR  = ''    
			   AND PREFIX  = @CPREFIX    
		   END
	
		   
		 -- GENERATE BARCODES FOR ARTICLES WHICH ARE CONSIDERED AS PREFIX FOR BAR CODE GENERATION    
	   IF EXISTS (SELECT TOP 1 PID_ROW_ID FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
			WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=1 and isnull(a.GEN_EAN_CODES,0)=0 )     
	   BEGIN    
	         
		DECLARE ART_CUR CURSOR FOR 

		SELECT DISTINCT A.ARTICLE_NO FROM #PIDROWS A    
		JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE WHERE 
		GENERATE_BARCODES_WITHARTICLE_PREFIX=1 AND isnull(a.GEN_EAN_CODES,0)=0    
	        
		OPEN ART_CUR    
		FETCH NEXT FROM ART_CUR INTO @CARTICLENO    
		WHILE @@FETCH_STATUS=0    
		BEGIN    
	         
		 SET @CARTPREFIX=@CPREFIX+@CARTICLENO+'-'    
	    
		 SELECT @NROWS = COUNT(*) FROM #PIDROWS WHERE ARTICLE_NO=@CARTICLENO    
	         
		 -- CALLING GETNEXTKEY PROCEDURE TO GENERATE NEW CODES IN BULK    
		 EXEC GETNEXTKEY 'SKU', 'PRODUCT_CODE', 50, @CARTPREFIX, 0, '', @NROWS, @CNEXTPRODUCTCODE OUTPUT     
		 IF @CNEXTPRODUCTCODE IS NULL    
		  GOTO END_PROC    
	         
		 SET @NNEXTKEYVALUE = CAST(RIGHT(@CNEXTPRODUCTCODE,LEN(@CNEXTPRODUCTCODE)-LEN(@CARTPREFIX)) AS NUMERIC(30,0))    
	    
		 -- GENERATING MULTIPLE ROWS FOR NEWLY GENERATED PRODUCT CODES    
		 DECLARE PID_CUR CURSOR FOR     
		 SELECT PID_ROW_ID FROM #PIDROWS WHERE ARTICLE_NO=@CARTICLENO    
	         
		 OPEN PID_CUR    
	         
		 FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
		 WHILE @@FETCH_STATUS = 0    
		 BEGIN    
		  SET @NSTEP=130     
	        
		  SET @BLOOP=1    
	          
		  WHILE @BLOOP=1    
		  BEGIN    
		   SET @NSTEP=135    
		   SET @CNEXTPRODUCTCODE = @CARTPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE)))       
	           
		   IF NOT EXISTS (SELECT TOP 1 PRODUCT_CODE FROM SKU WHERE PRODUCT_CODE=@CNEXTPRODUCTCODE)    
		   BEGIN    
			SET @NSTEP=137    
			
			IF EXISTS ( SELECT * FROM #BARCODES WHERE PID_ROW_ID = @CPIDROWID)
				UPDATE #BARCODES SET PRODUCT_CODE=@CNEXTPRODUCTCODE WHERE PID_ROW_ID=@CPIDROWID
				ELSE  
				INSERT #BARCODES ( PID_ROW_ID, PRODUCT_CODE )    
				VALUES   ( @CPIDROWID, @CNEXTPRODUCTCODE )     
	              
			SET @BLOOP=0      
		   END       
	           
		   SET @NSTEP=138    
		   SET @NNEXTKEYVALUE = @NNEXTKEYVALUE + 1          
		  END    
	         
		  FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
		 END    
		 CLOSE PID_CUR    
		 DEALLOCATE PID_CUR    
	         
		 SET @NNEXTKEYVALUE = @NNEXTKEYVALUE - 1    
		 SET @CNEXTPRODUCTCODE = @CARTPREFIX + CONVERT(VARCHAR(30), @NNEXTKEYVALUE)    
	    
		 -- UPDATING KEYS TABLE WITH THE MAXIMUM BARCODE GENERATED     
		 UPDATE KEYS_PMT SET     
		  LASTKEYVAL = LTRIM(RTRIM(@CNEXTPRODUCTCODE))     
		 WHERE TABLENAME = 'SKU'    
		 AND COLUMNNAME = 'PRODUCT_CODE'    
		 AND FINYEAR  = ''    
		 AND PREFIX  = @CARTPREFIX    
	         
		 FETCH NEXT FROM ART_CUR INTO @CARTICLENO    
		END    
	        
		CLOSE ART_CUR    
		DEALLOCATE ART_CUR    
	        
	   END    
	  END    	 
  END
INS_CODES:    



--select * from #PIDROWS a
--join #BARCODES b on a.PID_ROW_ID =b.PID_ROW_ID 
--where right(a.PID_ROW_ID,2)<>'zz'
--order by a.srno

--select * from #PIDROWS a
--join #BARCODES b on a.PID_ROW_ID =b.PID_ROW_ID 
--where right(a.PID_ROW_ID,2)='zz'
--order by a.srno

   SET @NSTEP=350    
       
   PRINT 'GENBC-12'
   
   SET @NSTEP=360    
       

   SELECT TOP 1 @CMIXNMATCHACCODE=VALUE FROM CONFIG WHERE CONFIG_OPTION='MIXNMATCH_AC_CODE'  
  
  
	    
	    INSERT #BARCODES	( PRODUCT_CODE, PID_ROW_ID ) 
	    SELECT PRODUCT_CODE=DET1.PRODUCT_CODE+'-'+ A.PRODUCTSR,A.ROW_ID 
	    FROM 
	    (
	    SELECT A.ROW_ID,A.ARTICLE_CODE ,ART.ARTICLE_SET_CODE,A.SRNO,
	    PRODUCTSR=CAST(ROW_NUMBER() OVER (PARTITION BY ART.ARTICLE_SET_CODE,A.SRNO ORDER BY A.ARTICLE_CODE )  AS VARCHAR(100))
	    FROM ORD_PLAN_DET A
		JOIN ARTICLE ART ON ART.ARTICLE_CODE =A.ARTICLE_CODE 
		LEFT OUTER JOIN #BARCODES BD ON A.ROW_ID =BD.PID_ROW_ID 
		WHERE A.MEMO_ID=@CXNID 
		AND ISNULL(ART.ARTICLE_SET_CODE,'')<>''
		AND BD.PID_ROW_ID IS NULL
		) A
		JOIN
		(   
		    SELECT A.ARTICLE_CODE,A.SRNO,B.PRODUCT_CODE 
			FROM ORD_PLAN_DET A 
			JOIN #BARCODES B ON A.ROW_ID=B.PID_ROW_ID 
			WHERE A.MEMO_ID =@CXNID
		)  DET1 ON DET1.ARTICLE_CODE =A.ARTICLE_SET_CODE AND A.SRNO =DET1.SRNO
		 ORDER BY A.SRNO,A.ARTICLE_CODE
		
	
	
   
   -- INSERTING RECORDS IN SKU    
   IF OBJECT_ID('tempdb..#INS_SKU') IS NOT NULL DROP TABLE #INS_SKU
   
   SELECT B.PRODUCT_CODE,ART.ARTICLE_NAME, A.ARTICLE_CODE
   ,A.PARA1_CODE, A.PARA2_CODE, A.PARA3_CODE, A.PARA4_CODE, A.PARA5_CODE, A.PARA6_CODE
   ,A.PURCHASE_PRICE, A.MRP,  GETDATE() AS LAST_UPDATE
   ,C.MEMO_NO AS INV_NO, C.MEMO_DT, C.MEMO_DT RECEIPT_DT,C.AC_CODE AS AC_CODE
   ,'0000000' AS FORM_ID,A.WHOLESALE_PRICE AS WS_PRICE,3 as CODING_SCHEME,A.HSN_CODE    
   INTO #INS_SKU
   FROM #BARCODES B    
   JOIN ORD_PLAN_DET A ON B.PID_ROW_ID=A.ROW_ID
   JOIN ORD_PLAN_MST C ON C.MEMO_ID = A.MEMO_ID    
   JOIN ARTICLE ART ON A.ARTICLE_CODE = ART.ARTICLE_CODE    
   LEFT OUTER JOIN SKU D ON B.PRODUCT_CODE = D.PRODUCT_CODE    
   WHERE C.MEMO_ID = @CXNID AND D.PRODUCT_CODE IS NULL
   union all
   SELECT B.PRODUCT_CODE,ART.ARTICLE_NAME, A.ARTICLE_CODE
   ,A.PARA1_CODE, A.PARA2_CODE, A.PARA3_CODE, A.PARA4_CODE, A.PARA5_CODE, A.PARA6_CODE
   ,A.PURCHASE_PRICE, A.MRP,  GETDATE() AS LAST_UPDATE
   ,C.MEMO_NO AS INV_NO, C.MEMO_DT, C.MEMO_DT RECEIPT_DT,C.AC_CODE AS AC_CODE
   ,'0000000' AS FORM_ID,A.WHOLESALE_PRICE AS WS_PRICE,ART.CODING_SCHEME,A.HSN_CODE    
   FROM #BARCODES B    
   JOIN ORD_PLAN_DET A ON B.PID_ROW_ID=left(A.ROW_ID,38)+'ZZ'
   JOIN ORD_PLAN_MST C ON C.MEMO_ID = A.MEMO_ID    
   JOIN ARTICLE ART ON A.ARTICLE_CODE = ART.ARTICLE_CODE    
   LEFT OUTER JOIN SKU D ON B.PRODUCT_CODE = D.PRODUCT_CODE    
   WHERE C.MEMO_ID = @CXNID AND D.PRODUCT_CODE IS NULL
   and B.PID_ROW_ID<>A.ROW_ID
   



   INSERT SKU ( PRODUCT_CODE,PRODUCT_NAME,ARTICLE_CODE, PARA1_CODE, PARA2_CODE, PARA3_CODE,PARA4_CODE, PARA5_CODE, PARA6_CODE,    
	PURCHASE_PRICE, MRP,  LAST_UPDATE,INV_NO,INV_DT, RECEIPT_DT, AC_CODE,FORM_ID,WS_PRICE,BARCODE_CODING_SCHEME,hsn_code  )    
   SELECT PRODUCT_CODE,ARTICLE_NAME, ARTICLE_CODE,PARA1_CODE, PARA2_CODE, PARA3_CODE, PARA4_CODE, PARA5_CODE, PARA6_CODE
   ,PURCHASE_PRICE, MRP,  LAST_UPDATE ,INV_NO, MEMO_DT, RECEIPT_DT,AC_CODE,FORM_ID,WS_PRICE,CODING_SCHEME ,HSN_CODE 
   FROM #INS_SKU    
   
   SET @NSTEP=361
   SET @MYSQL='INSERT '+REPLACE(@TAB,'TEMPDB..','')+'(PRODUCT_CODE,INSERTED_ON)    
   SELECT PRODUCT_CODE,GETDATE()
   FROM #INS_SKU'
   EXEC(@MYSQL)

	SET @NSTEP=370    
       
   PRINT 'GENBC-13'
   -- INSERTING RECORDS IN SKU_OH    
  INSERT SKU_OH ( PRODUCT_CODE, DISCOUNT_AMOUNT, TAX_AMOUNT, FREIGHT, OTHER_CHARGES, ROUND_OFF, VALUE_ADD )    
   SELECT DISTINCT A.PRODUCT_CODE, 0 AS DISCOUNT_AMOUNT, 0 AS TAX_AMOUNT, 0 AS FREIGHT, 0 AS OTHER_CHARGES,     
   0 AS ROUND_OFF, 0 AS VALUE_ADD    
   FROM #BARCODES A    
   LEFT OUTER JOIN SKU_OH B ON A.PRODUCT_CODE = B.PRODUCT_CODE    
   WHERE B.PRODUCT_CODE IS NULL    
       
   SET @NSTEP=380    
   
   PRINT 'GENBC-14'   
   
 
   INSERT ORD_PLAN_BARCODE_DET (PRODUCT_CODE,REFROW_ID)
   SELECT PRODUCT_CODE,PID_ROW_ID 
   FROM #BARCODES A
   JOIN ORD_PLAN_DET B (NOLOCK) ON A.PID_ROW_ID=B.ROW_ID 
   WHERE B.MEMO_ID =@CXNID

   IF ISNULL(@BGENERATEFIXCODE,0)=1
   BEGIN

	   UPDATE A SET  TRADING_PRODUCT_CODE=B.PRODUCT_CODE
	   FROM ORD_PLAN_DET A
	   JOIN #BARCODES B ON LEFT(A.ROW_ID,38)+'ZZ'=B.PID_ROW_ID
	   WHERE A.MEMO_ID =@CXNID  AND A.ROW_ID <>B.PID_ROW_ID


	   Update a set TRADING_PRODUCT_CODE=B.article_no 
	   from ORD_PLAN_DET A
	   join article b (nolock) on a.ARTICLE_CODE =b.article_code 
	   WHERE A.MEMO_ID =@CXNID
	   and isnull(a.Trading_Product_code,'') ='' and b.coding_scheme =1
	   and isnull(b.gen_ean_codes,0) =0

	  if exists (select top 1 'u'  from ORD_PLAN_DET A (nolock)
	   join article b (nolock) on a.ARTICLE_CODE =b.article_code 
	   WHERE A.MEMO_ID =@CXNID
	   and isnull(a.Trading_Product_code,'') ='' and b.coding_scheme in(1,2))
	   begin
	      set @CERRORMSG='Error in Generating new Trading Barcode'
		  goto END_PROC
	   end


   END


   SET @NSTEP=997 
	
 END TRY     
     
 BEGIN CATCH    
	SET @CERRORMSG = 'PROCEDURE SAVETRAN_GENBARCODES_JOBCARD : STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()    
 END CATCH    
     
END_PROC:    
     
END    
--******************************* END OF PROCEDURE SAVETRAN_GENBARCODES_JOBCARD    