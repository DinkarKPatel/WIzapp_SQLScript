create PROCEDURE SAVETRAN_PCO  --(LocId 3 digit change by Sanjay:06-11-2024) 
(    
  @SPID INT    
 ,@CFINYEAR VARCHAR(10)    
 ,@CMEMONOPREFIX VARCHAR(50)
)    
--WITH ENCRYPTION  
AS    
BEGIN    
  
 DECLARE  @CCMD NVARCHAR(MAX)    
   ,@NSTEP NUMERIC(5,0)    
   ,@CERRORMSG VARCHAR(MAX)    
   ,@CTEMPDBNAME VARCHAR(100)    
   ,@CTEMPTABLENAME VARCHAR(100)    
   ,@CACTUALTABLENAME VARCHAR(100)      
   ,@NMEMONOLEN NUMERIC(20,0)    
   ,@CMEMONOVAL VARCHAR(50)    
   ,@CMEMOIDVAL VARCHAR(50)    
   ,@CLOCATIONID VARCHAR(4)    
   ,@BENABLETEMPDATABASE BIT       
   ,@CIDFIELD VARCHAR(50)    
   ,@CHOLOCATIONID VARCHAR(4)  
   ,@DMEMO_DT DATETIME  
   ,@CSOURCEID VARCHAR(4)  
   ,@DMEODT DATETIME  
   ,@DLOCOPENDT DATETIME  
   ,@CTARGETID VARCHAR(4)  
   ,@CHODEPTID VARCHAR(4)  
   ,@CURRENT_LOCATIONID  VARCHAR(4)  
   ,@HO_LOCATIONID VARCHAR(4)  
   ,@PARTY_DEPT_ID VARCHAR(4)  
   ,@PARTY_DEPT VARCHAR(4)  
 DECLARE @TOPENING_BALANCE TABLE(AMOUNT NUMERIC(18,2))     
 BEGIN TRY    
  BEGIN TRANSACTION    
      
  SET @NSTEP=1    
   
	  
    
  SELECT @CHOLOCATIONID = [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'    
 
  --SELECT @HO_LOCATIONID=VALUE FROM CONFIG WHERE CONFIG_OPTION ='HO_LOCATION_ID'   
  
  -- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List  
  SET @CTEMPDBNAME = ''    
  SET @CIDFIELD='MEMO_ID'    
      
  SET @NSTEP=10    
  SET @CACTUALTABLENAME='PCO_MST'    
      
  SET @NSTEP=20    
  SET @CTEMPTABLENAME='TEMP_PCO_MST' +'_'+LTRIM(RTRIM(@SPID))     
  
  SET @NSTEP=30    
  SET @NMEMONOLEN='10'    
      

	SET @cCmd=N'SELECT TOP 1 @cLocationId=location_code FROM '+@CTEMPTABLENAME 
	EXEC SP_EXECUTESQL @cCmd,N'@cLocationId varchar(4) output',@cLocationId OUTPUT

  SET @NSTEP=40    
  --GENERATING MEMO_NO    
  EXEC GETNEXTKEY    
       @CTABLENAME=@CACTUALTABLENAME    
      ,@CCOLNAME='MEMO_NO'    
      ,@NWIDTH=@NMEMONOLEN    
      ,@CPREFIX=@CMEMONOPREFIX    
      ,@NLZEROS=1    
      ,@CFINYEAR=@CFINYEAR    
      ,@NROWCOUNT=0    
      ,@CNEWKEYVAL=@CMEMONOVAL OUTPUT    
    
  SET @NSTEP=50    
  IF ISNULL(@CMEMONOVAL,'')=''    
  BEGIN    
    SET @CERRORMSG='ERROR GENERATING NEW MEMO NUMBER.'    
    GOTO END_PROC    
  END    
  ELSE    
  BEGIN  
    SET @CMEMOIDVAL = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))  
  END    
      
  SET @NSTEP=60    
  IF ISNULL(@CMEMOIDVAL,'')=''     
  BEGIN    
    SET @CERRORMSG='ERROR GENERATING NEW MEMO ID'    
  END    
   
  SET @NSTEP=65    
  --SET @CCMD=N'IF NOT EXISTS(SELECT * FROM SYS.TABLES WHERE NAME='''+@CTEMPTABLENAME+''')    
    SET @CCMD=N'IF OBJECT_ID('''+@CTEMPDBNAME+@CTEMPTABLENAME+''',''U'') IS  NULL    
     SET @CERRORMSGOUT=''TEMPERORY TABLE DOESNOT EXISTS..PLEASE CHECK.....'''    
  PRINT @CCMD   
          
  EXEC SP_EXECUTESQL @CCMD,N'@CERRORMSGOUT VARCHAR(MAX) OUTPUT',@CERRORMSGOUT=@CERRORMSG OUTPUT    
  IF ISNULL(@CERRORMSG,'')<>''    
  GOTO END_PROC    
      
  SET @NSTEP=70    
  SET @CCMD=N'UPDATE  '+@CTEMPDBNAME +''+''+@CTEMPTABLENAME +' SET MEMO_NO='''+@CMEMONOVAL+''' , MEMO_ID='''+@CMEMOIDVAL+''''    
  PRINT @CCMD    
  EXEC SP_EXECUTESQL @CCMD     
      
  SET @NSTEP=80    
  EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN   
     @CSOURCEDB = @CTEMPDBNAME  
   , @CSOURCETABLE = @CTEMPTABLENAME  
   , @CDESTDB  = ''  
   , @CDESTTABLE = @CACTUALTABLENAME  
   , @CKEYFIELD1 = @CIDFIELD  
   , @BALWAYSUPDATE = 0  
     
  SET @NSTEP=90    
  ---FOR NON-HO LOCATION, THE PETTY CASH OUT TRANSACTION SHOULD NOT MAKE THE BALANCE NEGATIVE    
  IF @CLOCATIONID<>@CHOLOCATIONID  
  BEGIN  
 SET @NSTEP=100      
 SELECT @DMEMO_DT=MEMO_DT FROM PCO_MST WHERE MEMO_ID=@CMEMOIDVAL    
    
 SET @NSTEP = 110  
 INSERT @TOPENING_BALANCE  
 EXEC SP_CASHXN   @CLOCATIONID  
     ,''  
     ,@DMEMO_DT  
     ,1,0,1  
   
 SET @NSTEP = 120  
 IF EXISTS(SELECT TOP 1 'U' FROM @TOPENING_BALANCE WHERE ISNULL(AMOUNT,0)<0)  
 BEGIN  
  SET @NSTEP = 130  
  SET @CERRORMSG='NON ENOUGH BALANCE FOR PETTY CASH OUT..CANNOT SAVE'  
  GOTO END_PROC  
 END  
 END  
   
 ----VALIDATE MEMO DT NOT LESS THEN   
   
 SELECT @PARTY_DEPT=target_location_Code  FROM PCO_MST A WHERE MEMO_ID = @CMEMOIDVAL   
    
 SET @PARTY_DEPT_ID=@PARTY_DEPT  
   
 SELECT @CSOURCEID = @PARTY_DEPT  
 SELECT @CTARGETID=@CLOCATIONID  
 SELECT @DMEODT= MEMO_DT FROM PCO_MST WHERE MEMO_ID = @CMEMOIDVAL  
 SELECT @DLOCOPENDT = LAST_REQ_DATE FROM LOC_REQ WHERE DEPT_ID =@CSOURCEID  
   
 IF @DMEODT < @DLOCOPENDT  
 BEGIN  
 SET @CERRORMSG = 'SOURCE LOCATION OPENING DATE IS LESS THEN MEMO DATE. LOCATION OPENING DATE '+CONVERT(VARCHAR(10),@DLOCOPENDT,105)+   
                  ' AND MEMO_DT '+CONVERT(VARCHAR(10),@DMEODT,105)  
                    
 GOTO END_PROC                   
 END  
   
 IF EXISTS(SELECT TOP 1'U' FROM location WHERE DEPT_ID=@CSOURCEID  AND server_loc=1)   
 AND  EXISTS(SELECT TOP 1'U' FROM location WHERE DEPT_ID=@CTARGETID  AND server_loc=1)   
 BEGIN  
         INSERT PCI_MST ( MEMO_ID, MEMO_NO, MEMO_DT, AMOUNT, FIN_YEAR, RECEIPT_DT, RECEIVED_BY, LAST_UPDATE,   
         USER_CODE, REMARKS, REFLIFTID, SHIFT_ID, CANCELLED )    
         SELECT    MEMO_ID, MEMO_NO, MEMO_DT, AMOUNT, FIN_YEAR, ''RECEIPT_DT, ''RECEIVED_BY, LAST_UPDATE,   
         USER_CODE, REMARKS, '' REFLIFTID,'' SHIFT_ID,0 CANCELLED   
         FROM PCO_MST WHERE MEMO_id=@CMEMOIDVAL  
  
 END  
 ELSE  
 BEGIN  
   
   
    IF @CSOURCEID=@CTARGETID  
    BEGIN  
      INSERT PCI_MST ( MEMO_ID, MEMO_NO, MEMO_DT, AMOUNT, FIN_YEAR, RECEIPT_DT, RECEIVED_BY, LAST_UPDATE,   
      USER_CODE, REMARKS, REFLIFTID, SHIFT_ID, CANCELLED )    
      SELECT    MEMO_ID, MEMO_NO, MEMO_DT, AMOUNT, FIN_YEAR, ''RECEIPT_DT, ''RECEIVED_BY, LAST_UPDATE,   
      USER_CODE, REMARKS, '' REFLIFTID,'' SHIFT_ID,0 CANCELLED   
      FROM PCO_MST WHERE MEMO_NO=@CMEMOIDVAL  
  
    END  
 END  
   
   
   
   
   
 END TRY    
 BEGIN CATCH    
 SELECT @NSTEP AS STEPNUMBER,@CERRORMSG AS ERROR_MESSAGE, ERROR_NUMBER() AS ERROR_NUMBER,ERROR_MESSAGE() AS ERRORMESSAGE    
 END CATCH    
     
END_PROC:    
    UPDATE pco_mst WITH (ROWLOCk) SET last_update=getdate() WHERE memo_id=@CMEMOIDVAL
 
    IF @@TRANCOUNT>0    
    BEGIN    
	  IF ISNULL(@CERRORMSG,'') = ''    
	   BEGIN    
	     UPDATE pco_mst WITH (ROWLOCk) SET HO_SYNCH_LAST_UPDATE='' WHERE memo_id=@CMEMOIDVAL 
		COMMIT TRANSACTION    
		SELECT '' AS STEP_NUMBER, '' AS ERROR_MESSAGE    
	   END    
	  ELSE    
	   BEGIN    
		ROLLBACK    
		SELECT @NSTEP AS STEP_NUMBER, @CERRORMSG AS ERROR_MESSAGE    
	   END     
    END    
    
    

  SET @CCMD=N'DROP TABLE '+@CTEMPDBNAME+@CTEMPTABLENAME    
  EXEC SP_EXECUTESQL @CCMD    
END     
-------------------------END SAVETRAN_PCO  
  