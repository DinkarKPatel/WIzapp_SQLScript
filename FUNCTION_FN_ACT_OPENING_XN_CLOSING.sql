
-- REVISED FUNTION TO SPEED-UP PROCESS
--*** TO GET OPENING, TRANSACTION AND CLOSING BALANCE OF A GIVEN ACCOUNT
CREATE FUNCTION FN_ACT_OPENING_XN_CLOSING
( 
	@CACCODE VARCHAR(20) = '', 
	@CTRIALHEADCODE VARCHAR(20) = '', 
	@CDEPTID VARCHAR(5), 
	@DOPENINGDT DATETIME, 
	@DCLOSINGDT DATETIME, 
	@CFINYEAR VARCHAR(10), 
	@CCOMPANYCODE VARCHAR(2) 
)
RETURNS @RETTABLEC TABLE ( AC_CODE VARCHAR(20), AC_NAME VARCHAR(100), HEAD_CODE VARCHAR(20), 
						   OPENING NUMERIC(14,2), DEBIT NUMERIC(14,2), CREDIT NUMERIC(14,2), 
						   CLOSING NUMERIC(14,2) )
--WITH ENCRYPTION						   
AS 
BEGIN
	
	DECLARE @CHEADCODETREE VARCHAR(2000),
			@CSTOCKINHANDTREE VARCHAR(2000),
			@CDONOTPICKOBHEADS VARCHAR(2000),
			@CPICKPROFILTLOSSHEADS VARCHAR(1)

	-- TEMPORARY TABLE TO STORE THE OPENING BALANCES OF LEDGERS 
	DECLARE @OPENINGC TABLE ( AC_CODE VARCHAR(10), OPENING NUMERIC(14,2) )

	-- TEMP TABLE TO STORED THE LIST OF LOCATIONS CURRENTLY SELECTED
	-- JOIN THIS TABLE IN EACH QUERY TO GET THE RESULT FOR SINGLE, MULTIPLE OR ALL LOCATIONS
	DECLARE @LOCLISTC TABLE ( DEPT_ID CHAR(5) )
	
	IF @CDEPTID <> ''
		INSERT @LOCLISTC VALUES ( @CDEPTID )
	ELSE
	BEGIN
		IF EXISTS ( SELECT TOP 1 DEPT_ID FROM ACT_FILTER_LOC (NOLOCK) WHERE SP_ID = @@SPID )
			INSERT @LOCLISTC
			SELECT DEPT_ID FROM ACT_FILTER_LOC  (NOLOCK) WHERE SP_ID = @@SPID
		ELSE
			INSERT @LOCLISTC
			SELECT DEPT_ID FROM LOCATION  (NOLOCK) WHERE LOC_TYPE=1 AND DEPT_ID=MAJOR_DEPT_ID
	END


	IF @CTRIALHEADCODE <> ''
	BEGIN
		SELECT @CHEADCODETREE = DBO.FN_ACT_TRAVTREE( @CTRIALHEADCODE ) 
	END
	ELSE
		SET @CHEADCODETREE = ''

	SELECT @CSTOCKINHANDTREE = DBO.FN_ACT_TRAVTREE( '0000000017' )
	SELECT @CDONOTPICKOBHEADS = DBO.FN_ACT_TRAVTREE('0000000010')

	SELECT TOP 1 @CPICKPROFILTLOSSHEADS=VALUE FROM CONFIG WHERE CONFIG_OPTION='PICK_PROFITLOSS_HEADS'
	IF ISNULL(@CPICKPROFILTLOSSHEADS,'')<>'1'
		SELECT @CDONOTPICKOBHEADS = @CDONOTPICKOBHEADS + ', '+DBO.FN_ACT_TRAVTREE('0000000009')
	


	IF @CHEADCODETREE = ''
	BEGIN
		INSERT @RETTABLEC
		SELECT X.AC_CODE, X.AC_NAME, X.HEAD_CODE, 
			0 AS OPENING, 
			ISNULL(Y.DEBIT,0) AS DEBIT, ISNULL(Y.CREDIT,0) AS CREDIT, 0 AS CLOSING
		FROM LM01106 X
		LEFT OUTER JOIN 
		( 
			SELECT A.AC_CODE,
			SUM(A.DEBIT_AMOUNT) AS DEBIT, 
			SUM(A.CREDIT_AMOUNT) AS CREDIT
			FROM VD01106 A  (NOLOCK) 
			JOIN VM01106 B  (NOLOCK) ON B.VM_ID = A.VM_ID
			JOIN @LOCLISTC LOCLIST ON B.DEPT_ID = LOCLIST.DEPT_ID
			WHERE B.VOUCHER_DT BETWEEN @DOPENINGDT AND @DCLOSINGDT
			-- AND B.DEPT_ID = ( CASE WHEN @CDEPTID <> '' THEN @CDEPTID ELSE B.DEPT_ID END )
			AND A.AC_CODE = ( CASE WHEN @CACCODE <> '' THEN @CACCODE ELSE A.AC_CODE END )
			AND B.CANCELLED = 0  AND ISNULL(B.OP_ENTRY,0)=0 AND ISNULL(B.MEMO,0)=0 
			AND A.COMPANY_CODE = @CCOMPANYCODE 
			AND B.FIN_YEAR = @CFINYEAR
			GROUP BY A.AC_CODE
		) Y ON X.AC_CODE = Y.AC_CODE
		WHERE X.AC_CODE = ( CASE WHEN @CACCODE <> '' THEN @CACCODE ELSE X.AC_CODE END )

--		UPDATE @RETTABLEC SET OPENING = ( DBO.FN_ACT_OPENING( AC_CODE, @CDEPTID, @DOPENINGDT, @CFINYEAR, @CCOMPANYCODE ))
	END
	ELSE
	BEGIN

		INSERT @RETTABLEC
		SELECT X.AC_CODE, X.AC_NAME, X.HEAD_CODE, 
			0 AS OPENING, 
			ISNULL(Y.DEBIT,0) AS DEBIT, ISNULL(Y.CREDIT,0) AS CREDIT, 0 AS CLOSING
		FROM LM01106 X
		LEFT OUTER JOIN 
		( 
			SELECT A.AC_CODE,
			SUM(A.DEBIT_AMOUNT) AS DEBIT, 
			SUM(A.CREDIT_AMOUNT) AS CREDIT
			FROM VD01106 A  (NOLOCK) 
			JOIN VM01106 B  (NOLOCK) ON B.VM_ID = A.VM_ID
			JOIN LM01106 C  (NOLOCK) ON A.AC_CODE = C.AC_CODE
			JOIN @LOCLISTC LOCLIST ON B.DEPT_ID = LOCLIST.DEPT_ID
			WHERE B.VOUCHER_DT BETWEEN @DOPENINGDT AND @DCLOSINGDT
			-- AND B.DEPT_ID = ( CASE WHEN @CDEPTID <> '' THEN @CDEPTID ELSE B.DEPT_ID END )
			AND B.CANCELLED = 0  AND ISNULL(B.OP_ENTRY,0)=0  AND ISNULL(B.MEMO,0)=0 
			AND A.COMPANY_CODE = @CCOMPANYCODE 
			AND B.FIN_YEAR = @CFINYEAR
			AND CHARINDEX( C.HEAD_CODE, @CHEADCODETREE ) > 0
			GROUP BY A.AC_CODE
		) Y ON X.AC_CODE = Y.AC_CODE
		WHERE CHARINDEX( X.HEAD_CODE, @CHEADCODETREE ) > 0

--		UPDATE @RETTABLEC SET OPENING = ( DBO.FN_ACT_OPENING( AC_CODE, @CDEPTID, @DOPENINGDT, @CFINYEAR, @CCOMPANYCODE ))
	END

	-- GETTING OPENING BALANCES FOR LEDGERS IN @RETTABLEC
	
	INSERT @OPENINGC ( AC_CODE, OPENING )
	SELECT X.AC_CODE, SUM(X.OPENING) AS OPENING
	FROM 
	(
		---- ADDING OPENING BALANCES OF "STOCK-IN-HAND" ACCOUNTS 
		---- AS SPECIFIED IN LOCOB FOR THE CURRENT YEAR
		--SELECT A.AC_CODE, SUM(CASE WHEN A.OPENING_BALANCE_CR_DR='CR' THEN -1 ELSE 1 END * A.OPENING_BALANCE) AS OPENING
		--FROM LOCOB A (NOLOCK)
		--JOIN @LOCLISTC LOCLIST		ON A.DEPT_ID = LOCLIST.DEPT_ID
		--JOIN LM01106 LM (NOLOCK)	ON A.AC_CODE = LM.AC_CODE
		--JOIN @RETTABLEC RET			ON A.AC_CODE = RET.AC_CODE
		--WHERE ( CHARINDEX( LM.HEAD_CODE, @CSTOCKINHANDTREE ) > 0 )
		--AND A.FIN_YEAR = @CFINYEAR
		--GROUP BY A.AC_CODE
		--UNION ALL

		-- ADDING OPENING BALANCES OF "REGULAR" ACCOUNTS FROM LOCOB
		SELECT A.AC_CODE, SUM(CASE WHEN A.OPENING_BALANCE_CR_DR='CR' THEN -1 ELSE 1 END * A.OPENING_BALANCE) AS OPENING
		FROM LOCOB A (NOLOCK)
		JOIN @LOCLISTC LOCLIST		ON A.DEPT_ID = LOCLIST.DEPT_ID
		JOIN LM01106 LM (NOLOCK)	ON A.AC_CODE = LM.AC_CODE
		-- JOIN @RETTABLEC RET			ON A.AC_CODE = RET.AC_CODE
		WHERE ( CHARINDEX( LM.HEAD_CODE, @CSTOCKINHANDTREE ) = 0 )
		AND ( CHARINDEX( LM.HEAD_CODE, @CDONOTPICKOBHEADS ) = 0 )
		AND A.FIN_YEAR <= @CFINYEAR
		GROUP BY A.AC_CODE
		UNION ALL 

		-- ADDING OPENING BALANCES OF REGUALAR ACCOUNTS FROM TRANSACTIONS
		SELECT A.AC_CODE, ISNULL( SUM(A.DEBIT_AMOUNT) - SUM(A.CREDIT_AMOUNT), 0 ) AS OPENING
		FROM VD01106 A (NOLOCK)
		JOIN VM01106 B (NOLOCK)		ON B.VM_ID = A.VM_ID
		JOIN @LOCLISTC LOCLIST		ON B.DEPT_ID = LOCLIST.DEPT_ID
		JOIN LM01106 LM (NOLOCK)	ON A.AC_CODE = LM.AC_CODE
		-- JOIN @RETTABLEC RET			ON A.AC_CODE = RET.AC_CODE
		WHERE ( CHARINDEX( LM.HEAD_CODE, @CSTOCKINHANDTREE ) = 0 )
		AND ( CHARINDEX( LM.HEAD_CODE, @CDONOTPICKOBHEADS ) = 0 )
		AND B.CANCELLED = 0 AND ISNULL(B.MEMO,0)=0 AND ( ISNULL(B.OP_ENTRY,0)=0 OR @CFINYEAR > B.FIN_YEAR )
		AND A.COMPANY_CODE = @CCOMPANYCODE 
		AND B.VOUCHER_DT < @DOPENINGDT
		GROUP BY A.AC_CODE
		UNION ALL		
		
		-- ADDING FROM TRANSACTIONS FOR ACCOUNTS WHERE CLS DO NOT CARRY FORWARD
		SELECT A.AC_CODE, ISNULL( SUM(A.DEBIT_AMOUNT) - SUM(A.CREDIT_AMOUNT), 0 ) AS OPENING
		FROM VD01106 A (NOLOCK)
		JOIN VM01106 B (NOLOCK)		ON B.VM_ID = A.VM_ID
		JOIN @LOCLISTC LOCLIST		ON B.DEPT_ID = LOCLIST.DEPT_ID
		JOIN LM01106 LM (NOLOCK)	ON A.AC_CODE = LM.AC_CODE
		-- JOIN @RETTABLEC RET			ON A.AC_CODE = RET.AC_CODE
		WHERE ( CHARINDEX( LM.HEAD_CODE, @CDONOTPICKOBHEADS ) > 0 )
		AND B.CANCELLED = 0 AND ISNULL(B.OP_ENTRY,0)=0 AND ISNULL(B.MEMO,0)=0 AND A.COMPANY_CODE = @CCOMPANYCODE 
		AND B.FIN_YEAR = @CFINYEAR
		AND B.VOUCHER_DT < @DOPENINGDT
		GROUP BY A.AC_CODE		
		
	) X
	GROUP BY X.AC_CODE
	HAVING SUM(X.OPENING) <> 0

	-- END OF GETTING OPENING BALANCES

	-- UPDATING OPENING BALANCE IN @RETTABLEC FROM @OPENINGC
	UPDATE A SET OPENING = B.OPENING
	FROM @RETTABLEC A
	JOIN @OPENINGC B ON A.AC_CODE = B.AC_CODE

	-- UPDATING CLOSING BALANCE IN @RETTABLEC
	UPDATE @RETTABLEC SET CLOSING = ( OPENING + DEBIT - CREDIT )

	--*** SPECIAL HANDLING OF "STOCK IN HAND" HEADS
	-- DELETING ENTRIES FROM RESULTANT TABLE WHERE HEAD_CODE LIES IN "STOCK IN HAND" HEADS
	DELETE FROM @RETTABLEC WHERE CHARINDEX( HEAD_CODE, @CSTOCKINHANDTREE ) > 0

	-- INSERTING THE OPENING AND CLOSING STRAIGHT FROM LOCOB FOR "STOCK IN HAND" HEADS
	INSERT @RETTABLEC ( AC_CODE, AC_NAME, HEAD_CODE, OPENING, DEBIT, CREDIT, CLOSING )
	SELECT A.AC_CODE, B.AC_NAME, B.HEAD_CODE, 
		SUM(CASE WHEN A.OPENING_BALANCE_CR_DR='CR' THEN -1 ELSE 1 END * A.OPENING_BALANCE) AS OPENING,
		0 AS DEBIT, 0 AS CREDIT,
		SUM(CASE WHEN A.CLOSING_BALANCE_CR_DR='CR' THEN -1 ELSE 1 END * A.CLOSING_BALANCE) AS CLOSING
	FROM LOCOB A (NOLOCK) 
	JOIN LM01106 B  (NOLOCK) ON A.AC_CODE = B.AC_CODE
	JOIN @LOCLISTC LOCLIST ON A.DEPT_ID = LOCLIST.DEPT_ID
	WHERE A.FIN_YEAR = @CFINYEAR
	-- AND A.DEPT_ID = ( CASE WHEN @CDEPTID <> '' THEN @CDEPTID ELSE A.DEPT_ID END )
	AND CHARINDEX( B.HEAD_CODE, @CSTOCKINHANDTREE ) > 0
	GROUP BY A.AC_CODE, B.AC_NAME, B.HEAD_CODE

	RETURN
END
--*************************** END OF FUNCTION FN_ACT_OPENING_XN_CLOSING
