create PROCEDURE GETNEXTKEY_XNS 
	-- THESE ARE THE INPUT PARAMETERS   
	@CTABLENAME VARCHAR(40),  
	@CCOLNAME	VARCHAR(40),  
	@NWIDTH		INTEGER,  
	@CPREFIX	VARCHAR(40) = '',   
	@NLZEROS	BIT = 1,  
	@CFINYEAR	VARCHAR(40) = '',
	@NROWCOUNT	INTEGER = 0 ,
	@CKEYSTABLE VARCHAR(100)=''	  ,
	@CNEWKEYVAL VARCHAR(40) OUTPUT  
--	WITH ENCRYPTION
AS  
BEGIN  
	
begin try
	
	DECLARE @NLASTKEYVAL	BIGINT,
			@NTEMPLASTKEYVAL BIGINT,
			@NVALLEN		INTEGER,
			@NTEMPWIDTH		INTEGER,
			@CZEROS			VARCHAR(40),
			@CCMD			NVARCHAR(400),
			@CLASTKEYVAL	VARCHAR(40),
			@NBOOL			BIT ,
			@CCHKNEWKEYVAL	VARCHAR(40),
			@NCOUNT			INTEGER,
			@NTMPROWCOUNT	INTEGER	 ,@cErrormsg varchar(500),@cStep varchar(4),
			@CCONSTNAME VARCHAR(100)
	
	set @CNEWKEYVAL=''	
	set @cErrormsg=''
	Set @cStep='10'
	
	IF OBJECT_ID(@CKEYSTABLE,'U') IS  NULL
	BEGIN
		PRINT 'CREATE NEW KEYS TABLE FOR ARC'
		SET @CCMD=N'SELECT * INTO ['+@CKEYSTABLE+'] FROM keys WHERE 1=2'
		EXEC SP_EXECUTESQL @CCMD	

		SET @CCONSTNAME='PK_'+@CKEYSTABLE

		SET @CCMD=N' ALTER TABLE ['+@CKEYSTABLE+'] ADD CONSTRAINT ['+@CCONSTNAME+'] PRIMARY KEY (prefix,FinYear) '
		EXEC SP_EXECUTESQL @CCMD	

	END
	

		
	SET @CCMD = N'IF NOT EXISTS (   SELECT LASTKEYVAL FROM [' + @CKEYSTABLE +']'+ 
								 '  WHERE TABLENAME	= ''' + @CTABLENAME + ''' 
								    AND COLUMNNAME	= ''' + @CCOLNAME + '''  
 									AND PREFIX		= ''' + @CPREFIX + ''' 
 									AND FINYEAR		= ''' + @CFINYEAR + ''' )
				  INSERT [' + @CKEYSTABLE + '] ( TABLENAME, COLUMNNAME, PREFIX, FINYEAR, LASTKEYVAL )   
 									  VALUES ( ''' + @CTABLENAME + ''', ''' + @CCOLNAME + ''', ''' + @CPREFIX + ''',
											   ''' + @CFINYEAR + ''', '''') '
	print @cCmd
	EXEC SP_EXECUTESQL @CCMD

Set @cStep='30'
	SET @CCMD = N'SELECT TOP 1 @NTEMPWIDTH = LEN( LASTKEYVAL ),@cLastKeyval = lastkeyval  
				  FROM [' + @CKEYSTABLE + '] d
				  WHERE TABLENAME = ''' + @CTABLENAME + '''  
				  AND COLUMNNAME  = ''' + @CCOLNAME + '''  
				  AND PREFIX	  = ''' + @CPREFIX + '''  
				  AND FINYEAR	  = ''' + @CFINYEAR + ''''
	print @cCmd
	EXEC SP_EXECUTESQL @CCMD, N'@NTEMPWIDTH INTEGER OUTPUT,@clastkeyval varchar(40) output', @NTEMPWIDTH OUTPUT, @clastkeyval OUTPUT
	
	

	
	IF @NLZEROS <> 0   -- ZERO SUFFING IS NOT ENABLED  
		SET @NTEMPWIDTH = @NWIDTH
	
Set @cStep='40'	

		
	SELECT @NVALLEN = @NTEMPWIDTH - LEN(@CPREFIX)  
	
	IF @NVALLEN < 0  
		SELECT  @NVALLEN = 0  

Set @cStep='45'
	set @NTEMPLASTKEYVAL= CAST( RIGHT( @CLASTKEYVAL,@NVALLEN ) AS BIGINT )   
	
	SET @NLASTKEYVAL = (@NTEMPLASTKEYVAL + 1)
Set @cStep='52'
	IF @NLZEROS = 1  
		SELECT @CZEROS = REPLICATE('0', @NVALLEN - LEN(@NLASTKEYVAL))  
	ELSE  
		SELECT @CZEROS = ''  
		
Set @cStep='60'   
	SELECT  @CNEWKEYVAL = @CPREFIX + @CZEROS + LTRIM(RTRIM(CAST(@NLASTKEYVAL AS VARCHAR(40))))

	------------ START OF THE LOOP FOR GENERATION OF KEY CODES
		------------ START OF THE LOOP FOR GENERATION OF KEY CODES
	IF @NROWCOUNT>0 OR @CCOLNAME='PRODUCT_CODE'  
	BEGIN
		-- TEMPORARY # TABLE TO ROW ID STRING
		IF OBJECT_ID('TEMPDB..#TBLTEMPROWIDSTR','U') IS NOT NULL
			DROP TABLE #TBLTEMPROWIDSTR
		
		SELECT ROW_ID INTO #TBLTEMPROWIDSTR FROM PID01106 WHERE 1=2

		SET @NCOUNT = 1	
		SET @NBOOL = 0

		WHILE (@NBOOL=0) 
		BEGIN
			
			
			DELETE FROM #TBLTEMPROWIDSTR

			IF @NLZEROS = 1  
				SELECT @CZEROS = REPLICATE('0', @NVALLEN - LEN(@NLASTKEYVAL))  
			ELSE  
				SELECT @CZEROS = ''  

			SELECT @CNEWKEYVAL = @CPREFIX + @CZEROS + LTRIM(RTRIM(CAST(@NLASTKEYVAL AS VARCHAR(40))))
			SET @NTMPROWCOUNT = @NROWCOUNT	
		
			WHILE ( @NTMPROWCOUNT > 0 )
			BEGIN

				-- SET @NTEMPLASTKEYVAL = @NLASTKEYVAL
				SELECT @NTEMPLASTKEYVAL = (@NLASTKEYVAL + @NTMPROWCOUNT - 1 ) -- @NCOUNT)
				--SELECT @NTEMPLASTKEYVAL = (@NTEMPLASTKEYVAL + 1 ) -- @NCOUNT)

				IF @NLZEROS = 1  
					SELECT @CZEROS = REPLICATE('0', @NVALLEN - LEN(@NTEMPLASTKEYVAL))  
				ELSE  
					SELECT @CZEROS = ''  

				SET @CCHKNEWKEYVAL = @CPREFIX + @CZEROS + CAST(@NTEMPLASTKEYVAL AS VARCHAR(40))

				INSERT #TBLTEMPROWIDSTR (ROW_ID) VALUES (@CCHKNEWKEYVAL)

				SET @NTMPROWCOUNT=@NTMPROWCOUNT-1
				SET @NCOUNT=@NCOUNT+1
			END	

			SET @CCMD = N' IF NOT EXISTS (
								SELECT TOP 1 ' + @CCOLNAME + ' FROM ' + @CTABLENAME + '
			 					WHERE ' + @CCOLNAME + ' IN ( SELECT ROW_ID FROM #TBLTEMPROWIDSTR ) )
						   SET @NBOOL = 1'
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD, N'@NBOOL BIT OUTPUT', @NBOOL OUTPUT

			IF @NLZEROS = 1  
				SELECT @CZEROS = REPLICATE('0', @NVALLEN - LEN(@NLASTKEYVAL))  
			ELSE  
				SELECT @CZEROS = ''  

			SELECT @CNEWKEYVAL = @CPREFIX + @CZEROS + LTRIM(RTRIM(CAST(@NLASTKEYVAL AS VARCHAR(40))))

			IF @NBOOL = 0 
			BEGIN
				SET @NLASTKEYVAL = @NLASTKEYVAL + @NROWCOUNT
			END
		END   
	END	
	------------ END OF THE LOOP FOR GENERATION OF KEY CODES 

Set @cStep='70'
	IF @CNEWKEYVAL IS NOT NULL 
	BEGIN
		 SET @CCMD = N' UPDATE [' + @CKEYSTABLE + ']
						SET LASTKEYVAL  = ''' + @CNEWKEYVAL + '''  
						WHERE TABLENAME = ''' + @CTABLENAME + '''  
						AND COLUMNNAME	= ''' + @CCOLNAME + '''  
						AND PREFIX		= ''' + @CPREFIX + '''  
						AND FINYEAR		= ''' + @CFINYEAR + ''''  
		  PRINT @CCMD	
		  EXEC SP_EXECUTESQL @CCMD     
	END

Set @cStep='80'
	SELECT @CNEWKEYVAL = (CASE WHEN @CNEWKEYVAL IS NULL THEN 'NULL' ELSE @CNEWKEYVAL END )
	goto end_proc
end try

begin catch
	set @cErrormsg='Érror in Procedure GETNEXTKEY_XNS at step#'+@cStep+''+ERROR_MESSAGE()
	goto end_proc
end catch	

end_proc:
	print 'error in GETNEXTKEY_XNS :'+ @cErrormsg
END