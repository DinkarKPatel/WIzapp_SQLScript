CREATE PROCEDURE SP3S_SYNCH_MBO_SLS_DATA_NEW      
@CLOCID VARCHAR(10),      
@NMODE INT=0      
AS      
BEGIN      
  DECLARE @DSEARCHXNDT DATETIME,@CSOURCEDB VARCHAR(200),@CTEMPTABLENAME VARCHAR(200),@CTEMPTABLE VARCHAR(200),      
  @CCMD NVARCHAR(MAX),@CSTEP VARCHAR(10),@CERRMSG VARCHAR(MAX),@CUSER_CODE CHAR(7),@DMEMODT DATETIME,      
  @CAPPLYSALESSETUP VARCHAR(2),@CBINSALES VARCHAR(10),@CGENVENDOREANCODES VARCHAR(2),@NIMPORTMODE INT,      
  @BSTOCKNOTFOUND BIT,@BLOOP BIT,@CEANNO VARCHAR(50),@CROWID VARCHAR(40),@NPENDINGQTY NUMERIC(10,2),@CBILLNO VARCHAR(50),      
  @CPRODUCTCODE VARCHAR(50),@CFINYEAR VARCHAR(10),@NQTY NUMERIC(10,2),@CAPPLYMINDISCOUNT VARCHAR(2)      
        
BEGIN TRY      
  SET @CUSER_CODE = '0000000'      
        
        
        
  SET @CSTEP=5   
  
  -- delete from  PRODUCT_CODE_NOT_FOUND
  
  INSERT INTO PRODUCT_CODE_NOT_FOUND 
  SELECT DISTINCt  A.PRODUCT_CODE,@CLOCID FROM SLS_MBODATA A(nolock) LEFT JOIN SKU  B(nolock) On A.PRODUCT_CODE=B.PRoDUCT_COdE
  WHERE  B.PRODUCt_CODE IS NULL  AND A.PRODUCT_CoDE NOT IN (SElECT PRODUCT_CoDE FROm PRODUCT_CODE_NOT_FOUND(nolock))


   DELETE FROM SLS_MBODATA WHERE PRODUCT_CODE NOT IN (SELECT PRODUCT_CODE FROM SKU)

  IF OBJECT_ID('TEMPDB..#VEAN_PMT','U') IS NOT NULL      
   DROP TABLE #VEAN_PMT      
       
  IF OBJECT_ID('TEMPDB..#TERROR','U') IS NOT NULL      
   DROP TABLE #TERROR      
        
  SELECT PRODUCT_CODE,ERROR_MSG INTO #TERROR FROM SLS_MBODATA_ERROR_DETAILS WHERE 1=2      
       
  SELECT VENDOR_EAN_NO AS EAN_NO,A.PRODUCT_CODE,QUANTITY_IN_STOCK AS STOCK_QTY,QUANTITY_IN_STOCK AS SOLD_QTY      
  INTO #VEAN_PMT FROM PMT01106 A (NOLOCK)      
  JOIN SKU B (NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE WHERE 1=2      
          
  DECLARE @TERRORDETAILS TABLE      
  (      
  PRODUCT_CODE VARCHAR(50),      
  REF_NO VARCHAR(15),      
  DEPT_ID CHAR(2),      
  ERROR_MSG VARCHAR(1000)       
  )      
        
  SELECT @NIMPORTMODE=ISNULL(MBOSLS_IMPORT_MODE,0) FROM LOCATION WHERE DEPT_ID=@CLOCID       
  IF @NIMPORTMODE>1      
  BEGIN      
    EXEC SP3S_GETMBO_BARCODEWISESTK @CLOCID,@NIMPORTMODE      
          
    INSERT @TERRORDETAILS ( PRODUCT_CODE,ERROR_MSG )       
    SELECT PRODUCT_CODE,ERROR_MSG  FROM #TERROR      
        
    SELECT TOP 1 @CERRMSG=ISNULL(ERROR_MSG,'') FROM @TERRORDETAILS      
    IF ISNULL(@CERRMSG,'')<>''      
  GOTO END_PROC      
             
    DELETE FROM @TERRORDETAILS       
  END      
    
  --SELECT * FROM #VEAN_PMT WHERE EAN_NO='8907559343355'  
  
             
  IF OBJECT_ID('TEMPDB..#SLSIMPORT','U') IS NOT NULL      
   DROP TABLE #SLSIMPORT      
         
  IF OBJECT_ID('TEMPDB..#SLSTMP','U') IS NOT NULL      
   DROP TABLE #SLSTMP      
       
  SET @CSTEP=10      
        
  CREATE TABLE #SLSIMPORT      
  (      
     SR_NO   NUMERIC(18)      
  ,BILL_NO   VARCHAR(MAX)      
  ,CM_DT   VARCHAR(MAX)      
  ,DEPT_ID   VARCHAR(MAX)      
  ,PRODUCT_CODE VARCHAR(MAX)      
  ,QUANTITY  VARCHAR(MAX)      
  ,AMOUNT   VARCHAR(MAX)      
  ,CANCELLED  VARCHAR(MAX)      
  ,MRP             VARCHAR(MAX)      
  ,DISCOUNT_AMT    VARCHAR(MAX)      
  ,ERROR_MESSAGE   VARCHAR(MAX)      
  ,FIN_YEAR  VARCHAR(10)      
  ,CASH            NUMERIC(12,2)      
     ,CC_AMOUNT       NUMERIC(12,2)      
     ,CC_NAME         VARCHAR(MAX)      
     ,BIN_ID   VARCHAR(5)      
  )      
       
  IF OBJECT_ID('TEMPDB..#TMPSLSDISCTAXOPT','U') IS NOT NULL      
   DROP TABLE #TMPSLSDISCTAXOPT       
               
  SELECT A.PRODUCT_CODE,SUB_SECTION_CODE,A.MRP*A.QUANTITY AS MRPVAL ,A.DISCOUNT_PERCENTAGE,      
  ((A.MRP*A.QUANTITY)-A.NET) AS DISCOUNT_AMOUNT,A.NET,A.ROW_ID AS CMD_ROW_ID,B.USER_CODE,      
  C.SCHEME_NAME AS SLS_TITLE,CONVERT(VARCHAR(MAX),'') AS ERRMSG,CONVERT(VARCHAR(10),'') AS SCHEME_ID,      
  A.ROW_ID,A.TAX_PERCENTAGE,A.TAX_AMOUNT,A.TAX_METHOD,'0000000000' AS TAX_AC_CODE,'0000000000' AS SALE_AC_CODE,      
  B.DISCOUNT_PERCENTAGE AS BILL_LEVEL_DISCOUNT_PERCENTAGE,B.DISCOUNT_AMOUNT AS CMM_DISCOUNT_AMOUNT,      
  A.WEIGHTED_AVG_DISC_PCT,A.WEIGHTED_AVG_DISC_AMT,A.ITEM_ROUND_OFF,      
  B.DISCOUNT_AMOUNT AS BILL_LEVEL_DISCOUNT_AMOUNT,A.BASIC_DISCOUNT_PERCENTAGE,A.BASIC_DISCOUNT_AMOUNT,  
  A.CARD_DISCOUNT_PERCENTAGE,A.CARD_DISCOUNT_AMOUNT ,  
  A.HSN_CODE, A.GST_PERCENTAGE, A.IGST_AMOUNT,   
    A.CGST_AMOUNT,A.SGST_AMOUNT,A.XN_VALUE_WITHOUT_GST,A.XN_VALUE_WITH_GST  
  INTO #TMPSLSDISCTAXOPT FROM CMD01106 A (NOLOCK)      
  JOIN CMM01106 B (NOLOCK) ON A.CM_ID=B.CM_ID      
  JOIN SCHEME_SETUP_DET C ON 1=1      
  JOIN SECTIOND D ON 1=1      
  WHERE 1=2      
              
  SELECT TOP 1 @CAPPLYSALESSETUP=VALUE FROM CONFIG WHERE CONFIG_OPTION='APPLY_SLSSET_MBOSLS'      

    
  PRINT 'UPDATE ROW ID OF ENTRIES'      
  UPDATE SLS_MBODATA SET PENDING_QTY=QUANTITY,ROW_ID=NEWID(),PROCESSED=0,ERRORMSG=''      
  WHERE DEPT_ID=@CLOCID      
        
  IF @NIMPORTMODE<=1       
  BEGIN      
    SET @CCMD=N'SELECT 0 AS SR_NO,MEMO_NO AS BILL_NO,MEMO_DT AS CM_DT,DEPT_ID,A.PRODUCT_CODE,QUANTITY,A.NET AS AMOUNT,      
    CANCELLED,'''' AS ERROR_MESSAGE,A.MRP,0 AS DISCOUNT_AMT,CASH,CC_AMOUNT,CC_NAME      
    FROM SLS_MBODATA A       
    LEFT JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE WHERE DEPT_ID='''+@CLOCID+''''      
    PRINT @CCMD      
        
    SET @CSTEP=25      
    INSERT #SLSIMPORT (SR_NO,BILL_NO,CM_DT,DEPT_ID,PRODUCT_CODE,QUANTITY,AMOUNT,CANCELLED,ERROR_MESSAGE      
    ,MRP,DISCOUNT_AMT,CASH,CC_AMOUNT,CC_NAME)        
    EXEC SP_EXECUTESQL @CCMD      
        
    SET @CSTEP=30      
    UPDATE #SLSIMPORT SET FIN_YEAR='01'+DBO.FN_GETFINYEAR(CM_DT)      
      
    UPDATE SLS_MBODATA SET PROCESSED = 1 WHERE DEPT_ID=@CLOCID   
    GOTO LBLIMPORTSLS      
  END      
    
  SET @BLOOP=0      
       
  SET @CSTEP=35      
  WHILE @BLOOP=0      
  BEGIN      
          
    SET @CEANNO=''      
          
    SET @CSTEP=40       
    SELECT TOP 1 @CEANNO=PRODUCT_CODE,@CROWID=A.ROW_ID,@NPENDINGQTY=ABS(A.PENDING_QTY),@NQTY=QUANTITY,@CBILLNO=A.MEMO_NO,      
    @CFINYEAR='01'+DBO.FN_GETFINYEAR(A.MEMO_DT)      
    FROM SLS_MBODATA A WHERE DEPT_ID=@CLOCID AND PROCESSED=0      
          
    IF ISNULL(@CEANNO,'')=''      
   GOTO LBLIMPORTSLS      
          
    WHILE @NPENDINGQTY>0      
    BEGIN      
    SET @CPRODUCTCODE=''      
             
    SET @CSTEP=45      
    IF @NQTY>0      
    BEGIN      
    SELECT TOP 1 @CPRODUCTCODE=A.PRODUCT_CODE FROM #VEAN_PMT A      
    JOIN CMD01106 B ON A.PRODUCT_CODE=B.PRODUCT_CODE      
    JOIN CMM01106 C ON C.CM_ID=B.CM_ID      
    JOIN SKU D ON D.PRODUCT_CODE=A.PRODUCT_CODE      
    WHERE A.EAN_NO=@CEANNO AND STOCK_QTY>=1      
    AND C.REF_NO=@CLOCID+'-'+@CBILLNO AND C.FIN_YEAR=@CFINYEAR      
                
    IF ISNULL(@CPRODUCTCODE,'')=''      
    BEGIN      
     SELECT TOP 1 @CPRODUCTCODE=PRODUCT_CODE FROM #VEAN_PMT A      
     WHERE EAN_NO=@CEANNO AND STOCK_QTY>=1      
    END      
    END      
    ELSE      
    BEGIN      
    SELECT TOP 1 @CPRODUCTCODE=A.PRODUCT_CODE FROM #VEAN_PMT A      
    WHERE A.EAN_NO=@CEANNO AND SOLD_QTY>0 AND STOCK_QTY=0  
        
    END      
              
    IF ISNULL(@CPRODUCTCODE,'')=''      
    BREAK       
                  
    SET @CSTEP=50      
    SET @CCMD=N'SELECT 0 AS SR_NO, MEMO_NO AS BILL_NO, MEMO_DT AS CM_DT,DEPT_ID,'''+@CPRODUCTCODE+''' AS PRODUCT_CODE,      
    1*'+(CASE WHEN @NQTY<0 THEN '-1' ELSE '1' END)+' AS QUANTITY,NET AS AMOUNT,CANCELLED,'''' AS ERROR_MESSAGE,0 AS MRP,DISCOUNT_AMOUNT,CASH,CC_AMOUNT,CC_NAME,      
    ''000'' AS BIN_ID,'''+@CFINYEAR+''' AS FIN_YEAR FROM SLS_MBODATA A WHERE ROW_ID='''+@CROWID+''''      
    PRINT @CCMD      
          
    SET @CSTEP=55      
    INSERT #SLSIMPORT (SR_NO,BILL_NO,CM_DT,DEPT_ID,PRODUCT_CODE,QUANTITY,AMOUNT,CANCELLED,ERROR_MESSAGE      
    ,MRP,DISCOUNT_AMT,CASH,CC_AMOUNT,CC_NAME,BIN_ID,FIN_YEAR)        
    EXEC SP_EXECUTESQL @CCMD    
	
	  
             
    SET @CSTEP=60      
    UPDATE #VEAN_PMT SET STOCK_QTY=STOCK_QTY-1 WHERE  PRODUCT_CODE=@CPRODUCTCODE      
             
    UPDATE SLS_MBODATA SET PENDING_QTY=ABS(PENDING_QTY)-1 WHERE ROW_ID=@CROWID      
               
    SET @NPENDINGQTY=@NPENDINGQTY-1      
    END      
     
    SET @CSTEP=65      
          
    UPDATE SLS_MBODATA SET PROCESSED=1 WHERE ROW_ID=@CROWID      
          
  END      
       
        
  SET @CSTEP=70      
  IF EXISTS (SELECT TOP 1 * FROM SLS_MBODATA WHERE DEPT_ID=@CLOCID AND PENDING_QTY>0)      
  BEGIN      
    SET @CERRMSG='BAR CODES STOCK NOT AVAILABLE FOR SOME BILLS'      
    GOTO END_PROC      
  END      
        
 LBLIMPORTSLS:      
    
  --SELECT * FROM #SLSIMPORT WHERE BILL_NO IN ('Q900-4057','Q900-4058','Q900-4078','Q900-4111')      
       
        
  PRINT 'START SALE IMPORT'      
  SET @CPRODUCTCODE=''      
        
  SELECT TOP 1 @CPRODUCTCODE=PRODUCT_CODE FROM SLS_MBODATA WHERE DEPT_ID=@CLOCID AND ISNULL(PROCESSED,0)=0      
  IF ISNULL(@CPRODUCTCODE,'')<>''      
  BEGIN      
   SET @CERRMSG='SOME ENTRIES NOT PROCESSED'      
   GOTO END_PROC      
  END      
        
 -- SELECT * FROM #SLSIMPORT       
        
  PRINT 'PROCESSING STEP #'+@CSTEP+'#'+CONVERT(VARCHAR,GETDATE(),113)      
  BEGIN TRANSACTION      
  --GETTING LIST OF EXISTING BILLS.      
  IF OBJECT_ID('TEMPDB..#EXISTINGBILLS','U') IS NOT NULL      
   DROP TABLE #EXISTINGBILLS      
       
  SET @CSTEP=40       
  IF OBJECT_ID('TEMPDB..#NEWBILLS','U') IS NOT NULL      
   DROP TABLE #NEWBILLS      
         
         
  -- SET @CSTEP=50      
  -- UPDATE A SET ERROR_MESSAGE='DIFFERENCE IN PAYMENT AMOUNT AND NET AMOUNT' FROM  #SLSIMPORT A      
  --JOIN       
  --(      
  -- SELECT A.BILL_NO,SUM(CONVERT(NUMERIC(18,2),AMOUNT)) AS AMOUNT,      
  -- SUM(CONVERT(NUMERIC(18,2),CASH)) AS CASH,      
  -- SUM(CONVERT(NUMERIC(18,2),CC_AMOUNT)) AS CC_AMOUNT      
  -- FROM #SLSIMPORT A      
  -- GROUP BY A.BILL_NO      
  -- ) B ON A.BILL_NO=B.BILL_NO       
  --WHERE A.AMOUNT<>(CASE WHEN (A.CASH+A.CC_AMOUNT)=0 THEN A.AMOUNT ELSE  (A.CASH+A.CC_AMOUNT) END)      
       
       
           
  SET @CSTEP=50      
  SELECT A.BILL_NO,SUM(CONVERT(NUMERIC(18,2),AMOUNT)) AS AMOUNT,      
   SUM(CONVERT(NUMERIC(18,2),CASH)) AS CASH,      
   SUM(CONVERT(NUMERIC(18,2),CC_AMOUNT)) AS CC_AMOUNT      
   INTO #SLSTMP      
   FROM #SLSIMPORT A      
   GROUP BY A.BILL_NO   
     
  
         
  UPDATE A SET ERROR_MESSAGE='DIFFERENCE IN PAYMENT AMOUNT AND NET AMOUNT ' FROM  #SLSIMPORT A      
  JOIN #SLSTMP  B ON A.BILL_NO=B.BILL_NO       
  WHERE B.AMOUNT<>(CASE WHEN (B.CASH+B.CC_AMOUNT)=0 THEN B.AMOUNT ELSE  (B.CASH+B.CC_AMOUNT) END)      
        
        
  SELECT TOP 1 @CERRMSG=ERROR_MESSAGE FROM #SLSIMPORT WHERE DEPT_ID=@CLOCID AND ISNULL(ERROR_MESSAGE,'')<>''      
  IF ISNULL(@CERRMSG,'')<>''      
  BEGIN      
   INSERT @TERRORDETAILS ( PRODUCT_CODE, REF_NO, DEPT_ID, ERROR_MSG )       
   SELECT PRODUCT_CODE,BILL_NO AS  REF_NO,DEPT_ID,'DIFFERENCE IN PAYMENT AMOUNT AND NET AMOUNT ,PAYMENT AMOUNT - '+STR(AMOUNT)+' AND NET AMOUNT '+STR((A.CASH+A.CC_AMOUNT))+''  AS ERROR_MSG       
   FROM #SLSIMPORT A       
   WHERE DEPT_ID=@CLOCID       
   GOTO END_PROC      
  END      
        
  /**INVALID CARD NAME.**/       
  SET @CSTEP=55      
  UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG      
  FROM #SLSIMPORT A      
  JOIN       
  (      
    SELECT A.SR_NO,'INVALID CARD NAME.' AS MSG      
    FROM #SLSIMPORT A      
    LEFT JOIN PAYMODE_MST B ON A.CC_NAME =B.PAYMODE_NAME       
    WHERE CC_AMOUNT<>0 AND  B.PAYMODE_NAME  IS NULL      
  )B ON A.SR_NO=B.SR_NO      
       
  SET @CSTEP=60      
  UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG      
  FROM #SLSIMPORT A      
  JOIN       
  (      
    SELECT A.SR_NO,A.PRODUCT_CODE+'BARCODE NOT FOUND.' AS MSG      
    FROM #SLSIMPORT A      
    LEFT JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE WHERE DEPT_ID=@CLOCID      
    AND B.PRODUCT_CODE IS NULL      
  )B ON A.SR_NO=B.SR_NO      
       
       
   IF ISNULL(@CERRMSG,'')=''      
   SELECT TOP 1 @CERRMSG=ERROR_MESSAGE FROM #SLSIMPORT WHERE ISNULL(ERROR_MESSAGE,'')<>''      
         
  IF ISNULL(@CERRMSG,'')<>''      
   GOTO END_PROC      
              
  PRINT 'PROCESSING STEP #'+@CSTEP+'#'+CONVERT(VARCHAR,GETDATE(),113)      
               
  SET @CSTEP=70      
  --LIST OF EXISTING BILLS      
  SELECT B.CM_ID      
  ,B.CM_NO       
  ,A.BILL_NO      
  ,CONVERT(DATETIME,A.CM_DT) AS CM_DT      
  ,A.DEPT_ID      
  ,A.PRODUCT_CODE      
  ,CONVERT(NUMERIC(10,3),QUANTITY) AS QUANTITY      
  ,CONVERT(NUMERIC(18,2),A.AMOUNT) AS AMOUNT      
  ,CONVERT(BIT,(CASE WHEN A.CANCELLED IN ('T','Y','1') THEN 1 ELSE 0 END)) AS CANCELLED      
  ,A.FIN_YEAR      
  ,A.CASH      
     ,A.CC_NAME      
     ,A.CC_AMOUNT        
  INTO #EXISTINGBILLS      
  FROM #SLSIMPORT A      
  JOIN CMM01106 B(NOLOCK) ON A.DEPT_ID+'-'+A.BILL_NO=B.REF_NO AND A.FIN_YEAR=B.FIN_YEAR      
       
  SET @CSTEP=80      
  --LIST OF NEW BILLS      
  SELECT CONVERT(VARCHAR(50),'') AS CM_ID,CONVERT(VARCHAR(50),'') AS CM_NO      
  ,A.BILL_NO      
  ,CONVERT(DATETIME,A.CM_DT) AS CM_DT      
  ,A.DEPT_ID      
  ,A.PRODUCT_CODE      
  ,CONVERT(NUMERIC(10,3),QUANTITY) AS QUANTITY      
  ,CONVERT(NUMERIC(18,2),A.AMOUNT) AS AMOUNT      
  ,CONVERT(BIT,(CASE WHEN A.CANCELLED IN ('T','Y','1') THEN 1 ELSE 0 END)) AS CANCELLED      
  ,A.FIN_YEAR      
  ,A.CASH      
     ,A.CC_NAME      
     ,A.CC_AMOUNT       
  INTO #NEWBILLS      
  FROM #SLSIMPORT A      
  LEFT JOIN CMM01106 B(NOLOCK) ON A.DEPT_ID+'-'+A.BILL_NO=B.REF_NO AND A.FIN_YEAR=B.FIN_YEAR      
  WHERE B.CM_ID IS NULL     
  

  if object_id ('tempdb..#tmpcm_id','u') is not null
     drop table #tmpcm_id
	 SELECT DISTINCT dept_id, CM_ID INTO #TMPCM_ID FROM #EXISTINGBILLS
  
  
   IF OBJECT_ID('TEMPDB..#TMPSTOCK','U') IS NOT NULL
	    DROP TABLE #TMPSTOCK



	 

	 SELECT B.PRODUCT_CODE,A.DEPT_ID ,B.BIN_ID ,
	        SUM(B.QUANTITY) AS STOCK_QTY  
	 INTO #TMPSTOCK
	 FROM #TMPCM_ID A
	 JOIN CMD01106 B ON A.CM_ID  =B.CM_ID 
	 join cmm01106 cmm on cmm.cm_id =b.cm_id 
	 where cmm.CANCELLED =0
	 GROUP BY B.PRODUCT_CODE,A.DEPT_ID ,B.BIN_ID 
	  
       
  SET @CSTEP=410      
  PRINT 'PROCESSING STEP #'+@CSTEP+'#'+CONVERT(VARCHAR,GETDATE(),113)      
        
  --STOCK IS NOT FOUND NEGATIVE, SO LETS PROCEED FOR CREATING ENTRY IN CMM01106,CMD01106 AND PAYMODE_XN_DET      
  DELETE PAYMODE_XN_DET WHERE XN_TYPE='SLS' AND MEMO_ID IN       
  (SELECT DISTINCT CM_ID FROM #EXISTINGBILLS)      
       
  SET @CSTEP=420      
  DELETE CMD01106 WHERE CM_ID IN       
  (SELECT DISTINCT CM_ID FROM #EXISTINGBILLS)      
       
  SET @CSTEP=430      
  DELETE CMM01106 WHERE CM_ID IN       
  (SELECT DISTINCT CM_ID FROM #EXISTINGBILLS)      
       
  SET @CSTEP=440      
  DECLARE @CDEPT_ID VARCHAR(10),@CBILL_NO VARCHAR(40)      
   ,@CMEMOPREFIX VARCHAR(10),@NMEMONOLEN NUMERIC(3),@CMEMONOLEN VARCHAR(5)       
   ,@CMEMONOVAL VARCHAR(50),@CKEYSTABLE VARCHAR(100)      
       
  SET @CSTEP=450      
  SET @NMEMONOLEN=12       
       
  SET @CSTEP=470      
       
  SET @CKEYSTABLE='KEYS_CMM'      
       
  SET @CSTEP=480      
  PRINT 'PROCESSING STEP #'+@CSTEP+'#'+CONVERT(VARCHAR,GETDATE(),113)      
        
  ---GENERATING CM_NO AND CM_ID FOR NEW_MEMO      
  WHILE EXISTS(SELECT TOP 1 'U' FROM #NEWBILLS WHERE ISNULL(CM_NO,'')='')      
  BEGIN      
   SET @CDEPT_ID=''      
   SET @CBILL_NO=''      
   SET @CFINYEAR=''      
   SET @CMEMONOVAL=''       
   SET @CSTEP=490       
         
   SELECT TOP 1 @CDEPT_ID=A.DEPT_ID,@CBILL_NO=BILL_NO,@CFINYEAR=FIN_YEAR,@DMEMODT=A.CM_DT      
   FROM #NEWBILLS A WHERE ISNULL(CM_NO,'')='' ORDER BY CM_DT,BILL_NO ASC      
         
   SET @CMEMOPREFIX=LTRIM(RTRIM(@CDEPT_ID))+LTRIM(RTRIM(@CDEPT_ID))+'-'      
        
  LBLGENKEY:      
         
         
   SET @CSTEP=500      
   EXEC GETNEXTKEY_OPT 'CMM01106', 'CM_NO', @NMEMONOLEN, @CMEMOPREFIX, 1,      
    @CFINYEAR,0, @CKEYSTABLE,@CMEMONOVAL OUTPUT     


	       
--	SET @CMEMONOVAL=@CLOCID+@CLOCID+'-'+@CBILL_NO    
	     
   SET @CSTEP=510      
   IF EXISTS(SELECT TOP 1 'U' FROM CMM01106 WHERE CM_NO=@CMEMONOVAL AND FIN_YEAR=@CFINYEAR)      
    GOTO LBLGENKEY      
         
   SET @CSTEP=520      
   IF ISNULL(@CMEMONOVAL,'')=''      
   BEGIN      
    SET @CERRMSG='ERROR GENERATING CM NO.'      
    GOTO END_PROC      
   END      
         
   SET @CSTEP=530       
   UPDATE #NEWBILLS SET CM_NO=@CMEMONOVAL       
   WHERE DEPT_ID=@CDEPT_ID AND BILL_NO=@CBILL_NO AND FIN_YEAR=@CFINYEAR AND CM_DT=@DMEMODT      
           
  END      

 
      
  SET @CSTEP=540      
  PRINT 'PROCESSING STEP #'+@CSTEP+'#'+CONVERT(VARCHAR,GETDATE(),113)      
  UPDATE #NEWBILLS SET CM_ID=LTRIM(RTRIM(DEPT_ID))+FIN_YEAR+REPLICATE('0',15-LEN(LTRIM(RTRIM(CM_NO))))+LTRIM(RTRIM(CM_NO))      
       
	   
  
  SET @CSTEP=550      
  IF EXISTS(SELECT TOP 1 'U' FROM #NEWBILLS WHERE ISNULL(CM_ID,'')='' OR ISNULL(CM_NO,'')='')      
  BEGIN      
   SET @CERRMSG='ERROR GENERATING CM NO.'      
   GOTO END_PROC      
  END      
       
  SET @CSTEP=560      
  INSERT CMM01106 ( REMARKS, SENT_FOR_RECON, PARTY_TYPE, AC_CODE, MANUAL_DISCOUNT, MANUAL_ROUNDOFF      
   , BIN_ID, PATCHUP_RUN, SUBTOTAL_R, PASSPORT_NO, TICKET_NO, FLIGHT_NO, MRP_WSP      
   , MANUAL_BILL, FC_RATE, POSTEDINAC, CM_NO, CM_DT, CM_MODE, SUBTOTAL, DT_CODE      
   , DISCOUNT_PERCENTAGE, DISCOUNT_AMOUNT, NET_AMOUNT, CUSTOMER_CODE, CANCELLED, USER_CODE      
   , LAST_UPDATE, EXEMPTED,  SENT_TO_HO, CM_TIME, CM_ID, REF_CM_ID, FIN_YEAR      
   , ATD_CHARGES, COPIES_PTD, ROUND_OFF, MEMO_TYPE, PAY_MODE, SMS_SENT, AUTOENTRY, CASH_TENDERED      
   , PAYBACK, ECOUPON_ID, CAMPAIGN_GC_OTP, SALESSETUPINEFFECT, EDT_USER_CODE, GV_AMOUNT, REF_NO      
   , SENT_FOR_GR,xn_item_type  )        
  SELECT DISTINCT 'IMPORTED SALE.' AS REMARKS,0 AS SENT_FOR_RECON,1 AS PARTY_TYPE,'0000000000' AS AC_CODE      
    ,0 AS MANUAL_DISCOUNT,0 AS MANUAL_ROUNDOFF,'000' AS BIN_ID,0 AS PATCHUP_RUN      
    ,SUM(CASE WHEN AMOUNT<0 THEN AMOUNT ELSE 0 END) AS SUBTOTAL_R,'' AS PASSPORT_NO,'' AS TICKET_NO,'' AS FLIGHT_NO,      
    0 AS MRP_WSP,0 AS MANUAL_BILL,0 AS FC_RATE      
    ,0 AS POSTEDINAC, CM_NO      
    ,CM_DT,1 AS CM_MODE      
    ,SUM(CASE WHEN AMOUNT>0 THEN AMOUNT ELSE 0 END) AS SUBTOTAL      
    ,'0000000' AS DT_CODE,0 AS DISCOUNT_PERCENTAGE,0 AS DISCOUNT_AMOUNT      
    ,SUM(AMOUNT) AS NET_AMOUNT      
    ,'000000000000' AS CUSTOMER_CODE, CANCELLED,'0000000' AS USER_CODE,GETDATE() AS LAST_UPDATE      
    ,0 AS EXEMPTED,0 AS SENT_TO_HO,GETDATE() AS CM_TIME, CM_ID,'' AS REF_CM_ID      
    , FIN_YEAR,0 AS ATD_CHARGES,0 AS COPIES_PTD,0 AS ROUND_OFF,1 AS MEMO_TYPE,1 AS PAY_MODE,0 AS SMS_SENT      
    ,0 AS AUTOENTRY,0 AS CASH_TENDERED      
    ,0 AS PAYBACK,'' AS ECOUPON_ID,'' AS CAMPAIGN_GC_OTP      
    ,0 AS SALESSETUPINEFFECT,@CUSER_CODE AS EDT_USER_CODE,0 AS GV_AMOUNT      
    ,DEPT_ID+'-'+BILL_NO AS REF_NO,0 AS SENT_FOR_GR  , 1 as xn_item_type     
  FROM #EXISTINGBILLS      
  GROUP BY DEPT_ID,CM_NO,CM_DT,CANCELLED,CM_ID,FIN_YEAR,BILL_NO      
  UNION       
  SELECT DISTINCT 'IMPORTED SALE.' AS REMARKS,0 AS SENT_FOR_RECON,1 AS PARTY_TYPE,'0000000000' AS AC_CODE      
    ,0 AS MANUAL_DISCOUNT,0 AS MANUAL_ROUNDOFF,'000' AS BIN_ID,0 AS PATCHUP_RUN      
    ,SUM(CASE WHEN AMOUNT<0 THEN AMOUNT ELSE 0 END) AS SUBTOTAL_R,'' AS PASSPORT_NO,'' AS TICKET_NO,'' AS FLIGHT_NO,0 AS MRP_WSP,0 AS MANUAL_BILL,0 AS FC_RATE      
    ,0 AS POSTEDINAC, CM_NO      
    ,CM_DT,1 AS CM_MODE      
    ,SUM(CASE WHEN AMOUNT>0 THEN AMOUNT ELSE 0 END) AS SUBTOTAL      
    ,'0000000' AS DT_CODE,0 AS DISCOUNT_PERCENTAGE,0 AS DISCOUNT_AMOUNT      
    ,SUM(AMOUNT) AS NET_AMOUNT      
    ,'000000000000' AS CUSTOMER_CODE, CANCELLED,@CUSER_CODE AS USER_CODE,GETDATE() AS LAST_UPDATE      
    ,0 AS EXEMPTED,0 AS SENT_TO_HO,GETDATE() AS CM_TIME, CM_ID,'' AS REF_CM_ID      
    , FIN_YEAR,0 AS ATD_CHARGES,0 AS COPIES_PTD,0 AS ROUND_OFF,1 AS MEMO_TYPE,1 AS PAY_MODE,0 AS SMS_SENT      
    ,0 AS AUTOENTRY,0 AS CASH_TENDERED      
    ,0 AS PAYBACK,'' AS ECOUPON_ID,'' AS CAMPAIGN_GC_OTP      
    ,0 AS SALESSETUPINEFFECT,@CUSER_CODE AS EDT_USER_CODE,0 AS GV_AMOUNT      
    ,DEPT_ID+'-'+BILL_NO AS REF_NO,0 AS SENT_FOR_GR , 1 as xn_item_type        
  FROM #NEWBILLS      
  GROUP BY DEPT_ID,CM_NO,CM_DT,CANCELLED,CM_ID,FIN_YEAR,BILL_NO      
       
  SET @CSTEP=570      
  /*      
  TAX_METHOD : 1 FOR INCLUSIVE AND 2 FOR EXCLUSIVE      
  */      
  INSERT CMD01106 ( PRODUCT_CODE, QUANTITY, MRP, NET, DISCOUNT_PERCENTAGE, DISCOUNT_AMOUNT, ROW_ID, LAST_UPDATE      
   , TAX_PERCENTAGE, TAX_AMOUNT, EMP_CODE, SLSDET_ROW_ID, BIN_ID, OLD_MRP, REF_SLS_MEMO_ID      
   , REALIZE_SALE, CM_ID, RFNET, TAX_TYPE, TAX_METHOD, EAN, EMP_CODE1, EMP_CODE2, ITEM_DESC      
   , WEIGHTED_AVG_DISC_PCT, WEIGHTED_AVG_DISC_AMT, MANUAL_DISCOUNT, FIX_MRP, SR_NO, HOLD_FOR_ALTER      
   , PACK_SLIP_ID, XN_TYPE, REPEAT_PUR_ORDER, DEPT_ID, REF_ORDER_ID, FOC_QUANTITY, CMM_DISCOUNT_AMOUNT      
   , NRM_ID )        
  SELECT    A.PRODUCT_CODE, A.QUANTITY, B.MRP,A.AMOUNT AS NET,(CASE WHEN ABS(A.AMOUNT)<ABS(A.QUANTITY*B.MRP) THEN       
    ((ABS(A.QUANTITY*B.MRP)-ABS(A.AMOUNT))/ABS(A.QUANTITY*B.MRP))*100       
    ELSE 0 END) AS DISCOUNT_PERCENTAGE      
    ,(CASE WHEN A.QUANTITY>0 THEN 1 ELSE -1 END)*      
    (CASE WHEN ABS(A.AMOUNT)<ABS(A.QUANTITY*B.MRP) THEN       
  (ABS(A.QUANTITY*B.MRP)-ABS(A.AMOUNT))       
  ELSE 0 END)      
    AS DISCOUNT_AMOUNT      
    ,A.DEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID,GETDATE() AS LAST_UPDATE      
    ,0 AS TAX_PERCENTAGE,0 AS TAX_AMOUNT,'0000000' AS EMP_CODE,'' AS SLSDET_ROW_ID,      
    '000' AS BIN_ID,0 AS OLD_MRP,'' AS REF_SLS_MEMO_ID,0 AS REALIZE_SALE      
    ,A.CM_ID AS CM_ID,0 AS RFNET,1 AS TAX_TYPE,1 AS TAX_METHOD,'' AS EAN,'0000000' AS EMP_CODE1      
    ,'0000000' AS EMP_CODE2,'' AS ITEM_DESC,0 AS WEIGHTED_AVG_DISC_PCT      
    ,0 AS WEIGHTED_AVG_DISC_AMT,0 AS MANUAL_DISCOUNT,0 AS FIX_MRP,0 AS SR_NO,0 AS HOLD_FOR_ALTER,'' AS PACK_SLIP_ID      
    ,'' AS XN_TYPE      
    ,0 AS REPEAT_PUR_ORDER,A.DEPT_ID,'' AS REF_ORDER_ID      
    ,0 AS FOC_QUANTITY,0 AS CMM_DISCOUNT_AMOUNT,'' AS NRM_ID       
  FROM #EXISTINGBILLS A      
  JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE      
  UNION       
  SELECT    A.PRODUCT_CODE, A.QUANTITY, B.MRP,A.AMOUNT AS NET      
  ,(CASE WHEN ABS(A.AMOUNT)<ABS(A.QUANTITY*B.MRP) THEN       
    ((ABS(A.QUANTITY*B.MRP)-ABS(A.AMOUNT))/ABS(A.QUANTITY*B.MRP))*100       
    ELSE 0 END)      
  AS DISCOUNT_PERCENTAGE      
    ,(CASE WHEN A.QUANTITY>0 THEN 1 ELSE -1 END)*      
  (CASE WHEN ABS(A.AMOUNT)<ABS(A.QUANTITY*B.MRP) THEN       
  (ABS(A.QUANTITY*B.MRP)-ABS(A.AMOUNT))       
  ELSE 0 END)      
    AS DISCOUNT_AMOUNT      
    ,A.DEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID,GETDATE() AS LAST_UPDATE      
    ,0 AS TAX_PERCENTAGE,0 AS TAX_AMOUNT,'0000000' AS EMP_CODE,'' AS SLSDET_ROW_ID      
    ,'000' AS BIN_ID,0 AS OLD_MRP,'' AS REF_SLS_MEMO_ID,0 AS REALIZE_SALE      
    ,A.CM_ID AS CM_ID,0 AS RFNET,1 AS TAX_TYPE,1 AS TAX_METHOD,'' AS EAN,'0000000' AS EMP_CODE1      
    ,'0000000' AS EMP_CODE2,'' AS ITEM_DESC,0 AS WEIGHTED_AVG_DISC_PCT      
    ,0 AS WEIGHTED_AVG_DISC_AMT,0 AS MANUAL_DISCOUNT,0 AS FIX_MRP,0 AS SR_NO,0 AS HOLD_FOR_ALTER,'' AS PACK_SLIP_ID      
    ,'' AS XN_TYPE      
    ,0 AS REPEAT_PUR_ORDER,A.DEPT_ID,'' AS REF_ORDER_ID,0 AS FOC_QUANTITY      
    ,0 AS CMM_DISCOUNT_AMOUNT,'' AS NRM_ID       
  FROM #NEWBILLS A      
  JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE      
       
  SET @CSTEP=580      
       
 PRINT 'PROCESSING STEP #'+@CSTEP+'#'+CONVERT(VARCHAR,GETDATE(),113)      
     
       
   INSERT PAYMODE_XN_DET(MEMO_ID, XN_TYPE, PAYMODE_CODE, ROW_ID, AMOUNT, LAST_UPDATE, REF_NO,      
    ADJ_MEMO_ID, CURRENCY_CONVERSION_RATE, REMARKS, GV_SRNO, GV_SCRATCH_NO)        
   SELECT  A.CM_ID AS MEMO_ID,'SLS' AS XN_TYPE,B.PAYMODE_CODE  AS PAYMODE_CODE      
   ,DEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID,SUM(CASH) AS AMOUNT,GETDATE() AS LAST_UPDATE,'' AS REF_NO,'' AS ADJ_MEMO_ID      
   ,1 AS CURRENCY_CONVERSION_RATE,'SALE IMPORTED' AS REMARKS,'' AS GV_SRNO,'' AS GV_SCRATCH_NO       
   FROM #EXISTINGBILLS A      
   JOIN PAYMODE_MST B ON B.PAYMODE_NAME='INR'      
   WHERE CASH<>0      
   GROUP BY CM_ID,DEPT_ID,B.PAYMODE_CODE      
   UNION       
   SELECT  A.CM_ID AS MEMO_ID,'SLS' AS XN_TYPE,B.PAYMODE_CODE  AS PAYMODE_CODE      
    ,DEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID      
    ,SUM(AMOUNT) AS AMOUNT,GETDATE() AS LAST_UPDATE,'' AS REF_NO,'' AS ADJ_MEMO_ID      
    ,1 AS CURRENCY_CONVERSION_RATE,'SALE IMPORTED' AS REMARKS,'' AS GV_SRNO,'' AS GV_SCRATCH_NO       
   FROM #NEWBILLS A      
   JOIN PAYMODE_MST B ON B.PAYMODE_NAME='INR'      
   WHERE CASH<>0      
   GROUP BY CM_ID,DEPT_ID,B.PAYMODE_CODE     
        
        
   INSERT PAYMODE_XN_DET( MEMO_ID, XN_TYPE, PAYMODE_CODE, ROW_ID, AMOUNT, LAST_UPDATE, REF_NO      
   , ADJ_MEMO_ID, CURRENCY_CONVERSION_RATE, REMARKS, GV_SRNO, GV_SCRATCH_NO)        
   SELECT  A.CM_ID AS MEMO_ID,'SLS' AS XN_TYPE,B.PAYMODE_CODE  AS PAYMODE_CODE      
   ,DEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID,SUM(CC_AMOUNT) AS AMOUNT,GETDATE() AS LAST_UPDATE,'' AS REF_NO,'' AS ADJ_MEMO_ID      
   ,1 AS CURRENCY_CONVERSION_RATE,'SALE IMPORTED' AS REMARKS,'' AS GV_SRNO,'' AS GV_SCRATCH_NO       
   FROM #EXISTINGBILLS A      
   JOIN PAYMODE_MST B ON B.PAYMODE_NAME=A.CC_NAME      
   WHERE CC_AMOUNT<>0      
   GROUP BY CM_ID,DEPT_ID,B.PAYMODE_CODE      
   UNION       
   SELECT  A.CM_ID AS MEMO_ID,'SLS' AS XN_TYPE,B.PAYMODE_CODE  AS PAYMODE_CODE      
    ,DEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID      
    ,SUM(AMOUNT) AS AMOUNT,GETDATE() AS LAST_UPDATE,'' AS REF_NO,'' AS ADJ_MEMO_ID      
    ,1 AS CURRENCY_CONVERSION_RATE,'SALE IMPORTED' AS REMARKS,'' AS GV_SRNO,'' AS GV_SCRATCH_NO       
   FROM #NEWBILLS A      
   JOIN PAYMODE_MST B ON B.PAYMODE_NAME=A.CC_NAME      
   WHERE CC_AMOUNT<>0      
   GROUP BY CM_ID,DEPT_ID,B.PAYMODE_CODE      
     
     
     
     
   INSERT PAYMODE_XN_DET( MEMO_ID, XN_TYPE, PAYMODE_CODE, ROW_ID, AMOUNT, LAST_UPDATE, REF_NO      
   , ADJ_MEMO_ID, CURRENCY_CONVERSION_RATE, REMARKS, GV_SRNO, GV_SCRATCH_NO)        
   SELECT DISTINCT  A.CM_ID AS MEMO_ID,'SLS' AS XN_TYPE,B.PAYMODE_CODE  AS PAYMODE_CODE      
   ,DEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID,C.NET_AMOUNT AS AMOUNT,GETDATE() AS LAST_UPDATE,'' AS REF_NO,'' AS ADJ_MEMO_ID      
   ,1 AS CURRENCY_CONVERSION_RATE,'SALE IMPORTED' AS REMARKS,'' AS GV_SRNO,'' AS GV_SCRATCH_NO       
   FROM #EXISTINGBILLS A      
   JOIN PAYMODE_MST B ON 1=1    
   JOIN CMM01106 C ON C.CM_ID=A.CM_ID    
   LEFT OUTER JOIN PAYMODE_XN_DET D ON D.MEMO_ID=A.CM_ID AND D.XN_TYPE='SLS'    
   WHERE B.PAYMODE_CODE='0000000' AND  D.MEMO_ID IS NULL    
    GROUP BY A.CM_ID,DEPT_ID,B.PAYMODE_CODE ,C.NET_AMOUNT    
       
   UNION ALL    
       
   SELECT DISTINCT  A.CM_ID AS MEMO_ID,'SLS' AS XN_TYPE,B.PAYMODE_CODE  AS PAYMODE_CODE      
   ,DEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID,C.NET_AMOUNT AS AMOUNT,GETDATE() AS LAST_UPDATE,'' AS REF_NO,'' AS ADJ_MEMO_ID      
   ,1 AS CURRENCY_CONVERSION_RATE,'SALE IMPORTED' AS REMARKS,'' AS GV_SRNO,'' AS GV_SCRATCH_NO       
   FROM #NEWBILLS  A      
   JOIN PAYMODE_MST B ON 1=1    
   JOIN CMM01106 C ON C.CM_ID=A.CM_ID    
   LEFT OUTER JOIN PAYMODE_XN_DET D ON D.MEMO_ID=A.CM_ID AND D.XN_TYPE='SLS'    
   WHERE B.PAYMODE_CODE='0000000' AND  D.MEMO_ID IS NULL    
    GROUP BY A.CM_ID,DEPT_ID,B.PAYMODE_CODE,C.NET_AMOUNT     
       
          
  SET @CSTEP=590      
           
 PRINT 'PROCESSING STEP #'+@CSTEP+'#'+CONVERT(VARCHAR,GETDATE(),113)      
  DECLARE @TRETMSG TABLE (ERRMSG VARCHAR(MAX))      
         
  --UPDATING RFNET COLUMN OF CMD01106      
  IF OBJECT_ID('#IMPORTEDBILLS','U') IS NOT NULL      
   DROP TABLE #IMPORTEDBILLS      
       
  SET @CSTEP=600      
  SELECT DISTINCT CM_ID      
  INTO #IMPORTEDBILLS      
  FROM #EXISTINGBILLS      
  UNION       
  SELECT DISTINCT CM_ID      
  FROM #NEWBILLS      
       
  SET @CSTEP=605      
  DECLARE @CCMID VARCHAR(50),@DCMDT DATETIME,@CTEMPCMDTABLE VARCHAR(200)       
       
  SET @CTEMPCMDTABLE='TMPCMD_'+LTRIM(RTRIM(STR(@@SPID)))      
       
  SET @CSTEP=610      
        
        
  WHILE EXISTS(SELECT TOP 1 'U' FROM #IMPORTEDBILLS)      
  BEGIN      
   SET @CCMID=''      
   SET @CSTEP=615      
         
   SELECT TOP 1 @CCMID=CM_ID FROM #IMPORTEDBILLS ORDER BY CM_ID      
         
         
   SET @DCMDT=''      
   SELECT @DCMDT=CM_DT FROM CMM01106 WHERE CM_ID=@CCMID      
         
   PRINT 'CALCULATING SALE SETUP/TAXES FOR BILL ID :'+@CCMID+' DATED : '+CONVERT(VARCHAR,@DCMDT,105)      
         
   SET @CSTEP=615      
        
   SET @DCMDT=''      
   SELECT @DCMDT=CM_DT FROM CMM01106 WHERE CM_ID=@CCMID      
         
   IF ISNULL(@CAPPLYSALESSETUP,'')='1'      
   BEGIN       
    SET @CSTEP=620      
          
    DELETE FROM #TMPSLSDISCTAXOPT      
          
    IF OBJECT_ID(@CTEMPCMDTABLE,'U') IS NOT NULL      
  BEGIN      
   SET @CCMD=N'DROP TABLE '+@CTEMPCMDTABLE      
   EXEC SP_EXECUTESQL @CCMD      
  END       
          
    SET @DCMDT=''      
    SELECT @DCMDT=CM_DT FROM CMM01106 WHERE CM_ID=@CCMID      
          
    SET @CSTEP=625      
    SET @CCMD=N'SELECT PRODUCT_CODE,QUANTITY,CONVERT(NUMERIC(7,3),0) AS DISCOUNT_PERCENTAGE,MRP,  
         MRP*QUANTITY AS NET,ROW_ID,PACK_SLIP_ID,TAX_PERCENTAGE,      
    CONVERT(NUMERIC(10,2),0) AS CMM_DISCOUNT_AMOUNT,0 AS DISCOUNT_AMOUNT ,  
    CONVERT(NUMERIC(7,3),0) AS BASIC_DISCOUNT_PERCENTAGE  ,  
    0 AS BASIC_DISCOUNT_AMOUNT   
    INTO '+@CTEMPCMDTABLE+' FROM CMD01106 (NOLOCK) WHERE CM_ID='''+@CCMID+'''' 
    
    SET @CCMD=N'SELECT PRODUCT_CODE,QUANTITY,CONVERT(NUMERIC(7,3),0) AS DISCOUNT_PERCENTAGE,MRP,  
         MRP*QUANTITY AS NET,ROW_ID,PACK_SLIP_ID,TAX_PERCENTAGE,      
    CONVERT(NUMERIC(10,2),0) AS CMM_DISCOUNT_AMOUNT,0 AS DISCOUNT_AMOUNT ,  
    CONVERT(NUMERIC(7,3),0) AS BASIC_DISCOUNT_PERCENTAGE  ,  
    0 AS BASIC_DISCOUNT_AMOUNT   
     FROM CMD01106 (NOLOCK) WHERE CM_ID='''+@CCMID+''''      
  PRINT @CCMD      
  EXEC SP_EXECUTESQL @CCMD      
      
      
     SET @CSTEP=627      
    EXEC SP3S_EOSS_APPLY_SLSDISCTAX      
    @CPRODUCTCODEPARA='',      
    @DXNDT=@DCMDT,      
    @BSALESSETUPINEFFECT=1,      
    @NCMMDISCAMT=0,     
    @NDISCPICKINGMODE=1,      
    @CUSERCODE='0000000',      
    @CCUSTOMERCODE='000000000000',      
    @BCALLEDFROMMBOSLS=1,      
    @CLOCATIONID=@CLOCID      
          
       
    SET @CSTEP=630      
  
    SELECT TOP 1 @CAPPLYMINDISCOUNT=VALUE FROM CONFIG WHERE CONFIG_OPTION='APPLY_MIN_EOSS_MBOSLS_DISC'  
      
    IF ISNULL(@CAPPLYMINDISCOUNT,'')='1'  
    BEGIN  
     DECLARE @NTOTEOSSDISCOUNTAMT NUMERIC(10,2),@NTOTMBODISCOUNTAMT NUMERIC(10,2)   
     SET @CSTEP=630      
     SELECT @NTOTEOSSDISCOUNTAMT=SUM(DISCOUNT_AMOUNT) FROM #TMPSLSDISCTAXOPT      
       
     SELECT @NTOTMBODISCOUNTAMT=SUM(DISCOUNT_AMOUNT) FROM CMD01106 WHERE CM_ID=@CCMID  
       
     IF @NTOTEOSSDISCOUNTAMT<@NTOTMBODISCOUNTAMT  
     BEGIN  
      SET @CSTEP=635  
  
      UPDATE CMD01106 SET DISCOUNT_PERCENTAGE=B.DISCOUNT_PERCENTAGE,DISCOUNT_AMOUNT=B.DISCOUNT_AMOUNT,      
      NET=B.NET,ITEM_ROUND_OFF=B.ITEM_ROUND_OFF,TAX_PERCENTAGE=B.TAX_PERCENTAGE,TAX_AMOUNT=B.TAX_AMOUNT,      
      TAX_METHOD=B.TAX_METHOD,RFNET=B.NET-ISNULL(B.CMM_DISCOUNT_AMOUNT,0)+(CASE WHEN B.TAX_METHOD=2 THEN B.TAX_AMOUNT ELSE 0 END),      
      CMM_DISCOUNT_AMOUNT=ISNULL(B.CMM_DISCOUNT_AMOUNT,0),      
      SLSDET_ROW_ID=B.ROW_ID,WEIGHTED_AVG_DISC_AMT=B.WEIGHTED_AVG_DISC_AMT,WEIGHTED_AVG_DISC_PCT=B.WEIGHTED_AVG_DISC_PCT,      
      REALIZE_SALE=B.NET-ISNULL(B.CMM_DISCOUNT_AMOUNT,0)+(CASE WHEN B.TAX_METHOD=2 THEN B.TAX_AMOUNT ELSE 0 END)      
      FROM #TMPSLSDISCTAXOPT B WHERE B.CMD_ROW_ID=CMD01106.ROW_ID      
  
     END  
    END      
          
    SET @CSTEP=635      
    UPDATE CMM01106 SET SUBTOTAL=B.SUBTOTAL,SUBTOTAL_R=B.SUBTOTAL_R,NET_AMOUNT=B.SUBTOTAL-B.SUBTOTAL_R+B.EXCL_TAX      
    FROM (SELECT CM_ID,SUM(CASE WHEN QUANTITY<0 THEN 0 ELSE NET END) AS SUBTOTAL,SUM(CASE WHEN QUANTITY<0 THEN ABS(NET) ELSE 0 END) AS SUBTOTAL_R,      
    SUM(CASE WHEN TAX_METHOD=2 THEN TAX_AMOUNT ELSE 0 END) AS EXCL_TAX       
    FROM CMD01106 WHERE CM_ID=@CCMID GROUP BY CM_ID) B      
    WHERE B.CM_ID=CMM01106.CM_ID AND B.CM_ID=@CCMID      
          
    INSERT PAYMODE_XN_DET(MEMO_ID, XN_TYPE, PAYMODE_CODE, ROW_ID, AMOUNT, LAST_UPDATE, REF_NO,      
     ADJ_MEMO_ID, CURRENCY_CONVERSION_RATE, REMARKS, GV_SRNO, GV_SCRATCH_NO)        
    SELECT  A.CM_ID AS MEMO_ID,'SLS' AS XN_TYPE,'0000000' AS PAYMODE_CODE      
    ,A.location_Code +CONVERT(VARCHAR(40),NEWID()) AS ROW_ID,NET_AMOUNT AS AMOUNT,GETDATE() AS LAST_UPDATE,      
    '' AS REF_NO,'' AS ADJ_MEMO_ID,1 AS CURRENCY_CONVERSION_RATE,'SALE IMPORTED' AS REMARKS,      
    '' AS GV_SRNO,'' AS GV_SCRATCH_NO FROM CMM01106 A (NOLOCK) WHERE CM_ID=@CCMID      
          
   END      
   ELSE      
   BEGIN      
    SET @CSTEP=640      
    IF OBJECT_ID('TEMPDB..#TMPCMDTAX','U') IS NOT NULL      
  DROP TABLE #TMPCMDTAX      
         
    SELECT SUB_SECTION_CODE,C.ROW_ID,C.TAX_PERCENTAGE,C.TAX_METHOD,C.NET,      
    C.MRP,C.QUANTITY,B.USER_CODE,C.TAX_AMOUNT,C.PRODUCT_CODE,C.CMM_DISCOUNT_AMOUNT,      
    C.DISCOUNT_PERCENTAGE,C.DISCOUNT_AMOUNT  AS CMD_DISCOUNT_AMOUNT,C.FORM_ID,      
    CONVERT(BIT,0) AS APPLY_EXCLUSIVE_TAX,B.DISCOUNT_PERCENTAGE AS EXCLUSIVE_VAT_TO_DISC,      
    C.PACK_SLIP_ID,      
    MANUAL_TAX_METHOD      
    INTO #TMPCMDTAX       
    FROM CMM01106 B       
    JOIN CMD01106 C ON C.CM_ID=B.CM_ID      
    JOIN SKU D ON D.PRODUCT_CODE=C.PRODUCT_CODE      
    JOIN ARTICLE E ON E.ARTICLE_CODE=D.ARTICLE_CODE      
    WHERE B.CM_ID=@CCMID      
          
    SET @CSTEP=645      
    DELETE FROM @TRETMSG      
          
    INSERT @TRETMSG      
    EXEC SP_GETCMTAX      
    @CUSERCODE='0000000',      
    @DXNDT=@DCMDT,      
    @NBILLLEVELDISCAMT=0,      
    @BCALLEDFROMCASHMEMO=1,      
    @BSALESSETUPINEFFECT=0,      
    @BSALESSETUPDISABLED=1,      
    @CDTCODE='0000000',  
    @CLOCIDPARA=@CLOCID ,
    @BgSTBILL=1     
          
    SELECT TOP 1 @CERRMSG=ERRMSG FROM @TRETMSG WHERE ISNULL(ERRMSG,'')<>''      
          
    IF ISNULL(@CERRMSG,'')<>''      
  GOTO END_PROC      
            
    SET @CSTEP=650      
          
    UPDATE CMD01106 SET TAX_PERCENTAGE=B.TAX_PERCENTAGE,TAX_METHOD=1,TAX_AMOUNT=B.TAX_AMOUNT,      
    RFNET=B.NET-ISNULL(B.CMM_DISCOUNT_AMOUNT,0)+(CASE WHEN B.TAX_METHOD=2 THEN B.TAX_AMOUNT ELSE 0 END),      
    CMM_DISCOUNT_AMOUNT=ISNULL(B.CMM_DISCOUNT_AMOUNT,0),      
    REALIZE_SALE=B.NET-ISNULL(B.CMM_DISCOUNT_AMOUNT,0)+(CASE WHEN B.TAX_METHOD=2 THEN B.TAX_AMOUNT ELSE 0 END)      
    FROM #TMPCMDTAX B WHERE B.ROW_ID=CMD01106.ROW_ID      
         
   END       
         
   SET @CSTEP=655      
  
   DECLARE @NSPID INT,@BGSTBILL BIT,@DCM_DT DATETIME  ,@CPARTYSTATECODE VARCHAR(10)  
   SET @BGSTBILL=0  
   SELECT  @DCM_DT=CM_DT FROM CMM01106 (NOLOCK) WHERE CM_ID =@CCMID  
    
   IF @DCM_DT>'2017-06-30'  
   SET @BGSTBILL=1  
     
   SET @NSPID=@@SPID   
     
  IF @BGSTBILL=1  
  BEGIN  
   SET @CSTEP=670  
   --SELECT @NSPID
   DELETE FROM GST_TAXINFO_CALC  WHERE SP_ID=CAST(@NSPID  AS VARCHAR(20))
   DELETE FROM GST_TAXINFO_CALC_OH  WHERE SP_ID=CAST(@NSPID  AS VARCHAR(20))
   DECLARE @NOC NUMERIC(10,2)  
      
   INSERT GST_TAXINFO_CALC WITH (ROWLOCK) ( PRODUCT_CODE, SP_ID ,NET_VALUE,TAX_METHOD,ROW_ID,QUANTITY,TARGET_DEPT_ID,SOURCE_DEPT_ID,MRP,MEMO_DT,HSN_CODE  )    
   SELECT A.PRODUCT_CODE,CAST(@NSPID AS VARCHAR(100)) AS SP_ID,  
   ROUND(((NET)  
   -(ISNULL(CMM_DISCOUNT_AMOUNT,0) )),2) AS NET_VALUE,2 AS TAX_METHOD,  
   ROW_ID,QUANTITY,B.location_Code  AS PARTY_DEPT_ID,B.location_Code  AS  DEPT_ID,A.MRP ,  
   B.CM_DT ,  
   SKU.HSN_CODE   
   FROM CMD01106  A (NOLOCK)  
   JOIN CMM01106  B (NOLOCK) ON A.CM_ID =B.CM_ID   
   JOIN SKU ON SKU.PRODUCT_CODE =A.PRODUCT_CODE   
   WHERE A.CM_ID=@CCMID  
              
   SET @CSTEP=680      
               
   DECLARE @CPARTY_GSTN_NO VARCHAR(20),@BREGISTERED BIT  
     
   UPDATE A SET PARTY_STATE_CODE =CASE WHEN ISNULL(B.GST_STATE_CODE   ,'') ='' THEN '00' ELSE B.GST_STATE_CODE END   
   FROM CMM01106  A (NOLOCK)   
   JOIN LOCATION   B ON A.location_Code  =B.DEPT_ID    
   WHERE CM_ID =@CCMID   
   AND  A.PARTY_STATE_CODE IN('','00')  
      
   SELECT TOP 1 @CPARTY_GSTN_NO=CUS_GST_NO ,@CPARTYSTATECODE=PARTY_STATE_CODE,  
   @NOC=ATD_CHARGES ,  
   @BREGISTERED=ISNULL(L.REGISTERED_GST ,0)  
   FROM CMM01106  A (NOLOCK)   
   JOIN CUSTDYM  B ON A.CUSTOMER_CODE =B.CUSTOMER_CODE   
   JOIN LOCATION L ON L.DEPT_ID =A.location_Code 
   WHERE CM_ID =@CCMID   
   SET @CSTEP=690  
   IF ISNULL(@NOC,0)<>0  
    INSERT GST_TAXINFO_CALC_OH ( SP_ID,OTHER_CHARGES ,DO_NOT_CALC_GST_OH,OH_TAX_METHOD )  
    SELECT @NSPID,ATD_CHARGES ,2 AS OH_TAX_METHOD,0   
    FROM CMM01106   
    WHERE CM_ID =@CCMID   
      
        
   SET @CSTEP=700  
   --IF ISNULL(@REGION,'')  IN('0000000','')  
   --BEGIN  
   EXEC SP3S_GST_TAX_CAL  
    @CXN_TYPE='SLS',  
    @CMEMO_ID='',  
    @DMEMO_DT=@DMEMODT ,  
    @NSPID=@NSPID,  
    @CPARTYSTATE_CODE=@CPARTYSTATECODE,  
    @BPARTYREGISTERED=@BREGISTERED,  
    @CPARTY_GSTN_NO=@CPARTY_GSTN_NO,  
    @CERRMSG=@CERRMSG OUTPUT  
       
       
    -- SELECT * FROM GST_TAXINFO_CALC WHERE SP_ID=@NSPID  
       
   IF ISNULL(@CERRMSG,'')<>''  
     GOTO END_PROC  
   --END  
       
   SET @CSTEP=710  
     
   UPDATE A  SET HSN_CODE=B.HSN_CODE,GST_PERCENTAGE=B.GST_PERCENTAGE,IGST_AMOUNT=B.IGST_AMOUNT,  
   CGST_AMOUNT=B.CGST_AMOUNT,SGST_AMOUNT=B.SGST_AMOUNT,  
   XN_VALUE_WITHOUT_GST=B.XN_VALUE_WITHOUT_GST,XN_VALUE_WITH_GST=B.XN_VALUE_WITH_GST  
   FROM CMD01106 A  
   JOIN  GST_TAXINFO_CALC B ON  B.ROW_ID=B.ROW_ID   
   WHERE  B.SP_ID=CAST(@NSPID  AS VARCHAR(20)) AND A.CM_ID =@CCMID  
     
    
   UPDATE A SET    
   OTHER_CHARGES_HSN_CODE=ISNULL(B.OTHER_CHARGES_HSN_CODE,'0000000000'),  
   OTHER_CHARGES_TAXABLE_VALUE=B.OTHER_CHARGES_TAXABLE_VALUE,  
   OTHER_CHARGES_IGST_AMOUNT=(CASE WHEN ISNULL(ISIGST,0)=1 THEN B.OTHER_CHARGES_GST_AMOUNT ELSE 0 END),  
   OTHER_CHARGES_CGST_AMOUNT=(CASE WHEN ISNULL(ISIGST,0)=0 THEN B.OTHER_CHARGES_GST_AMOUNT/2 ELSE 0 END),  
   OTHER_CHARGES_SGST_AMOUNT=(CASE WHEN ISNULL(ISIGST,0)=0 THEN B.OTHER_CHARGES_GST_AMOUNT/2 ELSE 0 END)  
   FROM CMM01106  A WITH (ROWLOCK)  
   LEFT OUTER JOIN  
   (SELECT  @CCMID AS CM_ID , * FROM  GST_TAXINFO_CALC_OH (NOLOCK) WHERE SP_ID=CAST(@NSPID  AS VARCHAR(20))) B ON A.CM_ID =B.CM_ID   
   WHERE A.CM_ID =@CCMID   
     
   SET @CSTEP=720  
  
  
  
     
  END  
    
    
  EXEC  UPDATERFNET 'SLS',@CCMID  
         
          
   SET @CSTEP=660      
   DELETE #IMPORTEDBILLS WHERE CM_ID=@CCMID      
 
   
        
        
  END       

  insert into #tmpcm_id(dept_id,cm_id)
  SELECT DISTINCT dept_id, CM_ID FROM #NEWBILLS
  
	 INSERT INTO #TMPSTOCK(PRODUCT_CODE,DEPT_ID,BIN_ID,STOCK_QTY)
	  SELECT B.PRODUCT_CODE,A.DEPT_ID ,B.BIN_ID ,
	        -1*SUM(B.QUANTITY) AS STOCK_QTY  
	 FROM #tmpcm_id A
	 JOIN CMD01106 B  ON A.CM_ID  =B.CM_ID 
	 JOIN CMM01106 CMM ON B.CM_ID =CMM.CM_ID 
	 WHERE CMM.CANCELLED =0
	 GROUP BY B.PRODUCT_CODE,A.DEPT_ID ,B.BIN_ID 



	  INSERT PMT01106	( BIN_ID, DEPT_ID, DEPT_ID_NOT_STUFFED, last_update, product_code, quantity_in_stock, rep_id, STOCK_RECO_QUANTITY_IN_STOCK )
	  SELECT A.BIN_ID, A.DEPT_ID,'' DEPT_ID_NOT_STUFFED, GETDATE() LAST_UPDATE, A.PRODUCT_CODE,0 QUANTITY_IN_STOCK,'' REP_ID,0 STOCK_RECO_QUANTITY_IN_STOCK  
	  FROM #TMPSTOCK A
	  LEFT JOIN PMT01106 B ON A.DEPT_ID =B.DEPT_ID AND A.PRODUCT_CODE =B.PRODUCT_CODE AND A.BIN_ID =B.BIN_ID 
	  WHERE B.PRODUCT_CODE IS NULL   


	  UPDATE A SET QUANTITY_IN_STOCK =ISNULL(A.QUANTITY_IN_STOCK,0)+ISNULL(B.STOCK_QTY,0)
	  FROM PMT01106 A (NOLOCK)
	  JOIN
	  (
	     SELECT A.PRODUCT_CODE,A.DEPT_ID ,A.BIN_ID,
		 SUM(STOCK_QTY) AS STOCK_QTY
		 FROM #TMPSTOCK A
		 GROUP BY A.PRODUCT_CODE,A.DEPT_ID ,A.BIN_ID
	  ) B ON   A.DEPT_ID =B.DEPT_ID AND A.PRODUCT_CODE =B.PRODUCT_CODE AND A.BIN_ID =B.BIN_ID 


	 IF EXISTS (SELECT TOP 1 'U'  FROM PMT01106 A (NOLOCK)
	  JOIN
	  (
	     SELECT A.PRODUCT_CODE,A.DEPT_ID ,A.BIN_ID,
		 SUM(STOCK_QTY) AS STOCK_QTY
		 FROM #TMPSTOCK A
		 GROUP BY A.PRODUCT_CODE,A.DEPT_ID ,A.BIN_ID
	  ) B ON   A.DEPT_ID =B.DEPT_ID AND A.PRODUCT_CODE =B.PRODUCT_CODE AND A.BIN_ID =B.BIN_ID 
	  JOIN SKU_NAMES SN (NOLOCK) ON A.PRODUCT_CODE =SN.PRODUCT_CODE 
	  WHERE ISNULL(SN.STOCK_NA ,0)=0 and a.quantity_in_stock <0)
	  begin
	      
		  set @CERRMSG='stock Going Negative Please check'
		  GOTO END_PROC 
	  end
	  
        
        
  GOTO END_PROC      
        
END TRY      
       
BEGIN CATCH     
  PRINT 'ENTER CATCH BLOCK'   
  SET @CERRMSG='SP3S_SYNCH_MBO_SLS_DATA  : AT STEP - '+@CSTEP+', MESSAGE - '+ERROR_MESSAGE()
  PRINT       @CERRMSG
  GOTO END_PROC       
END CATCH      
       
END_PROC:      
       
  IF ISNULL(@CERRMSG,'')=''      
   SELECT TOP 1 @CERRMSG=ERRORMSG FROM SLS_MBODATA WHERE DEPT_ID=@CLOCID AND ISNULL(ERRORMSG,'')<>''      
        
  IF ISNULL(@CERRMSG,'')=''       
   SELECT TOP 1 @CERRMSG=ERROR_MESSAGE FROM #SLSIMPORT WHERE ISNULL(ERROR_MESSAGE,'')<>''      
        
  IF @@TRANCOUNT>0      
  BEGIN      
   IF ISNULL(@CERRMSG,'')<>''        
   BEGIN      
    PRINT 'ROLLBACK TRANSACTION'      
    ROLLBACK      
          
   END       
   ELSE      
   BEGIN      
    PRINT 'COMMIT'      
    commit        
   END       
         
  END      
        
  DELETE FROM SLS_MBODATA_ERROR_DETAILS WHERE DEPT_ID=@CLOCID  
  --DELETE FROM SLS_MBODATA WHERE DEPT_ID=@CLOCID       
        
  IF EXISTS (SELECT TOP 1 PRODUCT_CODE FROM @TERRORDETAILS)         
    INSERT SLS_MBODATA_ERROR_DETAILS ( PRODUCT_CODE, REF_NO, DEPT_ID, ERROR_MSG )       
    SELECT PRODUCT_CODE, REF_NO,@CLOCID AS DEPT_ID, ERROR_MSG FROM @TERRORDETAILS      
  ELSE      
  IF ISNULL(@CERRMSG,'')<>''       
  BEGIN      
    IF ISNULL(@BSTOCKNOTFOUND,0)=0      
      INSERT SLS_MBODATA_ERROR_DETAILS ( PRODUCT_CODE, REF_NO, DEPT_ID, ERROR_MSG )       
      SELECT PRODUCT_CODE, MEMO_NO,@CLOCID AS  DEPT_ID, ISNULL(@CERRMSG,'') FROM SLS_MBODATA WHERE DEPT_ID=@CLOCID      
    ELSE      
      INSERT SLS_MBODATA_ERROR_DETAILS ( PRODUCT_CODE, REF_NO, DEPT_ID, ERROR_MSG )       
      SELECT PRODUCT_CODE, MEMO_NO,@CLOCID AS  DEPT_ID, ISNULL(@CERRMSG,'') FROM SLS_MBODATA WHERE DEPT_ID=@CLOCID      
      AND ISNULL(ERRORMSG,'')<>''      
          
  END      
  
  IF ISNULL(@CERRMSG,'')=''      
    SELECT  ISNULL(@CERRMSG,'') AS ERRMSG      
  ELSE      
    SELECT PRODUCT_CODE,REF_NO,ERROR_MSG AS ERRMSG FROM SLS_MBODATA_ERROR_DETAILS      
    WHERE DEPT_ID=@CLOCID      
	
	delete from SLS_MBODATA 
       
END      
----------- END OF PROCEDURE SP3S_SYNCH_MBO_SLS_DATA      


/*
CREATE PROCEDURE SP3S_SYNCH_MBO_SLS_DATA_NEW  
(  
@CLOCID CHAR(2),  
@NMODE INT=0  
)  
AS      
BEGIN      
  DECLARE @DSEARCHXNDT DATETIME,@CSOURCEDB VARCHAR(200),@CTEMPTABLENAME VARCHAR(200),@CTEMPTABLE VARCHAR(200),      
  @CCMD NVARCHAR(MAX),@CSTEP VARCHAR(10),@CERRMSG VARCHAR(MAX),@CUSER_CODE CHAR(7),@DMEMODT DATETIME,@NCNT INT,      
  @CAPPLYSALESSETUP VARCHAR(2),@CBINSALES VARCHAR(10),@CGENVENDOREANCODES VARCHAR(2),@NIMPORTMODE INT,      
  @BSTOCKNOTFOUND BIT,@BLOOP BIT,@CEANNO VARCHAR(50),@CROWID VARCHAR(40),@NPENDINGQTY NUMERIC(10,2),@CBILLNO VARCHAR(50),      
  @CPRODUCTCODE VARCHAR(50),@CFINYEAR VARCHAR(10),@NQTY NUMERIC(10,2),@CAPPLYMINDISCOUNT VARCHAR(2) ,@CEANCOLUMN VARCHAR(20)   ,  
  @QUANTITY INT,@SPID INT,@CM_DT DATETIME,@CANCELLED BIT,@MEMONO VARCHAR(10),@FIN_YEAR VARCHAR(100),  
  @NUPDATEMODE INT,@MEMONOPREFIX VARCHAR(10),@CM_ID VARCHAR(22),@CM_NO VARCHAR(40),@CMEMOID VARCHAR(22)  
  ,@CM_DATE DATETIME,@MEMO_NO VARCHAR(20),@CGROUPCOLS VARCHAR(MAX),@CGROUPCOLS1 VARCHAR(MAX),  
  @CCOLLIST VARCHAR(MAX),@CPARTY_STATE_CODE CHAR(2)  
        
BEGIN TRY   
  
   IF OBJECT_ID('TEMPDB..#VEAN_PMT','U') IS NOT NULL      
         DROP TABLE #VEAN_PMT   
  
   IF OBJECT_ID('TEMPDB..#SLS_EAN','U') IS NOT NULL  
		DROP TABLE #SLS_EAN  
     
   IF OBJECT_ID('TEMPDB..#SLS_VENDOR_EAN_NO','U')IS NOT NULL  
         DROP TABLE #SLS_VENDOR_EAN_NO  
           
   IF OBJECT_ID('TEMPDB..#TERROR','U')IS NOT NULL  
        DROP TABLE #TERROR  
          
   -- SELECT PRODUCT_CODE,ERRMSG INTO #TERROR FROM SLS_MBODATA_ERROR_DETAILS WHERE 1=2 
   
   CREATE TABLE #TERROR
   (
     PRODUCT_CODE VARCHAR(50),
     ERRMSG VARCHAR(1000)
   )
  

       
   DECLARE @FINYEAR VARCHAR(10),@MEMODATE VARCHAR(20) 
    
     
   SET @CPARTY_STATE_CODE='' 
   SELECT @CPARTY_STATE_CODE=  ISNULL(GST_STATE_CODE,'00') FROM LOCATION WHERE DEPT_ID=@CLOCID 
   SELECT TOP 1 @MEMODATE= MEMO_DT FROM SLS_MBODATA WHERE DEPT_ID=@CLOCID  
      
   SET @SPID=''  
   SET @SPID=@@SPID  
     
   DELETE FROM SLS_CMM01106_UPLOAD WHERE SP_ID=@SPID  
   DELETE FROM SLS_CMD01106_UPLOAD WHERE SP_ID=@SPID  
   DELETE FROM SLS_PAYMODE_XN_DET_UPLOAD WHERE SP_ID=@SPID  
            
   SELECT VENDOR_EAN_NO AS EAN_NO,A.PRODUCT_CODE,QUANTITY_IN_STOCK AS STOCK_QTY,QUANTITY_IN_STOCK AS SOLD_QTY      
   INTO #VEAN_PMT FROM PMT01106 A (NOLOCK)      
   JOIN SKU B (NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE WHERE 1=2    
     
   SET @MEMONOPREFIX=''  
   SET @NUPDATEMODE=''  
   SET @CM_ID=''  
   SET @CM_NO=''  
   SET @CANCELLED=''  
   SET @CM_DATE=''  
   SET @MEMO_NO=''  
       
   SET @FINYEAR=''  
   SET @FINYEAR='01'+DBO.FN_GETFINYEAR(@MEMODATE)    
    
     
     
   SELECT TOP 1 @CM_ID=CM_ID,@CM_NO=CM_NO,@CANCELLED=B.CANCELLED,@CM_DATE=CM_DT FROM CMM01106  A   
   JOIN SLS_MBODATA B ON B.DEPT_ID+'-'+B.MEMO_NO=A.REF_NO AND A.FIN_YEAR=@FINYEAR  
   WHERE B.DEPT_ID=@CLOCID  
    
   
BEGIN TRAN    
  IF ISNULL(@CM_ID,'')<>'' AND ISNULL(@CANCELLED,'')=0  
  BEGIN  
     SET @NUPDATEMODE=2  
     SET @MEMONOPREFIX=''  
     SET @CMEMOID=''  
     DELETE FROM CMD01106 WHERE CM_ID=@CM_ID  
     DELETE FROM PAYMODE_XN_DET WHERE MEMO_ID=@CM_ID  
     SELECT  @CM_DATE=@CM_DATE  
  END   
     
     
  ELSE  
  BEGIN  
    SET @NUPDATEMODE=1  
    SET @MEMONOPREFIX=@CLOCID+''+@CLOCID+'-'  
    SET @CMEMOID=''  
  END  
    
     
  IF ISNULL(@CANCELLED,'')=1 AND ISNULL(@CM_ID,'')<>''  
  BEGIN  
	SET @NUPDATEMODE=3  
	SET @CMEMOID=@CM_ID  
	GOTO SAVETRAN_SLS_AFTERSAVE  
  END  
        
  SET @CSTEP=10   
  SELECT @NIMPORTMODE=ISNULL(MBOSLS_IMPORT_MODE,0) FROM LOCATION WHERE DEPT_ID=@CLOCID   
    
  SET @CEANCOLUMN=(CASE WHEN @NIMPORTMODE=1 THEN 'PRODUCT_CODE' WHEN @NIMPORTMODE=2 THEN 'VENDOR_EAN_NO'   
         ELSE 'ONLINE_PRODUCT_CODE' END)   
    
  SET @CGROUPCOLS=''  
  IF ISNULL(@NIMPORTMODE,0)=1   
  BEGIN  
      SET @CGROUPCOLS ='A.PRODUCT_CODE'  
      SET @CGROUPCOLS1='PRODUCT_CODE'  
      SET @CCOLLIST ='A.PRODUCT_CODE AS EAN_NO,A.PRODUCT_CODE'  
  END  
    
  IF ISNULL(@NIMPORTMODE,0)<>1   
  BEGIN  
      SET @CGROUPCOLS =' SKU.'+@CEANCOLUMN+',A.PRODUCT_CODE'  
      SET @CGROUPCOLS1='A.'+@CEANCOLUMN+',PRODUCT_CODE'  
      SET @CCOLLIST =' SKU.'+@CEANCOLUMN+' AS EAN_NO,A.PRODUCT_CODE'  
  END  
      
    
  SET @CSTEP=20  
  SELECT PRODUCT_CODE AS EAN_NO,SUM(QUANTITY) AS SOLD_QTY  
  INTO #SLS_EAN FROM SLS_MBODATA   
  WHERE QUANTITY>0 AND DEPT_ID=@CLOCID GROUP BY PRODUCT_CODE  
  --HAVING SUM(QUANTITY)>0  
  UNION  
  SELECT PRODUCT_CODE AS EAN_NO,SUM(QUANTITY) AS SOLD_QTY  
  FROM SLS_MBODATA   
  WHERE DEPT_ID=@CLOCID AND QUANTITY<0 GROUP BY PRODUCT_CODE  
    
    
  SELECT PRODUCT_CODE,QUANTITY,MEMO_DT,CANCELLED,MEMO_NO INTO #SLS_VENDOR_EAN_NO FROM SLS_MBODATA  
        WHERE DEPT_ID=@CLOCID  ORDER BY QUANTITY ASC  
   
  SET @CSTEP=30  
    
           
  
  SET NOCOUNT ON  
  SET @BLOOP=0  
  SET @NCNT=1  
  
  WHILE @BLOOP=0  
  BEGIN  
	     
	   SET @CPRODUCTCODE=''   
	   SET @NCNT=@NCNT+1  
	   SELECT TOP 1 @CPRODUCTCODE=PRODUCT_CODE,@QUANTITY=QUANTITY,@CM_DT=MEMO_DT,  
	   @MEMONO=MEMO_NO FROM #SLS_VENDOR_EAN_NO  
	     
	     
	   IF ISNULL(@CPRODUCTCODE,'')=''  
		BREAK  
	       
	   SET @FIN_YEAR=''  
	   SET @FIN_YEAR='01'+DBO.FN_GETFINYEAR(@CM_DT)    
	     
	             
		IF SIGN(@QUANTITY)='-1'   
		BEGIN  
	  
			  SET @CSTEP=40  
			  SET @CCMD=N'  
			  SELECT  TOP '+REPLACE(CAST(@QUANTITY AS VARCHAR),'-','')+' EAN_NO,PRODUCT_CODE,  
			 STOCK_QTY,SOLD_QTY  
			 FROM(  
		        
			  SELECT  '+@CCOLLIST+',SUM(QUANTITY) AS SOLD_QTY,0 AS STOCK_QTY   
				FROM   
				CMD01106 A (NOLOCK) JOIN CMM01106 B (NOLOCK) ON A.CM_ID=B.CM_ID  
				JOIN SKU (NOLOCK) ON SKU.PRODUCT_CODE=A.PRODUCT_CODE  
				JOIN #SLS_EAN C ON C.EAN_NO=SKU.'+@CEANCOLUMN+'  
				LEFT OUTER JOIN   
				(  
				 SELECT MEMO_NO,''01''+DBO.FN_GETFINYEAR(MEMO_DT) AS FIN_YEAR FROM SLS_MBODATA  
				 WHERE DEPT_ID='''+@CLOCID+''' AND PRODUCT_CODE='''+@CPRODUCTCODE+'''  
				 ) D ON A.DEPT_ID+''-''+D.MEMO_NO=B.REF_NO   
				AND B.FIN_YEAR=D.FIN_YEAR  
				WHERE LEFT(A.CM_ID,2)='''+@CLOCID+'''   
				AND CANCELLED=0 AND D.MEMO_NO IS  NULL  
				AND C.SOLD_QTY<0 AND A.QUANTITY>0 AND SKU.'+@CEANCOLUMN+'='''+@CPRODUCTCODE+'''  
				GROUP BY '+@CGROUPCOLS+'  
				)A'  
		        
			 PRINT @CCMD    
			 INSERT #VEAN_PMT (EAN_NO,PRODUCT_CODE,SOLD_QTY,STOCK_QTY)  
			 EXEC SP_EXECUTESQL @CCMD  
	       
		 END  
	       
	                     
		 IF SIGN(@QUANTITY)='1'  
		 BEGIN  
	          
	          
			 SET @CSTEP=50  
			 SET @CCMD=N'SELECT  TOP '+REPLACE(CAST(@QUANTITY AS VARCHAR),'-','')+' EAN_NO,PRODUCT_CODE,  
			 STOCK_QTY,SOLD_QTY  
			 FROM(  
			 SELECT A.'+@CEANCOLUMN+' AS EAN_NO,  
			  A.PRODUCT_CODE,SUM(CASE WHEN XN_TYPE IN (''CHI'',''SLR'') THEN XN_QTY WHEN XN_TYPE   
			  IN (''CHO'',''SLS'') THEN -XN_QTY ELSE 0 END) AS STOCK_QTY,0 AS SOLD_QTY FROM   
			  (  
			  SELECT '+@CGROUPCOLS+',SUM(QUANTITY) AS XN_QTY,''CHI'' AS XN_TYPE  
			  FROM IND01106 A (NOLOCK) JOIN INM01106 B (NOLOCK) ON A.INV_ID=B.INV_ID  
			  JOIN SKU (NOLOCK) ON SKU.PRODUCT_CODE=A.PRODUCT_CODE  
			  JOIN #SLS_EAN C ON C.EAN_NO=SKU.'+@CEANCOLUMN+'  
			  WHERE B.PARTY_DEPT_ID='''+@CLOCID+''' AND CANCELLED=0 AND C.SOLD_QTY>0  
			  AND SKU.'+@CEANCOLUMN+'='''+@CPRODUCTCODE+'''  
			  GROUP BY '+@CGROUPCOLS+'  
			  UNION ALL  
			  SELECT '+@CGROUPCOLS+',SUM(QUANTITY) AS XN_QTY,''CHO'' AS XN_TYPE  
			  FROM CND01106 A (NOLOCK) JOIN CNM01106 B (NOLOCK) ON A.CN_ID=B.CN_ID  
			  JOIN SKU (NOLOCK) ON SKU.PRODUCT_CODE=A.PRODUCT_CODE  
			  JOIN #SLS_EAN C ON C.EAN_NO=SKU.'+@CEANCOLUMN+'  
			  WHERE B.PARTY_DEPT_ID='''+@CLOCID+''' AND CANCELLED=0 AND C.SOLD_QTY>0  
			  AND SKU.'+@CEANCOLUMN+'='''+@CPRODUCTCODE+'''  
			  GROUP BY '+@CGROUPCOLS+'  
			  UNION ALL  
			  SELECT '+@CGROUPCOLS+',SUM(QUANTITY) AS XN_QTY,''SLS'' AS XN_TYPE  
			  FROM CMD01106 A (NOLOCK) JOIN CMM01106 B (NOLOCK) ON A.CM_ID=B.CM_ID  
			  JOIN SKU (NOLOCK) ON SKU.PRODUCT_CODE=A.PRODUCT_CODE  
			  JOIN #SLS_EAN C ON C.EAN_NO=SKU.'+@CEANCOLUMN+'  
		        
			  LEFT OUTER JOIN   
			  (
			  SELECT MEMO_NO,''01''+DBO.FN_GETFINYEAR(MEMO_DT) AS FIN_YEAR FROM SLS_MBODATA  
			   WHERE DEPT_ID='''+@CLOCID+''' AND PRODUCT_CODE='''+@CPRODUCTCODE+'''  
			   ) D ON A.DEPT_ID+''-''+D.MEMO_NO=B.REF_NO   
			  AND B.FIN_YEAR=D.FIN_YEAR  
			  WHERE LEFT(A.CM_ID,2)='''+@CLOCID+''' AND CANCELLED=0 AND D.MEMO_NO IS  NULL  
			  AND C.SOLD_QTY>0  
			  AND SKU.'+@CEANCOLUMN+'='''+@CPRODUCTCODE+'''  
			  GROUP BY '+@CGROUPCOLS+'  
			  ) A GROUP BY '+@CGROUPCOLS1+'  
			  HAVING SUM(CASE WHEN XN_TYPE IN (''CHI'',''SLR'') THEN XN_QTY  
			  WHEN XN_TYPE IN (''CHO'',''SLS'') THEN -XN_QTY ELSE 0 END)>0  
			  )A'  
		     
			 PRINT @CCMD  
		          
			 INSERT #VEAN_PMT (EAN_NO,PRODUCT_CODE,SOLD_QTY,STOCK_QTY)  
			 EXEC SP_EXECUTESQL @CCMD  
		       
		       
		 END   
	       
		 DECLARE @TOTALPRODUCT_CODE INT,@TOTALQUANTITY INT  
	       
		 SET @TOTALPRODUCT_CODE=''  
		 SET @TOTALQUANTITY=''  
		 SELECT @TOTALPRODUCT_CODE=COUNT(PRODUCT_CODE) FROM #VEAN_PMT WHERE EAN_NO=@CPRODUCTCODE  
		 SELECT @TOTALQUANTITY=ABS(QUANTITY) FROM SLS_MBODATA WHERE PRODUCT_CODE=@CPRODUCTCODE  
	             
		 IF ISNULL(@TOTALPRODUCT_CODE,0)<>ISNULL(@TOTALQUANTITY,0)  
		 BEGIN  
	                      
			 DELETE FROM #TERROR  
			 INSERT #TERROR  
			 SELECT @CPRODUCTCODE AS PRODUCT_CODE,'STOCK NOT FOUND' AS ERROR_MSG  
			 SET @CERRMSG='STOCK NOT FOUND'  
			 GOTO END_PROC  
		 END  
	              
		 DELETE FROM #SLS_VENDOR_EAN_NO WHERE PRODUCT_CODE=@CPRODUCTCODE  
	                
	       
  END  
  
  IF SIGN(@QUANTITY)='-1'   
  BEGIN 
    
	  DECLARE @PRODUCT_CODE VARCHAR(22),@CCM_NO VARCHAR(15) ,@CCM_DT DATETIME
	  SET @PRODUCT_CODE=''
	  SELECT  @PRODUCT_CODE = PRODUCT_CODE FROM #VEAN_PMT 
		  
		  
	  SELECT @CCM_DT=MAX(CM_DT),@CCM_NO=MAX(CM_NO) FROM CMD01106 A JOIN CMM01106 B ON A.CM_ID=B.CM_ID
	  WHERE PRODUCT_CODE=@PRODUCT_CODE AND LEFT(CM_NO,2)=@CLOCID
		   
	     
  END
  
  
    
    
   
   -------INSERT DATA INTO CMM01106------  
   SET @CSTEP=60   
   INSERT SLS_CMM01106_UPLOAD (SP_ID,AC_CODE,ATD_CHARGES,AUTOENTRY,BIN_ID,CAMPAIGN_GC_OTP,   
   CANCELLED,CASH_TENDERED,CM_DT,CM_ID,CM_MODE,CM_NO,CM_TIME,COPIES_PTD,  
   CUSTOMER_CODE,DISCOUNT_AMOUNT,DISCOUNT_PERCENTAGE,DT_CODE,ECOUPON_ID,EDT_USER_CODE,   
   EXEMPTED,FC_RATE,FIN_YEAR,FLIGHT_NO,GV_AMOUNT,LAST_UPDATE,MANUAL_BILL,MANUAL_DISCOUNT,   
   MANUAL_ROUNDOFF,MEMO_TYPE,MRP_WSP,NET_AMOUNT,PARTY_TYPE,PASSPORT_NO,PATCHUP_RUN,PAY_MODE,   
   PAYBACK, POSTEDINAC, REF_CM_ID, REF_NO, REMARKS, ROUND_OFF, SALESSETUPINEFFECT, SENT_FOR_GR,   
   SENT_FOR_RECON, SENT_TO_HO, SMS_SENT, SUBTOTAL, SUBTOTAL_R, TICKET_NO, USER_CODE,  
   TOTAL_QUANTITY ,PARTY_STATE_CODE,OH_TAX_METHOD)  
       
   SELECT DISTINCT @SPID AS   SP_ID,'0000000000' AS AC_CODE, 0 AS ATD_CHARGES,0 AS  AUTOENTRY,'000' AS BIN_ID,  
   '' AS  CAMPAIGN_GC_OTP,0 AS CANCELLED,0 AS CASH_TENDERED,@CM_DT AS  CM_DT,  
   ISNULL(@CM_ID,'LATER') AS CM_ID,  
   1 AS CM_MODE,ISNULL(@CM_NO,'LATER') AS  CM_NO,GETDATE() AS CM_TIME,0 AS  COPIES_PTD,   
   '000000000000' AS CUSTOMER_CODE,0 AS DISCOUNT_AMOUNT, 0 AS DISCOUNT_PERCENTAGE,'0000000' AS  DT_CODE,  
   '' AS ECOUPON_ID,'0000000' AS EDT_USER_CODE,0 AS  EXEMPTED,0 AS  FC_RATE,@FIN_YEAR AS  FIN_YEAR,  
   '' AS FLIGHT_NO,0 AS  GV_AMOUNT,GETDATE() AS  LAST_UPDATE,0 AS  MANUAL_BILL,0 AS  MANUAL_DISCOUNT,0 AS  MANUAL_ROUNDOFF,   
   1 AS MEMO_TYPE,0 AS  MRP_WSP, 0 AS NET_AMOUNT,1 AS  PARTY_TYPE,'' AS  PASSPORT_NO,0 AS  PATCHUP_RUN,1 AS  PAY_MODE,  
   0 AS PAYBACK,0 AS  POSTEDINAC,'' AS REF_CM_ID,@CLOCID+'-'+MEMO_NO AS REF_NO,'IMPORTED SALE.' AS REMARKS,  
   0 AS  ROUND_OFF, 0 AS SALESSETUPINEFFECT,0 AS SENT_FOR_GR,0 AS  SENT_FOR_RECON,0 AS  SENT_TO_HO,  
   0 AS SMS_SENT,(CASE WHEN SIGN(A.NET)='1' THEN A.NET ELSE 0 END) AS SUBTOTAL,
    ( CASE WHEN SIGN(A.NET)='-1' THEN A.NET ELSE 0 END) AS SUBTOTAL_R,'' AS  TICKET_NO,
    '0000000' AS  USER_CODE,0 AS TOTAL_QUANTITY,@CPARTY_STATE_CODE ,0 AS OH_TAX_METHOD 
   FROM SLS_MBODATA A(NOLOCK)  WHERE DEPT_ID=@CLOCID  
     
    
    ----INSERT DATA INTO CMD01106-----  
   SET @CSTEP=70  
               
   INSERT SLS_CMD01106_UPLOAD ( BIN_ID,  CM_ID, CMM_DISCOUNT_AMOUNT, DEPT_ID, DISCOUNT_AMOUNT,  
     DISCOUNT_PERCENTAGE, EAN, EMP_CODE, EMP_CODE1, EMP_CODE2, FIX_MRP, FOC_QUANTITY,  HOLD_FOR_ALTER,   
     ITEM_DESC,  LAST_UPDATE, MANUAL_DISCOUNT,  MRP, NET, NRM_ID, OLD_MRP,  
     PACK_SLIP_ID, PRODUCT_CODE, QUANTITY, REALIZE_SALE, REF_ORDER_ID, REF_SLS_MEMO_ID, REPEAT_PUR_ORDER, RFNET,   
     ROW_ID, SLSDET_ROW_ID, SR_NO, TAX_AMOUNT, TAX_METHOD, TAX_PERCENTAGE, TAX_TYPE, WEIGHTED_AVG_DISC_AMT,  
     WEIGHTED_AVG_DISC_PCT, XN_TYPE,  SP_ID,TEMP_ROW_ID,BASIC_DISCOUNT_AMOUNT,BASIC_DISCOUNT_PERCENTAGE,LAST_SLS_DISCOUNT_PERCENTAGE,
     REF_SLS_MEMO_DT,REF_SLS_MEMO_NO,PACK_SLIP_ROW_ID )  
         
   SELECT '000' AS BIN_ID,ISNULL(@CM_ID,'LATER') AS  CM_ID, 0 AS CMM_DISCOUNT_AMOUNT, @CLOCID AS DEPT_ID,
      (CASE WHEN ABS(C.NET/QUANTITY)<>B.MRP THEN ((C.NET/QUANTITY)-B.MRP) ELSE 0 END) AS DISCOUNT_AMOUNT,  
     ABS( (CASE WHEN ABS(C.NET/QUANTITY)<>B.MRP THEN (((C.NET/QUANTITY)-B.MRP)/B.MRP)*100 ELSE 0 END)) AS DISCOUNT_PERCENTAGE,'' AS EAN,'0000000' AS EMP_CODE,'0000000' AS EMP_CODE1,'0000000' AS EMP_CODE2,  
      0 AS  FIX_MRP,0 AS  FOC_QUANTITY,0 AS HOLD_FOR_ALTER,'' AS ITEM_DESC, GETDATE() AS LAST_UPDATE,  
      1 AS MANUAL_DISCOUNT, B.MRP AS  MRP, C.NET AS  NET, '' AS NRM_ID,0 AS  OLD_MRP,'' AS  PACK_SLIP_ID,  
      A.PRODUCT_CODE AS PRODUCT_CODE,((CASE WHEN SIGN(QUANTITY)= '-1' THEN '-1' ELSE 1 END) * ABS(C.QUANTITY)) AS QUANTITY,0 AS  REALIZE_SALE, '' AS REF_ORDER_ID,  
      '' AS  REF_SLS_MEMO_ID,0 AS  REPEAT_PUR_ORDER,0 AS RFNET,@CLOCID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID  
      , '' AS SLSDET_ROW_ID,0 AS  SR_NO,0 AS  TAX_AMOUNT,1 AS  TAX_METHOD, 0 AS TAX_PERCENTAGE,1 AS  TAX_TYPE,  
      0 AS  WEIGHTED_AVG_DISC_AMT,0 AS WEIGHTED_AVG_DISC_PCT,'' AS  XN_TYPE,@SPID AS  SP_ID ,NEWID() AS TEMP_ROW_ID ,
     C.DISCOUNT_AMOUNT AS  BASIC_DISCOUNT_AMOUNT,
      ABS(C.DISCOUNT_AMOUNT*100/B.MRP) AS  BASIC_DISCOUNT_PERCENTAGE ,0,
      ISNULL(@CCM_DT,''),ISNULL(@CCM_NO,''),'NULL' AS PACK_SLIP_ROW_ID
       FROM #VEAN_PMT A(NOLOCK) JOIN SKU B(NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE  
       JOIN SLS_MBODATA C(NOLOCK) ON C.PRODUCT_CODE=A.EAN_NO 
       
       
      -- SELECT * FROM SLS_CMD01106_UPLOAD  
         
         
             ----------------INSERT PAYMODE DATA-----------  
          
   SET @CSTEP=70  
             
   INSERT SLS_PAYMODE_XN_DET_UPLOAD ( SP_ID, ADJ_MEMO_ID, AMOUNT, CURRENCY_CONVERSION_RATE, GV_SCRATCH_NO,   
   GV_SRNO, LAST_UPDATE, MEMO_ID, PAYMODE_CODE, REF_NO, REMARKS, ROW_ID, XN_TYPE, WALLET_MOBILE )    
   SELECT   @SPID AS SP_ID,'' AS  ADJ_MEMO_ID, 0 AS AMOUNT,1 AS  CURRENCY_CONVERSION_RATE,  
   '' AS  GV_SCRATCH_NO,'' AS  GV_SRNO,GETDATE() AS  LAST_UPDATE,ISNULL(@CM_ID,'LATER') AS  MEMO_ID,  
   '0000000' AS PAYMODE_CODE,'' AS  REF_NO,'SALE IMPORTED' AS REMARKS,  
   @CLOCID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID,  
   'SLS' AS  XN_TYPE,'' AS  WALLET_MOBILE  
    
     
      
    SET @CSTEP=110  
    
    EXEC SAVETRAN_SLS_BEFORESAVE  
     @NUPDATEMODE=@NUPDATEMODE,  
     @NSPID=@SPID,  
     @CLOCID=@CLOCID,  
     @CMEMONOPREFIX=@MEMONOPREFIX,  
     @BSISLOC=1  
    
  
  
SAVETRAN_SLS_AFTERSAVE:    
     SET @CSTEP=120  
  
	 EXEC SAVETRAN_SLS_AFTERSAVE  
	  @NUPDATEMODE=@NUPDATEMODE,  
	  @NSPID=@SPID,  
	  @CMEMONOPREFIX=@MEMONOPREFIX,  
	  @CFINYEAR=@FIN_YEAR,  
	  @CMEMOID=@CMEMOID,  
	  @CLOCID=@CLOCID,  
	  @BSISLOC=1  
        
  
END TRY  

BEGIN CATCH  
   
  PRINT 'ENTER CATCH BLOCK'   
  SET @CERRMSG='SP3S_SYNCH_MBO_SLS_DATA  : AT STEP - '+@CSTEP+', MESSAGE - '+ERROR_MESSAGE()      
  GOTO END_PROC  
    
END CATCH  

END_PROC:  
  
    -- SELECT ISNULL(@CERRMSG,'')  
      --SELECT *FROM #TERROR   
   IF ISNULL(@CERRMSG,'')<>''  
   BEGIN  
     IF NOT EXISTS (SELECT *FROM #TERROR)  
     BEGIN  
		  INSERT INTO #TERROR   
		  SELECT '' ,ISNULL(@CERRMSG,'')  
     END  
          
   END  
   ELSE  
   BEGIN  
     SELECT @CERRMSG= ERRMSG FROM #TERROR   
     --SELECT ISNULL(@CERRMSG,'') AS ERRMSG   
   END  
      
   IF NOT EXISTS(SELECT * FROM #TERROR WHERE ISNULL(PRODUCT_CODE,'')<>'' OR ISNULL(ERRMSG,'')<>'')  
       SELECT '' AS PRODUCT_CODE,'' AS ERRMSG  
   ELSE  
	   SELECT * FROM #TERROR  

         
  IF @@TRANCOUNT>0      
  BEGIN      
      IF ISNULL(@CERRMSG,'')<>''        
      BEGIN      
        PRINT 'ROLLBACK TRANSACTION'      
        ROLLBACK      
      END       
      ELSE      
      BEGIN    
	       
		 PRINT 'COMMIT'      
		 COMMIT        
      END       
         
   END   
     
END     
----------- END OF PROCEDURE SP3S_SYNCH_MBO_SLS_DATA_NEW
*/