
create Procedure SP3S_GET_TRANSFER_TO_TRADING_DATA
(
 @NSPID varchar(50)='',
 @CDEPT_ID VARCHAR(5),
 @CMEMO_ID VARCHAR(50)='',
 @CERRORMSG VARCHAR(1000) OUTPUT
)
as
begin
     

	 DECLARE @NSTEP NUMERIC(5,0)
	 SET @CERRORMSG=''
 
       

	   set @NSTEP=00

	  BEGIN TRY
	
		  IF NOT EXISTS (SELECT TOP 1'U' FROM TRANSFER_TO_TRADING_UPLOAD WHERE SP_ID=@NSPID)
		  BEGIN
		      	SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' BARCODE DETAILS NOT FOUND  '  
				GOTO END_PROC
		  END
		

	  	SELECT TOP 1 @CDEPT_ID=DEPT_ID FROM TRANSFER_TO_TRADING_UPLOAD (NOLOCK) WHERE SP_ID=@NSPID
		

			IF OBJECT_ID ('TEMPDB..#TMPALLRECBARCODE','U') IS NOT NULL
			   DROP TABLE #TMPALLRECBARCODE

			;WITH RECBARCODE AS
			(
			SELECT T2.ENFORCE_JOB_ORDER, T2.MEMO_ID ,  TMP.ARTICLE_CODE ,TMP.PARA1_CODE ,TMP.PARA2_CODE  , TMP.QUANTITY  REC_QTY,
				  A.PRODUCT_CODE ,A.AGENCY_CODE ,A.JOB_CODE ,
				   CAST('' AS VARCHAR(50)) AS REF_ROW_ID,
				   CAST(0 AS NUMERIC(10,2)) AS RATE,
				   CAST('' AS VARCHAR(1000))  AS ISSUE_REMARKS,
				   CAST('' AS VARCHAR(1000))  AS ISSUE_NO,
				   CAST('' AS DATETIME)  AS ISSUE_DT,
				   A.QUANTITY_IN_STOCK,
				   TMP.OH_COST_PERCENTAGE,TMP.OH_COST_AMOUNT,TMP.WS_PRICE,TMP.MRP
			FROM JOBWORK_PMT A (NOLOCK)
			JOIN SKU (NOLOCK) ON A.PRODUCT_CODE =SKU.PRODUCT_CODE 
			JOIN ORD_PLAN_BARCODE_DET DET (NOLOCK) ON DET.PRODUCT_CODE=A.PRODUCT_CODE
			JOIN ORD_PLAN_DET T1 (NOLOCK) ON  DET.REFROW_ID=T1.ROW_ID
			JOIN ORD_PLAN_MST T2 (NOLOCK) ON  T1.MEMO_ID=T2.MEMO_ID 
			JOIN SKU B (NOLOCK) ON A.PRODUCT_CODE =B.PRODUCT_CODE 
			JOIN TRANSFER_TO_TRADING_UPLOAD TMP (NOLOCK) ON B.ARTICLE_CODE =TMP.ARTICLE_CODE AND SKU.PARA1_CODE =TMP.PARA1_CODE AND SKU.PARA2_CODE =TMP.PARA2_CODE   AND (ISNULL(TMP.JOBCARD_ID,'')=T2.MEMO_ID OR ISNULL(TMP.JOBCARD_ID,'')='')
			WHERE  ISNULL(QUANTITY_IN_STOCK,0) >0 AND T2.CANCELLED=0 
			AND TMP.SP_ID=@NSPID
			)



			SELECT * INTO #TMPALLRECBARCODE FROM RECBARCODE 

		  if object_id ('tempdb..#tmprecbarcode','U') is not null
			  drop table #tmprecbarcode

			SELECT A.* ,
			SR=ROW_NUMBER () OVER (PARTITION BY A.ARTICLE_CODE ,A.PARA1_CODE ,A.PARA2_CODE ORDER BY A.PRODUCT_CODE),
			CAST('' AS VARCHAR(100)) AS AC_CODE, 
			CAST('' AS VARCHAR(100)) as SET_PRODUCT_CODE , 
			@CDEPT_ID as Dept_id  ,'000' as BIN_ID ,
			 QUANTITY_IN_STOCK as REQUIRED_QTY ,
			 QUANTITY_IN_STOCK   AS INPUT_QTY,
			 CAST(QUANTITY_IN_STOCK AS NUMERIC(10,3)) AS OUT_QTY,
			 CAST(0 AS NUMERIC(10,2)) AS PURCHASE_PRICE,
			 CAST(0 AS NUMERIC(10,2)) AS ARTICLE_PP,
			 CAST(0 AS NUMERIC(10,2)) AS Actual_cost
			INTO #tmprecbarcode
			FROM #tmpALLrecbarcode A
			left JOIN
			(
			   SELECT A.MEMO_ID ,A.ARTICLE_CODE ,MAX(JOB_ORDER) MAX_JOB_ORDER
			   FROM ORD_PLAN_JOB  A (NOLOCK)
			   GROUP BY A.MEMO_ID ,A.ARTICLE_CODE
			) B ON A.ARTICLE_CODE =B.ARTICLE_CODE AND A.MEMO_ID =B.MEMO_ID 
			left JOIN ORD_PLAN_JOB C (NOLOCK) ON B.MEMO_ID =C.MEMO_ID AND B.MAX_JOB_ORDER =C.JOB_ORDER AND A.JOB_CODE =C.JOB_CODE 
			AND C.ARTICLE_CODE=A.ARTICLE_CODE
			where (a.ENFORCE_JOB_ORDER=0 or   C.MEMO_ID IS NOT NULL)


			DELETE   FROM #tmprecbarcode WHERE SR >REC_QTY

	

		    set @NSTEP=10
			declare @ctransferqty numeric(10,2),@ntottalqty numeric(10,0)

			select @ctransferqty=SUM(rec_qty) from JWR_MISSING_BARCODE_UPLOAD where SP_ID=@NSPID
			select @ntottalqty=sum(OUT_QTY) from #tmprecbarcode

			if  isnull(@ctransferqty,0)<>@ntottalqty
			begin  

			     SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' mismatch In Totalqty :-'  +rtrim(LTRIM(STR(@ntottalqty)))+' and Transfer Qty:'+rtrim(LTRIM(STR(@ctransferqty)))
				 GOTO END_PROC
			end
 

		   SET @NSTEP = 15
			if object_id ('tempdb..#tmpmismatchqty','U') is not null
			   drop table #tmpmismatchqty

			SELECT A.ARTICLE_CODE ,A.PARA1_CODE ,A.PARA2_CODE ,A.REC_QTY,sum(OUT_QTY ) AS BARCODE_QTY  
			into #tmpmismatchqty
			FROM #TMPRECBARCODE A
			GROUP BY A.ARTICLE_CODE ,A.PARA1_CODE ,A.PARA2_CODE ,A.REC_QTY 
			having A.REC_QTY<>sum(OUT_QTY )  

			 SET @NSTEP = 20
			if exists (select top 1 'u' from #tmpmismatchqty)
			begin
     
	             declare @cstr varchar(1000)

				 select top 1 @cstr=' Article:'+ article_no +',Para1_Name:'+para1_name +',Para2_Name:'+para2_name +',TTM Qty:' +str(REC_QTY) +',Barcode Qty:'+str(BARCODE_QTY)
				 from #tmpmismatchqty a
				 join article b on a.ARTICLE_CODE =b.article_code 
				 join para1 p1 on p1.para1_code =a.PARA1_CODE 
				 join para2 p2 on p2.para2_code =a.PARA2_CODE 

				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) +@cstr+ ' Issue Details Not found Please check  '  
				goto end_proc

			end

		    	DECLARE @NTOTALQTY NUMERIC(10,0),@NCALTOTALQTY NUMERIC(10,0)

				SELECT @NCALTOTALQTY=SUM(OUT_QTY) FROM #TMPRECBARCODE
				SELECT @NTOTALQTY=SUM(REC_QTY)  FROM JWR_MISSING_BARCODE_UPLOAD (NOLOCK) WHERE SP_ID =LTRIM(RTRIM(STR(@NSPID)))

				IF ISNULL(@NTOTALQTY,0)<>ISNULL(@NCALTOTALQTY,0)
				BEGIN
				    	SET @CERRORMSG = 'MISMATCH IN TOTAL Quantity:'+RTRIM(LTRIM(STR(ISNULL(@NTOTALQTY,0))))+' & BARCODE ASSIGN QTY  ' +RTRIM(LTRIM(STR(ISNULL(@NCALTOTALQTY,0))))
					    GOTO END_PROC

				END

	IF ISNULL(@CERRORMSG,'')=''
	BEGIN

		    PRINT' PENDING RAW MATERIAL DETAILS WITH PRODUCT CODE WISE'

			   
            
                IF OBJECT_ID ('TEMPDB..#TEMPMATERIALREQ','U') IS NOT NULL
                  DROP TABLE #TEMPMATERIALREQ

				 SELECT MST.ISSUE_ID  ,SUM(B.QUANTITY) AS  TRANSFER_QTY
				 into #TEMPMATERIALREQ
				 FROM #TMPRECBARCODE A
				 JOIN JOBWORK_ISSUE_DET B (NOLOCK) ON A.PRODUCT_CODE =B.PRODUCT_CODE
				 JOIN JOBWORK_ISSUE_MST MST (NOLOCK) ON MST.ISSUE_ID =B.ISSUE_ID 
				 WHERE MST.CANCELLED =0
				 GROUP BY MST.ISSUE_ID 
 
				
				 IF OBJECT_ID ('TEMPDB..#TEMPISSUED','U') IS NOT NULL
                  DROP TABLE #TEMPISSUED
				
				SELECT A1.ARTICLE_CODE ,A1.PARA1_CODE ,A1.PARA2_CODE,A1.AVG_QUANTITY+ISNULL(A1.ADD_AVG_QUANTITY,0) AS  AVG_QUANTITY,
				SUM((case when isnull(a5.issue_type,0)=0 then 1  else -1 end )*
				 CASE WHEN ISNULL(UC.CONVERSION_VALUE,0) =0 THEN ISNULL(A6.QUANTITY,0)
	             ELSE (ISNULL(A6.QUANTITY,0))/ISNULL(UC.CONVERSION_VALUE,0) END) ISSUED_QTY,
				SUM((CASE WHEN ISNULL(A5.ISSUE_TYPE,0)=0 THEN 1  ELSE -1 END )*
				 CASE WHEN ISNULL(UC.CONVERSION_VALUE,0) =0 THEN ISNULL(A6.QUANTITY,0)
	             ELSE (ISNULL(A6.QUANTITY,0))/ISNULL(UC.CONVERSION_VALUE,0) END*A4.PURCHASE_PRICE)  AS RATE,
				ART.UOM_CODE ,A5.JOBWORK_ISSUE_ID ,TRANSFER_QTY  AS TRANSFER_QTY,
				CAST(0 AS NUMERIC(10,3)) AS TOTAL_FG_QTY
				INTO #TEMPISSUED
				FROM BOM_ISSUE_DET A4 (NOLOCK) 
				JOIN BOM_ISSUE_MST A5  (NOLOCK) ON A5.ISSUE_ID=A4.ISSUE_ID
				JOIN BOM_ISSUE_REF A6  (NOLOCK) ON A5.ISSUE_ID=A6.BOM_ISSUE_ID AND A4.ROW_ID=A6.BOM_DET_ROW_ID
				JOIN ORD_PLAN_BOM_DET A1  (NOLOCK) ON A1.ROW_ID=A6.ORD_PLAN_BOM_DET_ROW_ID
				JOIN
				(
				 SELECT   ISSUE_ID,TRANSFER_QTY 
				 FROM #TEMPMATERIALREQ
				 group by issue_id,TRANSFER_QTY 
				) TMP ON TMP.issue_id =A5.JOBWORK_ISSUE_ID
				JOIN SKU ON SKU.PRODUCT_CODE =A4.PRODUCT_CODE 
				JOIN article art  (NOLOCK) ON art.article_code   = a1.ARTICLE_CODE 
				LEFT OUTER JOIN UOM_CONVERSION UC (NOLOCK) ON UC.UOM_CODE=art.UOM_CODE
                LEFT OUTER JOIN BOM_UOM BU (NOLOCK) ON BU.CONVERSION_UOM_CODE=UC.CONVERSION_UOM_CODE  
				WHERE A5.CANCELLED =0
				GROUP BY A1.ARTICLE_CODE ,A1.PARA1_CODE ,A1.PARA2_CODE,A1.AVG_QUANTITY+ISNULL(A1.ADD_AVG_QUANTITY,0),
				ART.uom_code ,A5.JOBWORK_ISSUE_ID ,A4.job_code ,TRANSFER_QTY
				
			
				
				UPDATE A SET RATE =RATE /QTY,TOTAL_FG_QTY=QTY  
				FROM  #TEMPISSUED A
				JOIN 
				(
				SELECT ISSUE_ID ,SUM(QUANTITY) AS QTY 
				FROM JOBWORK_ISSUE_DET  (NOLOCK)
				GROUP BY ISSUE_ID
				)B ON A.JOBWORK_ISSUE_ID =B.ISSUE_ID 


	
				
				
				IF OBJECT_ID('TEMPDB..#TMPMATERIALDETAILS','U') IS NOT NULL
				   DROP TABLE #TMPMATERIALDETAILS
				
				SELECT ART.ARTICLE_CODE, ART.ARTICLE_NO,UOM.UOM_NAME ,
				       P1.PARA1_CODE ,P1.PARA1_NAME,P2.PARA2_CODE  ,P2.PARA2_NAME , 
			           A.AVG_QUANTITY AS AVG_QTY ,
			           SUM(CONVERT(NUMERIC(10,3),A.AVG_QUANTITY*A.TRANSFER_QTY))  AS BOM_REQ_QTY,
					   SUM(CONVERT(NUMERIC(10,3),A.AVG_QUANTITY*a.TOTAL_FG_QTY))  AS TOTAL_ISSUED_QTY,
			           CAST(0 AS NUMERIC(14,3)) AS REQ_QTY,
			           CAST(0 AS NUMERIC(14,3)) AS ISSUED_QTY,
			           CAST(0 AS NUMERIC(14,3)) AS PENDING_QTY,
			           CONVERT(NUMERIC(10,2),ISNULL(a.RATE,0)) AS RATE,
			           ISNULL(UC.Conversion_Value ,0) AS Conversion_Value,
					   SUM(A.TRANSFER_QTY) AS TRANSFER_QTY
			    INTO #TMPMATERIALDETAILS
				FROM #TEMPISSUED A
				JOIN ARTICLE ART (NOLOCK) ON ART.ARTICLE_CODE =A.ARTICLE_CODE 
			    JOIN PARA1 P1 (NOLOCK) ON P1.PARA1_CODE =A.PARA1_CODE 
			    JOIN PARA2 P2 (NOLOCK) ON P2.PARA2_CODE =A.PARA2_CODE 
			    JOIN UOM (NOLOCK) ON UOM.UOM_CODE =ART .UOM_CODE 
			    LEFT OUTER JOIN UOM_CONVERSION UC (NOLOCK) ON UC.UOM_CODE=art.UOM_CODE
                LEFT OUTER JOIN BOM_UOM BU (NOLOCK) ON BU.CONVERSION_UOM_CODE=UC.CONVERSION_UOM_CODE 
			    GROUP BY ART.ARTICLE_CODE,ART.ARTICLE_NO,UOM.UOM_NAME ,
				P1.PARA1_CODE ,P1.PARA1_NAME,P2.PARA2_CODE  ,P2.PARA2_NAME , 
				A.AVG_QUANTITY,CONVERT(NUMERIC(10,2),ISNULL(a.RATE,0)),ISNULL(UC.Conversion_Value ,0)
				
				
				
				UPDATE #TMPMATERIALDETAILS SET 
				REQ_QTY=CASE WHEN ISNULL(Conversion_Value,0)=0 THEN BOM_REQ_QTY ELSE BOM_REQ_QTY/ISNULL(Conversion_Value,0) END
				
				UPDATE #TMPMATERIALDETAILS SET 
				ISSUED_QTY=CASE WHEN REQ_QTY<TOTAL_ISSUED_QTY THEN  REQ_QTY ELSE TOTAL_ISSUED_QTY END
				
				UPDATE #TMPMATERIALDETAILS SET PENDING_QTY=REQ_QTY-ISSUED_QTY


	
		
                  DECLARE @CPICK_PP_IN_TRANSFER_TO_TRADING  VARCHAR(10)
                  SELECT TOP 1 @CPICK_PP_IN_TRANSFER_TO_TRADING=value  FROM CONFIG WHERE config_option ='PICK_PP_IN_TRANSFER_TO_TRADING'
                  

                
                 
				      UPDATE A SET PURCHASE_PRICE =0,
					          ARTICLE_PP=CASE WHEN ISNULL(B.PURCHASE_PRICE,0)<> 0 THEN B.PURCHASE_PRICE ELSE ART.PURCHASE_PRICE END,
							  ACTUAL_COST =CONVERT(NUMERIC(10,2),isnull(c.FG_VALUE,0) +ISNULL(C.BOM_VALUE,0))
					   FROM #TMPRECBARCODE A
					   JOIN SKU  (NOLOCK) ON A.PRODUCT_CODE =SKU.PRODUCT_CODE 
					   JOIN ARTICLE ART (NOLOCK ) ON SKU.ARTICLE_CODE =ART.ARTICLE_CODE
					   JOIN JOBWORK_PMT  C (NOLOCK)  ON A.PRODUCT_CODE =C.PRODUCT_CODE 
					   LEFT JOIN ART_DET B (NOLOCK) ON SKU.ARTICLE_CODE =B.ARTICLE_CODE AND SKU.PARA2_CODE =B.PARA2_CODE 

                
                  IF ISNULL(@CPICK_PP_IN_TRANSFER_TO_TRADING,'')='1'
                  BEGIN
                      
                      UPDATE A SET PURCHASE_PRICE =a.ARTICLE_PP  
                      FROM #TMPRECBARCODE A
                      --JOIN SKU B (NOLOCK) ON A.PRODUCT_CODE =B.product_code 
                  
                  END
			      ELSE
			      BEGIN
			        
					 UPDATE A SET PURCHASE_PRICE =a.ACTUAL_COST  
                     FROM #TMPRECBARCODE A
				

					   IF OBJECT_ID('TEMPDB..#TMPFGMATERIAL','U') IS NOT NULL
				          DROP TABLE #TMPFGMATERIAL

						 SELECT A.PRODUCT_CODE, BOM.ROW_ID ,
						  D.ARTICLE_CODE ,ART.ARTICLE_NO ,UOM.UOM_NAME,
						  P1.PARA1_CODE ,P1.PARA1_NAME ,
						  P2.PARA2_CODE ,P2.PARA2_NAME,
						  ISNULL(d.AVG_QUANTITY,0)+ ISNULL(D.ADD_AVG_QUANTITY,0) AS AVG_QTY,
						  ISNULL(d.AVG_QUANTITY,0)+ ISNULL(D.ADD_AVG_QUANTITY,0)  AS BOM_REQ_QTY,
						  ISNULL(d.AVG_QUANTITY,0)+ ISNULL(D.ADD_AVG_QUANTITY,0)  AS TOTAL_ISSUE_ID_QTY,
						  ISNULL(d.AVG_QUANTITY,0)+ ISNULL(D.ADD_AVG_QUANTITY,0) AS REQ_QTY,
						  ISNULL(d.AVG_QUANTITY,0)+ ISNULL(D.ADD_AVG_QUANTITY,0)  AS ISSUED_QTY,
						  0 AS PENDING_QTY,
						  D.PURCHASE_PRICE AS RATE,
						  0 AS CONVERSION_VALUE
						 INTO #TMPFGMATERIAL
						 FROM #TMPRECBARCODE A (NOLOCK)
						 JOIN JOBWORK_RECEIPT_DET B (NOLOCK) ON A.PRODUCT_CODE =B.PRODUCT_CODE 
						 JOIN JOBWORK_RECEIPT_MST  C (NOLOCK) ON B.RECEIPT_ID =C.RECEIPT_ID 
						 JOIN JOBWORK_RECEIVE_BOM_DET D (NOLOCK) ON C.RECEIPT_ID =D.RECEIPT_ID AND B.ref_row_id =D.REF_ROW_ID 
						 JOIN JOBWORK_ISSUE_DET ID ON ID.ROW_ID =D.REF_ROW_ID 
						 JOIN JOBWORK_ISSUE_MST IM ON IM.ISSUE_ID =ID.ISSUE_ID 
						 JOIN ORD_PLAN_BARCODE_DET OB ON OB.PRODUCT_CODE =ID.PRODUCT_CODE 
						 JOIN ORD_PLAN_DET OD ON OD.ROW_ID =OB.REFROW_ID 
						 JOIN ORD_PLAN_MST OM ON  OM.MEMO_ID =OD.MEMO_ID 
						 JOIN ORD_PLAN_BOM_DET BOM ON BOM.REF_ROW_ID=OD.ROW_ID 
						 JOIN ARTICLE ART (NOLOCK) ON ART.ARTICLE_CODE =D.ARTICLE_CODE
						 JOIN UOM (NOLOCK) ON UOM.UOM_CODE =ART.UOM_CODE 
						 JOIN PARA1 P1 (NOLOCK) ON P1.PARA1_CODE =D.PARA1_CODE 
						 JOIN PARA2 P2 (NOLOCK) ON P2.PARA2_CODE =D.PARA2_CODE 
						 WHERE C.CANCELLED =0 AND IM.CANCELLED =0 AND OM.CANCELLED =0


						
	                

						 --UPDATE A SET PURCHASE_PRICE=A.PURCHASE_PRICE +(RATE*AVG_QTY)
						 --FROM #TMPFINAL A
						 --JOIN #TMPFGMATERIAL B ON A.PRODUCT_CODE =B.PRODUCT_CODE 

						 INSERT INTO #TMPMATERIALDETAILS(	ARTICLE_CODE,	ARTICLE_NO,	UOM_NAME,	
	                      PARA1_CODE,	PARA1_NAME,	PARA2_CODE,	PARA2_NAME,	AVG_QTY,	
		                  BOM_REQ_QTY,	TOTAL_ISSUED_QTY,	REQ_QTY,	ISSUED_QTY,	PENDING_QTY,	
		                  RATE,	Conversion_Value)

					  SELECT 	ARTICLE_CODE,	ARTICLE_NO,	UOM_NAME,	
					   PARA1_CODE,	PARA1_NAME,	PARA2_CODE,	PARA2_NAME,	AVG_QTY,	
					   BOM_REQ_QTY,	TOTAL_ISSUE_ID_QTY ,	REQ_QTY,	ISSUED_QTY,	PENDING_QTY,	
					  CASE WHEN ISNULL(AVG_QTY,0)=0 THEN 0 ELSE  RATE/AVG_QTY END,	Conversion_Value

                     FROM #TMPFGMATERIAL
					  GROUP BY ROW_ID, 	ARTICLE_CODE,	ARTICLE_NO,	UOM_NAME,	
					 PARA1_CODE,	PARA1_NAME,	PARA2_CODE,	PARA2_NAME,	AVG_QTY,	
					 BOM_REQ_QTY,	TOTAL_ISSUE_ID_QTY ,	REQ_QTY,	ISSUED_QTY,	PENDING_QTY,	
					 CASE WHEN ISNULL(AVG_QTY,0)=0 THEN 0 ELSE  RATE/AVG_QTY END,	Conversion_Value
	                

					IF EXISTS (SELECT TOP 1 'U' FROM #TMPFGMATERIAL)
					BEGIN
					    UPDATE A SET PURCHASE_PRICE=ISNULL(B.BOM_VALUE,0) +ISNULL(B.FG_VALUE,0)
						FROM #TMPRECBARCODE A
						JOIN JOBWORK_PMT B ON A.PRODUCT_CODE =B.PRODUCT_CODE 

					END

				END

				
				

				 INSERT TRANSFER_TO_TRADING_DET	( MEMO_ID, ARTICLE_CODE, PARA1_CODE, PARA2_CODE, para3_code, para4_code, para5_code, para6_code, PRODUCT_CODE, BIN_ID, SR_NO, ROW_ID, LAST_UPDATE, QUANTITY, PURCHASE_PRICE, MRP, WS_PRICE, AMOUNT, PRINT_LABEL, AC_CODE, 
				 OH_Cost_Percentage, OH_Cost_Amount,ARTICLE_PP ,ACTUAL_COST  )  
				 SELECT 	@CMEMO_ID  MEMO_ID,B. ARTICLE_CODE, B.PARA1_CODE, B.PARA2_CODE, B.para3_code, B.para4_code, B.para5_code, B.para6_code, B.PRODUCT_CODE, BIN_ID, 
				 ROW_NUMBER() OVER (ORDER BY A.PRODUCT_CODE)  SR_NO, 
				 NEWID() AS ROW_ID,GETDATE() LAST_UPDATE,A.OUT_QTY QUANTITY, isnull(A.PURCHASE_PRICE,0)  PURCHASE_PRICE,
				 a.MRP,ISNULL(a.WS_PRICE,0) WS_PRICE,0 AMOUNT,0 PRINT_LABEL, B.AC_CODE,a.OH_Cost_Percentage,a.OH_Cost_Amount ,
				 a.ARTICLE_PP ,a.Actual_cost 
				 FROM #TMPRECBARCODE A
				 JOIN SKU B (NOLOCK) ON A.PRODUCT_CODE =B.PRODUCT_CODE  
			     JOIN LM01106 LM (NOLOCK) ON LM.AC_CODE =b.AC_CODE



				  INSERT TRANSFER_TO_TRADING_JOBS	( MEMO_ID, JOB_CODE, ROW_ID, JOB_RATE, QUANTITY, NET_JOB_RATE ) 
				   SELECT 	@CMEMO_ID  MEMO_ID,A.JOB_CODE JOB_CODE,NEWID() ROW_ID,A.JOB_RATE JOB_RATE, 
				  SUM(TMP.OUT_QTY) AS QUANTITY,
				  CONVERT(NUMERIC(10,2),SUM(A.JOB_RATE*TMP.OUT_QTY)) AS NET_JOB_RATE

				FROM #TMPRECBARCODE TMP
				JOIN JOBWORK_RECEIPT_DET A (NOLOCK) ON TMP.PRODUCT_CODE =A.PRODUCT_CODE 
				JOIN JOBWORK_RECEIPT_MST  B (NOLOCK) ON A.RECEIPT_ID =B.RECEIPT_ID 
				JOIN JOBWORK_ISSUE_DET C (NOLOCK) ON A.REF_ROW_ID =C.ROW_ID 
				JOIN JOBWORK_ISSUE_MST D (NOLOCK) ON C.ISSUE_ID =D.ISSUE_ID 
				JOIN JOBS (NOLOCK) ON JOBS.JOB_CODE =C.JOB_CODE 
				JOIN SKU  (NOLOCK) ON A.PRODUCT_CODE =SKU.PRODUCT_CODE  
				JOIN ARTICLE ART (NOLOCK) ON ART.ARTICLE_CODE =SKU.ARTICLE_CODE 
				JOIN PARA1 P1 (NOLOCK) ON P1.PARA1_CODE =SKU.PARA1_CODE 
				JOIN PARA2 P2 (NOLOCK) ON P2.PARA2_CODE =SKU.PARA2_CODE 
				JOIN PARA3 P3 (NOLOCK) ON P3.PARA3_CODE =SKU.PARA3_CODE 
				JOIN PARA4 P4 (NOLOCK) ON P4.PARA4_CODE =SKU.PARA4_CODE 
				JOIN PARA5 P5 (NOLOCK) ON P5.PARA5_CODE =SKU.PARA5_CODE 
				JOIN PARA6 P6 (NOLOCK) ON P6.PARA6_CODE =SKU.PARA6_CODE 
				JOIN UOM (NOLOCK) ON UOM.UOM_CODE =ART .UOM_CODE 
				WHERE B.CANCELLED =0 AND D.CANCELLED =0
				GROUP BY A.JOB_CODE,A.JOB_RATE
				
	
			  

				 INSERT TRANSFER_TO_TRADING_BOM	( MEMO_ID, ARTICLE_CODE, PARA1_CODE, PARA2_CODE, ROW_ID, AVG_QTY, REQ_QTY, ISSUED_QTY, AMOUNT, PENDING_QTY ) 
				  SELECT @CMEMO_ID  MEMO_ID	  ,ARTICLE_CODE ARTICLE_CODE,PARA1_CODE PARA1_CODE,PARA2_CODE PARA2_CODE,NEWID() ROW_ID, 
				  AVG_QTY AVG_QTY, SUM(REQ_QTY) REQ_QTY,SUM(ISSUED_QTY) ISSUED_QTY,CONVERT(NUMERIC(10,2),SUM(RATE)*SUM(TRANSFER_QTY )) AMOUNT,SUM(PENDING_QTY)  PENDING_QTY 
				FROM #TMPMATERIALDETAILS
				GROUP BY ARTICLE_CODE,ARTICLE_NO ,UOM_NAME,
				PARA1_CODE,PARA1_NAME,PARA2_CODE,PARA2_NAME,AVG_QTY
			  




END

	

   
 END TRY  
   
 BEGIN CATCH  
  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()  
  GOTO END_PROC  
 END CATCH  
   
END_PROC: 
         
		  
	

end

