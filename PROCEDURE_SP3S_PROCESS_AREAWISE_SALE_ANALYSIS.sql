CREATE PROCEDURE SP3S_PROCESS_AREAWISE_SALE_ANALYSIS
--WITH ENCRYPTION 
AS 
BEGIN
/*
	THIS PROCEDURE WILL CALCULATE FILTER BASED NET REALIZE VALUE(NRV) FOR EACH LOCATION MONTHWISE AND PSFPD 
	SALE AS PER THE AREA ALLOCATED FOR THE FILTER PARAMETER FOR EACH MONTH FOR CURRENT AND LAST FINANCIAL YEARS AND 
	LOAD TABLES THAT WOULD BE USED FOR REPORTING.
*/
--EXEC SP3S_PROCESS_AREAWISE_SALE_ANALYSIS
/*GETTING THE CURRENT AND LAST FINANCIAL YEAR*/
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
DECLARE @DCURDATE DATETIME,@CFINYEAR VARCHAR(10),@CPREFINYEAR VARCHAR(10),@CCMD NVARCHAR(MAX)
	   ,@CSTEP VARCHAR(10),@CERRMSG VARCHAR(500)
BEGIN TRY
SET @CSTEP=10
SET @DCURDATE=GETDATE()
SET @CFINYEAR='01'+DBO.FN_GETFINYEAR(@DCURDATE)
SET @CPREFINYEAR=(@CFINYEAR-1)
SET @CPREFINYEAR='0'+@CPREFINYEAR

SET @CSTEP=20
IF OBJECT_ID('TEMPDB..#FINYEARS','U') IS NOT NULL
	DROP TABLE #FINYEARS

SET @CSTEP=30
CREATE TABLE #FINYEARS(FIN_YEAR VARCHAR(10))

SET @CSTEP=40
INSERT #FINYEARS(FIN_YEAR)
SELECT @CFINYEAR
UNION 
SELECT @CPREFINYEAR

SET @CSTEP=50
IF OBJECT_ID('TEMPDB..#FILTER_CURSOR','U') IS NOT NULL
	DROP TABLE #FILTER_CURSOR

SET @CSTEP=60
SELECT DISTINCT MST.TITLE_NAME,MST.MEMO_ID,MST.FILTER
INTO #FILTER_CURSOR
FROM LOC_SPACE_MST MST
JOIN LOC_SPACE_DET DET ON MST.MEMO_ID=DET.MEMO_ID
JOIN #FINYEARS FIN ON DET.FIN_YEAR=FIN.FIN_YEAR

SET @CSTEP=70
IF OBJECT_ID('TEMPDB..#AREA_ALLOC','U') IS NOT NULL
	DROP TABLE #AREA_ALLOC

SET @CSTEP=80
CREATE TABLE #AREA_ALLOC
(
	MEMO_ID VARCHAR(50) 
   ,DEPT_ID VARCHAR(5)
   ,MONTH_NAME VARCHAR(50)
   ,MONTH_NO NUMERIC(2)
   ,FIN_YEAR VARCHAR(10)
   ,AREA_ALLOCATED NUMERIC(18,2)
   ,NRV NUMERIC(18,2)
   ,SALE_DAYS NUMERIC(3)
   ,PSFPD NUMERIC(18)
)	

SET @CSTEP=90
IF OBJECT_ID('TEMPDB..#ACTUAL_SALE','U') IS NOT NULL
	DROP TABLE #ACTUAL_SALE

SET @CSTEP=100
CREATE TABLE #ACTUAL_SALE
(
    DEPT_ID VARCHAR(5)
   ,MONTH_NAME VARCHAR(50)
   ,FIN_YEAR VARCHAR(10)
   ,SALE_DAYS NUMERIC(3)
   ,NRV NUMERIC(18,2)
)

SET @CSTEP=110
DECLARE @CTITLE_NAME VARCHAR(100),@CMEMO_ID VARCHAR(50),@CFILTER VARCHAR(MAX)
WHILE EXISTS(SELECT TOP 1 'U' FROM #FILTER_CURSOR)
BEGIN
	SET @CSTEP=120
	SELECT @CTITLE_NAME=NULL,@CMEMO_ID=NULL,@CFILTER=NULL
	TRUNCATE TABLE #AREA_ALLOC
	TRUNCATE TABLE #ACTUAL_SALE
	
	SET @CSTEP=130	
	SELECT TOP 1 @CTITLE_NAME=TITLE_NAME,@CMEMO_ID=MEMO_ID,@CFILTER=FILTER
	FROM #FILTER_CURSOR
	
	SET @CSTEP=140
	--GETTING THE TARGET SET FOR EACH LOCATIONS AGAINST THIS FILTER CRITERIA
	INSERT #AREA_ALLOC(MEMO_ID,DEPT_ID,MONTH_NAME,MONTH_NO,FIN_YEAR,AREA_ALLOCATED)
	SELECT MEMO_ID,DEPT_ID
			  ,MONTH_NAME
			  ,(CASE WHEN MONTH_NAME='APRIL' THEN 4
					 WHEN MONTH_NAME='MAY' THEN 5
					 WHEN MONTH_NAME='JUNE' THEN 6
					 WHEN MONTH_NAME='JULY' THEN 7
					 WHEN MONTH_NAME='AUGUST' THEN 8
					 WHEN MONTH_NAME='SEPTEMBER' THEN 9
					 WHEN MONTH_NAME='OCTOBER' THEN 10
					 WHEN MONTH_NAME='NOVEMBER' THEN 11
					 WHEN MONTH_NAME='DECEMBER' THEN 12
					 WHEN MONTH_NAME='JANUARY' THEN 1
					 WHEN MONTH_NAME='FEBRUARY' THEN 2
					 WHEN MONTH_NAME='MARCH' THEN 3
					 END
				) AS MONTH_NO
			  ,FIN_YEAR,AREA_ALLOCATED
		FROM 
		(
			SELECT A.MEMO_ID,A.DEPT_ID,A.FIN_YEAR,A.APRIL,A.MAY,A.JUNE,A.JULY,A.AUGUST,A.SEPTEMBER,A.OCTOBER,A.NOVEMBER
				  ,A.DECEMBER,A.JANUARY,A.FEBRUARY,A.MARCH	
			FROM LOC_SPACE_DET A
			JOIN #FINYEARS B ON A.FIN_YEAR=B.FIN_YEAR
			WHERE A.MEMO_ID=@CMEMO_ID
		)A 
		UNPIVOT
		(
			AREA_ALLOCATED FOR MONTH_NAME IN 
			(
				  APRIL
				 ,MAY
				 ,JUNE
				 ,JULY
				 ,AUGUST
				 ,SEPTEMBER
				 ,OCTOBER
				 ,NOVEMBER
				 ,DECEMBER
				 ,JANUARY
				 ,FEBRUARY
				 ,MARCH
			)
		)U
	
	SET @CSTEP=150
	--GETTING THE ACTUAL SALE FOR THE FILTER CRETERIA
	SET @CCMD=N'SELECT CMM.location_code AS DEPT_ID,DATENAME(MONTH,CMM.CM_DT) AS MONTH_NAME
					  ,CMM.FIN_YEAR	
					  ,COUNT(DISTINCT CMM.CM_DT) AS SALE_DAYS
					  ,SUM(CMD.RFNET) AS NRV
				FROM CMM01106 CMM(NOLOCK)
				JOIN #FINYEARS FY ON CMM.FIN_YEAR=FY.FIN_YEAR
				JOIN CMD01106 CMD(NOLOCK) ON CMM.CM_ID=CMD.CM_ID
				JOIN SKU (NOLOCK) ON CMD.PRODUCT_CODE=SKU.PRODUCT_CODE
				JOIN ARTICLE (NOLOCK) ON SKU.ARTICLE_CODE=ARTICLE.ARTICLE_CODE
				JOIN PARA1 (NOLOCK) ON SKU.PARA1_CODE=PARA1.PARA1_CODE
				JOIN PARA2 (NOLOCK) ON SKU.PARA2_CODE=PARA2.PARA2_CODE
				JOIN PARA3 (NOLOCK) ON SKU.PARA3_CODE=PARA3.PARA3_CODE
				JOIN PARA4 (NOLOCK) ON SKU.PARA4_CODE=PARA4.PARA4_CODE
				JOIN PARA5 (NOLOCK) ON SKU.PARA5_CODE=PARA5.PARA5_CODE
				JOIN PARA6 (NOLOCK) ON SKU.PARA6_CODE=PARA6.PARA6_CODE
				JOIN SECTIOND (NOLOCK) ON ARTICLE.SUB_SECTION_CODE=SECTIOND.SUB_SECTION_CODE
				JOIN SECTIONM (NOLOCK) ON SECTIOND.SECTION_CODE=SECTIONM.SECTION_CODE
				LEFT OUTER JOIN ARTICLE_FIX_ATTR ATTR  (NOLOCK) ON B.ARTICLE_CODE = ATTR.ARTICLE_CODE 
				LEFT OUTER JOIN ATTR1_MST AT1 (NOLOCK) ON AT1.ATTR1_KEY_CODE=ATTR.ATTR1_KEY_CODE
				LEFT OUTER JOIN ATTR2_MST AT2 (NOLOCK) ON AT2.ATTR2_KEY_CODE=ATTR.ATTR2_KEY_CODE
				LEFT OUTER JOIN ATTR3_MST AT3 (NOLOCK) ON AT3.ATTR3_KEY_CODE=ATTR.ATTR3_KEY_CODE
				LEFT OUTER JOIN ATTR4_MST AT4 (NOLOCK) ON AT4.ATTR4_KEY_CODE=ATTR.ATTR4_KEY_CODE
				LEFT OUTER JOIN ATTR5_MST AT5 (NOLOCK) ON AT5.ATTR5_KEY_CODE=ATTR.ATTR5_KEY_CODE
				LEFT OUTER JOIN ATTR6_MST AT6 (NOLOCK) ON AT6.ATTR6_KEY_CODE=ATTR.ATTR6_KEY_CODE
				LEFT OUTER JOIN ATTR7_MST AT7 (NOLOCK) ON AT7.ATTR7_KEY_CODE=ATTR.ATTR7_KEY_CODE
				LEFT OUTER JOIN ATTR8_MST AT8 (NOLOCK) ON AT8.ATTR8_KEY_CODE=ATTR.ATTR8_KEY_CODE
				LEFT OUTER JOIN ATTR9_MST AT9 (NOLOCK) ON AT9.ATTR9_KEY_CODE=ATTR.ATTR9_KEY_CODE
				LEFT OUTER JOIN ATTR10_MST AT10 (NOLOCK) ON AT10.ATTR10_KEY_CODE=ATTR.ATTR10_KEY_CODE
				LEFT OUTER JOIN ATTR11_MST AT11 (NOLOCK) ON AT11.ATTR11_KEY_CODE=ATTR.ATTR11_KEY_CODE
				LEFT OUTER JOIN ATTR12_MST AT12 (NOLOCK) ON AT12.ATTR12_KEY_CODE=ATTR.ATTR12_KEY_CODE
				LEFT OUTER JOIN ATTR13_MST AT13 (NOLOCK) ON AT13.ATTR13_KEY_CODE=ATTR.ATTR13_KEY_CODE
				LEFT OUTER JOIN ATTR14_MST AT14 (NOLOCK) ON AT14.ATTR14_KEY_CODE=ATTR.ATTR14_KEY_CODE
				LEFT OUTER JOIN ATTR15_MST AT15 (NOLOCK) ON AT15.ATTR15_KEY_CODE=ATTR.ATTR15_KEY_CODE
				LEFT OUTER JOIN ATTR16_MST AT16 (NOLOCK) ON AT16.ATTR16_KEY_CODE=ATTR.ATTR16_KEY_CODE
				LEFT OUTER JOIN ATTR17_MST AT17 (NOLOCK) ON AT17.ATTR17_KEY_CODE=ATTR.ATTR17_KEY_CODE
				LEFT OUTER JOIN ATTR18_MST AT18 (NOLOCK) ON AT18.ATTR18_KEY_CODE=ATTR.ATTR18_KEY_CODE
				LEFT OUTER JOIN ATTR19_MST AT19 (NOLOCK) ON AT19.ATTR19_KEY_CODE=ATTR.ATTR19_KEY_CODE
				LEFT OUTER JOIN ATTR20_MST AT20 (NOLOCK) ON AT20.ATTR20_KEY_CODE=ATTR.ATTR20_KEY_CODE
				LEFT OUTER JOIN ATTR21_MST AT21 (NOLOCK) ON AT21.ATTR21_KEY_CODE=ATTR.ATTR21_KEY_CODE
				LEFT OUTER JOIN ATTR22_MST AT22 (NOLOCK) ON AT22.ATTR22_KEY_CODE=ATTR.ATTR22_KEY_CODE
				LEFT OUTER JOIN ATTR23_MST AT23 (NOLOCK) ON AT23.ATTR23_KEY_CODE=ATTR.ATTR23_KEY_CODE
				LEFT OUTER JOIN ATTR24_MST AT24 (NOLOCK) ON AT24.ATTR24_KEY_CODE=ATTR.ATTR24_KEY_CODE
				LEFT OUTER JOIN ATTR25_MST AT25(NOLOCK) ON AT25.ATTR25_KEY_CODE=ATTR.ATTR25_KEY_CODE
				JOIN LMV01106 (NOLOCK) ON SKU.AC_CODE=LMV01106.AC_CODE
				JOIN LOC_VIEW (NOLOCK) ON CMM.location_code=LOC_VIEW.DEPT_ID
				WHERE CMM.CANCELLED=0 AND CMM.CM_MODE=1 AND '+@CFILTER+' 
				GROUP BY cmm.location_code,DATENAME(MONTH,CMM.CM_DT),CMM.FIN_YEAR'	
	PRINT @CCMD
	
	SET @CSTEP=160
	INSERT #ACTUAL_SALE(DEPT_ID,MONTH_NAME,FIN_YEAR,SALE_DAYS,NRV)
	EXEC SP_EXECUTESQL @CCMD
	
	SET @CSTEP=170
	--UPDATING THE SALE_VALUE AGAINST THE TARGET SET FOR EACH LOCATION 
	UPDATE A SET NRV=B.NRV
				,SALE_DAYS=B.SALE_DAYS
	FROM #AREA_ALLOC A
	JOIN #ACTUAL_SALE B ON A.DEPT_ID=B.DEPT_ID AND A.MONTH_NAME=B.MONTH_NAME AND A.FIN_YEAR=B.FIN_YEAR 
	
	SET @CSTEP=180
	DELETE FILTER_PSFPD_DET WHERE MEMO_ID=@CMEMO_ID
	DELETE FILTER_PSFPD_MST WHERE MEMO_ID=@CMEMO_ID
	
	SET @CSTEP=190
	INSERT FILTER_PSFPD_MST	( TITLE_NAME, MEMO_ID, FILTER, PROCESS_DT )  
	SELECT @CTITLE_NAME AS TITLE_NAME,@CMEMO_ID AS MEMO_ID,@CFILTER AS FILTER,GETDATE() AS PROCESS_DT 
	
	SET @CSTEP=200
	INSERT FILTER_PSFPD_DET	( MEMO_ID, DEPT_ID, MONTH_NAME, MONTH_NO, FIN_YEAR
							, AREA_ALLOCATED, SALE_DAYS, NRV, PSFPD )  
	SELECT 	  MEMO_ID, DEPT_ID, MONTH_NAME, MONTH_NO, FIN_YEAR
			 ,ISNULL(AREA_ALLOCATED,0),ISNULL(SALE_DAYS,0) 
			 ,ISNULL(NRV,0)
			 ,(CASE WHEN ISNULL(AREA_ALLOCATED,0)=0 OR ISNULL(SALE_DAYS,0)=0 THEN 0 
					ELSE ISNULL(NRV,0)/(ISNULL(AREA_ALLOCATED,0)*ISNULL(SALE_DAYS,0)) END)
	FROM #AREA_ALLOC
	
	SET @CSTEP=210
	DELETE #FILTER_CURSOR WHERE MEMO_ID=@CMEMO_ID
END
END TRY
BEGIN CATCH
	SET @CERRMSG='ERROR PROCESSING RECORD AT STEP - '+@CSTEP+' , ERRMSG - '+ERROR_MESSAGE()
END CATCH 
	
	SELECT ISNULL(@CERRMSG,'') AS ERRMSG

END	
--END OF PROCEDURE - SP3S_PROCESS_AREAWISE_SALE_ANALYSIS
