create procedure SAVETRAN_GENBARCODES_COMMONSTEPS
@cXnType VARCHAR(10),
@nMode numeric(1,0),
@nSpId VARCHAR(40),
@cManualPrefix varchar(20),
@cLocId  varchar(5),
@CBIN_ALIAS VARCHAR(10),
@DMEMODT DATETIME,    
@cErrormsg varchar(MAX) output
AS
BEGIN




	 DECLARE @cCmd NVARCHAR(MAX),@cMstTable VARCHAR(100),@CdETtABLE varchar(100),@cStep VARCHAR(20),@bRandomGen BIT,
	  @NROWS    BIGINT,  @cPrefix varchar(20),  @cArticleCode VARCHAR(15),@cPara1code CHAR(9),@cPara2code CHAR(9),
	   @NEANROWS   BIGINT,    
	   @NFIXROWS   BIGINT,    
	   @NCTR    BIGINT,    
	   @CPIDROWID   VARCHAR(50),    
	   @CNEXTPRODUCTCODE VARCHAR(50),    
	   @NNEXTKEYVALUE  NUMERIC(30,0),    
	   @CPIMDEPTID   VARCHAR(5),  
	   @CHOLOCID VARCHAR(5),
		@bGenEanCodes BIT ,
		@NEANLENGTH  NUMERIC(4,0),
		@CEANPREFIX varchar(15) ,
		@bOnlyInsBarCodes BIT , @CNEXTEanPRODUCTCODE VARCHAR(50)  ,
	   @CTEMPIRDTABLE VARCHAR(MAX),@NWHCOUNT INT,    
	   @CBARCODEPREFIX VARCHAR(100),@CADDPREFIX VARCHAR(50),
	   @CPREFIXYEARCODE BIT,@CPREFIXLOCID BIT,@CYEARCODE CHAR(2),@CADDLOCIDPREFIX varCHAR(5),    
	   @CTEMPIRMTABLE VARCHAR(500),@CCUSTOMPREFIX VARCHAR(50),@BLOOP BIT,@NPURLOCCNT INT,    
	   @NBARCODELEN INT,@CARTICLENO VARCHAR(300),@CARTPREFIX VARCHAR(50),    
	   @CGENEANCODES VARCHAR(5),    
	   @CEANLENGTH VARCHAR(5),@CPREFIXFLOORID VARCHAR(10),  
	  @CADDFLOORIDPREFIX VARCHAR(10),@BBARCODEGENERATED BIT,@NNEXTEanKEYVALUE NUMERIC(10,0),
	   @CPREFIXMONTHCODE VARCHAR(10),@MONTHCODE VARCHAR(2),@CXNBARCODEPREFIX VARCHAR(50)

begin try
print 'enter genbarcodes_common-1'
SET @cStep='2'

	   SELECT TOP 1 @CHOLOCID = [VALUE] FROM CONFIG (NOLOCK) WHERE CONFIG_OPTION = 'HO_LOCATION_ID'    
	 IF @cXnType='PUR'
		SELECT @cMstTable='pur_pim01106_upload',@cDEtTable='PUR_PID01106_UPLOAD'
     ELSE
	 IF @cXnType='PO'
		SELECT @cMstTable='po_pom01106_upload',@cDEtTable='PO_POD01106_UPLOAD'

lblStep1:
SET @cStep='3'
	 IF OBJECT_ID ('SAVETRAN_GENCUSTOM_BARCODE','P')   IS NOT NULL
	 BEGIN
		  select *,SUB_SECTION_CODE=cast('' as varchar(100)) into  #PIDROWS from GENBARCODE_ROWS where 1=2

		   --ALTER TABLE #PIDROWS ADD SUB_SECTION_CODE VARCHAR(10) DEFAULT('')

		   --ALTER TABLE #PIDROWS ADD PARA1_CODE VARCHAR(10) DEFAULT('')
		   --ALTER TABLE #PIDROWS ADD PARA2_CODE VARCHAR(10) DEFAULT('')
		   --ALTER TABLE #PIDROWS ADD KEY_CODE VARCHAR(50) DEFAULT('')
		   ----Put above commands & its table creation in Client's Custom Procedure (Sanjay:28-02-20)
		   ---- and make changes w.r.t access of pod01106/pom01106 replaced with that of Upload tables

		   DECLARE @NGENBARCODEMODE INT
		    IF @CXNTYPE='PUR'
			   SET @NGENBARCODEMODE=1
			ELSE IF @CXNTYPE='PO'
			  SET @NGENBARCODEMODE=3
			ELSE IF @CXNTYPE='IRR'
			  SET @NGENBARCODEMODE=2

		   EXEC SAVETRAN_GENCUSTOM_BARCODE '',@CManualPREFIX,@NGENBARCODEMODE,@NSPID ,@cLocId,@CERRORMSG  OUTPUT 
		   
		   IF ISNULL(@CERRORMSG,'')<>''
		   	   GOTO END_PROC
		 
		 UPDATE A SET PRODUCT_CODE =B.PRODUCT_CODE FROM #PIDROWS A
		 JOIN #BARCODES B ON A.PID_ROW_ID =B.PID_ROW_ID

		 delete from GENBARCODE_ROWS where sp_id=@nSpId

	    INSERT GENBARCODE_ROWS ( sp_id, PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,para1_code,para2_code,ARTICLE_NO,para1_name,para2_order,SRNO,GEN_EAN_CODES,GST_PERCENTAGE )     
		select @nSpId sp_id, PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,para1_code,para2_code,ARTICLE_NO,para1_name,para2_order,SRNO,GEN_EAN_CODES,GST_PERCENTAGE
		from #PIDROWS

	       
		   SET @bOnlyInsBarCodes=1

		   GOTO LBLGENPERISHABLE_BARCODE
	 END


	 
	 SET @cStep='5'
	 --CHECKING IF BARCODE SHOULD BE GENERATED RANDOMLY OR USING GETNEXTKEY    
	 SELECT TOP 1 @BRANDOMGEN=ISNULL(VALUE,0) FROM CONFIG (NOLOCK) WHERE CONFIG_OPTION='PRODUCT_CODE_GENERATION_RANDOM' 
	 SET @BRANDOMGEN=ISNULL(@BRANDOMGEN,0)      

	 IF @BRANDOMGEN=1
	 BEGIN
		SET @cSTEP=170.2
		EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1

		SELECT TOP 1 @NBARCODELEN=ISNULL(VALUE,0) FROM CONFIG (NOLOCK) WHERE CONFIG_OPTION='NO_OF_ALPHA_NUMERIC_CHAR' 
			       
		
		IF @NBARCODELEN=0    
		BEGIN    
			SET @CERRORMSG='PLEASE DEFINE THE LENGTH OF ALPLA NUMERIC CHARACTERS FOR RANDOM BARCODE GENERATION'    
			GOTO END_PROC    
		END     
	 END	 

    
	IF @BRANDOMGEN=1 
	BEGIN
		SELECT TOP 1 @NBARCODELEN=ISNULL(VALUE,0) FROM CONFIG WHERE CONFIG_OPTION='NO_OF_ALPHA_NUMERIC_CHAR' 
			       
		IF isnull(@NBARCODELEN,0)=0    
		BEGIN    
			SET @CERRORMSG='PLEASE DEFINE THE LENGTH OF ALPLA NUMERIC CHARACTERS FOR RANDOM BARCODE GENERATION'    
			GOTO END_PROC    
		END     
	END

	set @NBARCODELEN=isnull(@NBARCODELEN,0)

	 SELECT TOP 1 @CGENEANCODES=VALUE FROM CONFIG (NOLOCK) WHERE CONFIG_OPTION='GEN_EAN_CODES'    
	 IF isnull(@CGENEANCODES,'')='1'    
		 SET @BGENEANCODES=1    
	 ELSE    
		 SET @BGENEANCODES=0    
	     
	 SELECT TOP 1 @CEANPREFIX=VALUE FROM CONFIG (NOLOCK) WHERE CONFIG_OPTION='EAN_PREFIX'    
	 SELECT TOP 1 @CEANLENGTH=VALUE FROM CONFIG (NOLOCK) WHERE CONFIG_OPTION='EAN_LENGTH'   
	
	 IF ISNULL(@CEANLENGTH,'')=''    
		SET @NEANLENGTH=12    
	 ELSE    
		SET @NEANLENGTH=CONVERT(INT,@CEANLENGTH)   
		
	--discardes for octave it is shifted on artile level
	 --  if isnull(@CEANPREFIX,'')=''
	 --  begin

		--   IF @cXnType<>'PO'
		--	SELECT @CEANPREFIX=LOC_EAN_PREFIX FROM LOCATION  WHERE DEPT_ID=@CLOCID
		--   Else
		--	SELECT @CEANPREFIX=LOC_EAN_PREFIX FROM LOCATION  A (nolock)
		--	JOIN PO_POM01106_UPLOAD B ON A.DEPT_ID =B.DEPT_ID 
		--	 WHERE  B.SP_ID =@NSPID

	 --end
	
lblStep2:
	SET @cStep='7'
	 SET @cCmd=N'UPDATE A SET PRODUCT_CODE=ISNULL(B.PRODUCT_CODE,'''')  
		FROM '+@cDetTable+' A  WITH (ROWLOCK)
		JOIN ARTICLE A1 (NOLOCK) ON A1.ARTICLE_CODE=A.ARTICLE_CODE  
		JOIN SKU B (NOLOCK) ON A.ARTICLE_CODE=B.ARTICLE_CODE AND A.PARA1_CODE=B.PARA1_CODE AND A.PARA2_CODE=B.PARA2_CODE  
		WHERE A.sp_ID = '''+@nSpId+'''
		AND CHARINDEX(''@'',A.PRODUCT_CODE)=0
		AND ISNULL(A.PRODUCT_CODE,'''') =''''
		AND CHARINDEX(''@'',ISNULL(B.PRODUCT_CODE,0))=0

		AND (A1.GEN_EAN_CODES=1 AND '''+(case when @BGENEANCODES=1 then '1' else '0' end)+'''=''1'') ' 
    print @ccmd
	EXEC SP_EXECUTESQL @cCmd


	 SET @cSTEP=171.9
	 EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1		 
	-- BARCODE GENERATION FOR LOT AND UNIQUE CODES    
	
	SET @cSTEP=172
	EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1	     
	IF OBJECT_ID('SP_GETNEWPREFIX','P') IS NOT NULL
	BEGIN ----- GENERATE BARCODE PREFIX WITH CUSTOM PROCEDURE
		  -- GETTING CUSTOM PREFIX FOR THE CURRENT ROW OF PID    
			     
		IF EXISTS (SELECT TOP 1 'U' FROM INFORMATION_SCHEMA .PARAMETERS  WHERE SPECIFIC_NAME='SP_GETNEWPREFIX' AND PARAMETER_NAME ='@DMEMODT')
			  EXEC SP_GETNEWPREFIX @CPIDROWID, '', @CCUSTOMPREFIX OUTPUT ,@DMEMODT
		ELSE
			  EXEC SP_GETNEWPREFIX @CPIDROWID, 'PUR', @CCUSTOMPREFIX OUTPUT   
		  

		IF @CCUSTOMPREFIX IS NULL    
			GOTO END_PROC    
		  
		SET @CPREFIX = @CCUSTOMPREFIX    
	 END    
	 ELSE
	 BEGIN  
	   --DECLARE LOCAL VARIABLE FOR BARCODE_PREFIX
	      --ADD BELOW LINE ON 31 MARCH 2017
	      DECLARE @BARCODE_PREFIX VARCHAR(5),@cAddBcPrefix varchar(2)
	      
		  SELECT TOP 1 @cAddBcPrefix=value FROM config(NOLOCK) WHERE config_option='ADD_PREFIX'
		 
		  IF ISNULL(@cManualPrefix,'')='' and isnull(@cAddBcPrefix,'')='1'
				SELECT TOP 1 @CADDPREFIX = VALUE FROM CONFIG WHERE CONFIG_OPTION='BARCODE_PREFIX' 
		  ELSE
				SET @CADDPREFIX=@cManualPrefix    
				
		  SELECT TOP 1 @CPREFIXYEARCODE= VALUE FROM CONFIG WHERE CONFIG_OPTION='YEAR_CODE_IN_PC' 
		  
		  IF ISNULL(@CPREFIXYEARCODE,'')='1'    
			 SET @CYEARCODE= RIGHT(LTRIM(RTRIM(STR(DATEPART(YY,@DMEMODT)))),2)     
		   
		  SELECT TOP 1 @CPREFIXMONTHCODE= VALUE FROM CONFIG WHERE CONFIG_OPTION='MONTH_CODE_IN_PC' 
		  IF ISNULL(@CPREFIXMONTHCODE,'')='1'
				SELECT @MONTHCODE=CASE WHEN MONTH(GETDATE())<10 THEN '0'+ CAST(MONTH(GETDATE()) AS VARCHAR(2)) ELSE CAST(MONTH(GETDATE())AS VARCHAR(2))  END
		   
		  SELECT TOP 1 @CPREFIXFLOORID= VALUE FROM CONFIG WHERE CONFIG_OPTION='FLOOR_ID_IN_PC' 
		
		  IF ISNULL(@CPREFIXFLOORID,'')='1'    
				SET @CADDFLOORIDPREFIX=@CLOCID+ISNULL(@CBIN_ALIAS ,'')
		  ELSE  
				SET @CADDFLOORIDPREFIX=''  
		   
		      
		  SELECT TOP 1 @CPREFIXLOCID= VALUE FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID_IN_PC' 

		 DECLARE @TARGETDEPT_ID VARCHAR(4)
		 set @TARGETDEPT_ID=''

		  IF @cXnType='PUR'
		  BEGIN

		        SELECT  @TARGETDEPT_ID=CASE WHEN ISNULL(LOC_ID_AS_BARCODE_PREFIX,0)=1 THEN A.DEPT_ID ELSE '' END ,
				        @CADDLOCIDPREFIX=case when isnull(@CADDLOCIDPREFIX,'')='' then @CLOCID else @CADDLOCIDPREFIX end
				FROM PUR_PIM01106_UPLOAD A (NOLOCK) JOIN LOCATION B (NOLOCK) ON A.DEPT_ID=B.DEPT_ID
				WHERE SP_ID= @NSPID AND ISNULL(B.ALLOW_PURCHASE_AT_HO,0)=1 AND B.DEPT_ID<>@CHOLOCID   AND @CLOCID=@CHOLOCID


		  END		 
		  ELSE
		  IF @cXnType='PO'
		  BEGIN
		             SELECT  @TARGETDEPT_ID=CASE WHEN ISNULL(LOC_ID_AS_BARCODE_PREFIX,0)=1 THEN A.DEPT_ID ELSE '' END ,
				        @CADDLOCIDPREFIX=case when isnull(@CADDLOCIDPREFIX,'')='' then @CLOCID else @CADDLOCIDPREFIX end
			        FROM PO_pom01106_UPLOAD A (nolock) JOIN LOCATION B (nolock) ON A.DEPT_ID=B.DEPT_ID
					WHERE SP_ID= @nSpId AND ISNULL(B.allow_purchase_at_ho,0)=1 AND b.dept_id<>@CHOLOCID  and @CLOCID=@CHOLOCID
		  END	

		  
	 

		   IF ISNULL(@CPREFIXLOCID,'')='1' AND ISNULL(@CPREFIXFLOORID,'')<>'1'     
			   SET @CADDLOCIDPREFIX=@CLOCID
		  ELSE    
		  IF @CADDFLOORIDPREFIX=''  
		  BEGIN    
				-- IN CASE THE PURCHASES ARE DONE AT MULTIPLE LOCATIONS, FORCE THE LOCATION ID IN PREFIX    
				SELECT @NPURLOCCNT=COUNT(*) FROM LOCATION WHERE PUR_LOC = 1 OR DEPT_ID=@CHOLOCID    
				IF (ISNULL(@NPURLOCCNT,0)>1 OR  @CLOCID<>@CHOLOCID )
				BEGIN    
					  IF NOT EXISTS (SELECT TOP 1 CONFIG_OPTION FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID_IN_PC')     
					     INSERT CONFIG ( CONFIG_OPTION, VALUE, ROW_ID, LAST_UPDATE, REMARKS )     
						 SELECT  'LOCATION_ID_IN_PC' AS CONFIG_OPTION,'1' AS VALUE,'' AS ROW_ID,GETDATE() AS  LAST_UPDATE,'' AS  REMARKS
					  ELSE    
						 UPDATE CONFIG SET VALUE='1' WHERE CONFIG_OPTION='LOCATION_ID_IN_PC'
						          
					  SET @CADDLOCIDPREFIX=@CLOCID 
				END    
		  END    
	    
		  PRINT 'GENBC-5'   
		  --BEHALF OF LOCATION MUST BE PREFIX LOCATION ID
		
		  set @CADDLOCIDPREFIX=isnull(@CADDLOCIDPREFIX,'')
		  
		  set @CADDLOCIDPREFIX= @CADDLOCIDPREFIX+isnull(@TARGETDEPT_ID,'')


		 -- NOW ADD SUPPLIER ALIAS IN PREFIX FOR BARCODE GENERATION (NAGARMAL 12092023)
		declare @CSUPPLIER_ALIAS_IN_PC varchar(100),@CSUPPLIER_ALIAS varchar(100),
		        @COEM_ALIAS_IN_PC varchar(100),@COEM_ALIAS varchar(100)
		
		SET @cstep=96 
		         
		select @CSUPPLIER_ALIAS_IN_PC=value  from config where config_option='SUPPLIER_ALIAS_IN_PC'
		

		if isnull(@CSUPPLIER_ALIAS_IN_PC,'')='1' and   @cXnType in('PUR','PO')
		begin
		    
				IF @CXNTYPE IN('PUR')
				begin

				  SELECT @CSUPPLIER_ALIAS=b.ALIAS FROM PUR_PIM01106_UPLOAD A (NOLOCK)
				  JOIN LM01106 B (NOLOCK) ON A.AC_CODE =B.AC_CODE WHERE SP_ID= @nSpId

				END
				Else if @CXNTYPE IN('PO')
				begin

			   		SELECT @CSUPPLIER_ALIAS=b.ALIAS FROM PO_PoM01106_UPLOAD A (NOLOCK)
					JOIN LM01106 B (NOLOCK) ON A.AC_CODE =B.AC_CODE WHERE SP_ID= @nSpId

				end
		end
	  
	    SET @cstep=98
	     -- NOW ADD OEM ALIAS IN PREFIX FOR BARCODE GENERATION (NAGARMAL 12092023)
 
		select @COEM_ALIAS_IN_PC=value  from config where config_option='OEM_ALIAS_IN_PC'

		if isnull(@COEM_ALIAS_IN_PC,'')='1' and   @cXnType in('PUR','PO')
		begin
		    
				IF @CXNTYPE IN('PUR')
				begin

				  SELECT @COEM_ALIAS=b.ALIAS FROM PUR_PIM01106_UPLOAD A (NOLOCK)
				  JOIN LM01106 B (NOLOCK) ON A.SHIPPING_FROM_AC_CODE  =B.AC_CODE WHERE SP_ID= @nSpId

				END
				Else if @CXNTYPE IN('PO')
				begin

			   		SELECT @COEM_ALIAS=b.ALIAS FROM PO_PoM01106_UPLOAD A (NOLOCK)
					JOIN LM01106 B (NOLOCK) ON A.SHIPPING_FROM_AC_CODE =B.AC_CODE WHERE SP_ID= @nSpId

				end
		end
	  
	

		  SET @cstep=100    
		  SET  @CPREFIX =	 LTRIM(RTRIM(ISNULL(@CYEARCODE,'')))
							+LTRIM(RTRIM(ISNULL(@MONTHCODE,''))) 
							+LTRIM(RTRIM(ISNULL(@CADDLOCIDPREFIX,''))) 
							+LTRIM(RTRIM(ISNULL(@CADDFLOORIDPREFIX,''))) 
							+LTRIM(RTRIM(ISNULL(@CADDPREFIX,'')))
							
				
			if isnull(@CSUPPLIER_ALIAS,'')<>''
			   set @CPREFIX=@CPREFIX+@CSUPPLIER_ALIAS
			   
			if isnull(@COEM_ALIAS,'')<>''
			   set @CPREFIX=@CPREFIX+@COEM_ALIAS

		
	 END  ----- GENERATE BARCODE PREFIX EXPRESSION WITHOUT CUSTOM PROCEDURE
	 	


	SET @cCmd=N'SELECT a.sp_id, A.ROW_ID, B.CODING_SCHEME, A.QUANTITY,B.ARTICLE_CODE,a.para1_code,a.para2_code,B.ARTICLE_NO,para1_name,para2_order,A.SRNO,B.GEN_EAN_CODES,0 AS GST_PERCENTAGE /*UNMERGED:16MAY2013*/    
	FROM '+@CdETtABLE+' A (NOLOCK)   
	JOIN ARTICLE B (NOLOCK) ON A.ARTICLE_CODE = B.ARTICLE_CODE    
	JOIN para2 c (NOLOCK) ON a.para2_code = c.para2_code
	JOIN para1 d (NOLOCK) ON a.para1_code = d.para1_code
	WHERE A.sp_id='''+@nSpId+'''
	AND   ISNULL(A.PRODUCT_CODE,'''') = ''''  AND (B.CODING_SCHEME<>1 OR (gen_ean_codes=1  AND '''+@CGENEANCODES+'''=''1''))
	ORDER BY a.srno'
	print @ccmd


	
	INSERT GENBARCODE_ROWS ( sp_id, PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,para1_code,para2_code,
	ARTICLE_NO,para1_name,para2_order,SRNO,GEN_EAN_CODES,GST_PERCENTAGE )     
	EXEC SP_EXECUTESQL @cCmd

	SET @NROWS=@@ROWCOUNT    
	 
	 IF @NROWS > 0    
	 BEGIN    
		 SET @cSTEP=172.2
		 EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1

		  -- DO NOT PROCEED FOR BARCODE GENERATION IF PID IS NOT NORMALIZED FOR UNIQUE CODES    
		  IF EXISTS ( SELECT TOP 1 PID_ROW_ID FROM GENBARCODE_ROWS (NOLOCK) WHERE sp_id=@nSpId AND CODING_SCHEME = 3 AND QUANTITY > 1 )   
		  BEGIN
			 SET @cErrormsg='Data is not normalized for Bar code generation of Unique Codes...Please contact SoftInfo'
			 GOTO END_PROC    
		  END    

		  PRINT 'BAR CODE PREFIX :'+@CPREFIX    
		      
		  PRINT 'GENBC-6'    
		      

		
			  --SELECT 'check genbar',pID_ROW_ID,GENERATE_BARCODES_WITHARTICLE_PREFIX FROM GENBARCODE_ROWS A (NOLOCK) JOIN ARTICLE B (NOLOCK) ON A.ARTICLE_CODE=B.ARTICLE_CODE    
					--	WHERE sp_id=@nSpId

			-- GENERATE BARCODES FOR ARTICLE WHICH ARE CONSIDERED AS PREFIX FOR BAR CODE GENERATION    
		  IF EXISTS (SELECT TOP 1 PID_ROW_ID FROM GENBARCODE_ROWS A (NOLOCK) JOIN ARTICLE B (NOLOCK) ON A.ARTICLE_CODE=B.ARTICLE_CODE    
						WHERE sp_id=@nSpId AND  GENERATE_BARCODES_WITHARTICLE_PREFIX=0)    
		  BEGIN     

				 SET @cSTEP=172.4
				 EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1			       

				SELECT @NROWS = COUNT(*) FROM GENBARCODE_ROWS A (NOLOCK)  JOIN ARTICLE B (NOLOCK) ON A.ARTICLE_CODE=B.ARTICLE_CODE    
				WHERE sp_id=@nSpId AND  GENERATE_BARCODES_WITHARTICLE_PREFIX=0 AND (b.gen_ean_codes=0 OR @bGenEanCodes=0)     
				       
				-- CALLING GETNEXTKEY PROCEDURE TO GENERATE NEW CODES IN BULK    
				EXEC GETNEXTKEY_SKU 50, @CPREFIX, 0, '', @NROWS,@CNEXTPRODUCTCODE OUTPUT     
				IF @CNEXTPRODUCTCODE IS NULL    
					GOTO END_PROC    

				
				PRINT 'NEXT PRODUCT CODE AVAILABLE:'+@CNEXTPRODUCTCODE+STR(LEN(@CNEXTPRODUCTCODE))+STR(LEN(@CPREFIX))    
				SET @NNEXTKEYVALUE = CONVERT(NUMERIC(30,0),RIGHT(LTRIM(RTRIM(@CNEXTPRODUCTCODE)),LEN(@CNEXTPRODUCTCODE)-LEN(@CPREFIX)))    

				SELECT @NEANROWS = COUNT(*) FROM GENBARCODE_ROWS A (NOLOCK)  JOIN ARTICLE B (NOLOCK) ON A.ARTICLE_CODE=B.ARTICLE_CODE    
				WHERE sp_id=@nSpId AND  GENERATE_BARCODES_WITHARTICLE_PREFIX=0 AND (b.gen_ean_codes=1 AND @bGenEanCodes=1)     
				
				IF ISNULL(@NEANROWS,0)<>0
				BEGIN     					   
					SELECT article_code,para1_code,para2_code,product_code INTO #barcodes_ean FROM sku (NOLOCK)
					where 1=2
					
					-- CALLING GETNEXTKEY PROCEDURE TO GENERATE NEW CODES IN BULK    
					EXEC GETNEXTKEY_SKU @nEanLength, @CEANPREFIX, 1, '', @NEanROWS,@CNEXTEanPRODUCTCODE OUTPUT     
					IF @CNEXTEanPRODUCTCODE IS NULL    
						GOTO END_PROC    
					
					SET @NNEXTEanKEYVALUE = CONVERT(NUMERIC(30,0),RIGHT(LTRIM(RTRIM(@CNEXTEanPRODUCTCODE)),LEN(@CNEXTEanPRODUCTCODE)-LEN(@CEanPREFIX)))    
				END					       

				
				SET @cSTEP=172.5
				EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1

				PRINT 'NEXT PRODUCT CODE VALUE:'+STR(@NNEXTKEYVALUE)    
				       
				PRINT 'GENBC-7'    

				CREATE clustered INDEX IX_BSRCODESRNO ON #BARCODES (srno,pid_row_id)       				   
              

				INSERT #BARCODES (pid_row_id,srno)
				SELECT pid_row_id,a.srno FROM GENBARCODE_ROWS a (NOLOCK) JOIN ARTICLE B (NOLOCK) ON A.ARTICLE_CODE=B.ARTICLE_CODE 
				WHERE sp_id=@nSpId AND GENERATE_BARCODES_WITHARTICLE_PREFIX=0 AND ISNULL(a.product_code,'')=''
				ORDER BY a.srno
						
						
				
				set @NNEXTKEYVALUE=@NNEXTKEYVALUE-1
			PRINT 'GENBC-8'   								
				SET @bLoop=1
				WHILE @bLoop=1
				BEGIN
					SET @cSTEP='172.6.2'
					EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1
										
					IF isnull(@BRANDOMGEN,0)=0
					BEGIN
						SET @cSTEP='172.6.4'
						;With cte As
						(
						SELECT top 100000 a.product_code,a.srno
						FROM #BARCODES a
						JOIN GENBARCODE_ROWS b (NOLOCK) ON a.pid_row_id=b.PID_ROW_ID
						WHERE gen_ean_codes=0 OR @bGenEanCodes=0
						ORDER BY a.srno
						) 

						UPDATE cte SET product_code=@CPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE))),
						@NNEXTKEYVALUE=@NNEXTKEYVALUE+1
						
						IF @NEANROWS>0
						BEGIN
							SET @cSTEP='172.6.8'
							DELETE FROM #barcodes_ean

							insert into #barcodes_ean (product_code,article_code,para1_code,para2_code)
							SELECT DISTINCT '' as product_code,b.article_code,b.para1_code,b.para2_code from  #BARCODES a
							JOIN GENBARCODE_ROWS b (NOLOCK) ON a.pid_row_id=b.PID_ROW_ID
							WHERE sp_id=@nSpid AND gen_ean_codes=1

							SET @cSTEP='172.6.9'
							UPDATE #barcodes_ean SET product_code=@CEANPREFIX+replicate(0,12-len(ltrim(rtrim((@cEanPrefix))))-
							len(ltrim(rtrim(str(@NNEXTEanKEYVALUE)))))+
							LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTEanKEYVALUE)))+
							RTRIM(LTRIM(DBO.FN_CREATECHECKDIGIT(@CEANPREFIX+replicate(0,12-len(ltrim(rtrim((@cEanPrefix))))-
							len(ltrim(rtrim(str(@NNEXTEanKEYVALUE)))))+
							LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTEanKEYVALUE)))))),
							@NNEXTEanKEYVALUE=@NNEXTEanKEYVALUE+1
							
							SET @cSTEP='172.7.2'
							UPDATE a SET a.product_code=b.product_code FROM #barCodes a 
							JOIN GENBARCODE_ROWS c (NOLOCK) ON a.pid_row_id=c.PID_ROW_ID
							JOIN #barcodes_ean b ON c.ARTICLE_CODE=b.article_code AND c.para1_code=b.para1_code
							AND c.para2_code=b.para2_code WHERE sp_id=@nSpId
						END
					END
					ELSE
					    UPDATE #BARCODES SET product_code=@CPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),LEFT(REPLACE(NEWID(),'-',''),@NBARCODELEN))))       
					
					SET @cSTEP='172.7.4'
					EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1
					
					UPDATE a SET product_code=b.product_code FROM GENBARCODE_ROWS a WITH (ROWLOCK)
					JOIN #BARCODES b ON a.PID_ROW_ID=b.PID_ROW_ID
					LEFT OUTER JOIN sku c (NOLOCK)  ON c.product_code=b.product_code
					WHERE a.sp_id=@nSpId AND c.product_code IS NULL

					SET @cSTEP=172.8
					EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1
					DELETE a FROM #BARCODES a WITH (ROWLOCK) JOIN GENBARCODE_ROWS b (NOLOCK) 
					ON a.PID_ROW_ID=b.PID_ROW_ID WHERE sp_id=@nSpId AND ISNULL(b.product_code,'')<>''
					
					--if @@spid=188
					--	select 'check genbc',* from  GENBARCODE_ROWS a WITH (ROWLOCK)
					--	WHERE sp_id=@nSpId 



					IF NOT EXISTS (SELECT TOP 1  product_code FROM #BARCODES)
						SET @bLoop=0
					
				END

				SET @cSTEP=172.9
				EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1
	 
				UPDATE KEYS_PMT SET     
				LASTKEYVAL = @CPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE)))    
				WHERE TABLENAME = 'SKU'    
				AND COLUMNNAME = 'PRODUCT_CODE'    
				AND FINYEAR  = ''    
				AND PREFIX  = @CPREFIX    
				   
				  
			END	  

			
			 SET @cSTEP=173
			 EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1
	 
	     	IF CURSOR_STATUS('GLOBAL','ART_CUR') IN (0,1)
				BEGIN
					CLOSE ART_CUR
					DEALLOCATE ART_CUR
				END

			SET  @BBARCODEGENERATED=0
			-- GENERATE BARCODES FOR ARTICLES WHICH ARE CONSIDERED AS PREFIX FOR BAR CODE GENERATION    
			IF EXISTS (SELECT TOP 1 PID_ROW_ID FROM GENBARCODE_ROWS A (NOLOCK)
				JOIN ARTICLE B (NOLOCK) ON A.ARTICLE_CODE=B.ARTICLE_CODE    
				WHERE sp_id=@nSpId AND GENERATE_BARCODES_WITHARTICLE_PREFIX=1 AND B.GEN_EAN_CODES=0
				AND ISNULL(a.product_code,'')='')     
			BEGIN    

				CREATE clustered INDEX IX_BARCODES_ART ON #BARCODES_art (srno,pid_row_id) 

				print 'enter genbc art wise -1'			
				 SET @cSTEP=173.2
				 EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1			         
				
				DECLARE ART_CUR CURSOR FOR SELECT DISTINCT A.ARTICLE_NO FROM GENBARCODE_ROWS A (NOLOCK)  
				JOIN ARTICLE B (NOLOCK) ON A.ARTICLE_CODE=B.ARTICLE_CODE 
				WHERE sp_id=@nSpId AND  GENERATE_BARCODES_WITHARTICLE_PREFIX=1 AND B.GEN_EAN_CODES=0    
				AND ISNULL(a.product_code,'')=''
				ORDER BY a.article_no
				
				OPEN ART_CUR    
				FETCH NEXT FROM ART_CUR INTO @CARTICLENO    
				WHILE @@FETCH_STATUS=0    
				BEGIN    
					print 'enter genbc art wise -2'
					 SET @cSTEP=173.4
					 EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1				         
					SET @CARTPREFIX=@CPREFIX+@CARTICLENO+'-'    
					    
					SELECT @NROWS = COUNT(*) FROM GENBARCODE_ROWS (nolock) WHERE SP_ID=@NsPiD and  ARTICLE_NO=@CARTICLENO    
					AND ISNULL(product_code,'')=''

					-- CALLING GETNEXTKEY PROCEDURE TO GENERATE NEW CODES IN BULK    
					EXEC GETNEXTKEY_SKU 50, @CARTPREFIX, 0, '', @NROWS, @CNEXTPRODUCTCODE OUTPUT     
					IF @CNEXTPRODUCTCODE IS NULL    
					GOTO END_PROC    
					         
					SET @NNEXTKEYVALUE = CAST(RIGHT(@CNEXTPRODUCTCODE,LEN(@CNEXTPRODUCTCODE)-LEN(@CARTPREFIX)) AS NUMERIC(30,0))    

					DELETE FROM #BARCODES_art

					
				

					print 'enter genbc art wise -3'
					INSERT #BARCODES_art (srno,pid_row_id)
					SELECT a.srno, pid_row_id FROM GENBARCODE_ROWS a (ROWLOCK) 
					WHERE sp_id=@nSpId AND article_no=@CARTICLENO
					AND ISNULL(a.product_code,'')=''
					ORDER BY srno
					
					SET @NNEXTKEYVALUE=@NNEXTKEYVALUE-1
					-- GENERATING MULTIPLE ROWS FOR NEWLY GENERATED PRODUCT CODES    
					SET @bLoop=1
					WHILE @bLoop=1
					BEGIN
							
						print 'enter genbc art wise -4'
						SET @cSTEP=173.6
						EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1

						UPDATE #BARCODES_art SET product_code=@CArtPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE))),
						@NNEXTKEYVALUE=@NNEXTKEYVALUE+1

						SET @cSTEP=173.8
						EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1

						print 'enter genbc art wise -5'
						UPDATE a SET product_code=b.product_code FROM GENBARCODE_ROWS a WITH (ROWLOCK)
						JOIN #BARCODES_art b ON a.PID_ROW_ID=b.PID_ROW_ID
						LEFT OUTER JOIN sku c (NOLOCK)  ON c.product_code=b.product_code
						WHERE a.sp_id=@nSpId AND c.product_code IS NULL

						SET @cSTEP=174
						EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1

						print 'enter genbc art wise -6'
						DELETE a FROM #BARCODES_art a WITH (ROWLOCK) JOIN GENBARCODE_ROWS b (NOLOCK) 
						ON a.PID_ROW_ID=b.PID_ROW_ID WHERE sp_id=@nSpId AND ISNULL(b.product_code,'')<>''

						IF NOT EXISTS (SELECT TOP 1  product_code FROM #BARCODES_art)
							SET @bLoop=0

					END 

					print 'enter genbc art wise -7'
					SET @cSTEP=174.2
					EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1



						UPDATE KEYS_PMT SET     
						LASTKEYVAL = @CARTPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE)))    
						WHERE TABLENAME = 'SKU'    
						AND COLUMNNAME = 'PRODUCT_CODE'    
						AND FINYEAR  = ''    
						AND PREFIX  = @CARTPREFIX    

						-- UPDATING KEYS TABLE WITH THE MAXIMUM BARCODE GENERATED     
					--UPDATE KEYS_PMT SET     
					--LASTKEYVAL = LTRIM(RTRIM(@CNEXTPRODUCTCODE))     
					--WHERE TABLENAME = 'SKU'    
					--AND COLUMNNAME = 'PRODUCT_CODE'    
					--AND FINYEAR  = ''    
					--AND PREFIX  = @CARTPREFIX    

					FETCH NEXT FROM ART_CUR INTO @CARTICLENO    					 
				END    
				
				print 'enter genbc art wise -8'	        
				CLOSE ART_CUR    
				DEALLOCATE ART_CUR    
			        
			END  
		     
			 print 'enter genbc art wise -9'
	END   ----- END OF IF @NROWS>0
	  
	print 'enter genbc art wise -10'
INS_CODES:    

	 SET @cSTEP='174.3.1'
	 EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1

	 --IF @@SPID=68
		

    SET @cSTEP='174.3.2'
	EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1
		      
	
	SET @cCmd=N'UPDATE a SET PRODUCT_CODE = B.PRODUCT_CODE    
	FROM GENBARCODE_ROWS B (NOLOCK)  
	join '+@cDetTable+' a (nolock) on   B.PID_ROW_ID=a.row_id AND b.sp_id=a.sp_id
	WHERE a.sp_id= '''+@NSPID+''''

	EXEC SP_EXECUTESQL @cCmd


	
	SET @cSTEP='174.3.4'
	EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1

	DECLARE @CeANaRTICLE VARCHAR(200)
	--select 'check genbarcode_rows',* from genbarcode_rows
	
	SET @cCmd=N'SELECT TOP 1 @CeANaRTICLE=ARTICLE_NO FROM '+@CdeTtABLE+' A  (NOLOCK) 
	JOIN ARTICLE B  (NOLOCK) ON A.ARTICLE_CODE=B.ARTICLE_CODE  
	WHERE B.GEN_EAN_CODES=1 AND a.SP_ID='''+@NSPID+''''

	EXEC SP_EXECUTESQL @CcMD, N'@cEanArticle VARCHAR(200) OUTPUT',@CeANaRTICLE OUTPUT

	IF ISNULL(@cEanArticle,'')<>''
	BEGIN
	
	
		
		 SET @cSTEP=174.4
		 EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1
		  
		SET @cCmd=N'UPDATE A SET PRODUCT_CODE=X.PRODUCT_CODE  
		FROM '+@cDEtTable+' A  (NOLOCK)
		JOIN  
		(  
		SELECT ROW_NUMBER() OVER (PARTITION BY  A.ARTICLE_CODE,A.PARA1_CODE,A.PARA2_CODE,A.PURCHASE_PRICE ORDER BY  A.ARTICLE_CODE,A.PARA1_CODE,A.PARA2_CODE,A.PURCHASE_PRICE) AS [TEMP_SR_NO],  
		A.ARTICLE_CODE,A.PARA1_CODE,A.PARA2_CODE,A.PURCHASE_PRICE,PRODUCT_CODE,A.sP_ID  
		FROM '+@cDEtTable+' A  (NOLOCK)
		JOIN ARTICLE B  (NOLOCK) ON A.ARTICLE_CODE=B.ARTICLE_CODE  
		WHERE B.GEN_EAN_CODES=1 AND A.SP_ID='''+@NSPID  +''' and isnull(a.product_code,'''')<>'''' and charindex(''@'',a.product_code)=0
		)X ON A.ARTICLE_CODE=X.ARTICLE_CODE AND A.PARA1_CODE=X.PARA1_CODE AND A.PARA2_CODE=X.PARA2_CODE AND A.sP_ID=X.sP_ID  
		WHERE  X.TEMP_SR_NO=1 and  isnull(a.product_code,'''')='''' '

		EXEC SP_EXECUTESQL @cCmd

		
		 
	END




	SET @cSTEP=174.6
	EXEC SP_CHKXNSAVELOG 'PUR',@cSTEP,0,@NSPID,'',1
	LBLGENPERISHABLE_BARCODE: 

	print 'enter SAVETRAN_GENPERISHABLE_BARCODE :'+convert(varchar,getdate(),113)
	EXEC SAVETRAN_GENPERISHABLE_BARCODE
	@NMODE=@nMode,
	@CXNID=@NSPID,
	@cLocId=@cLocId,
	@CERRORMSG=@CERRORMSG  OUTPUT 

	
	print 'complete SAVETRAN_GENPERISHABLE_BARCODE :'+convert(varchar,getdate(),113)

   	print 'enter SAVETRAN_GENVENDOR_EANCODES :'+convert(varchar,getdate(),113)	
   DECLARE @CGENVENDOREANCODES VARCHAR(2)

   SELECT TOP 1 @CGENVENDOREANCODES=VALUE FROM CONFIG (NOLOCK) WHERE CONFIG_OPTION='GENERATE_VENDOR_EANCODES'    
	 
   IF ISNULL(@CGENVENDOREANCODES,'')='1'
   BEGIN
   
	   SET @cSTEP='176.4.2'
	   EXEC SP_CHKXNSAVELOG 'PUR',@cStep,0,@NSPID,'',1    
	   
	   DECLARE @nVeanMode numeric(1,0)
	   set @nVeanMode =(CASE WHEN @cXntype='PUR' THEN 1 WHEN @cXntype='IRR' then 2 else 3 END)	

	   EXEC SAVETRAN_GENVENDOR_EANCODES 
		 @CSPID=@nSpid,
		 @NMODE=@nVeanMode,    
		 @CERRORMSG=@CERRORMSG OUTPUT    

		 IF ISNULL(@CERRORMSG,'')<>''
			GOTO END_PROC

		print 'End of SAVETRAN_GENVENDOR_EANCODES :'+convert(varchar,getdate(),113)	
   END	
	goto end_proc
end try


begin catch
	print 'enter catch of genbarcodes_common'

	set @cerrormsg='Error in savetran_genbarcodes_commonstep at Step#'+@cStep+' '+error_message()
	goto end_proc
end catch
END_PROC:

END
