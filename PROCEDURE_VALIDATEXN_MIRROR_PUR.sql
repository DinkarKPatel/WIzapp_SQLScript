CREATE PROCEDURE VALIDATEXN_MIRROR_PUR
@CLOCID VARCHAR(5),
@CXNID VARCHAR(50),
@CMERGEDB VARCHAR(200),
@CERRORMSG VARCHAR(MAX) OUTPUT
--WITH ENCRYPTION
AS
BEGIN

BEGIN TRY

DECLARE @DTSQL			NVARCHAR(MAX),
		@CTEMPPIM		NVARCHAR(MAX),
		@CTEMPPID		NVARCHAR(MAX),
		@NSTEP			INT,
		@CERRPRODUCTCODE	VARCHAR(50),
		@CTEMPDBNAME	VARCHAR(50),
		@CSTATECODE CHAR(7),@CLOCSSTMEMOID VARCHAR(40),@DTSQLSUBSECTION VARCHAR(100),@CCURLOCID CHAR(2),
		@CSTATENAME VARCHAR(100),@CERREMPCODE CHAR(7),@NCMMDISCOUNT NUMERIC(6,2),@NCRDISCOUNTPCT NUMERIC(10,2),
		@NCRDAYS INT,@NDISCOUNTAMT NUMERIC(14,2),@NTAXAMT NUMERIC(14,2),@NDISCOUNTPCT NUMERIC(6,2),@NTAXPCT NUMERIC(6,2),
		@CERRARTICLENO VARCHAR(100),@CERRPARA1NAME VARCHAR(50),@CERRPARA2NAME VARCHAR(50),@CTEMPFORMTABLE VARCHAR(200),
		@CTEMPARTTABLE VARCHAR(200),@CTEMPP1TABLE VARCHAR(200),@CTEMPP2TABLE VARCHAR(200),
		@CTEMPP3TABLE VARCHAR(200),@CTEMPP4TABLE VARCHAR(200),@CTEMPP5TABLE VARCHAR(200),@CTEMPP6TABLE VARCHAR(200),
		@CTEMPLMTABLE VARCHAR(200),@NSUMPIDNET NUMERIC(10,2),@NSUBTOTAL NUMERIC(10,2),@CTEMPSKUTABLE VARCHAR(200),
		@CTEMPSKUOHTABLE VARCHAR(200)

SET @NSTEP=10
IF OBJECT_ID('TEMPDB..#TMPPIM','U') IS NOT NULL
	DROP TABLE #TMPPIM

IF OBJECT_ID('TEMPDB..#TMPPID','U') IS NOT NULL
	DROP TABLE #TMPPID

SET @NSTEP=20		
CREATE TABLE #TMPPIM ( MRR_ID VARCHAR(22), MRR_NO VARCHAR(10), RECEIPT_DT DATETIME, 
					   INV_DT DATETIME, AC_CODE VARCHAR(10), FIN_YEAR VARCHAR(10),
					   CANCELLED BIT, SUBTOTAL NUMERIC(14,2), DISCOUNT_AMOUNT NUMERIC(10,2),
					   TAX_AMOUNT NUMERIC(10,2), FREIGHT NUMERIC(10,2), OTHER_CHARGES NUMERIC(10,2),
					   ROUND_OFF NUMERIC(10,2), TOTAL_AMOUNT NUMERIC(14,2), 
					    DISCOUNT_PERCENTAGE NUMERIC(10,2), TAX_PERCENTAGE NUMERIC(10,2),
					    EXCISE_DUTY_AMOUNT NUMERIC(10,2),BILL_LEVEL_TAX_METHOD NUMERIC(5),MANUAL_DISCOUNT BIT )

CREATE TABLE #TMPPID (MRR_ID VARCHAR(22), PRODUCT_CODE VARCHAR(50), PURCHASE_PRICE NUMERIC(10,2),
					  INVOICE_QUANTITY NUMERIC(10,3),TAX_AMOUNT NUMERIC(10,2),FORM_ID CHAR(7),
					  ARTICLE_CODE CHAR(9),PARA1_CODE CHAR(9),PARA2_CODE CHAR(9),PARA3_CODE CHAR(9),
					  PARA4_CODE CHAR(9),PARA5_CODE CHAR(9),PARA6_CODE CHAR(9))

SET @NSTEP=25
SELECT @CTEMPFORMTABLE=' '+@CMERGEDB+'FORM',
	   @CTEMPARTTABLE=' '+@CMERGEDB+'ARTICLE',	
	   @CTEMPP1TABLE=' '+@CMERGEDB+'PARA1',	
	   @CTEMPP2TABLE=' '+@CMERGEDB+'PARA2',	
	   @CTEMPP3TABLE=' '+@CMERGEDB+'PARA3',	
	   @CTEMPP4TABLE=' '+@CMERGEDB+'PARA4',	
	   @CTEMPP5TABLE=' '+@CMERGEDB+'PARA5',	
	   @CTEMPP6TABLE=' '+@CMERGEDB+'PARA6',	
	   @CTEMPLMTABLE=' '+@CMERGEDB+'LM01106',
	   @CTEMPSKUTABLE=' '+@CMERGEDB+'SKU',
	   @CTEMPSKUOHTABLE=' '+@CMERGEDB+'SKU_OH'	
  
SET @DTSQL=N'SELECT	MRR_ID, MRR_NO, RECEIPT_DT, INV_DT, AC_CODE, FIN_YEAR, CANCELLED, SUBTOTAL, DISCOUNT_AMOUNT,
		TAX_AMOUNT, FREIGHT, OTHER_CHARGES, ROUND_OFF, TOTAL_AMOUNT, DISCOUNT_PERCENTAGE, TAX_PERCENTAGE,
		EXCISE_DUTY_AMOUNT,BILL_LEVEL_TAX_METHOD,MANUAL_DISCOUNT
		FROM PIM01106 WHERE MRR_ID = '''+@CXNID+''''

INSERT #TMPPIM
EXEC SP_EXECUTESQL @DTSQL

SET @DTSQL=N'SELECT MRR_ID, PRODUCT_CODE, PURCHASE_PRICE, INVOICE_QUANTITY,TAX_AMOUNT,FORM_ID,ARTICLE_CODE,
			PARA1_CODE,PARA2_CODE,PARA3_CODE,PARA4_CODE,PARA5_CODE,PARA6_CODE
			FROM PID01106 WHERE MRR_ID = '''+@CXNID+''''

INSERT #TMPPID
EXEC SP_EXECUTESQL @DTSQL
	    	
--VALIDATING FORM NAME
IF OBJECT_ID(@CTEMPFORMTABLE,'U') IS NOT NULL
BEGIN
	SET @NSTEP=27
	SET @DTSQL=N'IF EXISTS (SELECT TOP 1 A.FORM_ID FROM #TMPPID A 
						   LEFT OUTER JOIN '+@CTEMPFORMTABLE+' B ON B.FORM_ID=A.FORM_ID
						   WHERE (B.FORM_ID IS NULL OR A.FORM_ID=''0000000'') AND A.PRODUCT_CODE<>'''' )
					SET @CERRORMSG=''INVALID FORM NAME FOUND....CAN NOT PROCEED'''
	EXEC SP_EXECUTESQL @DTSQL,N'@CERRORMSG NVARCHAR(MAX) OUTPUT',@CERRORMSG=@CERRORMSG OUTPUT
	PRINT @DTSQL
	IF LTRIM(RTRIM(ISNULL(@CERRORMSG,'')))<>''
		GOTO ATLAST
END

SET @NSTEP=37

--VALIDATING RECORD COUNT
SET @DTSQL=N'IF (SELECT COUNT(*) FROM ['+@CTEMPPID+'])=0)
				SET @CERRORMSG=''NO RECORD FOUND AT DETAIL LEVEL..... CANNOT PROCEED'''

EXEC SP_EXECUTESQL @DTSQL,N'@CERRORMSG NVARCHAR(MAX) OUTPUT',@CERRORMSG=@CERRORMSG OUTPUT
PRINT @DTSQL

--VALIDATING ARTICLES
SET @NSTEP=43
IF OBJECT_ID(@CTEMPARTTABLE,'U') IS NOT NULL
BEGIN
	SET @DTSQL=N'IF EXISTS (SELECT TOP 1 A.ARTICLE_CODE FROM #TMPPID   A 
							LEFT OUTER JOIN [ '+@CTEMPARTTABLE+']  B ON B.ARTICLE_CODE=A.ARTICLE_CODE WHERE B.ARTICLE_CODE IS NULL
							OR A.ARTICLE_CODE IN ('''',''0000000''))
					SET @CERRORMSG=''INVALID ARTICLE DETAILS FOUND....CAN NOT PROCEED'''
	EXEC SP_EXECUTESQL @DTSQL,N'@CERRORMSG NVARCHAR(MAX) OUTPUT',@CERRORMSG=@CERRORMSG OUTPUT
	PRINT @DTSQL
	IF LTRIM(RTRIM(ISNULL(@CERRORMSG,'')))<>''
		GOTO ATLAST
END

--VALIDATING PARA1
IF OBJECT_ID(@CTEMPP1TABLE,'U') IS NOT NULL
BEGIN
	SET @NSTEP=45
	SET @DTSQL=N'IF EXISTS (SELECT TOP 1 A.PARA1_CODE FROM #TMPPID   A 
							LEFT OUTER JOIN '+@CTEMPP1TABLE+' B ON B.PARA1_CODE=A.PARA1_CODE WHERE B.PARA1_CODE IS NULL)
					SET @CERRORMSG=''INVALID PARA1 DETAILS FOUND....CAN NOT PROCEED'''
	EXEC SP_EXECUTESQL @DTSQL,N'@CERRORMSG NVARCHAR(MAX) OUTPUT',@CERRORMSG=@CERRORMSG OUTPUT
	PRINT @DTSQL
	IF LTRIM(RTRIM(ISNULL(@CERRORMSG,'')))<>''
		GOTO ATLAST
END

--VALIDATING PARA2
IF OBJECT_ID(@CTEMPP2TABLE,'U') IS NOT NULL
BEGIN
	SET @NSTEP=47
	SET @DTSQL=N'IF EXISTS (SELECT TOP 1 A.PARA2_CODE FROM #TMPPID   A 
							LEFT OUTER JOIN '+@CTEMPP2TABLE+' B ON B.PARA2_CODE=A.PARA2_CODE WHERE B.PARA2_CODE IS NULL)
					SET @CERRORMSG=''INVALID PARA2 DETAILS FOUND....CAN NOT PROCEED'''
	EXEC SP_EXECUTESQL @DTSQL,N'@CERRORMSG NVARCHAR(MAX) OUTPUT',@CERRORMSG=@CERRORMSG OUTPUT
	PRINT @DTSQL
	IF LTRIM(RTRIM(ISNULL(@CERRORMSG,'')))<>''
		GOTO ATLAST
END

--VALIDATING PARA3
IF OBJECT_ID(@CTEMPP3TABLE,'U') IS NOT NULL
BEGIN
	SET @NSTEP=49
	SET @DTSQL=N'IF EXISTS (SELECT TOP 1 A.PARA3_CODE FROM #TMPPID   A 
							LEFT OUTER JOIN '+@CTEMPP3TABLE+' B ON B.PARA3_CODE=A.PARA3_CODE WHERE B.PARA3_CODE IS NULL)
					SET @CERRORMSG=''INVALID PARA3 DETAILS FOUND....CAN NOT PROCEED'''
	EXEC SP_EXECUTESQL @DTSQL,N'@CERRORMSG NVARCHAR(MAX) OUTPUT',@CERRORMSG=@CERRORMSG OUTPUT
	PRINT @DTSQL
	IF LTRIM(RTRIM(ISNULL(@CERRORMSG,'')))<>''
		GOTO ATLAST
END

--VALIDATING PARA4
IF OBJECT_ID(@CTEMPP4TABLE,'U') IS NOT NULL
BEGIN
	SET @NSTEP=51
	SET @DTSQL=N'IF EXISTS (SELECT TOP 1 A.PARA4_CODE FROM #TMPPID   A 
							LEFT OUTER JOIN '+@CTEMPP4TABLE+' B ON B.PARA4_CODE=A.PARA4_CODE WHERE B.PARA4_CODE IS NULL)
					SET @CERRORMSG=''INVALID PARA4 DETAILS FOUND....CAN NOT PROCEED'''
	EXEC SP_EXECUTESQL @DTSQL,N'@CERRORMSG NVARCHAR(MAX) OUTPUT',@CERRORMSG=@CERRORMSG OUTPUT
	PRINT @DTSQL
	IF LTRIM(RTRIM(ISNULL(@CERRORMSG,'')))<>''
		GOTO ATLAST
END

--VALIDATING PARA5
IF OBJECT_ID(@CTEMPP5TABLE,'U') IS NOT NULL
BEGIN
	SET @NSTEP=53
	SET @DTSQL=N'IF EXISTS (SELECT TOP 1 A.PARA5_CODE FROM #TMPPID   A 
							LEFT OUTER JOIN '+@CTEMPP5TABLE+' B ON B.PARA5_CODE=A.PARA5_CODE WHERE B.PARA5_CODE IS NULL)
					SET @CERRORMSG=''INVALID PARA5 DETAILS FOUND....CAN NOT PROCEED'''
	EXEC SP_EXECUTESQL @DTSQL,N'@CERRORMSG NVARCHAR(MAX) OUTPUT',@CERRORMSG=@CERRORMSG OUTPUT
	PRINT @DTSQL
	IF LTRIM(RTRIM(ISNULL(@CERRORMSG,'')))<>''
		GOTO ATLAST
END

--VALIDATING PARA6
IF OBJECT_ID(@CTEMPP6TABLE,'U') IS NOT NULL
BEGIN
	SET @NSTEP=55
	SET @DTSQL=N'IF EXISTS (SELECT TOP 1 A.PARA6_CODE FROM #TMPPID A 
							LEFT OUTER JOIN '+@CTEMPP6TABLE+' B ON B.PARA6_CODE=A.PARA6_CODE WHERE B.PARA6_CODE IS NULL)
					SET @CERRORMSG=''INVALID PARA6 DETAILS FOUND....CAN NOT PROCEED'''
	EXEC SP_EXECUTESQL @DTSQL,N'@CERRORMSG NVARCHAR(MAX) OUTPUT',@CERRORMSG=@CERRORMSG OUTPUT
	PRINT @DTSQL

	IF LTRIM(RTRIM(ISNULL(@CERRORMSG,'')))<>''
		GOTO ATLAST
END

--VALIDATING SKU
IF OBJECT_ID(@CTEMPSKUTABLE,'U') IS NOT NULL
BEGIN
	SET @NSTEP=60
	SET @DTSQL=N'IF EXISTS (SELECT TOP 1 A.ARTICLE_CODE FROM #TMPPID   A 
							LEFT OUTER JOIN '+@CTEMPSKUTABLE+' B ON B.PRODUCT_CODE=A.PRODUCT_CODE
							WHERE B.PRODUCT_CODE IS NULL AND ISNULL(A.PRODUCT_CODE,'''')<>'''')
					SET @CERRORMSG=''INVALID BARCODE DETAILS FOUND....CAN NOT PROCEED'''
	EXEC SP_EXECUTESQL @DTSQL,N'@CERRORMSG NVARCHAR(MAX) OUTPUT',@CERRORMSG=@CERRORMSG OUTPUT
	PRINT @DTSQL
	IF LTRIM(RTRIM(ISNULL(@CERRORMSG,'')))<>''
		GOTO ATLAST
END

--VALIDATING SKU_OH
IF OBJECT_ID(@CTEMPSKUOHTABLE,'U') IS NOT NULL
BEGIN
	SET @NSTEP=65
	SET @DTSQL=N'IF EXISTS (SELECT TOP 1 A.ARTICLE_CODE FROM #TMPPID   A 
							LEFT OUTER JOIN '+@CTEMPSKUOHTABLE+' B ON B.PRODUCT_CODE=A.PRODUCT_CODE
							WHERE B.PRODUCT_CODE IS NULL AND ISNULL(A.PRODUCT_CODE,'''')<>'''')
					SET @CERRORMSG=''INVALID BARCODE OVERHEAD DETAILS FOUND....CAN NOT PROCEED'''
	EXEC SP_EXECUTESQL @DTSQL,N'@CERRORMSG NVARCHAR(MAX) OUTPUT',@CERRORMSG=@CERRORMSG OUTPUT
	PRINT @DTSQL
	IF LTRIM(RTRIM(ISNULL(@CERRORMSG,'')))<>''
		GOTO ATLAST
END

-- IF CANCELLED MEMO THEN RETURN	
IF EXISTS(SELECT A.AC_CODE FROM #TMPPIM  A WHERE  CANCELLED=1)
	RETURN

-- BILL LEVEL SUBTOTAL VALIDATION
SELECT @NSUMPIDNET=SUM(PURCHASE_PRICE*INVOICE_QUANTITY)
FROM  #TMPPID  

SELECT @NSUBTOTAL =SUBTOTAL FROM #TMPPIM  

IF ABS(ISNULL(@NSUMPIDNET,0)-ISNULL(@NSUBTOTAL,0))>2
BEGIN
	SET @CERRORMSG='MISMATCH BETWEEN ITEM WISE TOTAL ('+LTRIM(RTRIM(STR(ISNULL(@NSUMPIDNET,0),10,2)))+') &
				    BILL LEVEL SUBTOTAL ('+LTRIM(RTRIM(STR(ISNULL(@NSUBTOTAL,0),10,2)))+')..... CANNOT SAVE '
	GOTO ATLAST
END

	

END TRY

BEGIN CATCH
	SET @CERRORMSG=N'ERROR FOUND IN '+ISNULL(ERROR_PROCEDURE(),'VALIDATEXN_MIRROR_PUR ')+
	  'STEP :'+LTRIM(RTRIM(STR(@NSTEP)))  +' MSG :'+ISNULL(ERROR_MESSAGE(),'NULL MSG')  
	
	GOTO ATLAST  
END CATCH

ATLAST:

IF LTRIM(RTRIM(ISNULL(@CERRORMSG,'')))<>''
	SET @CERRORMSG=ISNULL(@CERRORMSG,'') +'(VALIDATEXN_MIRROR_PUR)'
		

END
------   END OF PROCEDURE VALIDATEXN_MIRROR_PUR
