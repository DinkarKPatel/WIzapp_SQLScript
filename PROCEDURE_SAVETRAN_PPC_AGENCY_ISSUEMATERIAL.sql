CREATE PROCEDURE SAVETRAN_PPC_AGENCY_ISSUEMATERIAL
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CFINYEAR			VARCHAR(10),
	@CXNMEMOID			VARCHAR(40)='',
	@CLOCID				VARCHAR(2)=''
)
--WITH ENCRYPTION
AS
BEGIN
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME1		VARCHAR(100),
			@CDETAILTABLENAME2		VARCHAR(100),
		
			
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME1	VARCHAR(100),
			@CTEMPDETAILTABLENAME2	VARCHAR(100),
			
			
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE1		VARCHAR(100),
			@CTEMPDETAILTABLE2		VARCHAR(100),
			
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(2),
			@CLOCATIONID			VARCHAR(2),
			@CHODEPTID				VARCHAR(2),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT

	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	SET @NSTEP = 0		-- SETTTING UP ENVIRONMENT

	SET @CTEMPDBNAME = ''
	SET @CMASTERTABLENAME	= 'PPC_AGENCY_ISSUE_MATERIAL_MST'
	SET @CDETAILTABLENAME1	= 'PPC_AGENCY_ISSUE_MATERIAL_DET'
	
	
	--PRD_AGENCY_ISSUE_ROW_MATERIAL_DET
	SET @CTEMPMASTERTABLENAME	= 'PPC_'+@CMASTERTABLENAME+'_UPLOAD'
	SET @CTEMPDETAILTABLENAME1	= 'PPC_'+@CDETAILTABLENAME1+'_UPLOAD'
	
	SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE1	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME1
	
	
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'MEMO_ID'
	SET @CMEMONO			= 'MEMO_NO'
	SET @NMEMONOLEN			= LEN(@CLOCID)+6
	
	IF ISNULL(@CLOCID,'')=''
		SELECT @CLOCATIONID		= DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 
	ELSE
		SET @CLOCATIONID=@CLOCID
	
	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		

	SET @NSTEP = 10		-- GETTING DEPTID INFO FROM TEMP TABLE
	BEGIN TRY
		BEGIN TRANSACTION
		--- IF PROCEDURE CALLED FROM CANCEL MEMO, THEN JUST DO RELATED VALIDATIONS BEFORE CANCEL
		--- AND THEN AFTER CANCELLING THE MEMO JUST PROCEED TOWARDS VALIDATIONS TO BE DONE AFTER CANCEL
		IF @NUPDATEMODE = 3
		BEGIN
		    IF (@CXNMEMOID IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED...'
				  GOTO END_PROC  		
			END
			
			SET @CCMD=N' UPDATE '+@CMASTERTABLENAME+' SET CANCELLED=1,LAST_UPDATE=GETDATE() WHERE '+@CKEYFIELD1+'='''+@CXNMEMOID+'''  '
	        EXEC SP_EXECUTESQL @CCMD
	
	
				
				EXEC UPDATEPMT_PPC 
					  @CXNTYPE			= 'AMIS'
					, @CXNNO			= ''
					, @CXNID			= @CXNMEMOID
					, @NREVERTFLAG		= 0
					, @NALLOWNEGSTOCK	= 0
					, @NCHKDELBARCODES	= 0
					, @CCMD				= @CCMDOUTPUT OUTPUT
			
			
			IF @CCMDOUTPUT <> ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'
				GOTO END_PROC
			END
			
			
			
			GOTO END_PROC
		END	
		
		  IF NOT EXISTS(SELECT TOP 1 'U' FROM   PPC_PPC_AGENCY_ISSUE_MATERIAL_DET_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID))))
       BEGIN
           SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' NO RECORD FOUND...'
		   GOTO END_PROC  
     
       END
		
		-- GETTING DEPT_ID FROM TEMP MASTER TABLE
		SET @CCMD = 'SELECT @CMEMODEPTID = DEPT_ID, @CKEYFIELDVAL1 = MEMO_ID FROM ' + @CTEMPMASTERTABLE +' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
		EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT, @CKEYFIELDVAL1 VARCHAR(50) OUTPUT', 
								  @CMEMODEPTID OUTPUT, @CKEYFIELDVAL1 OUTPUT
		IF (@CMEMODEPTID IS NULL )
		BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED...'
			  GOTO END_PROC  		
		END
		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	
			SET @NSTEP = 20		-- GENERATING NEW KEY
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN
				-- GENERATING NEW MRR_NO		
				SET @NSAVETRANLOOP=0
				WHILE @NSAVETRANLOOP=0
				BEGIN
					SET @NSTEP = 23
					EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CLOCID, 1,
									@CFINYEAR,0, @CMEMONOVAL OUTPUT   
					SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
											WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
											AND FIN_YEAR = '''+@CFINYEAR+''' )
									SET @NLOOPOUTPUT=0
								ELSE
									SET @NLOOPOUTPUT=1'
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
				END

				IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
					  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
					  GOTO END_PROC  		
				END

				SET @NSTEP = 30		-- GENERATING NEW ID
				-- GENERATING NEW ORDER ID
				SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+ REPLICATE('0', 15-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL))
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  GOTO END_PROC
				END
				
				SET @NSTEP = 35
				-- CHECK WETHER THE MEMO ID IS STILL LATER
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  GOTO END_PROC
				END

				SET @NSTEP = 40		-- UPDATING NEW ID INTO TEMP TABLES
				-- UPDATING NEWLY GENERATED WORK ORDER NO AND ID IN MASTER & DETAIL TABLES
				SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
							@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
				EXEC SP_EXECUTESQL @CCMD
				
				SET @NSTEP = 50
				
				SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD
				
				
			END
		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
			SET @NSTEP = 50		-- GETTING ID INFO FROM TEMP TABLE
			-- GETTING ORDER_ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = MEMO_ID, @CMEMONOVAL = MEMO_NO FROM ' + @CTEMPMASTERTABLE +' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  GOTO END_PROC  		
			END
			
			SET @NSTEP = 60		-- UPDATING SENT_TO_HO FLAG TEMP TABLE
			
			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET LAST_UPDATE=GETDATE() WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''' '
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 70	
			
	
			--EXEC UPDATEPMT_PPC 
			--	  @CXNTYPE			= 'AMIS'
			--	, @CXNNO			= @CMEMONOVAL
			--	, @CXNID			= @CKEYFIELDVAL1
			--	, @NREVERTFLAG		= 0
			--	, @NALLOWNEGSTOCK	= 0
			--	, @NCHKDELBARCODES	= 0
			--	, @CCMD				= @CCMDOUTPUT OUTPUT

			IF @CCMDOUTPUT <> ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'
				GOTO END_PROC
			END
	
				
		END	-- END OF EDITMODE

		SET @NSTEP = 95

		-- CHECK WETHER THE MEMO ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END

		-- UPDATING MASTER TABLE (PIM01106) FROM TEMP TABLE
		SET @NSTEP = 100		-- UPDATING MASTER TABLE

            DECLARE @FILTER VARCHAR(MAX)
	        SET @FILTER=' B.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			, @BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@FILTER
			
		
		
		      
		      SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(38), NEWID())  
              WHERE LEFT(ROW_ID,5) = ''LATER'' AND SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
              PRINT @CCMD  
              EXEC SP_EXECUTESQL @CCMD  
              
		SET @NSTEP = 110
       --SELECT * FROM TEMP_PRD_AGENCY_ISSUE_ROW_MATERIAL_DET_61
		
		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME1
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME1
			, @CKEYFIELD1	= 'ROW_ID'
			, @BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@FILTER
		
	
		
		
		
		PRINT 'EXIT LOOP-0'								  
		SET @NSTEP = 150		-- UPDATING STOCK
		EXEC UPDATEPMT_PPC
			  @CXNTYPE			= 'AMIS'
			, @CXNNO			= @CMEMONOVAL
			, @CXNID			= @CKEYFIELDVAL1
			, @NREVERTFLAG		= 1
			, @NALLOWNEGSTOCK	= 0
			, @NCHKDELBARCODES	= 1
			, @CCMD				= @CCMDOUTPUT OUTPUT
			
			
			
		IF (@CCMDOUTPUT <> '')
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'
			GOTO END_PROC
		END
    
    
	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(STR(@NSTEP))) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		
		GOTO END_PROC
	END CATCH
	
END_PROC:
    
    IF ISNULL(@CCMDOUTPUT,'')<>'' AND ISNULL(@CERRORMSG,'')=''
     SET @CERRORMSG=@CCMDOUTPUT
     
	
		INSERT @OUTPUT ( ERRMSG, MEMO_ID)
				VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )
	
	SELECT * FROM @OUTPUT	
	
	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CCMDOUTPUT,'') = '' AND ISNULL(@CERRORMSG,'') = ''
			COMMIT TRANSACTION
		ELSE
			ROLLBACK
	END			
	IF ISNULL(@CCMDOUTPUT,'') = '' AND ISNULL(@CERRORMSG,'')=''
	BEGIN
	    DELETE  FROM PPC_PPC_AGENCY_ISSUE_MATERIAL_MST_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))
		DELETE  FROM PPC_PPC_AGENCY_ISSUE_MATERIAL_DET_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))
	END
	
	
END			
------------------------------------------------------ END OF PROCEDURE SAVETRAN_PPC_AGENCY_ISSUEMATERIAL
