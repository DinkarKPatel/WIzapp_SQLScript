CREATE PROCEDURE UPDATEPMT_PRD_SNC  
  @CXNTYPE			VARCHAR(10),  
  @CXNNO			VARCHAR(40),  
  @CXNID			VARCHAR(40),  
  @NREVERTFLAG		BIT = 0,  
  @NALLOWNEGSTOCK	BIT = 0,  
  @NCHKDELBARCODES	BIT = 0,  
  @NUPDATEMODE		INT=0,   
  @CCMD				NVARCHAR(4000) OUTPUT  
  
  --*** PARAMETERS :  
  --*** @CXNTYPE -		TRANSACTION TYPE (MODULE SPECIFIC)  
  --*** @CXNNO -		TRANSACTION NO ( MEMO NO OF MASTER TABLE )  
  --*** @CXNID -		TRANSACTION ID ( MEMO ID OF MASTER TABLE )  
  --*** @NREVERTFLAG -	A FLAG TO INDICATE WHETHER THIS PROCEDURE IS CALLED TO REVERT STOCK  
  --*** @NALLOWNEGSTOCK - FLAG TO INDICATE WHETHER OR NOT ALLOW NEGATIVE STOCK  
  --*** @NRETVAL - OUTPUT PARAMETER RETURNED BY THIS PROCEDURE (BIT 1-SUCCESS, 0-UNSUCCESS)  
--WITH ENCRYPTION
AS  
BEGIN  
	 DECLARE @NOUTFLAG INT, @NRETVAL BIT,@CXNTABLE VARCHAR(50),@CEXPR NVARCHAR(500),@CXNIDPARA VARCHAR(50),  
	   @BCANCELLED BIT,@SNC_MST_MODE INT  
	   
	   SELECT @SNC_MST_MODE=SNC_MST_MODE  FROM PRD_SNC_MST WHERE MEMO_ID =@CXNID
	  
	 SET @NRETVAL = 0  
	 SET @CCMD = ''  
	    
	 IF @NREVERTFLAG = 1  
	  SET @NOUTFLAG = -1  
	 ELSE  
	  SET @NOUTFLAG = 1  
	PRINT 'UPDATEPMT_SNC STEP 0' 
	 
	 IF NOT EXISTS ( SELECT TOP 1 A.PRODUCT_CODE FROM PRD_SNC_BARCODE_DET A JOIN PRD_SNC_DET B ON A.REFROW_ID=B.ROW_ID
					 WHERE B.MEMO_ID=@CXNID) 
		   GOTO END_PROC
	PRINT 'UPDATEPMT_SNC STEP 1'
	
	
	INSERT PRD_PMT (PRODUCT_UID,PRODUCT_CODE,  QUANTITY_IN_STOCK, DEPARTMENT_ID, LAST_UPDATE )    
	 SELECT A1.PRODUCT_UID, A1.PRODUCT_CODE,0 AS QUANTITY_IN_STOCK,C.DEPARTMENT_ID,GETDATE() AS LAST_UPDATE    
     FROM PRD_SNC_BARCODE_DET A1
     JOIN PRD_SNC_DET B ON A1.REFROW_ID=B.ROW_ID   
     JOIN PRD_SNC_MST C ON C.MEMO_ID=B.MEMO_ID    
     JOIN PRD_SKU D ON A1.PRODUCT_UID = D.PRODUCT_UID    
     LEFT OUTER JOIN PRD_PMT PMT ON PMT.PRODUCT_CODE = A1.PRODUCT_CODE 
     AND PMT.PRODUCT_UID = A1.PRODUCT_UID  AND C.DEPARTMENT_ID=PMT.DEPARTMENT_ID   
	 WHERE C.WIP=0 AND C.MEMO_ID = @CXNID AND PMT.PRODUCT_CODE IS NULL   
	
	
	
	
	 PRINT 'UPDATEPMT_SNC STEP 2'  			  
	IF @SNC_MST_MODE=2
	BEGIN
	 INSERT PMT01106 (PRODUCT_CODE,  QUANTITY_IN_STOCK, DEPT_ID,BIN_ID, LAST_UPDATE )    
	 SELECT B.PRODUCT_CODE,0 AS QUANTITY_IN_STOCK,C.DEPT_ID,B.BIN_ID,GETDATE() AS LAST_UPDATE
   	 FROM PRD_SNC_CONSUMABLE_DET B  
	 JOIN PRD_SNC_MST C ON C.MEMO_ID=B.MEMO_ID  
	 JOIN SKU D ON B.PRODUCT_CODE = D.PRODUCT_CODE  
	 LEFT OUTER JOIN PMT01106 PMT ON PMT.PRODUCT_CODE = B.PRODUCT_CODE AND PMT.DEPT_ID = C.DEPT_ID AND PMT.BIN_ID=B.BIN_ID    
	 WHERE B.WIP=0 AND B.MEMO_ID = @CXNID AND PMT.PRODUCT_CODE IS NULL
	 
	 PRINT 'UPDATEPMT_SNC STEP 3'
	
	
     PRINT 'UPDATEPMT_SNC STEP 4'	
	 
	 
	 
	 UPDATE A SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK - ( @NOUTFLAG * X.QUANTITY )  
	 FROM  PMT01106 A  
	 JOIN   
	 ( 
		SELECT B.PRODUCT_CODE,C.DEPT_ID, B.BIN_ID,SUM(B.QUANTITY) AS QUANTITY   
		FROM PRD_SNC_CONSUMABLE_DET B  
		JOIN PRD_SNC_MST C ON C.MEMO_ID=B.MEMO_ID  
		JOIN SKU D ON B.PRODUCT_CODE = D.PRODUCT_CODE  
		JOIN ARTICLE E ON D.ARTICLE_CODE = E.ARTICLE_CODE  
		WHERE B.WIP=0 AND B.MEMO_ID = @CXNID AND E.STOCK_NA=0  
		GROUP BY B.PRODUCT_CODE,C.DEPT_ID, B.BIN_ID  
	 )X ON A.PRODUCT_CODE = X.PRODUCT_CODE AND A.BIN_ID = X.BIN_ID AND A.DEPT_ID = X.DEPT_ID  
	  
	
	END 
	ELSE
	BEGIN
	     PRINT 'UPDATEPMT_SNC STEP 3'
	     INSERT PRD_PMT (PRODUCT_UID,PRODUCT_CODE,  QUANTITY_IN_STOCK, LAST_UPDATE, DEPARTMENT_ID,REP_ID )    
		 SELECT B.PRODUCT_UID, B.PRODUCT_CODE,0 AS QUANTITY_IN_STOCK,GETDATE() AS LAST_UPDATE,C.DEPARTMENT_ID ,'' AS REP_ID
   		 FROM PRD_SNC_CONSUMABLE_DET B  
		 JOIN PRD_SNC_MST C ON C.MEMO_ID=B.MEMO_ID  
		 JOIN PRD_SKU D ON B.PRODUCT_CODE = D.PRODUCT_CODE  
		 LEFT OUTER JOIN PRD_PMT PMT ON PMT.PRODUCT_UID  = B.PRODUCT_UID AND PMT.DEPARTMENT_ID  = C.DEPARTMENT_ID
		 WHERE B.WIP=0 AND B.MEMO_ID = @CXNID AND PMT.PRODUCT_CODE IS NULL
	 
         PRINT 'UPDATEPMT_SNC STEP 4'	
	
	
	    SELECT * FROM PRD_SNC_CONSUMABLE_DET
	
	
	 UPDATE A SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK - ( @NOUTFLAG * X.QUANTITY )  
	 FROM  PRD_PMT A  
	 JOIN   
	 ( 
		SELECT B.PRODUCT_CODE,C.DEPARTMENT_ID , SUM(B.QUANTITY) AS QUANTITY   
		FROM PRD_SNC_CONSUMABLE_DET B  
		JOIN PRD_SNC_MST C ON C.MEMO_ID=B.MEMO_ID  
		JOIN PRD_SKU D ON B.PRODUCT_CODE = D.PRODUCT_CODE  
		JOIN ARTICLE E ON D.ARTICLE_CODE = E.ARTICLE_CODE  
		WHERE  B.MEMO_ID = @CXNID AND E.STOCK_NA=0  
		GROUP BY B.PRODUCT_CODE,C.DEPARTMENT_ID  
	 )X ON A.PRODUCT_CODE = X.PRODUCT_CODE AND A.DEPARTMENT_ID  = X.DEPARTMENT_ID 
	  
	
	END 
	
	  
	   --*** UPDATING THE QUANTITY IN STOCK INTO PMT01106 FOR THE GIVEN MEMO  
	 UPDATE A SET QUANTITY_IN_STOCK = QUANTITY_IN_STOCK + ( @NOUTFLAG * X.QUANTITY )  
	 FROM  PRD_PMT A  
	 JOIN   
	 ( 
		SELECT A.PRODUCT_UID,C.DEPARTMENT_ID,
		SUM(CASE WHEN E.CODING_SCHEME=3 THEN 1 ELSE B.QUANTITY END) AS QUANTITY   
		FROM PRD_SNC_DET B  
		JOIN PRD_SNC_BARCODE_DET A ON A.REFROW_ID=B.ROW_ID
		JOIN PRD_SNC_MST C ON C.MEMO_ID=B.MEMO_ID  
		JOIN PRD_SKU D ON A.PRODUCT_UID = D.PRODUCT_UID  
		JOIN ARTICLE E ON D.ARTICLE_CODE = E.ARTICLE_CODE  
		WHERE C.WIP=0 AND B.MEMO_ID = @CXNID AND E.STOCK_NA=0  
		GROUP BY A.PRODUCT_UID,C.DEPARTMENT_ID  
	 )X ON A.PRODUCT_UID = X.PRODUCT_UID AND A.DEPARTMENT_ID = X.DEPARTMENT_ID
	
     SET @NRETVAL = 1  --*** SUCCESS  
	 PRINT 'UPDATEPMT_SNC STEP 5'
	 SELECT @BCANCELLED=CANCELLED FROM SNC_MST WHERE MEMO_ID=@CXNID  

	 --*** CHECKING FOR NEGATIVE STOCK  
	 --*** IF USER OPTED NOT TO ALLOW NEGATIVE STOCK AND STOCK IS GOING OUT  
	 PRINT 'UPDATEPMT_SNC STEP 6'
	 IF @SNC_MST_MODE=1
	 BEGIN
	 IF @NALLOWNEGSTOCK = 0 OR @BCANCELLED=1   
	 BEGIN  
	  IF EXISTS (	SELECT PMT.PRODUCT_UID,SUM(ISNULL(PMT.QUANTITY_IN_STOCK,0)) AS QUANTITY   
					FROM PRD_PMT PMT
					JOIN PRD_SNC_BARCODE_DET A ON A.PRODUCT_CODE=PMT.PRODUCT_CODE
					JOIN PRD_SNC_DET B  ON B.ROW_ID=A.REFROW_ID
					JOIN PRD_SNC_MST C ON C.MEMO_ID=B.MEMO_ID  
					JOIN PRD_SKU D ON A.PRODUCT_CODE = D.PRODUCT_CODE  
					JOIN ARTICLE E ON D.ARTICLE_CODE = E.ARTICLE_CODE  
					WHERE C.WIP=0 AND  B.MEMO_ID = @CXNID AND E.STOCK_NA=0  
					AND PMT.DEPARTMENT_ID=C.DEPARTMENT_ID 
					GROUP BY PMT.PRODUCT_UID
					HAVING SUM(ISNULL(PMT.QUANTITY_IN_STOCK,0))<0
					UNION ALL
					SELECT PMT.PRODUCT_CODE,SUM(ISNULL(PMT.QUANTITY_IN_STOCK,0)) AS QUANTITY   
					FROM PMT01106 PMT
					JOIN PRD_SNC_CONSUMABLE_DET B  ON PMT.PRODUCT_CODE=B.PRODUCT_CODE
					JOIN PRD_SNC_MST C ON C.MEMO_ID=B.MEMO_ID  
					JOIN SKU D ON B.PRODUCT_CODE = D.PRODUCT_CODE  
					JOIN ARTICLE E ON D.ARTICLE_CODE = E.ARTICLE_CODE  
					WHERE B.WIP=0 AND  B.MEMO_ID = @CXNID AND E.STOCK_NA=0  
					AND PMT.DEPT_ID=C.DEPT_ID AND PMT.BIN_ID=B.BIN_ID
					GROUP BY PMT.PRODUCT_CODE
					HAVING SUM(ISNULL(PMT.QUANTITY_IN_STOCK,0))<0

			)  
	  BEGIN  
	   SET @NRETVAL = 0  --*** UNSUCCESS  
	   SET @CCMD = N'SELECT PMT.PRODUCT_UID,SUM(ISNULL(PMT.QUANTITY_IN_STOCK,0)) AS QUANTITY   
					FROM PRD_PMT PMT
					JOIN PRD_SNC_BARCODE_DET A ON A.PRODUCT_CODE=PMT.PRODUCT_CODE
					JOIN PRD_SNC_DET B  ON B.ROW_ID=A.REFROW_ID
					JOIN PRD_SNC_MST C ON C.MEMO_ID=B.MEMO_ID  
					JOIN PRD_SKU D ON A.PRODUCT_CODE = D.PRODUCT_CODE  
					JOIN ARTICLE E ON D.ARTICLE_CODE = E.ARTICLE_CODE  
					WHERE C.WIP=0 AND  B.MEMO_ID = '''+@CXNID+''' AND E.STOCK_NA=0  
					AND PMT.DEPARTMENT_ID=C.DEPARTMENT_ID 
					GROUP BY PMT.PRODUCT_UID
					HAVING SUM(ISNULL(PMT.QUANTITY_IN_STOCK,0))<0
					UNION ALL
					SELECT PMT.PRODUCT_CODE,SUM(ISNULL(PMT.QUANTITY_IN_STOCK,0)) AS QUANTITY   
					FROM PMT01106 PMT
					JOIN PRD_SNC_CONSUMABLE_DET B  ON PMT.PRODUCT_CODE=B.PRODUCT_CODE
					JOIN PRD_SNC_MST C ON C.MEMO_ID=B.MEMO_ID  
					JOIN SKU D ON B.PRODUCT_CODE = D.PRODUCT_CODE  
					JOIN ARTICLE E ON D.ARTICLE_CODE = E.ARTICLE_CODE  
					WHERE B.WIP=0 AND  B.MEMO_ID = '''+@CXNID+''' AND E.STOCK_NA=0  
					AND PMT.DEPT_ID=C.DEPT_ID AND PMT.BIN_ID=B.BIN_ID
					GROUP BY PMT.PRODUCT_CODE
					HAVING SUM(ISNULL(PMT.QUANTITY_IN_STOCK,0))<0'  
	  END 
	 END
	 ELSE
	 BEGIN
	      
	       IF EXISTS (	SELECT PMT.PRODUCT_UID,SUM(ISNULL(PMT.QUANTITY_IN_STOCK,0)) AS QUANTITY   
					FROM PRD_PMT PMT
					JOIN PRD_SNC_BARCODE_DET A ON A.PRODUCT_CODE=PMT.PRODUCT_CODE
					JOIN PRD_SNC_DET B  ON B.ROW_ID=A.REFROW_ID
					JOIN PRD_SNC_MST C ON C.MEMO_ID=B.MEMO_ID  
					JOIN PRD_SKU D ON A.PRODUCT_CODE = D.PRODUCT_CODE  
					JOIN ARTICLE E ON D.ARTICLE_CODE = E.ARTICLE_CODE  
					WHERE C.WIP=0 AND  B.MEMO_ID = @CXNID AND E.STOCK_NA=0  
					AND PMT.DEPARTMENT_ID=C.DEPARTMENT_ID 
					GROUP BY PMT.PRODUCT_UID
					HAVING SUM(ISNULL(PMT.QUANTITY_IN_STOCK,0))<0
					UNION ALL
					SELECT PMT.PRODUCT_CODE,SUM(ISNULL(PMT.QUANTITY_IN_STOCK,0)) AS QUANTITY   
					FROM PRD_PMT  PMT
					JOIN PRD_SNC_CONSUMABLE_DET B  ON PMT.PRODUCT_UID =B.PRODUCT_UID
					JOIN PRD_SNC_MST C ON C.MEMO_ID=B.MEMO_ID  
					JOIN PRD_SKU D ON B.PRODUCT_UID = D.PRODUCT_UID  
					JOIN ARTICLE E ON D.ARTICLE_CODE = E.ARTICLE_CODE  
					WHERE   B.MEMO_ID = @CXNID AND E.STOCK_NA=0  
					AND PMT.DEPARTMENT_ID =C.DEPARTMENT_ID 
					GROUP BY PMT.PRODUCT_CODE
					HAVING SUM(ISNULL(PMT.QUANTITY_IN_STOCK,0))<0

			)  
	  BEGIN  
	   SET @NRETVAL = 0  --*** UNSUCCESS  
	   SET @CCMD = N'SELECT PMT.PRODUCT_UID,SUM(ISNULL(PMT.QUANTITY_IN_STOCK,0)) AS QUANTITY   
					FROM PRD_PMT PMT
					JOIN PRD_SNC_BARCODE_DET A ON A.PRODUCT_CODE=PMT.PRODUCT_CODE
					JOIN PRD_SNC_DET B  ON B.ROW_ID=A.REFROW_ID
					JOIN PRD_SNC_MST C ON C.MEMO_ID=B.MEMO_ID  
					JOIN PRD_SKU D ON A.PRODUCT_CODE = D.PRODUCT_CODE  
					JOIN ARTICLE E ON D.ARTICLE_CODE = E.ARTICLE_CODE  
					WHERE C.WIP=0 AND  B.MEMO_ID = '''+@CXNID+''' AND E.STOCK_NA=0  
					AND PMT.DEPARTMENT_ID=C.DEPARTMENT_ID 
					GROUP BY PMT.PRODUCT_UID
					HAVING SUM(ISNULL(PMT.QUANTITY_IN_STOCK,0))<0
					UNION ALL
					SELECT PMT.PRODUCT_CODE,SUM(ISNULL(PMT.QUANTITY_IN_STOCK,0)) AS QUANTITY   
					FROM PRD_PMT PMT
					JOIN PRD_SNC_CONSUMABLE_DET B  ON PMT.PRODUCT_UID=B.PRODUCT_UID
					JOIN PRD_SNC_MST C ON C.MEMO_ID=B.MEMO_ID  
					JOIN PRD_SKU D ON B.PRODUCT_UID = D.PRODUCT_UID  
					JOIN ARTICLE E ON D.ARTICLE_CODE = E.ARTICLE_CODE  
					WHERE  B.MEMO_ID = '''+@CXNID+''' AND E.STOCK_NA=0  
					AND PMT.DEPARTMENT_ID=C.DEPARTMENT_ID
					GROUP BY PMT.PRODUCT_CODE
					HAVING SUM(ISNULL(PMT.QUANTITY_IN_STOCK,0))<0'  
	  END 
	 
	 
	 END
	   PRINT @CCMD  
   END   
	  
END_PROC:  
	PRINT 'UPDATEPMT_SNC STEP OUT'  
END  
--***************************** END OF PROCEDURE UPDATEPMT_SLS
