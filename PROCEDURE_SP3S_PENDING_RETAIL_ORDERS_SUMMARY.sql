create PROCEDURE SP3S_PENDING_RETAIL_ORDERS_SUMMARY
(
	 @NORDERPERIOD NUMERIC(1)=1
	 /*
		@NORDERPERIOD : 
		IF VALUE IS 1 - ORDERS WILL BE FILTERED BASED ON ONLY @DTO_DT
		IF VALUE IS 2 - ORDERS WILL BE FILTERED BASED ON @DFROM_DT AND @DTO_DT
	 */
	,@DFROM_DT DATETIME=''
	,@DTO_DT DATETIME=''
	,@CCUSTOMER_CODE VARCHAR(12)=''
	,@CDEPT_ID VARCHAR(5)=''
	,@DFILTER_CMDT DATETIME='' /*CASHMEMO CONSIDERATION DATE*/
	,@NMODE NUMERIC(1)=1 -- 1 FOR ALL 2 FOR PENGING 3 FOR DELIVER
)
--WITH ENCRYPTION
AS
BEGIN
		DECLARE @CCMD NVARCHAR(MAX),@CTABLENAME VARCHAR(100)
	 
		IF OBJECT_ID('TEMPDB..#ALLPENDINGORDERS','U') IS NOT NULL
			DROP TABLE #ALLPENDINGORDERS
			
		IF OBJECT_ID('TEMPDB..#ORDERSUMMARY','U') IS NOT NULL
			DROP TABLE #ORDERSUMMARY
			
		 IF OBJECT_ID ('TEMPDB..#ORDDLV','U') IS NOT NULL
             DROP TABLE #ORDDLV
           
    	SELECT A.CUSTOMER_CODE
			  ,A.CM_NO 
			  ,A.CM_DT 
			  ,LEFT(B.PRODUCT_CODE, ISNULL(NULLIF(CHARINDEX ('@',B.PRODUCT_CODE)-1,-1),LEN(B.PRODUCT_CODE ))) PRODUCT_CODE   
			  ,B.QUANTITY
		INTO #ORDDLV	  	  
		FROM CMM01106 A (NOLOCK) 
		JOIN CMD01106 B (NOLOCK) ON A.CM_ID=B.CM_ID
		JOIN WSL_ORDER_DET WOD (NOLOCK) ON LEFT(B.PRODUCT_CODE, ISNULL(NULLIF(CHARINDEX ('@',B.PRODUCT_CODE)-1,-1),LEN(B.PRODUCT_CODE )))=
							(CASE WHEN WOD.ORDER_TYPE=0 THEN WOD.PRODUCT_CODE ELSE WOD.REF_PRODUCT_CODE END)
		JOIN WSL_ORDER_MST WOM (NOLOCK) ON WOD.ORDER_ID=WOM.ORDER_ID AND A.CUSTOMER_CODE=WOM.CUSTOMER_CODE
		WHERE A.CM_MODE = 1 AND B.RFNET>0 
		AND A.CANCELLED = 0 AND A.CUSTOMER_CODE <> '000000000000' AND WOM.CANCELLED=0 AND ISNULL(WOD.CANCELLED,0)=0
		AND A.CM_DT<=@DFILTER_CMDT

		

		;WITH CTE_REMOVEDUP AS
		(
			SELECT ROW_NUMBER() OVER(PARTITION BY PRODUCT_CODE,CUSTOMER_CODE ORDER BY CM_DT ASC,CM_NO ASC) AS SNO
				  ,CUSTOMER_CODE
				  ,CM_NO
				  ,PRODUCT_CODE
				  ,QUANTITY
			FROM #ORDDLV	  
		)
		DELETE CTE_REMOVEDUP WHERE SNO<>1
		
		CREATE INDEX IX_ORDDLV_PRODUCT_CODE  ON #ORDDLV(PRODUCT_CODE)
		CREATE INDEX IX_ORDDLV_CUSTOMER_CODE ON #ORDDLV(CUSTOMER_CODE)
		CREATE INDEX IX_ORDDLV_CM_NO ON #ORDDLV(CM_NO)	

		--SELECT CMM.CUSTOMER_CODE,CMM.PRODUCT_CODE,SUM(CMM.QUANTITY) AS QUANTITY
		--FROM #ORDDLV CMM(NOLOCK)
		--GROUP BY CMM.CUSTOMER_CODE,CMM.PRODUCT_CODE			
	
		SELECT B.location_Code AS LOC_ID,L.DEPT_NAME AS LOC_NAME
		      ,L.DEPT_ALIAS AS LOC_ALIAS,B.ORDER_DT AS ORDER_DT
		      ,B.ORDER_NO,CUS.USER_CUSTOMER_CODE AS CUSTOMER_ID
		      ,CUS.CUSTOMER_FNAME+' '+CUS.CUSTOMER_LNAME AS CUSTOMER_NAME
		      ,E.EMP_NAME AS SALE_PERSON,A.QUANTITY AS ORDER_QTY,A.RFNET AS ORDER_AMT
		      ,B.DELIVERY_DT AS DELIVERY_DT,ISNULL(SLS.QUANTITY,0) AS DELIVER_QTY
		      ,(CASE WHEN ISNULL(SLS.QUANTITY,0)=0 THEN 0 ELSE ((A.RFNET/A.QUANTITY)*SLS.QUANTITY) END) AS DELIVER_AMOUNT
		      ,B.ORDER_ID,B.REF_NO,B.CUSTOMER_CODE
		INTO #ALLPENDINGORDERS
		FROM WSL_ORDER_DET A (NOLOCK)
		JOIN WSL_ORDER_MST B (NOLOCK) ON A.ORDER_ID=B.ORDER_ID
		JOIN CUSTDYM CUS(NOLOCK) ON B.CUSTOMER_CODE=CUS.CUSTOMER_CODE
		JOIN LOCATION L (NOLOCK) ON L.DEPT_ID=B.location_Code 
		JOIN EMPLOYEE E (NOLOCK) ON E.EMP_CODE =B.SALE_EMP_CODE 
		LEFT JOIN 
		(
			SELECT CMM.CUSTOMER_CODE,CMM.PRODUCT_CODE,SUM(CMM.QUANTITY) AS QUANTITY
			FROM #ORDDLV CMM(NOLOCK)
			GROUP BY CMM.CUSTOMER_CODE,CMM.PRODUCT_CODE
		)SLS ON SLS.PRODUCT_CODE=(CASE WHEN A.ORDER_TYPE=1 THEN A.REF_PRODUCT_CODE ELSE A.PRODUCT_CODE END)
			 AND SLS.CUSTOMER_CODE=B.CUSTOMER_CODE		 
		WHERE B.CANCELLED=0 --ORDER IS NOT CANCELLED
		AND ISNULL(A.CANCELLED,0)=0 --ORDER ITEM IS NOT CANCELLED
		AND	B.ORDER_DT BETWEEN (CASE WHEN @NORDERPERIOD=1 THEN '1900-01-01' ELSE @DFROM_DT END) AND @DTO_DT	--ORDER BOOKING DATE
		AND (@CCUSTOMER_CODE='' OR B.CUSTOMER_CODE=@CCUSTOMER_CODE) --CUSTOMER FILTER
		AND (@CDEPT_ID='' OR B.location_Code =@CDEPT_ID)
		
		--SELECT * FROM #ALLPENDINGORDERS
		--ORDERS PENDING FOR BILLING WHOSE PUR IS RAISED
		
		SELECT LOC_ID,LOC_NAME,LOC_ALIAS,ORDER_DT,ORDER_DT AS DT
		      ,ORDER_NO,CUSTOMER_ID,CUSTOMER_NAME,SALE_PERSON,REF_NO,ORDER_ID,CUSTOMER_CODE
		      ,SUM(ISNULL(ORDER_QTY,0)) AS ORDER_QTY
		      ,SUM(ISNULL(ORDER_AMT,0))  AS ORDER_AMT
		      ,DELIVERY_DT
		      ,SUM(ISNULL(DELIVER_QTY,0)) AS DELIVER_QTY
		      ,SUM(ISNULL(DELIVER_AMOUNT,0)) AS DELIVER_AMOUNT
		      ,CASE WHEN SUM(ISNULL(ORDER_AMT,0))-SUM(ISNULL(DELIVER_AMOUNT,0))=0 THEN 3 ELSE 2 END AS STATUS
		INTO #ORDERSUMMARY
		FROM #ALLPENDINGORDERS B
		GROUP BY LOC_ID,LOC_NAME,LOC_ALIAS,ORDER_DT
		        ,ORDER_NO,CUSTOMER_ID,CUSTOMER_NAME,SALE_PERSON
		        ,DELIVERY_DT,REF_NO,ORDER_ID,CUSTOMER_CODE

		--SELECT B.*,ISNULL(RCV.RECEIVED_AMOUNT,0) AS RECEIVED_AMOUNT,ISNULL(RCV.ADJ_AMOUNT,0) AS ADJ_AMOUNT 
		
		SELECT LOC_ID,LOC_NAME,LOC_ALIAS,CONVERT(VARCHAR,ORDER_DT,105) AS ORDER_DT
		      ,ORDER_NO,CUSTOMER_ID,CUSTOMER_NAME,SALE_PERSON ,REF_NO
		      ,CONVERT(NUMERIC(18,2),ORDER_QTY) AS ORDER_QTY,ORDER_AMT
		      ,CONVERT(VARCHAR,DELIVERY_DT,105) AS DELIVERY_DT
		      ,CASE WHEN ISNULL(ORDER_AMT,0)-ISNULL(DELIVER_AMOUNT,0) > 0 THEN DATEDIFF(DD,ORDER_DT,DELIVERY_DT) ELSE 0 END  AS DUE_DAYS
		      ,CONVERT(NUMERIC(18,2),DELIVER_QTY) AS DELIVER_QTY
		      ,CONVERT(NUMERIC(18,2),DELIVER_AMOUNT) AS DELIVER_AMOUNT
		      ,CONVERT(NUMERIC(18,2),ISNULL(RECEIVED_AMOUNT,0)) AS RECEIVED_AMOUNT
		      ,CONVERT(NUMERIC(18,2),ISNULL(ADJ_AMOUNT,0)) AS ADJ_AMOUNT
		      ,CONVERT(NUMERIC(18,2),ISNULL(ORDER_QTY,0)-ISNULL(DELIVER_QTY,0)) AS PENDING_QTY
		      ,ISNULL(ORDER_AMT,0)-ISNULL(DELIVER_AMOUNT,0)-ISNULL(RECEIVED_AMOUNT,0)+ISNULL(ADJ_AMOUNT,0)  AS PENDING_AMT		
		FROM #ORDERSUMMARY B
		LEFT JOIN 
		(
			SELECT A.CUSTOMER_CODE,B.ORDER_ID,SUM(A.NET_AMOUNT) AS RECEIVED_AMOUNT,ISNULL(SUM(ADJ.ADJ_AMOUNT),0) AS ADJ_AMOUNT
			FROM ARC01106 A(NOLOCK)
			JOIN WSL_ORDER_ADV_RECEIPT B(NOLOCK) ON B.ADV_REC_ID=A.ADV_REC_ID
			LEFT OUTER JOIN
			(
				SELECT ADJ_MEMO_ID, SUM(AMOUNT) AS ADJ_AMOUNT
				FROM PAYMODE_XN_DET A (NOLOCK)
				JOIN CMM01106 B (NOLOCK) ON B.CM_ID=A.MEMO_ID
				WHERE B.CANCELLED=0 AND ADJ_MEMO_ID<>'' AND PAYMODE_CODE='0000002' AND XN_TYPE='SLS'
				GROUP BY ADJ_MEMO_ID
			)ADJ ON ADJ.ADJ_MEMO_ID=A.ADV_REC_ID
			WHERE A.CANCELLED=0			
			GROUP BY A.CUSTOMER_CODE,B.ORDER_ID
		)RCV ON RCV.ORDER_ID=B.ORDER_ID AND RCV.CUSTOMER_CODE=B.CUSTOMER_CODE
		--WHERE (@NMODE =1 OR (CASE WHEN (ISNULL(ORDER_AMT,0)-ISNULL(DELIVER_AMOUNT,0)-ISNULL(RECEIVED_AMOUNT,0)+ISNULL(ADJ_AMOUNT,0))=0 THEN 3 ELSE 2 END)=@NMODE)
		WHERE (@NMODE =1 OR (CASE WHEN (ISNULL(ORDER_QTY,0)-ISNULL(DELIVER_QTY,0))=0 THEN 3 ELSE 2 END)=@NMODE)  
		ORDER BY LOC_ID,DT,ORDER_NO,CUSTOMER_NAME
		
		--pending order show only based on Quantity Discuss with sir
		 
		        
		--SELECT LOC_ID,LOC_NAME,LOC_ALIAS,CONVERT(VARCHAR,ORDER_DT,105) AS ORDER_DT
		--      ,ORDER_NO,CUSTOMER_ID,CUSTOMER_NAME,SALE_PERSON ,REF_NO
		--      ,CONVERT(NUMERIC(18,2),ORDER_QTY) AS ORDER_QTY,ORDER_AMT
		--      ,CONVERT(VARCHAR,DELIVERY_DT,105) AS DELIVERY_DT
		--      ,CASE WHEN ISNULL(ORDER_AMT,0)-ISNULL(DELIVER_AMOUNT,0) > 0 THEN DATEDIFF(DD,ORDER_DT,DELIVERY_DT) ELSE 0 END  AS DUE_DAYS
		--      ,CONVERT(NUMERIC(18,2),DELIVER_QTY) AS DELIVER_QTY
		--      ,CONVERT(NUMERIC(18,2),DELIVER_AMOUNT) AS DELIVER_AMOUNT
		--      ,CONVERT(NUMERIC(18,2),RECEIVED_AMOUNT) AS RECEIVED_AMOUNT
		--      ,CONVERT(NUMERIC(18,2),ADJ_AMOUNT) AS ADJ_AMOUNT
		--      ,CONVERT(NUMERIC(18,2),ISNULL(ORDER_QTY,0)-ISNULL(DELIVER_QTY,0)) AS PENDING_QTY
		--      ,ISNULL(ORDER_AMT,0)-ISNULL(DELIVER_AMOUNT,0)-ISNULL(RECEIVED_AMOUNT,0)+ISNULL(ADJ_AMOUNT,0)  AS PENDING_AMT
		--FROM #ORDERSUMMARY
		--WHERE (@NMODE =1 OR STATUS=@NMODE)
		--ORDER BY LOC_ID,DT,ORDER_NO,CUSTOMER_NAME
END
--END OF PROCEDURE - SP3S_PENDING_RETAIL_ORDERS_SUMMARY
