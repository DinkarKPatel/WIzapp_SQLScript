CREATE PROCEDURE SAVETRAN_PRD_AGENCY_MATERIALRECEIPT  
(  
 @NUPDATEMODE  NUMERIC(1,0),  
 @NSPID    INT,  
 @CMEMONOPREFIX  VARCHAR(50),  
 @CFINYEAR   VARCHAR(10),  
 @CXNMEMOID   VARCHAR(40)='',  
 @CCOMPUTERNAME  VARCHAR(500)='',  
 @CWINUSERNAME  VARCHAR(500)='',  
 @CWIZUSERCODE  CHAR(7)='',  
 @CLOCID    VARCHAR(2)=''  
)  
----WITH ENCRYPTION  
AS  
BEGIN  
 DECLARE @CTEMPDBNAME   VARCHAR(100),  
   @CMASTERTABLENAME  VARCHAR(100),  
   @CDETAILTABLENAME1  VARCHAR(100),  
   @CDETAILTABLENAME2  VARCHAR(100),  
   @CDETAILTABLENAME3  VARCHAR(100),  
   @CTEMPMASTERTABLENAME VARCHAR(100),  
   @CTEMPDETAILTABLENAME1 VARCHAR(100),  
   @CTEMPDETAILTABLENAME2 VARCHAR(100),  
   @CTEMPDETAILTABLENAME3 VARCHAR(100),  
   @CTEMPMASTERTABLE  VARCHAR(100),  
   @CTEMPDETAILTABLE1  VARCHAR(100),  
   @CTEMPDETAILTABLE2  VARCHAR(100),  
   @CTEMPDETAILTABLE3  VARCHAR(100),  
   @CERRORMSG    VARCHAR(500),  
   @LDONOTUPDATESTOCK  BIT,  
   @CKEYFIELD1    VARCHAR(50),  
   @CKEYFIELDVAL1   VARCHAR(50),  
   @CMEMONO    VARCHAR(20),  
   @NMEMONOLEN    NUMERIC(20,0),  
   @CMEMONOVAL    VARCHAR(50),  
   @CMEMODEPTID   VARCHAR(2),  
   @CLOCATIONID   VARCHAR(2),  
   @CHODEPTID    VARCHAR(2),  
   @CCMD     NVARCHAR(4000),  
   @CCMDOUTPUT    NVARCHAR(4000),  
   @NSAVETRANLOOP   BIT,  
   @NSTEP     INT
  
 DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))  
  
 SET @NSTEP = 0  -- SETTTING UP ENVIRONMENT  
  -- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
  SET @CTEMPDBNAME = ''  
   
 SET @CMASTERTABLENAME = 'PRD_AGENCY_MATERIAL_RECEIPT_MST'  
 SET @CDETAILTABLENAME1 = 'PRD_AGENCY_MATERIAL_RECEIPT_DET'  
 SET @CDETAILTABLENAME3 = 'PRD_AGENCY_ROW_MATERIAL_RECEIPT_DET'  
   
 SET @CTEMPMASTERTABLENAME = 'TEMP_'+@CMASTERTABLENAME+'_'+LTRIM(RTRIM(STR(@NSPID)))  
 SET @CTEMPDETAILTABLENAME1 = 'TEMP_'+@CDETAILTABLENAME1+'_'+LTRIM(RTRIM(STR(@NSPID)))  
 SET @CTEMPDETAILTABLENAME3 = 'TEMP_'+@CDETAILTABLENAME3+'_'+LTRIM(RTRIM(STR(@NSPID)))  
   
 SET @CTEMPMASTERTABLE = @CTEMPDBNAME + @CTEMPMASTERTABLENAME  
 SET @CTEMPDETAILTABLE1 = @CTEMPDBNAME + @CTEMPDETAILTABLENAME1  
 SET @CTEMPDETAILTABLE3 = @CTEMPDBNAME + @CTEMPDETAILTABLENAME3  
    
 SET @CERRORMSG   = ''  
 SET @LDONOTUPDATESTOCK = 0  
 SET @CKEYFIELD1   = 'MEMO_ID'  
 SET @CMEMONO   = 'MEMO_NO'  
 SET @NMEMONOLEN   = 10  
   
 IF ISNULL(@CLOCID,'')=''  
  SELECT @CLOCATIONID  = [VALUE] FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID'  
 ELSE  
  SELECT @CLOCATIONID=@CLOCID  
   
 SELECT @CHODEPTID  = [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'    
  
 SET @NSTEP = 10  -- GETTING DEPTID INFO FROM TEMP TABLE  
  
 BEGIN TRY  
  BEGIN TRANSACTION  
  --- IF PROCEDURE CALLED FROM CANCEL MEMO, THEN JUST DO RELATED VALIDATIONS BEFORE CANCEL  
  --- AND THEN AFTER CANCELLING THE MEMO JUST PROCEED TOWARDS VALIDATIONS TO BE DONE AFTER CANCEL  
  IF @NUPDATEMODE = 3  
  BEGIN  
  
  SET @CCMD=N' UPDATE '+@CMASTERTABLENAME+' SET CANCELLED=1,SENT_TO_HO=0,LAST_UPDATE=GETDATE() WHERE '+@CKEYFIELD1+'='''+@CXNMEMOID+''''  
     EXEC SP_EXECUTESQL @CCMD  
   
     PRINT 'ENTER CANCELXN-1'  
     SET @NSTEP = 20
     
	     

	IF OBJECT_ID ('TEMPDB..#TMPXNUID','U') IS NOT NULL
	   DROP TABLE #TMPXNUID

	SELECT XN_PRODUCT_UID
	INTO #TMPXNUID
	FROM PRD_AGENCY_MATERIAL_RECEIPT_DET  A 
	JOIN PRD_AGENCY_MATERIAL_RECEIPT_MST B ON A.MEMO_ID =B.MEMO_ID 
	WHERE A.MEMO_ID =@CKEYFIELD1
	GROUP BY XN_PRODUCT_UID


	IF EXISTS (SELECT TOP 1 'U'  
	FROM #TMPXNUID A
	JOIN PRD_TRANSFER_MAIN_SUB_DET B ON A.XN_PRODUCT_UID=B.PRODUCT_UID 
	JOIN PRD_TRANSFER_MAIN_MST C ON B.MEMO_ID =C.MEMO_ID 
	LEFT OUTER JOIN
	(
	 SELECT A.XN_PRODUCT_UID,SUM(B.QUANTITY) AS REC_QTY 
	 FROM #TMPXNUID A
	 JOIN PRD_AGENCY_MATERIAL_RECEIPT_DET B ON A.XN_PRODUCT_UID =B.XN_PRODUCT_UID 
	 JOIN PRD_AGENCY_MATERIAL_RECEIPT_MST C ON B.MEMO_ID =C.MEMO_ID 
	 WHERE C.CANCELLED =0
	 GROUP BY A.XN_PRODUCT_UID
	) REC ON REC.XN_PRODUCT_UID =A.XN_PRODUCT_UID 
	GROUP BY A.XN_PRODUCT_UID,ISNULL(REC_QTY,0)
	HAVING SUM(QUANTITY)-ISNULL(REC_QTY,0)>0
	)
	BEGIN
         SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' TRANSACTION FOUND IN TRADING....PLEASE CHECK'  
         GOTO END_PROC 
	END
   
     PRINT 'ENTER CANCELXN-2'  
     
     EXEC UPDATEPMT_PRD   
     @CXNTYPE   = 'AMRC'  
   , @CXNNO   = ''  
   , @CXNID   = @CXNMEMOID  
   , @NREVERTFLAG  = 1  
   , @NALLOWNEGSTOCK = 0  
   , @NCHKDELBARCODES = 0  
   , @CCMD    = @CCMDOUTPUT OUTPUT  
     
     
  IF (@CCMDOUTPUT <> '')  
  BEGIN  
   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'  
   GOTO END_PROC  
  END  
    
  SET @CKEYFIELDVAL1=@CXNMEMOID  
     
   GOTO UPDATE_UPC  
  END   
    
    
  SET @NSTEP=20  
  SET @CCMD=N' UPDATE '+@CTEMPMASTERTABLE+' SET AC_CODE=(CASE WHEN ISNULL(AC_CODE,'''')=''''  
      THEN NULL ELSE AC_CODE END)'  
  EXEC SP_EXECUTESQL @CCMD  
        
  -- START UPDATING XN TABLES   
  IF @NUPDATEMODE = 1 -- ADDMODE   
  BEGIN   
  
   SET @NSTEP = 20  -- GENERATING NEW KEY  
     
   IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
   BEGIN  
    -- GENERATING NEW MRR_NO    
    SET @NSAVETRANLOOP=0  
    WHILE @NSAVETRANLOOP=0  
    BEGIN  
      
     SET @NSTEP = 23  
       
     EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,  
         @CFINYEAR,0, @CMEMONOVAL OUTPUT     
       
     SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+'   
           WHERE '+@CMEMONO+'='''+@CMEMONOVAL+'''   
           AND FIN_YEAR = '''+@CFINYEAR+''' )  
         SET @NLOOPOUTPUT=0  
        ELSE  
         SET @NLOOPOUTPUT=1'  
     PRINT @CCMD  
     EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT  
    END  
  
    IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'  
    BEGIN  
       SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'   
       -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'  
       GOTO END_PROC      
    END  
  
    SET @NSTEP = 30  -- GENERATING NEW ID  
  
    -- GENERATING NEW ORDER ID  
    SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+ REPLICATE('0', 15-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL))  
    IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'    
    BEGIN  
       SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
       GOTO END_PROC  
    END  
      
    SET @NSTEP = 35  
    -- CHECK WETHER THE MEMO ID IS STILL LATER  
    IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
    BEGIN  
       SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
       GOTO END_PROC  
    END  
  
    SET @NSTEP = 40  -- UPDATING NEW ID INTO TEMP TABLES  
  
    -- UPDATING NEWLY GENERATED WORK ORDER NO AND ID IN MASTER & DETAIL TABLES  
    SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' +   
       @CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''  
    EXEC SP_EXECUTESQL @CCMD  
     
    SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''  
    PRINT @CCMD  
    EXEC SP_EXECUTESQL @CCMD  
      
    SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE3 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''  
    PRINT @CCMD  
    EXEC SP_EXECUTESQL @CCMD  
   END  
  END     -- END OF ADDMODE  
  ELSE    -- CALLED FROM EDITMODE  
  BEGIN    -- START OF EDITMODE  
   SET @NSTEP = 50  -- GETTING ID INFO FROM TEMP TABLE  
   -- GETTING ORDER_ID WHICH IS BEING EDITED  
   SET @CCMD = 'SELECT @CKEYFIELDVAL1 = MEMO_ID, @CMEMONOVAL = MEMO_NO FROM ' + @CTEMPMASTERTABLE  
   EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT',   
          @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT  
   IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )  
   BEGIN  
      SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'  
      -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'  
        
      GOTO END_PROC      
   END  
     
   SET @NSTEP = 60  -- UPDATING SENT_TO_HO FLAG TEMP TABLE  
   -- UPDATING SENTTOHO FLAG  
   SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET SENT_TO_HO = 0,LAST_UPDATE=GETDATE() '  
   EXEC SP_EXECUTESQL @CCMD  
     
   SET @NSTEP = 70  
   IF @NUPDATEMODE <> 2  
   BEGIN   
   EXEC UPDATEPMT_PRD   
      @CXNTYPE   = 'AMRC'  
    , @CXNNO   = @CMEMONOVAL  
    , @CXNID   = @CKEYFIELDVAL1  
    , @NREVERTFLAG  = 1  
    , @NALLOWNEGSTOCK = 0  
    , @NCHKDELBARCODES = 1  
    , @CCMD    = @CCMDOUTPUT OUTPUT  
     
   END  
   IF @NUPDATEMODE=3  
   BEGIN   
    IF @CCMDOUTPUT <> ''  
    BEGIN  
     SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'  
     GOTO END_PROC  
    END  
   END  
   ELSE  
    SET @CCMDOUTPUT=''  
  END     -- END OF EDITMODE  
  
  SET @NSTEP = 95  
  
  -- CHECK WETHER THE MEMO ID IS STILL LATER  
  IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
  BEGIN  
   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
   GOTO END_PROC  
  END  
  
  -- UPDATING MASTER TABLE (PIM01106) FROM TEMP TABLE  
  SET @NSTEP = 100  -- UPDATING MASTER TABLE  
  
        
  EXEC UPDATEMASTERXN   
     @CSOURCEDB = @CTEMPDBNAME  
   , @CSOURCETABLE = @CTEMPMASTERTABLENAME  
   , @CDESTDB  = ''  
   , @CDESTTABLE = @CMASTERTABLENAME  
   , @CKEYFIELD1 = @CKEYFIELD1  
   , @BALWAYSUPDATE = 1  
     
  -- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE  
  SET @NSTEP = 110  -- UPDATING TRANSACTION TABLE  
  
       IF @NUPDATEMODE = 2 -- EDIT MODE   
        GOTO END_PROC ----  
          
          
  -- UPDATING ROW_ID IN TEMP TABLES  
  SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())  
       WHERE LEFT(ROW_ID,5) = ''LATER'''  
  EXEC SP_EXECUTESQL @CCMD  
  
       ---------------  
          SET @CCMD=N'ALTER TABLE '+@CTEMPDETAILTABLE3 +' ADD OLD_ROW_ID VARCHAR(40)'   
    PRINT @CCMD   
          EXEC SP_EXECUTESQL @CCMD    
               
          SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE3 + ' SET OLD_ROW_ID=ROW_ID,ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(38), NEWID())    
          WHERE LEFT(ROW_ID,5) = ''LATER'''  
          PRINT @CCMD    
          EXEC SP_EXECUTESQL @CCMD    
      
      
    SET @CCMD = N'UPDATE B SET REF_MATERIAL_ROW_ID=A.ROW_ID FROM ' + @CTEMPDETAILTABLE3 + ' A  
    JOIN ' + @CTEMPDETAILTABLE1 + ' B ON A.OLD_ROW_ID=B.REF_MATERIAL_ROW_ID'   
    PRINT @CCMD   
          EXEC SP_EXECUTESQL @CCMD    
                
                
         SET @CCMD = N'DELETE  A  FROM ' + @CDETAILTABLENAME3 + ' A  
     WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + ''''   
   EXEC SP_EXECUTESQL @CCMD  
  
      
       ----------------  
  
  -- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE  
  SET @NSTEP = 114  -- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES  
  
  SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME1 + '   
     WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + ''''   
  EXEC SP_EXECUTESQL @CCMD  
          
          
         EXEC UPDATEMASTERXN   
     @CSOURCEDB = @CTEMPDBNAME  
   , @CSOURCETABLE = @CTEMPDETAILTABLENAME3  
   , @CDESTDB  = ''  
   , @CDESTTABLE = @CDETAILTABLENAME3  
   , @CKEYFIELD1 = 'ROW_ID'  
   , @BALWAYSUPDATE = 1  
     
  -- INSERTING/UPDATING THE ENTRIES IN PID01106 TABLE FROM TEMPTABLE  
  SET @NSTEP = 115  -- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES  
  
  EXEC UPDATEMASTERXN   
     @CSOURCEDB = @CTEMPDBNAME  
   , @CSOURCETABLE = @CTEMPDETAILTABLENAME1  
   , @CDESTDB  = ''  
   , @CDESTTABLE = @CDETAILTABLENAME1  
   , @CKEYFIELD1 = 'ROW_ID'  
   , @BALWAYSUPDATE = 1  
     
     
  SET @NSTEP = 120  -- UPDATING NEW XN ID  
    
  ----  
  UPDATE PRD_AGENCY_ROW_MATERIAL_RECEIPT_DET SET AMOUNT=REC_QTY*RATE WHERE  DEFAULT_BASIS=2 AND MEMO_ID=@CKEYFIELDVAL1      
      
  DECLARE @NNEW_RATE NUMERIC(10,2),@CUOM CHAR(3)  
  IF OBJECT_ID( 'TEMPDB..#TMPNEWRATE','U') IS NOT NULL  
     DROP TABLE #TMPNEWRATE  
  
  SELECT  A.MEMO_ID , B.WORK_ORDER_ID ,A.PARA1_CODE,A.PARA2_CODE,SUM(A.AMOUNT) AS AMOUNT,COUNT(*) AS TROWS ,SUM(REC_QTY) AS REC_QTY  
  INTO #TMPNEWRATE  
  --@CUOM=UOM_NAME,@NNEW_RATE=SUM(CONVERT(NUMERIC(10,2),A.AMOUNT/ COUNT(*)))   
  FROM PRD_AGENCY_ROW_MATERIAL_RECEIPT_DET A  
  JOIN  
  (  
  SELECT B.REF_MATERIAL_ROW_ID, C.WORK_ORDER_ID,B.MEMO_ID ,COUNT(*) AS TROWS   
  FROM PRD_AGENCY_MATERIAL_RECEIPT_DET B   
  JOIN PRD_SKU C ON B.XN_PRODUCT_UID=C.PRODUCT_UID  
  JOIN  ARTICLE AR ON AR.ARTICLE_CODE=C.ARTICLE_CODE  
  JOIN UOM ON UOM.UOM_CODE=AR.UOM_CODE  
  WHERE B.MEMO_ID=@CKEYFIELDVAL1 AND UOM_NAME='PCS'  
  AND AR.CODING_SCHEME=3  
    
  GROUP BY B.REF_MATERIAL_ROW_ID,C.WORK_ORDER_ID,B.MEMO_ID  
  )B ON A.MEMO_ID =B.MEMO_ID AND A.ROW_ID =B.REF_MATERIAL_ROW_ID  
    WHERE A.AMOUNT <>0   
        GROUP BY A.MEMO_ID , B.WORK_ORDER_ID ,A.PARA1_CODE,A.PARA2_CODE,A.AMOUNT   
  
  
  IF NOT EXISTS (SELECT TOP 1 'U' FROM #TMPNEWRATE)  
  BEGIN  
         
  INSERT INTO #TMPNEWRATE       
  SELECT A.MEMO_ID , B.WORK_ORDER_ID ,A.PARA1_CODE,A.PARA2_CODE,SUM(A.AMOUNT) AS AMOUNT ,SUM(TROWS) AS TROWS,SUM(A.REC_QTY) AS REC_QTY    
  --@CUOM=UOM_NAME,@NNEW_RATE=SUM(CONVERT(NUMERIC(10,2),A.AMOUNT/ COUNT(*)))   
  FROM PRD_AGENCY_ROW_MATERIAL_RECEIPT_DET A  
  JOIN  
  (  
  SELECT B.REF_MATERIAL_ROW_ID, C.WORK_ORDER_ID,B.MEMO_ID ,COUNT(*) AS TROWS   
  FROM PRD_AGENCY_MATERIAL_RECEIPT_DET B   
  JOIN PRD_SKU C ON B.XN_PRODUCT_UID=C.PRODUCT_UID  
  JOIN  ARTICLE AR ON AR.ARTICLE_CODE=C.ARTICLE_CODE  
  JOIN UOM ON UOM.UOM_CODE=AR.UOM_CODE  
  WHERE B.MEMO_ID=@CKEYFIELDVAL1  
  AND AR.CODING_SCHEME<>3 
    
  GROUP BY B.REF_MATERIAL_ROW_ID,C.WORK_ORDER_ID,B.MEMO_ID  
  )B ON A.MEMO_ID =B.MEMO_ID AND A.ROW_ID =B.REF_MATERIAL_ROW_ID  
        WHERE A.AMOUNT <>0  
        GROUP BY A.MEMO_ID , B.WORK_ORDER_ID ,A.PARA1_CODE,A.PARA2_CODE,A.AMOUNT,A.REC_QTY  
      
-- SELECT * FROM #TMPNEWRATE  
  
  END  
  
   
  
  
  IF  EXISTS (SELECT TOP 1 'U' FROM #TMPNEWRATE)  
  BEGIN  
  IF EXISTS (SELECT TOP 1 'U' FROM  PRD_AGENCY_MATERIAL_RECEIPT_DET A  
  JOIN PRD_SKU C ON A.XN_PRODUCT_UID=C.PRODUCT_UID  
  JOIN  ARTICLE AR ON AR.ARTICLE_CODE=C.ARTICLE_CODE  
  JOIN UOM ON UOM.UOM_CODE=AR.UOM_CODE  
  WHERE UOM_NAME='PCS' AND A.MEMO_ID=@CKEYFIELDVAL1 AND AR.CODING_SCHEME=3 )  
  BEGIN  
  UPDATE A SET RATE=RATE+ (TMP.AMOUNT/TROWS )/TMP.REC_QTY,  
               AMOUNT=(RATE+ (TMP.AMOUNT/TROWS )/TMP.REC_QTY)* QUANTITY     
  FROM PRD_AGENCY_MATERIAL_RECEIPT_DET A  
  JOIN PRD_SKU C ON A.XN_PRODUCT_UID=C.PRODUCT_UID  
  JOIN  ARTICLE AR ON AR.ARTICLE_CODE=C.ARTICLE_CODE  
  JOIN UOM ON UOM.UOM_CODE=AR.UOM_CODE  
  JOIN #TMPNEWRATE TMP ON TMP.WORK_ORDER_ID =C.WORK_ORDER_ID   
  AND TMP.MEMO_ID =A.MEMO_ID 
  --AND TMP.ROW_ID  =A.REF_MATERIAL_ROW_ID
  AND TMP.PARA1_CODE =C.COM_PARA1_CODE AND TMP.PARA2_CODE =C.COM_PARA2_CODE    
  WHERE A.MEMO_ID=@CKEYFIELDVAL1 AND UOM.UOM_NAME ='PCS' AND AR.CODING_SCHEME=3   
  END  
  ELSE  
  BEGIN  
  DECLARE @TQTY NUMERIC(10,3),@TAMOUNT AS NUMERIC (10,2) 
  
  SET @TAMOUNT=(SELECT SUM(AMOUNT) FROM #TMPNEWRATE)
  
  SELECT @TQTY=SUM(A.QUANTITY) FROM PRD_AGENCY_MATERIAL_RECEIPT_DET A
  JOIN PRD_SKU C ON A.XN_PRODUCT_UID=C.PRODUCT_UID  
  JOIN  ARTICLE AR ON AR.ARTICLE_CODE=C.ARTICLE_CODE  
  JOIN UOM ON UOM.UOM_CODE=AR.UOM_CODE 
  WHERE A.MEMO_ID=@CKEYFIELDVAL1 
  AND AR.CODING_SCHEME<>3 
  
  
  
  UPDATE A SET RATE=RATE+(@TAMOUNT )/@TQTY,  
                  AMOUNT=(RATE+(@TAMOUNT )/@TQTY)* QUANTITY      
  FROM PRD_AGENCY_MATERIAL_RECEIPT_DET A  
  JOIN PRD_SKU C ON A.XN_PRODUCT_UID=C.PRODUCT_UID  
  JOIN  ARTICLE AR ON AR.ARTICLE_CODE=C.ARTICLE_CODE  
  JOIN UOM ON UOM.UOM_CODE=AR.UOM_CODE  
  --JOIN #TMPNEWRATE TMP ON TMP.WORK_ORDER_ID =C.WORK_ORDER_ID   
  --AND TMP.MEMO_ID =A.MEMO_ID 
  --AND TMP.ROW_ID  =A.REF_MATERIAL_ROW_ID
  --AND TMP.PARA1_CODE =C.COM_PARA1_CODE AND TMP.PARA2_CODE =C.COM_PARA2_CODE   
  WHERE A.MEMO_ID=@CKEYFIELDVAL1 
  AND AR.CODING_SCHEME<>3 
   

    
  END  
  END  
    
    
    
     
  EXEC SP_GEN_XN_PRODUCT_UID 'AMR',@CKEYFIELDVAL1,@CERRORMSG OUTPUT   
  IF ISNULL(@CERRORMSG,'')<>''  
    GOTO END_PROC   
     
     
  
  SET @NSTEP = 125  -- UPDATING STOCK  
  
  EXEC UPDATEPMT_PRD   
     @CXNTYPE   = 'AMRC'  
   , @CXNNO   = @CMEMONOVAL  
   , @CXNID   = @CKEYFIELDVAL1  
   , @NREVERTFLAG  = 0  
   , @NALLOWNEGSTOCK = 0  
   , @NCHKDELBARCODES = 1  
   , @CCMD    = @CCMDOUTPUT OUTPUT  
  IF (@CCMDOUTPUT <> '')  
  BEGIN  
   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'  
   GOTO END_PROC  
  END  
    
    
   EXEC VALIDATEPRD  
   @CXNTYPE='REC',  
   @CXNID=@CKEYFIELDVAL1,  
   @CCMD=@CCMD OUTPUT  
      
   IF ISNULL(@CCMD,'')<>''  
   BEGIN  
  SET @CERRORMSG=@CCMD  
  GOTO END_PROC  
   END   
   
  
  UPDATE_UPC: 
   IF @NUPDATEMODE IN(1,3)
	BEGIN
	    
	    DECLARE @ENABLEUPC VARCHAR(10)
	    SELECT TOP 1 @ENABLEUPC=VALUE FROM CONFIG WHERE CONFIG_OPTION='ENABLED_UPC' 
	    
	    IF ISNULL(@ENABLEUPC,'')='1'
	    BEGIN
	       
	       EXEC SAVETRAN_PRD_AGENCY_RECUPC   
			    @NUPDATEMODE=@NUPDATEMODE,
                @NSPID=@NSPID,
                @CMEMO_ID=@CKEYFIELDVAL1, 
                @DEPT_ID= @CLOCATIONID,
			    @CERRORMSG    = @CERRORMSG OUTPUT  
		
		
		IF @CERRORMSG <> ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE UNIQUE STOCK STATUS IN PMT....'
				GOTO END_PROC
			END	 
	   
	    IF @NUPDATEMODE=1
	    BEGIN
	         
	        IF EXISTS (SELECT TOP 1 'U' FROM PRD_AGENCY_ROW_MATERIAL_RECEIPT_DET A
	         LEFT OUTER JOIN
	         (
	          SELECT UPC.REF_ROW_ID,SUM(QUANTITY) AS QUANTITY 
	          FROM PRD_AGENCY_MATERIAL_RECEIPT_UPC UPC
	          WHERE UPC.MEMO_ID=@CKEYFIELDVAL1
	          GROUP BY UPC.REF_ROW_ID
	         ) B ON A.ROW_ID=B.REF_ROW_ID
	         WHERE A.MEMO_ID=@CKEYFIELDVAL1
	         AND A.REC_QTY-ISNULL(QUANTITY,0)<>0
	         )
	         BEGIN
	            SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' PLEASE CHECK UNIQUE BARCODE....'
	            GOTO END_PROC
	         END
	         
	         
		         

			IF EXISTS (SELECT TOP 1 'U' FROM PRD_AGENCY_ROW_MATERIAL_RECEIPT_DET  A
			JOIN PRD_AGENCY_MATERIAL_RECEIPT_MST B ON A.MEMO_ID =B.MEMO_ID 
			LEFT  OUTER JOIN
			(
			 SELECT REF_MATERIAL_ROW_ID  , MEMO_ID ,SUM(QUANTITY) AS QTY
			 FROM PRD_AGENCY_MATERIAL_RECEIPT_DET
			 WHERE MEMO_ID=@CKEYFIELDVAL1
			 GROUP BY REF_MATERIAL_ROW_ID , MEMO_ID
			) C ON A.MEMO_ID =C.MEMO_ID AND A.ROW_ID=C.REF_MATERIAL_ROW_ID 
			WHERE A.MEMO_ID=@CKEYFIELDVAL1
			AND A.REC_QTY  <>ISNULL(C.QTY,0)
			 )
	         BEGIN
	            SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' PLEASE CHECK ROW MATERIAL QTY....'
	            GOTO END_PROC
	         END

	          
	    END
	 END
  	
	GOTO END_PROC
	END
    
 END TRY  
   
 BEGIN CATCH  
  SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(STR(@NSTEP))) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()  
    
  GOTO END_PROC  
 END CATCH  
   
END_PROC:  
--SELECT * FROM PRD_SKU  WHERE PRODUCT_UID IN  
--(  
--SELECT XN_PRODUCT_UID  FROM PRD_AGENCY_MATERIAL_RECEIPT_DET WHERE MEMO_ID='WH01117000000000000059'  
  
--)  
--SELECT B.WORK_ORDER_ID,SUM(A.RATE*A.QUANTITY)   FROM PRD_AGENCY_MATERIAL_RECEIPT_DET A  
--JOIN PRD_SKU B ON A.XN_PRODUCT_UID =B.PRODUCT_UID  
--WHERE MEMO_ID='WH01117000000000000059'  
--GROUP BY B.WORK_ORDER_ID   
 -- SELECT RATE, * FROM PRD_AGENCY_ROW_MATERIAL_RECEIPT_DET WHERE MEMO_ID='0101116000000000000016' 
--SELECT RATE,QUANTITY, * FROM PRD_AGENCY_MATERIAL_RECEIPT_DET WHERE MEMO_ID='0101116000000000000016'  
  
  
 IF ISNULL(@CCMDOUTPUT,'') = ''  
 BEGIN  
  INSERT @OUTPUT ( ERRMSG, MEMO_ID)  
    VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )  
  
  SELECT * FROM @OUTPUT   
 END  
 ELSE  
  EXEC SP_EXECUTESQL @CCMDOUTPUT  
  
 IF @@TRANCOUNT>0  
 BEGIN  
  IF ISNULL(@CCMDOUTPUT,'') = '' AND ISNULL(@CERRORMSG,'') = ''  
   COMMIT TRANSACTION  
  ELSE  
   ROLLBACK  
 END  
   
 EXEC SP_DROPTEMPTABLES_XNS 'XNSAMRC',@NSPID    
END
