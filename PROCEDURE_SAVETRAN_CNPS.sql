create PROCEDURE SAVETRAN_CNPS --(LocId 3 digit changes by Sanjay : 21-11-2024) ---No changes were done in this procedure by assigned DEveloper
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				VARCHAR(50),
	@CMEMONOPREFIX		VARCHAR(50)='',
	@CFINYEAR			VARCHAR(10)='',
	@CMACHINENAME		VARCHAR(100)='',
	@CWINDOWUSERNAME	VARCHAR(100)='',
	@CWIZAPPUSERCODE	VARCHAR(10)='0000000',
	@CMEMOID			VARCHAR(40)=''

)
--WITH ENCRYPTION
AS
BEGIN
	-- @NUPDATEMODE:	1- NEW DEBITNOTE PS ADDED,  USE RAJ_HO
	--					2- EDIT A GIVEN PS
	--					3- CURRENT MEMO CANCELLED, 
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(4),
			@CLOCATIONID			VARCHAR(4),
			@CHODEPTID				VARCHAR(4),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					VARCHAR(10),
			@BNEGSTOCKFOUND			BIT,
			@CMSG					VARCHAR(MAX),
			@BPURLOC				BIT,
			@CPRIFIX				VARCHAR(10),
			@BPREFIXLZEROS			BIT,@CLOCID	VARCHAR(4)

	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	SET @NSTEP = 0		-- SETTTING UP ENVIRONMENT
	-- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
	SET @CTEMPDBNAME = ''

	SET @CMASTERTABLENAME	= 'CNPS_MST'
	SET @CDETAILTABLENAME	= 'CNPS_DET'

	SET @CTEMPMASTERTABLENAME	= 'TEMP_'+@CMASTERTABLENAME+'_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME	= 'TEMP_'+@CDETAILTABLENAME+'_'+LTRIM(RTRIM(STR(@NSPID)))

	SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME
	
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'PS_ID'
	SET @CMEMONO			= 'PS_NO'
	SET @NMEMONOLEN			= 10
	
	IF @NUPDATEMODE<>3
	BEGIN
		SET @CCMD = 'SELECT @CLOCID = location_code FROM ' + @CTEMPMASTERTABLE --MANISH
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD, N'@CLOCID VARCHAR(4) OUTPUT', @CLOCID OUTPUT
	END	
	ELSE
		SELECT @cLocId=location_code FROM cnps_mst (NOLOCK) WHERE ps_id=@cMemoId

	SET @CLOCATIONID= @CLOCID
			
	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		

	SET @NSTEP = 5		-- GETTING DEPTID INFO FROM TEMP TABLE
	
	
	
	SET @BPREFIXLZEROS=0
    
	
	BEGIN TRANSACTION
	
	BEGIN TRY

	
					
		IF OBJECT_ID('TEMPDB..#TMPPMT','U') IS NOT NULL
			DROP TABLE #TMPPMT
		
		SELECT PRODUCT_CODE,QUANTITY_IN_STOCK as XN_QTY,DEPT_ID ,BIN_ID INTO #TMPPMT FROM pmt01106 WHERE 1=2

		IF OBJECT_ID('TEMPDB..#BARCODE_NETQTY','U') IS NOT NULL
			DROP TABLE #BARCODE_NETQTY						   
		
		SELECT PRODUCT_CODE,QUANTITY_IN_STOCK as XN_QTY,DEPT_ID ,BIN_ID  INTO #BARCODE_NETQTY FROM PMT01106 WHERE 1=2

		IF @NUPDATEMODE IN (3)			
		BEGIN
			SET @NSTEP = 10
			
			IF ISNULL(@CMEMOID,'') = ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(@NSTEP)) + ' MEMO ID REQUIRED .....CANNOT PROCEED'
				GOTO END_PROC  		
			END
			
			--#TMPPMT
			INSERT INTO #BARCODE_NETQTY(PRODUCT_CODE,XN_QTY,DEPT_ID,BIN_ID)
			SELECT A.PRODUCT_CODE ,
			       (-1)* SUM(A.QUANTITY) AS XN_QTY,
				   b.location_Code AS DEPT_ID,A.BIN_ID 
			FROM CNPS_DET A (NOLOCK) 
			JOIN CNPS_MST B ON A.PS_ID =B.PS_ID
			WHERE A.PS_ID=@CMEMOID
			GROUP BY A.PRODUCT_CODE, b.location_Code,A.BIN_ID 

			EXEC SP3S_UPDATE_PMTSTOCK_CNPS
			@BREVERTFLAG=1,
			@BALLOWNEGSTOCK=0,
			@CERRORMSG= @CERRORMSG OUTPUT ,
			@BNEGSTOCKFOUND=@BNEGSTOCKFOUND OUTPUT 
			
			IF ISNULL(@CERRORMSG,'')<>''
			GOTO END_PROC

			
			SET @NSTEP = 22
			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE ' + @CMASTERTABLENAME + ' SET CANCELLED = 1,LAST_UPDATE=GETDATE() ' + 
						N' WHERE ' + @CKEYFIELD1 + ' = ''' + @CMEMOID + ''''
			EXEC SP_EXECUTESQL @CCMD
			
			SET @CKEYFIELDVAL1=@CMEMOID

			SET @nStep='30'
			EXEC SP3S_upd_qty_lastupdate
			@nUpdateMode=3,
			@cXnType='CNPS',
			@cMasterTable='CNPS_mst',
			@cMemoIdCol='PS_id',
			@cMemoId=@CKEYFIELDVAL1,
			@CERRORMSG=@CERRORMSG OUTPUT
				
			GOTO END_PROC
		END
		
		SET @NSTEP = 42
		
	
		SELECT a.PRODUCT_CODE ,A.ROW_ID ,CAST('' AS VARCHAR(100)) AS BATCH_PRODUCT_CODE
		INTO #TMPFIXCNPS
		FROM CNPS_DET   A
		where 1=2
		
		SET @CCMD=N' insert into #TMPFIXCNPS(PRODUCT_CODE,ROW_ID,BATCH_PRODUCT_CODE)
		    select a.PRODUCT_CODE ,A.ROW_ID ,'''' as BATCH_PRODUCT_CODE from '+@CTEMPDETAILTABLE+' a
		    join sku_names b (nolock) on a.product_code =b.product_code
		    where ISNULL(b.sn_barcode_coding_scheme,0) =1  and a.PRODUCT_CODE not like ''%@%''
		 '
		 print @CCMD
		 exec sp_executesql @CCMD
		 
		 if @NUPDATEMODE<>1
		begin
		    
			DELETE A FROM #TMPFIXCNPS A WHERE LEFT(A.ROW_ID,5)<>'LATER'

		end
		
		 
		 IF EXISTS (SELECT TOP 1 'U' FROM #TMPFIXCNPS WHERE BATCH_PRODUCT_CODE='')
		    BEGIN
		     
               UPDATE A SET BATCH_PRODUCT_CODE=B.BATCH_PRODUCT_CODE
			   FROM #TMPFIXCNPS A
			   JOIN
				(
				  SELECT  B.AC_CODE,B.PRODUCT_CODE AS BATCH_PRODUCT_CODE,
						  LEFT(B.PRODUCT_CODE, ISNULL(NULLIF(CHARINDEX ('@',B.PRODUCT_CODE)-1,-1),LEN(B.PRODUCT_CODE ))) AS PRODUCT_CODE, 
						  SR=ROW_NUMBER() OVER (PARTITION BY  LEFT(B.PRODUCT_CODE, ISNULL(NULLIF(CHARINDEX ('@',B.PRODUCT_CODE)-1,-1),LEN(B.PRODUCT_CODE )))  
						                       ORDER BY cast(substring(b.product_code,CHARINDEX ('@',B.PRODUCT_CODE)+3,len(B.PRODUCT_CODE)) as numeric(6,0)) desc  )
				  FROM SKU B (NOLOCK)
				  JOIN #TMPFIXCNPS TMP ON  LEFT(B.PRODUCT_CODE, ISNULL(NULLIF(CHARINDEX ('@',B.PRODUCT_CODE)-1,-1),LEN(B.PRODUCT_CODE )))=TMP.PRODUCT_CODE
				  WHERE CHARINDEX('@',B.PRODUCT_CODE )<>0 and tmp.BATCH_PRODUCT_CODE=''
				) B ON  A.PRODUCT_CODE =B.PRODUCT_CODE AND B.SR =1
				where  a.BATCH_PRODUCT_CODE=''
				
				
			 SET @CCMD=N'UPDATE A SET product_code =BATCH_PRODUCT_CODE
				FROM '+@CTEMPDETAILTABLE+' A
				JOIN #TMPFIXCNPS TMP ON A.row_id =TMP.ROW_ID AND A.product_code =TMP.product_code
				WHERE TMP.BATCH_PRODUCT_CODE <>'''' '
             print @CCMD
		    exec sp_executesql @CCMD

					
			END


			
	
		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	
		
			SET @CCMD = 'SELECT @CMEMODEPTID = location_Code FROM ' + @CTEMPMASTERTABLE --MANISH
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT', 
							   @CMEMODEPTID OUTPUT
			IF (@CMEMODEPTID IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'
				  GOTO END_PROC  		
			END
			
			-- GENERATING NEW JOB ORDER NO		
			SET @NSAVETRANLOOP=0
			WHILE @NSAVETRANLOOP=0
			BEGIN
			
				SET @NSTEP = 45		-- GENERATING NEW KEY
				
				EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX,@BPREFIXLZEROS,
								@CFINYEAR,0, @CMEMONOVAL OUTPUT   
			
				SET @NSTEP = 50
				
				PRINT @CMEMONOVAL
				SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
										WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
										AND FIN_YEAR = '''+@CFINYEAR+''' )
								SET @NLOOPOUTPUT=0
							ELSE
								SET @NLOOPOUTPUT=1'
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
			END

			IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
				  GOTO END_PROC  		
			END

			SET @NSTEP = 55		-- GENERATING NEW ID
			-- GENERATING NEW JOB ORDER ID
			SET @CKEYFIELDVAL1 = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
			
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
				  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
				  GOTO END_PROC
			END

			SET @NSTEP = 60		-- UPDATING NEW ID INTO TEMP TABLES

			-- UPDATING NEWLY GENERATED JOB ORDER NO AND JOB ORDER ID IN PIM AND PID TEMP TABLES
			SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
						@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
		
			SET @NSTEP = 65
			
			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
			
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 70
			
			-- GETTING DEPT_ID FROM TEMP MASTER TABLE
		
		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
		
			SET @NSTEP = 75		-- GETTING ID INFO FROM TEMP TABLE

			-- GETTING DEPT_ID FROM TEMP MASTER TABLE
			SET @CCMD = 'SELECT @CMEMODEPTID = location_code FROM ' + @CMASTERTABLENAME 
			
			EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT', 
							   @CMEMODEPTID OUTPUT
							   
			IF (@CMEMODEPTID IS NULL)
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'
				  GOTO END_PROC  		
			END

			SET @NSTEP = 80
			
			-- GETTING MEMO ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ' + @CKEYFIELD1 + ', @CMEMONOVAL = ' + @CMEMONO + ' FROM '
						+ (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME + ' WHERE PS_ID = ''' + @CMEMOID + '''' 
								ELSE @CTEMPMASTERTABLE END )
			
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
							   
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  GOTO END_PROC  		
			END
			
			SET @NSTEP = 85		-- STORING OLD STATUS OF BARCODES 
			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET LAST_UPDATE=GETDATE() '
			EXEC SP_EXECUTESQL @CCMD
			
			-- ENTRY IN AUDIT TRAIL (ONLY WHEN USER EXPLICITLY CLICKED ON EDIT BUTTON)
			SET @NSTEP = 90		-- AUDIT TRIAL ENTRY


			--REVERT PMT 
				--#TMPPMT
			INSERT INTO #TMPPMT(PRODUCT_CODE,XN_QTY,DEPT_ID,BIN_ID)
			SELECT A.PRODUCT_CODE ,
			       (-1)* SUM(A.QUANTITY) AS XN_QTY,
				   b.location_Code AS DEPT_ID,A.BIN_ID 
			FROM CNPS_DET A (NOLOCK) 
			JOIN CNPS_MST B ON A.PS_ID =B.PS_ID
			WHERE A.PS_ID=@CKEYFIELDVAL1
			GROUP BY A.PRODUCT_CODE, b.location_Code,A.BIN_ID 

		END					-- END OF EDITMODE

		SET @NSTEP = 98
		
		-- RECHECKING IF ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END

		SET @NSTEP = 100		-- UPDATING MASTER TABLE

		SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET EDT_USER_CODE=(CASE WHEN ISNULL(EDT_USER_CODE,'''')=''''
					 THEN ''0000000'' ELSE EDT_USER_CODE END)'
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD

		IF @NUPDATEMODE IN (1,2)
		BEGIN
			SET @nSTEP = 102

			SET @CCMD = '	UPDATE a SET total_quantity=b.total_quantity FROM ' + @CTEMPMASTERTABLE + ' A WITH (ROWLOCK) 
			JOIN (SELECT sum(quantity) as total_quantity FROM ' + @CTEMPDETAILTABLE + ' b (NOLOCK)  ) b on 1=1
					'
			exec sp_executesql @CCMD

			SET @nSTEP = '102.7'
			EXEC SP3S_upd_qty_lastupdate
			@nUpdateMode=@NUPDATEMODE,
			@cXnType='CNPS',
			@nSpId=@nSpId,
			@cMasterTable='CNPS_MST',
			@cMemoIdCol='PS_ID',
			@cMemoId=@CKEYFIELDVAL1,
			@cXnDtCol='ps_dt',
			@CERRORMSG=@CERRORMSG OUTPUT

			IF ISNULL(@CERRORMSG,'')<>''
		       GOTO END_PROC

		END		
		SET @NSTEP = 105
		
		EXEC UPDATEMASTERXN--UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			,@BALWAYSUPDATE = 1

		-- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE
		SET @NSTEP = 110		-- UPDATING TRANSACTION TABLE

		-- UPDATING ROW_ID IN TEMP TABLES
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE LEFT(ROW_ID,5) = ''LATER'''
		EXEC SP_EXECUTESQL @CCMD

		-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
		SET @NSTEP = 114		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES

		SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + ' 
					WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
					AND ROW_ID IN 
					(
						SELECT A.ROW_ID 
						FROM ' + @CDETAILTABLENAME + ' A 
						LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B ON A.ROW_ID = B.ROW_ID
						WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
						AND   B.ROW_ID IS NULL
					)'
		EXEC SP_EXECUTESQL @CCMD

		SET @NSTEP = 120		-- UPDATING TRANSACTION TABLE

		-- INSERTING/UPDATING THE ENTRIES IN ACTUAL TABLE FROM TEMPTABLE
		SET @NSTEP = 125		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

		EXEC UPDATEMASTERXN--UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME
			, @CKEYFIELD1	= 'ROW_ID'
			,@BALWAYSUPDATE = 1

	LBLUPDATESTOCK:
		-- UPDATING STOCK OF PMT W.R.T. CURRENT MEMO
		SET @NSTEP = 130		-- UPDATING PMT TABLE

		

				--#TMPPMT
			INSERT INTO #BARCODE_NETQTY(PRODUCT_CODE,XN_QTY,DEPT_ID,BIN_ID)
			SELECT PRODUCT_CODE ,SUM(XN_QTY) AS XN_QTY,DEPT_ID,BIN_ID FROM
			(
			SELECT PRODUCT_CODE ,XN_QTY,DEPT_ID,BIN_ID
			FROM #TMPPMT
			UNION ALL
			SELECT A.PRODUCT_CODE ,
			       SUM(A.QUANTITY) AS XN_QTY,
				   b.location_Code AS DEPT_ID,A.BIN_ID 
			FROM CNPS_DET A (NOLOCK) 
			JOIN CNPS_MST B (NOLOCK) ON A.PS_ID =B.PS_ID
			WHERE A.PS_ID=@CKEYFIELDVAL1
			GROUP BY A.PRODUCT_CODE, b.location_Code,A.BIN_ID 
			) A
			GROUP BY PRODUCT_CODE,DEPT_ID,BIN_ID 

			
			EXEC SP3S_UPDATE_PMTSTOCK_CNPS
			@BREVERTFLAG=0,
			@BALLOWNEGSTOCK=0,
			@CERRORMSG= @CERRORMSG OUTPUT ,
			@BNEGSTOCKFOUND=@BNEGSTOCKFOUND OUTPUT 
			
			IF ISNULL(@CERRORMSG,'')<>''
			GOTO END_PROC

				
		--EXEC UPDATERFNET 'DNPS',@CKEYFIELDVAL1
		
		-- VALIDATING ENTRIES 
		
		SET @NSTEP = 140	
		DECLARE @STR VARCHAR(MAX),@STR1 VARCHAR(MAX)
		SET @STR=NULL
		SET @STR1=NULL

		SELECT  @STR1=PS_ID,@STR =  COALESCE(@STR +  '/ ', ' ' ) + (''+C.UOM_NAME+': '+CAST(SUM(QUANTITY) AS VARCHAR) +' ')  
		 FROM CNPS_DET A 
		 JOIN SKU S ON S.PRODUCT_CODE=A.PRODUCT_CODE 
		 JOIN ARTICLE B ON S.ARTICLE_CODE=B.ARTICLE_CODE
		JOIN UOM C ON C.UOM_CODE=B.UOM_CODE
		WHERE PS_ID=@CKEYFIELDVAL1 GROUP BY C.UOM_NAME ,PS_ID
		
		UPDATE CNPS_MST SET TOTAL_QUANTITY_STR =@STR WHERE PS_ID =@STR1
		
		
		SET @NSTEP = 175		-- VALIDATING ENTRIES

		EXEC VALIDATEXN
			  @CXNTYPE	= 'CNPS'  
			, @CXNID	= @CKEYFIELDVAL1
			, @NUPDATEMODE = @NUPDATEMODE			
			, @CCMD		= @CCMDOUTPUT OUTPUT

		IF @CCMDOUTPUT <> ''
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(@NSTEP)) + ' DATA VALIDATION FAILED : ' + @CCMDOUTPUT + '...'
			GOTO END_PROC
		END
		
		
	IF EXISTS(SELECT TOP 1 A.ps_id FROM cnps_det  A (nolock) JOIN cnps_mst   B (nolock) ON  A.ps_id=B.ps_id
			  JOIN SKU (nolock) ON SKU.PRODUCT_CODE=A.PRODUCT_CODE
			  WHERE a.ps_id=@CKEYFIELDVAL1	and  (ISNULL(B.MEMO_TYPE,0)<>2 AND ISNULL(SKU.ER_FLAG,0)=2) OR (ISNULL(B.MEMO_TYPE,0)=2 AND ISNULL(SKU.ER_FLAG,0)<>2))
	BEGIN
		
		 declare @CERRORPC varchar(50)
		SELECT TOP 1 @CERRORPC=A.PRODUCT_CODE FROM cnps_det A (nolock) JOIN cnps_mst  B (nolock) ON  A.ps_id=B.ps_id
 	    JOIN SKU ON SKU.PRODUCT_CODE=A.PRODUCT_CODE
		WHERE a.ps_id=@CKEYFIELDVAL1 and (ISNULL(B.MEMO_TYPE,0)<>2 AND ISNULL(SKU.ER_FLAG,0)=2) OR (ISNULL(B.MEMO_TYPE,0)=2 AND ISNULL(SKU.ER_FLAG,0)<>2)
			  
		SET @CERRORMSG='MEMO TYPE OF ITEM CODE :'+@CERRORPC+' DOES NOT MATCH WITH THAT OF MEMO....PLEASE CHECK'
		GOTO END_PROC
	END
	



		-- AFTER SUCCESSFUL SAVING , JUST DROP THE TEMP TABLES CREATED BY APPLICATION
		GOTO END_PROC
		
	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'
		GOTO END_PROC
	END CATCH
	
END_PROC:
	
	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
		BEGIN
			commit TRANSACTION
			  DELETE A  FROM XNTYPE_CHECKSUM_MST A  WITH (ROWLOCK)  WHERE SP_ID=@NSPID
		END	
		ELSE
		begin
			ROLLBACK
			 DELETE A  FROM XNTYPE_CHECKSUM_MST A  WITH (ROWLOCK)  WHERE SP_ID=@NSPID
		end
	END

  
	

	IF ISNULL(@BNEGSTOCKFOUND,0)=0
	BEGIN
		INSERT @OUTPUT (ERRMSG,MEMO_ID)
				VALUES (ISNULL(@CERRORMSG,''),ISNULL(@CKEYFIELDVAL1,''))
		SELECT * FROM @OUTPUT	
	END	
	

	
	
	IF @NUPDATEMODE<>3
	BEGIN
		SET @CCMD = N'DROP TABLE '+ @CTEMPMASTERTABLENAME
		EXEC SP_EXECUTESQL @CCMD
		
		SET @CCMD = N'DROP TABLE '+ @CTEMPDETAILTABLENAME
		EXEC SP_EXECUTESQL @CCMD
	END	

		
		
END
