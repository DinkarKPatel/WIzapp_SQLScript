CREATE PROCEDURE SP3S_SYNCH_MBO_SLS_VENDOREAN
@CLOCID VARCHAR(10)
AS
BEGIN
	DECLARE @DSEARCHXNDT DATETIME,@CSOURCEDB VARCHAR(200),@CTEMPTABLENAME VARCHAR(200),@CTEMPTABLE VARCHAR(200),
	@CCMD NVARCHAR(MAX),@CSTEP VARCHAR(10),@CERRMSG VARCHAR(MAX),@CUSER_CODE CHAR(7),@DMEMODT DATETIME,
    @CFILTEROPC NVARCHAR(MAX),@ONLINE_PRODUCT_CODE VARCHAR(500),@ONLINE_QTY NUMERIC(10,3),@CBILLNO VARCHAR(100),
    @ROW_ID VARCHAR(MAX),@BIN VARCHAR(3),@BILL_NO	VARCHAR(MAX),@CRFDBNAME VARCHAR(500),@BLOOP BIT,@CFINYEAR VARCHAR(10),
    @CVENDOREANCODE VARCHAR(50),@NPENDINGQTY NUMERIC(10,2),@CPRODUCTCODE VARCHAR(50),@CROWID VARCHAR(50)

BEGIN TRY
   
   SET @CSTEP=10
   SET @CUSER_CODE = '0000000'
	
   IF OBJECT_ID('TEMPDB..#SLSIMPORT','U') IS NOT NULL
		DROP TABLE #SLSIMPORT
		
   IF OBJECT_ID('TEMPDB..#SLS_VEAN','U') IS NOT NULL
		DROP TABLE #SLS_VEAN

   IF OBJECT_ID('TEMPDB..#VEAN_PMT','U') IS NOT NULL
		DROP TABLE #VEAN_PMT
		
	SET @CSTEP=20
	
	CREATE TABLE #SLSIMPORT
	(
		SR_NO			NUMERIC(18)
	   ,BILL_NO			VARCHAR(MAX)
	   ,CM_DT			VARCHAR(MAX)
	   ,DEPT_ID			VARCHAR(MAX)
	   ,PRODUCT_CODE	VARCHAR(MAX)
	   ,QUANTITY		VARCHAR(MAX)
	   ,AMOUNT			VARCHAR(MAX)
	   ,CANCELLED		VARCHAR(MAX)
	   ,MRP             VARCHAR(MAX)
	   ,DISCOUNT_AMT    VARCHAR(MAX)
	   ,ERROR_MESSAGE   VARCHAR(MAX)
	   ,FIN_YEAR		VARCHAR(10)
	   ,CASH            NUMERIC(12,2)
       ,CC_AMOUNT       NUMERIC(12,2)
       ,CC_NAME         VARCHAR(MAX)
       ,BIN_ID          VARCHAR(3)
       
	)
	
	
	DECLARE @TERRORDETAILS TABLE
	(
	PRODUCT_CODE VARCHAR(50),
	REF_NO VARCHAR(15),
	DEPT_ID VARCHAR(5),
	ERROR_MSG VARCHAR(1000)
	)

	SET @CSTEP=30
	SET @CRFDBNAME=DB_NAME()+'_RFOPT.DBO.'
	
	UPDATE SLS_MBODATA SET PENDING_QTY=QUANTITY,ROW_ID=NEWID(),PROCESSED=0,ERRORMSG=''
	WHERE DEPT_ID=@CLOCID
		
	SELECT DISTINCT PRODUCT_CODE AS VENDOR_EAN_NO INTO #SLS_VEAN FROM SLS_MBODATA WHERE DEPT_ID=@CLOCID
	
	SET @CSTEP=40
	SELECT VENDOR_EAN_NO,A.PRODUCT_CODE,QUANTITY_IN_STOCK INTO #VEAN_PMT FROM PMT01106 A (NOLOCK)
	JOIN SKU B (NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE WHERE 1=2

	SET @CSTEP=50
	SET @CCMD=N'SELECT A.VENDOR_EAN_NO,A.PRODUCT_CODE,SUM(CASE WHEN XN_TYPE IN (''CHI'',''SLR'') THEN 1 WHEN XN_TYPE 
				IN (''CHO'',''SLS'') THEN -XN_QTY ELSE 0 END) AS STOCK_QTY FROM 
				(SELECT SKU.VENDOR_EAN_NO,A.PRODUCT_CODE,SUM(QUANTITY) AS XN_QTY,''CHI'' AS XN_TYPE
			    FROM IND01106 A (NOLOCK) JOIN INM01106 B (NOLOCK) ON A.INV_ID=B.INV_ID
				JOIN SKU (NOLOCK) ON SKU.PRODUCT_CODE=A.PRODUCT_CODE
				JOIN #SLS_VEAN C ON C.VENDOR_EAN_NO=SKU.VENDOR_EAN_NO
				WHERE B.PARTY_DEPT_ID='''+@CLOCID+''' AND CANCELLED=0
				GROUP BY SKU.VENDOR_EAN_NO,A.PRODUCT_CODE
				UNION ALL
				SELECT SKU.VENDOR_EAN_NO,A.PRODUCT_CODE,SUM(QUANTITY) AS XN_QTY,''CHO'' AS XN_TYPE
			    FROM CND01106 A (NOLOCK) JOIN CNM01106 B (NOLOCK) ON A.CN_ID=B.CN_ID
				JOIN SKU (NOLOCK) ON SKU.PRODUCT_CODE=A.PRODUCT_CODE
				JOIN #SLS_VEAN C ON C.VENDOR_EAN_NO=SKU.VENDOR_EAN_NO
				WHERE B.PARTY_DEPT_ID='''+@CLOCID+''' AND CANCELLED=0
				GROUP BY SKU.VENDOR_EAN_NO,A.PRODUCT_CODE
				UNION ALL
				SELECT SKU.VENDOR_EAN_NO,A.PRODUCT_CODE,SUM(QUANTITY) AS XN_QTY,''SLS'' AS XN_TYPE
			    FROM CMD01106 A (NOLOCK) JOIN CMM01106 B (NOLOCK) ON A.CM_ID=B.CM_ID
				JOIN SKU (NOLOCK) ON SKU.PRODUCT_CODE=A.PRODUCT_CODE
				JOIN #SLS_VEAN C ON C.VENDOR_EAN_NO=SKU.VENDOR_EAN_NO
				LEFT OUTER JOIN 
				(SELECT MEMO_NO,''01''+DBO.FN_GETFINYEAR(MEMO_DT) AS FIN_YEAR FROM SLS_MBODATA WHERE DEPT_ID='''+@CLOCID+''') D ON A.DEPT_ID+''-''+D.MEMO_NO=B.REF_NO 
				AND B.FIN_YEAR=D.FIN_YEAR
				WHERE a.LOCATION_CODE ='''+@CLOCID+''' AND CANCELLED=0 AND D.MEMO_NO IS  NULL
				GROUP BY SKU.VENDOR_EAN_NO,A.PRODUCT_CODE
				) A GROUP BY VENDOR_EAN_NO,PRODUCT_CODE
				HAVING SUM(CASE WHEN XN_TYPE IN (''CHI'',''SLR'') THEN XN_QTY
				WHEN XN_TYPE IN (''CHO'',''SLS'') THEN -XN_QTY ELSE 0 END)>0'
	
	
	PRINT @CCMD
	
		
	INSERT #VEAN_PMT (VENDOR_EAN_NO,PRODUCT_CODE,QUANTITY_IN_STOCK)
    EXEC SP_EXECUTESQL @CCMD
	
	
	UPDATE A SET ERRORMSG='STOCK NOT FOUND FOR SOME VENDOR EAN CODES' FROM SLS_MBODATA A 
	LEFT OUTER JOIN #VEAN_PMT B ON A.PRODUCT_CODE=B.VENDOR_EAN_NO
	WHERE DEPT_ID=@CLOCID AND B.VENDOR_EAN_NO IS NULL AND A.QUANTITY>0
	
	SELECT TOP 1 @CERRMSG=ERRORMSG FROM SLS_MBODATA WHERE DEPT_ID=@CLOCID AND ISNULL(ERRORMSG,'')<>''
	IF ISNULL(@CERRMSG,'')<>''
	BEGIN
		INSERT @TERRORDETAILS ( PRODUCT_CODE, REF_NO, DEPT_ID, ERROR_MSG ) 
		SELECT A.PRODUCT_CODE,A.MEMO_NO AS  REF_NO,A.DEPT_ID,'STOCK NOT FOUND'  AS ERROR_MSG 
		FROM SLS_MBODATA A 
		LEFT OUTER JOIN #VEAN_PMT B ON A.PRODUCT_CODE=B.VENDOR_EAN_NO
		WHERE DEPT_ID=@CLOCID AND B.VENDOR_EAN_NO IS NULL AND A.QUANTITY>0

		GOTO END_PROC
	END
		
	SET @BLOOP=0
	
	SET @CSTEP=60
	WHILE @BLOOP=0
	BEGIN
			
		SET @CVENDOREANCODE=''
		
		SET @CSTEP=70	
		SELECT TOP 1 @CVENDOREANCODE=PRODUCT_CODE,@CROWID=A.ROW_ID,@NPENDINGQTY=A.PENDING_QTY,@CBILLNO=A.MEMO_NO,
		@CFINYEAR='01'+DBO.FN_GETFINYEAR(A.MEMO_DT)
		FROM SLS_MBODATA A WHERE DEPT_ID=@CLOCID AND PROCESSED=0
		
		IF ISNULL(@CVENDOREANCODE,'')=''
			GOTO LBLIMPORTSLS
		
		WHILE @NPENDINGQTY>0
		BEGIN
			SET @CPRODUCTCODE=''
			
			SET @CSTEP=80
			SELECT TOP 1 @CPRODUCTCODE=A.PRODUCT_CODE FROM #VEAN_PMT A
			JOIN CMD01106 B ON A.PRODUCT_CODE=B.PRODUCT_CODE
			JOIN CMM01106 C ON C.CM_ID=B.CM_ID
			JOIN SKU D ON D.PRODUCT_CODE=A.PRODUCT_CODE
			WHERE A.VENDOR_EAN_NO=@CVENDOREANCODE AND QUANTITY_IN_STOCK>=1
			AND C.REF_NO=@CLOCID+'-'+@CBILLNO AND C.FIN_YEAR=@CFINYEAR
			
			IF ISNULL(@CPRODUCTCODE,'')=''
			BEGIN
				SELECT TOP 1 @CPRODUCTCODE=PRODUCT_CODE FROM #VEAN_PMT A
				WHERE VENDOR_EAN_NO=@CVENDOREANCODE AND QUANTITY_IN_STOCK>=1
			END
			
			IF ISNULL(@CPRODUCTCODE,'')=''
				BREAK	
								
			SET @CSTEP=90
			SET @CCMD=N'SELECT 0 AS SR_NO, MEMO_NO AS BILL_NO, MEMO_DT AS CM_DT,DEPT_ID,'''+@CPRODUCTCODE+''' AS PRODUCT_CODE,
						1 AS QUANTITY,NET AS AMOUNT,CANCELLED,'''' AS ERROR_MESSAGE,0 AS MRP,DISCOUNT_AMOUNT,CASH,CC_AMOUNT,CC_NAME,
						BIN_ID,'''+@CFINYEAR+''' AS FIN_YEAR FROM SLS_MBODATA A WHERE ROW_ID='''+@CROWID+''''
			PRINT @CCMD

			SET @CSTEP=100
			INSERT #SLSIMPORT (SR_NO,BILL_NO,CM_DT,DEPT_ID,PRODUCT_CODE,QUANTITY,AMOUNT,CANCELLED,ERROR_MESSAGE
							  ,MRP,DISCOUNT_AMT,CASH,CC_AMOUNT,CC_NAME,BIN_ID,FIN_YEAR)  
			EXEC SP_EXECUTESQL @CCMD
			
			SET @CSTEP=110
			UPDATE #VEAN_PMT SET QUANTITY_IN_STOCK=QUANTITY_IN_STOCK-1 WHERE  PRODUCT_CODE=@CPRODUCTCODE
			
			UPDATE SLS_MBODATA SET PENDING_QTY=PENDING_QTY-1 WHERE ROW_ID=@CROWID
			 	
			SET @NPENDINGQTY=@NPENDINGQTY-1
		END
		
		SET @CSTEP=120
		
		UPDATE SLS_MBODATA SET PROCESSED=1 WHERE ROW_ID=@CROWID
		 
	END

	
	SET @CSTEP=130
	IF EXISTS (SELECT TOP 1 * FROM SLS_MBODATA WHERE DEPT_ID=@CLOCID AND PENDING_QTY>0)
	BEGIN
		SET @CERRMSG='BAR CODES STOCK NOT VAILABLE FOR SOME BILLS'
		GOTO END_PROC
	END
	
LBLIMPORTSLS:
	
	PRINT 'START SALE IMPORT'
	SET @CPRODUCTCODE=''
	
	SELECT TOP 1 @CPRODUCTCODE=PRODUCT_CODE FROM SLS_MBODATA WHERE DEPT_ID=@CLOCID AND ISNULL(PROCESSED,0)=0
	IF ISNULL(@CPRODUCTCODE,'')<>''
	BEGIN
		SET @CERRMSG='SOME ENTRIES NOT PROCESSED'
		GOTO END_PROC
	END
	
	BEGIN TRANSACTION
	
	SET @CSTEP=140
	--GETTING LIST OF EXISTING BILLS.
	IF OBJECT_ID('TEMPDB..#EXISTINGBILLS','U') IS NOT NULL
		DROP TABLE #EXISTINGBILLS

	SET @CSTEP=150	
	IF OBJECT_ID('TEMPDB..#NEWBILLS','U') IS NOT NULL
		DROP TABLE #NEWBILLS
    
    
    SET @CSTEP=160
	
	
	SELECT TOP 1  @CERRMSG=BILL_NO+'DIFFERENCE IN CARD AMOUNT AND NET AMOUNT'   FROM 
	(
	 SELECT A.BILL_NO,SUM(CONVERT(NUMERIC(18,2),AMOUNT)) AS AMOUNT,
	 SUM(CONVERT(NUMERIC(18,2),CASH)) AS CASH,
	 SUM(CONVERT(NUMERIC(18,2),CC_AMOUNT)) AS CC_AMOUNT
	 FROM #SLSIMPORT A
	 GROUP BY A.BILL_NO
	 ) A
	WHERE A.AMOUNT<>(CASE WHEN (A.CASH+A.CC_AMOUNT)=0 THEN A.AMOUNT ELSE  (A.CASH+A.CC_AMOUNT) END)

	
	/**INVALID CARD NAME.**/ 
	SET @CSTEP=170
	UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG
	FROM #SLSIMPORT A
	JOIN 
	(
	  SELECT A.SR_NO,'INVALID CARD NAME.' AS MSG
	  FROM #SLSIMPORT A
	  LEFT JOIN PAYMODE_MST B ON A.CC_NAME =B.PAYMODE_NAME 
	  WHERE CC_AMOUNT<>0 AND  B.PAYMODE_NAME  IS NULL
	)B ON A.SR_NO=B.SR_NO


    SET @CSTEP=180
	UPDATE A SET ERROR_MESSAGE=ISNULL(ERROR_MESSAGE+';','')+B.MSG
	FROM #SLSIMPORT A
	JOIN 
	(
	  SELECT A.SR_NO,A.PRODUCT_CODE+'BARCODE NOT FOUND.' AS MSG
	  FROM #SLSIMPORT A
	  LEFT JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE WHERE DEPT_ID=@CLOCID
	  AND B.PRODUCT_CODE IS NULL
	)B ON A.SR_NO=B.SR_NO


    IF ISNULL(@CERRMSG,'')=''
		SELECT TOP 1 @CERRMSG=ERROR_MESSAGE FROM #SLSIMPORT WHERE ISNULL(ERROR_MESSAGE,'')<>''
		
	IF ISNULL(@CERRMSG,'')<>''
        GOTO END_PROC
        
	SET @CSTEP=190
	--LIST OF EXISTING BILLS
	SELECT B.CM_ID
		  ,B.CM_NO	
		  ,A.BILL_NO
		  ,CONVERT(DATETIME,A.CM_DT) AS CM_DT
		  ,A.DEPT_ID
		  ,A.PRODUCT_CODE
		  ,CONVERT(NUMERIC(10,3),QUANTITY) AS QUANTITY
		  ,CONVERT(NUMERIC(18,2),A.AMOUNT) AS AMOUNT
		  ,CONVERT(BIT,(CASE WHEN A.CANCELLED IN ('T','Y','1') THEN 1 ELSE 0 END)) AS CANCELLED
		  ,A.FIN_YEAR
		  ,A.CASH
	      ,A.CC_NAME
	      ,A.CC_AMOUNT
	      ,A.DISCOUNT_AMT  
	INTO #EXISTINGBILLS
	FROM #SLSIMPORT A
	JOIN CMM01106 B(NOLOCK) ON A.DEPT_ID+'-'+A.BILL_NO=B.REF_NO AND A.FIN_YEAR=B.FIN_YEAR
	

	SET @CSTEP=200
	--LIST OF NEW BILLS
	SELECT CONVERT(VARCHAR(50),'') AS CM_ID,CONVERT(VARCHAR(50),'') AS CM_NO
		  ,A.BILL_NO
		  ,CONVERT(DATETIME,A.CM_DT) AS CM_DT
		  ,A.DEPT_ID
		  ,A.PRODUCT_CODE
		  ,CONVERT(NUMERIC(10,3),QUANTITY) AS QUANTITY
		  ,CONVERT(NUMERIC(18,2),A.AMOUNT) AS AMOUNT
		  ,CONVERT(BIT,(CASE WHEN A.CANCELLED IN ('T','Y','1') THEN 1 ELSE 0 END)) AS CANCELLED
		  ,A.FIN_YEAR
		  ,A.CASH
	      ,A.CC_NAME
	      ,A.CC_AMOUNT 
	      ,A.DISCOUNT_AMT 
	INTO #NEWBILLS
	FROM #SLSIMPORT A
	LEFT JOIN CMM01106 B(NOLOCK) ON A.DEPT_ID+'-'+A.BILL_NO=B.REF_NO AND A.FIN_YEAR=B.FIN_YEAR
	WHERE B.CM_ID IS NULL
	

	SET @CSTEP=210
	--STOCK IS NOT FOUND NEGATIVE, SO LETS PROCEED FOR CREATING ENTRY IN CMM01106,CMD01106 AND PAYMODE_XN_DET
	DELETE PAYMODE_XN_DET WHERE XN_TYPE='SLS' AND MEMO_ID IN 
	(SELECT DISTINCT CM_ID FROM #EXISTINGBILLS)

	SET @CSTEP=220
	DELETE CMD01106 WHERE CM_ID IN 
	(SELECT DISTINCT CM_ID FROM #EXISTINGBILLS)

	SET @CSTEP=230
	DELETE CMM01106 WHERE CM_ID IN 
	(SELECT DISTINCT CM_ID FROM #EXISTINGBILLS)

	SET @CSTEP=240
	DECLARE @CDEPT_ID VARCHAR(10),@CBILL_NO VARCHAR(40)
		   ,@CMEMOPREFIX VARCHAR(10),@NMEMONOLEN NUMERIC(3),@CMEMONOLEN VARCHAR(5)	
		   ,@CMEMONOVAL	VARCHAR(50),@CKEYSTABLE VARCHAR(100)

	SET @NMEMONOLEN=12	


	SET @CKEYSTABLE='KEYS_CMM'

	SET @CSTEP=250
	
	---GENERATING CM_NO AND CM_ID FOR NEW_MEMO
	WHILE EXISTS(SELECT TOP 1 'U' FROM #NEWBILLS WHERE ISNULL(CM_NO,'')='')
	BEGIN
		
		SET @CDEPT_ID=''
		SET @CBILL_NO=''
		SET @CFINYEAR=''
		SET @CMEMONOVAL=''	
		
		SET @CSTEP=260	
		
		SELECT TOP 1 @CDEPT_ID=A.DEPT_ID,@CBILL_NO=BILL_NO,@CFINYEAR=FIN_YEAR,@DMEMODT=A.CM_DT
		FROM #NEWBILLS A WHERE ISNULL(CM_NO,'')='' ORDER BY CM_DT,BILL_NO ASC
		
		SET @CMEMOPREFIX=LTRIM(RTRIM(@CDEPT_ID))+RIGHT(CONVERT(VARCHAR,@DMEMODT,112),4)+'-'
		
	LBLGENKEY:
		
		
		SET @CSTEP=270
		EXEC GETNEXTKEY_OPT 'CMM01106', 'CM_NO', @NMEMONOLEN, @CMEMOPREFIX, 1,
									@CFINYEAR,0, @CKEYSTABLE,@CMEMONOVAL OUTPUT
									
		
		SET @CSTEP=280
		IF EXISTS(SELECT TOP 1 'U' FROM CMM01106 WHERE CM_NO=@CMEMONOVAL AND FIN_YEAR=@CFINYEAR)
			GOTO LBLGENKEY
		
		SET @CSTEP=290
		IF ISNULL(@CMEMONOVAL,'')=''
		BEGIN
			SET @CERRMSG='ERROR GENERATING CM NO.'
			GOTO END_PROC
		END
		
		SET @CSTEP=300	
		
		
		UPDATE #NEWBILLS SET CM_NO=@CMEMONOVAL 
		WHERE DEPT_ID=@CDEPT_ID AND BILL_NO=@CBILL_NO AND FIN_YEAR=@CFINYEAR AND CM_DT=@DMEMODT
				
	END

	SET @CSTEP=310
	UPDATE #NEWBILLS SET CM_ID=LTRIM(RTRIM(DEPT_ID))+FIN_YEAR+REPLICATE('0',15-LEN(LTRIM(RTRIM(CM_NO))))+LTRIM(RTRIM(CM_NO))

	SET @CSTEP=320
	IF EXISTS(SELECT TOP 1 'U' FROM #NEWBILLS WHERE ISNULL(CM_ID,'')='' OR ISNULL(CM_NO,'')='')
	BEGIN
		SET @CERRMSG='ERROR GENERATING CM NO.'
		GOTO END_PROC
	END


	SET @CSTEP=330
	INSERT CMM01106	( REMARKS, SENT_FOR_RECON, PARTY_TYPE, AC_CODE, MANUAL_DISCOUNT, MANUAL_ROUNDOFF
					, BIN_ID, PATCHUP_RUN, SUBTOTAL_R, PASSPORT_NO, TICKET_NO, FLIGHT_NO, MRP_WSP
					, MANUAL_BILL, FC_RATE, POSTEDINAC, CM_NO, CM_DT, CM_MODE, SUBTOTAL, DT_CODE
					, DISCOUNT_PERCENTAGE, DISCOUNT_AMOUNT, NET_AMOUNT, CUSTOMER_CODE, CANCELLED, USER_CODE
					, LAST_UPDATE, EXEMPTED, COMPUTER_NAME, SENT_TO_HO, CM_TIME, CM_ID, REF_CM_ID, FIN_YEAR
					, ATD_CHARGES, COPIES_PTD, ROUND_OFF, MEMO_TYPE, PAY_MODE, SMS_SENT, AUTOENTRY, CASH_TENDERED
					, PAYBACK, ECOUPON_ID, CAMPAIGN_GC_OTP, SALESSETUPINEFFECT, EDT_USER_CODE, GV_AMOUNT, REF_NO
					, SENT_FOR_GR )  
	SELECT DISTINCT 'IMPORTED SALE.' AS REMARKS,0 AS SENT_FOR_RECON,1 AS PARTY_TYPE,'0000000000' AS AC_CODE
			,0 AS MANUAL_DISCOUNT,0 AS MANUAL_ROUNDOFF,'000' AS BIN_ID,0 AS PATCHUP_RUN
			,SUM(CASE WHEN AMOUNT<0 THEN AMOUNT ELSE 0 END) AS SUBTOTAL_R,'' AS PASSPORT_NO,'' AS TICKET_NO,'' AS FLIGHT_NO,
			0 AS MRP_WSP,0 AS MANUAL_BILL,0 AS FC_RATE
			,0 AS POSTEDINAC, CM_NO
			,CM_DT,1 AS CM_MODE
			,SUM(CASE WHEN AMOUNT>0 THEN AMOUNT ELSE 0 END) AS SUBTOTAL
			,'0000000' AS DT_CODE,ABS(CONVERT(NUMERIC(14,3),((DISCOUNT_AMT/SUM(CASE WHEN AMOUNT>0 THEN AMOUNT ELSE 0 END))*100)))AS DISCOUNT_PERCENTAGE,DISCOUNT_AMT AS DISCOUNT_AMOUNT
			,ROUND(SUM(AMOUNT),0) AS NET_AMOUNT
			,'000000000000' AS CUSTOMER_CODE, CANCELLED,'0000000' AS USER_CODE,GETDATE() AS LAST_UPDATE
			,0 AS EXEMPTED,'' AS COMPUTER_NAME,0 AS SENT_TO_HO,GETDATE() AS CM_TIME, CM_ID,'' AS REF_CM_ID
			, FIN_YEAR,0 AS ATD_CHARGES,0 AS COPIES_PTD,(ROUND(SUM(AMOUNT),0)-SUM(AMOUNT)) AS ROUND_OFF,1 AS MEMO_TYPE,1 AS PAY_MODE,0 AS SMS_SENT
			,0 AS AUTOENTRY,0 AS CASH_TENDERED
			,0 AS PAYBACK,'' AS ECOUPON_ID,'' AS CAMPAIGN_GC_OTP
			,0 AS SALESSETUPINEFFECT,@CUSER_CODE AS EDT_USER_CODE,0 AS GV_AMOUNT
			,DEPT_ID+'-'+BILL_NO AS REF_NO,0 AS SENT_FOR_GR 
	FROM #EXISTINGBILLS
	GROUP BY DEPT_ID,CM_NO,CM_DT,CANCELLED,CM_ID,FIN_YEAR,BILL_NO,DISCOUNT_AMT
	UNION 
	SELECT DISTINCT 'IMPORTED SALE.' AS REMARKS,0 AS SENT_FOR_RECON,1 AS PARTY_TYPE,'0000000000' AS AC_CODE
			,0 AS MANUAL_DISCOUNT,0 AS MANUAL_ROUNDOFF,'000' AS BIN_ID,0 AS PATCHUP_RUN
			,SUM(CASE WHEN AMOUNT<0 THEN AMOUNT ELSE 0 END) AS SUBTOTAL_R,'' AS PASSPORT_NO,'' AS TICKET_NO,'' AS FLIGHT_NO,0 AS MRP_WSP,0 AS MANUAL_BILL,0 AS FC_RATE
			,0 AS POSTEDINAC, CM_NO
			,CM_DT,1 AS CM_MODE
			,SUM(CASE WHEN AMOUNT>0 THEN AMOUNT ELSE 0 END) AS SUBTOTAL
			,'0000000' AS DT_CODE,ABS(CONVERT(NUMERIC(14,3),((DISCOUNT_AMT/SUM(CASE WHEN AMOUNT>0 THEN AMOUNT ELSE 0 END))*100)))AS DISCOUNT_PERCENTAGE,DISCOUNT_AMT AS DISCOUNT_AMOUNT
			,ROUND(SUM(AMOUNT),0) AS NET_AMOUNT
			,'000000000000' AS CUSTOMER_CODE, CANCELLED,@CUSER_CODE AS USER_CODE,GETDATE() AS LAST_UPDATE
			,0 AS EXEMPTED,'' AS COMPUTER_NAME,0 AS SENT_TO_HO,GETDATE() AS CM_TIME, CM_ID,'' AS REF_CM_ID
			, FIN_YEAR,0 AS ATD_CHARGES,0 AS COPIES_PTD,(ROUND(SUM(AMOUNT),0)-SUM(AMOUNT)) AS ROUND_OFF,1 AS MEMO_TYPE,1 AS PAY_MODE,0 AS SMS_SENT
			,0 AS AUTOENTRY,0 AS CASH_TENDERED
			,0 AS PAYBACK,'' AS ECOUPON_ID,'' AS CAMPAIGN_GC_OTP
			,0 AS SALESSETUPINEFFECT,@CUSER_CODE AS EDT_USER_CODE,0 AS GV_AMOUNT
			,DEPT_ID+'-'+BILL_NO AS REF_NO,0 AS SENT_FOR_GR  
	FROM #NEWBILLS
	GROUP BY DEPT_ID,CM_NO,CM_DT,CANCELLED,CM_ID,FIN_YEAR,BILL_NO,DISCOUNT_AMT

	SET @CSTEP=340
	/*
	TAX_METHOD : 1 FOR INCLUSIVE AND 2 FOR EXCLUSIVE
	*/
	INSERT CMD01106	( PRODUCT_CODE, QUANTITY, MRP, NET, DISCOUNT_PERCENTAGE, DISCOUNT_AMOUNT, ROW_ID, LAST_UPDATE
					, TAX_PERCENTAGE, TAX_AMOUNT, EMP_CODE, SLSDET_ROW_ID, BIN_ID, OLD_MRP, REF_SLS_MEMO_ID
					, REALIZE_SALE, CM_ID, RFNET, TAX_TYPE, TAX_METHOD, EAN, EMP_CODE1, EMP_CODE2, ITEM_DESC
					, WEIGHTED_AVG_DISC_PCT, WEIGHTED_AVG_DISC_AMT, MANUAL_DISCOUNT, FIX_MRP, SR_NO, HOLD_FOR_ALTER
					, PACK_SLIP_ID, XN_TYPE, REPEAT_PUR_ORDER, DEPT_ID, REF_ORDER_ID, FOC_QUANTITY, CMM_DISCOUNT_AMOUNT
					, NRM_ID )  
	SELECT A.PRODUCT_CODE, A.QUANTITY, B.MRP,A.AMOUNT AS NET
	,(CASE WHEN ABS(A.AMOUNT)<ABS(A.QUANTITY*B.MRP) THEN 
	  ((ABS(A.QUANTITY*B.MRP)-ABS(A.AMOUNT))/ABS(A.QUANTITY*B.MRP))*100 
	  ELSE 0 END) AS DISCOUNT_PERCENTAGE
			,(CASE WHEN A.QUANTITY>0 THEN 1 ELSE -1 END)*
			(CASE WHEN ABS(A.AMOUNT)<ABS(A.QUANTITY*B.MRP) THEN 
			 (ABS(A.QUANTITY*B.MRP)-ABS(A.AMOUNT)) 
			 ELSE 0 END)
			AS DISCOUNT_AMOUNT
			,A.DEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID,GETDATE() AS LAST_UPDATE
			,0 AS TAX_PERCENTAGE,0 AS TAX_AMOUNT,'0000000' AS EMP_CODE,'' AS SLSDET_ROW_ID,
			'000' AS BIN_ID,0 AS OLD_MRP,'' AS REF_SLS_MEMO_ID,0 AS REALIZE_SALE
			,A.CM_ID AS CM_ID,0 AS RFNET,1 AS TAX_TYPE,1 AS TAX_METHOD,'' AS EAN,'0000000' AS EMP_CODE1
			,'0000000' AS EMP_CODE2,'' AS ITEM_DESC,0 AS WEIGHTED_AVG_DISC_PCT
			,0 AS WEIGHTED_AVG_DISC_AMT,0 AS MANUAL_DISCOUNT,0 AS FIX_MRP,0 AS SR_NO,0 AS HOLD_FOR_ALTER,'' AS PACK_SLIP_ID
			,'' AS XN_TYPE
			,0 AS REPEAT_PUR_ORDER,A.DEPT_ID,'' AS REF_ORDER_ID
			,0 AS FOC_QUANTITY,0 AS CMM_DISCOUNT_AMOUNT,'' AS NRM_ID 
	FROM #EXISTINGBILLS A
	JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE
	UNION 
	SELECT 	  A.PRODUCT_CODE, A.QUANTITY, B.MRP,A.AMOUNT AS NET
	,(CASE WHEN ABS(A.AMOUNT)<ABS(A.QUANTITY*B.MRP) THEN 
	  ((ABS(A.QUANTITY*B.MRP)-ABS(A.AMOUNT))/ABS(A.QUANTITY*B.MRP))*100 
	  ELSE 0 END)
	AS DISCOUNT_PERCENTAGE
			,(CASE WHEN A.QUANTITY>0 THEN 1 ELSE -1 END)*
			 (CASE WHEN ABS(A.AMOUNT)<ABS(A.QUANTITY*B.MRP) THEN 
			 (ABS(A.QUANTITY*B.MRP)-ABS(A.AMOUNT)) 
			 ELSE 0 END)
			AS DISCOUNT_AMOUNT
			,A.DEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID,GETDATE() AS LAST_UPDATE
			,0 AS TAX_PERCENTAGE,0 AS TAX_AMOUNT,'0000000' AS EMP_CODE,'' AS SLSDET_ROW_ID
			,'000' AS BIN_ID,0 AS OLD_MRP,'' AS REF_SLS_MEMO_ID,0 AS REALIZE_SALE
			,A.CM_ID AS CM_ID,0 AS RFNET,1 AS TAX_TYPE,1 AS TAX_METHOD,'' AS EAN,'0000000' AS EMP_CODE1
			,'0000000' AS EMP_CODE2,'' AS ITEM_DESC,0 AS WEIGHTED_AVG_DISC_PCT
			,0 AS WEIGHTED_AVG_DISC_AMT,0 AS MANUAL_DISCOUNT,0 AS FIX_MRP,0 AS SR_NO,0 AS HOLD_FOR_ALTER,'' AS PACK_SLIP_ID
			,'' AS XN_TYPE
			,0 AS REPEAT_PUR_ORDER,A.DEPT_ID,'' AS REF_ORDER_ID,0 AS FOC_QUANTITY
			,0 AS CMM_DISCOUNT_AMOUNT,'' AS NRM_ID 
	FROM #NEWBILLS A
	JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE

	SET @CSTEP=350
	
	INSERT PAYMODE_XN_DET( MEMO_ID, XN_TYPE, PAYMODE_CODE, ROW_ID, AMOUNT, LAST_UPDATE, REF_NO
						 , ADJ_MEMO_ID, CURRENCY_CONVERSION_RATE, REMARKS, GV_SRNO, GV_SCRATCH_NO)  
	SELECT 	A.CM_ID AS MEMO_ID,'SLS' AS XN_TYPE,B.PAYMODE_CODE  AS PAYMODE_CODE
	,DEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID,SUM(CASH) AS AMOUNT,GETDATE() AS LAST_UPDATE,'' AS REF_NO,'' AS ADJ_MEMO_ID
    ,1 AS CURRENCY_CONVERSION_RATE,'SALE IMPORTED' AS REMARKS,'' AS GV_SRNO,'' AS GV_SCRATCH_NO 
	FROM #EXISTINGBILLS A
	JOIN PAYMODE_MST B ON B.PAYMODE_NAME='INR'
	WHERE CASH<>0
	GROUP BY CM_ID,DEPT_ID,B.PAYMODE_CODE
	UNION 
	SELECT 	A.CM_ID AS MEMO_ID,'SLS' AS XN_TYPE,B.PAYMODE_CODE  AS PAYMODE_CODE
		,DEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID
		,SUM(AMOUNT) AS AMOUNT,GETDATE() AS LAST_UPDATE,'' AS REF_NO,'' AS ADJ_MEMO_ID
		,1 AS CURRENCY_CONVERSION_RATE,'SALE IMPORTED' AS REMARKS,'' AS GV_SRNO,'' AS GV_SCRATCH_NO 
	FROM #NEWBILLS A
	JOIN PAYMODE_MST B ON B.PAYMODE_NAME='INR'
	WHERE CASH<>0
	GROUP BY CM_ID,DEPT_ID,B.PAYMODE_CODE
	
	INSERT PAYMODE_XN_DET( MEMO_ID, XN_TYPE, PAYMODE_CODE, ROW_ID, AMOUNT, LAST_UPDATE, REF_NO
						 , ADJ_MEMO_ID, CURRENCY_CONVERSION_RATE, REMARKS, GV_SRNO, GV_SCRATCH_NO)  
	SELECT 	A.CM_ID AS MEMO_ID,'SLS' AS XN_TYPE,B.PAYMODE_CODE  AS PAYMODE_CODE
	,DEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID,SUM(CC_AMOUNT) AS AMOUNT,GETDATE() AS LAST_UPDATE,'' AS REF_NO,'' AS ADJ_MEMO_ID
    ,1 AS CURRENCY_CONVERSION_RATE,'SALE IMPORTED' AS REMARKS,'' AS GV_SRNO,'' AS GV_SCRATCH_NO 
	FROM #EXISTINGBILLS A
	JOIN PAYMODE_MST B ON B.PAYMODE_NAME=A.CC_NAME
	WHERE CC_AMOUNT<>0
	GROUP BY CM_ID,DEPT_ID,B.PAYMODE_CODE
	UNION 
	SELECT 	A.CM_ID AS MEMO_ID,'SLS' AS XN_TYPE,B.PAYMODE_CODE  AS PAYMODE_CODE
		,DEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID
		,SUM(AMOUNT) AS AMOUNT,GETDATE() AS LAST_UPDATE,'' AS REF_NO,'' AS ADJ_MEMO_ID
		,1 AS CURRENCY_CONVERSION_RATE,'SALE IMPORTED' AS REMARKS,'' AS GV_SRNO,'' AS GV_SCRATCH_NO 
	FROM #NEWBILLS A
	JOIN PAYMODE_MST B ON B.PAYMODE_NAME=A.CC_NAME
	WHERE CC_AMOUNT<>0
	GROUP BY CM_ID,DEPT_ID,B.PAYMODE_CODE

	SET @CSTEP=360
    

	DECLARE @TRETMSG TABLE (ERRMSG VARCHAR(MAX))
		
	--UPDATING RFNET COLUMN OF CMD01106
	IF OBJECT_ID('#IMPORTEDBILLS','U') IS NOT NULL
		DROP TABLE #IMPORTEDBILLS

	SET @CSTEP=370
	SELECT DISTINCT CM_ID
	INTO #IMPORTEDBILLS
	FROM #EXISTINGBILLS
	UNION 
	SELECT DISTINCT CM_ID
	FROM #NEWBILLS

	SET @CSTEP=380
	DECLARE @CCMID VARCHAR(50),@DCMDT DATETIME,@CTEMPCMDTABLE VARCHAR(200) 

	SET @CTEMPCMDTABLE='TMPCMD_'+LTRIM(RTRIM(STR(@@SPID)))

	SET @CSTEP=390
	WHILE EXISTS(SELECT TOP 1 'U' FROM #IMPORTEDBILLS)
	BEGIN
		SET @CCMID=''
		
		SET @CSTEP=400
		
		SELECT TOP 1 @CCMID=CM_ID FROM #IMPORTEDBILLS
		
		SET @DCMDT=''
		SELECT @DCMDT=CM_DT FROM CMM01106 WHERE CM_ID=@CCMID
		
		SET @CSTEP=410

		IF OBJECT_ID('TEMPDB..#TMPCMDTAX','U') IS NOT NULL
			DROP TABLE #TMPCMDTAX
	
		SELECT SUB_SECTION_CODE,C.ROW_ID,C.TAX_PERCENTAGE,C.TAX_METHOD,C.NET,
		C.MRP,C.QUANTITY,B.USER_CODE,C.TAX_AMOUNT,C.PRODUCT_CODE,C.CMM_DISCOUNT_AMOUNT,
		C.DISCOUNT_PERCENTAGE,C.DISCOUNT_AMOUNT  AS CMD_DISCOUNT_AMOUNT,C.FORM_ID,
		CONVERT(BIT,0) AS APPLY_EXCLUSIVE_TAX,B.DISCOUNT_PERCENTAGE AS EXCLUSIVE_VAT_TO_DISC,
		C.PACK_SLIP_ID,
		MANUAL_TAX_METHOD
		INTO #TMPCMDTAX 
		FROM CMM01106 B 
		JOIN CMD01106 C ON C.CM_ID=B.CM_ID
		JOIN SKU D ON D.PRODUCT_CODE=C.PRODUCT_CODE
		JOIN ARTICLE E ON E.ARTICLE_CODE=D.ARTICLE_CODE
		WHERE B.CM_ID=@CCMID
		
		SET @CSTEP=415
		DELETE FROM @TRETMSG
		
		INSERT @TRETMSG
		EXEC SP_GETCMTAX
		@CUSERCODE='0000000',
		@DXNDT=@DCMDT,
		@NBILLLEVELDISCAMT=0,
		@BCALLEDFROMCASHMEMO=1,
		@BSALESSETUPINEFFECT=0,
		@BSALESSETUPDISABLED=1,
		@CDTCODE='0000000',
		@CLOCIDPARA=@CLOCID
		
		SET @CERRMSG=''
		SELECT TOP 1 @CERRMSG=ERRMSG FROM @TRETMSG WHERE ISNULL(ERRMSG,'')<>''
		
		IF ISNULL(@CERRMSG,'')<>''
		BEGIN
			
			SET @CSTEP=417
			UPDATE A SET ERRORMSG='TAX STRUCTURE NOT DEFINED' FROM SLS_MBODATA A JOIN CMM01106 B ON A.MEMO_NO=B.REF_NO
			WHERE B.CM_ID=@CCMID
					
			INSERT @TERRORDETAILS ( PRODUCT_CODE, REF_NO, DEPT_ID, ERROR_MSG ) 
			SELECT C.PRODUCT_CODE,A.MEMO_NO AS  REF_NO, @CLOCID AS DEPT_ID,'TAX STRUCTURE NOT DEFINED FOR SUB SECTION :'+SUB_SECTION_NAME+'('+SECTION_NAME+')'  AS ERROR_MSG 
			FROM SLS_MBODATA A JOIN CMM01106 B ON @CLOCID+'-'+A.MEMO_NO=B.REF_NO
			JOIN CMD01106 C ON B.CM_ID=C.CM_ID 
			JOIN SKU D (NOLOCK) ON D.PRODUCT_CODE=C.PRODUCT_CODE
			JOIN ARTICLE E (NOLOCK) ON E.ARTICLE_CODE=D.ARTICLE_CODE
			JOIN SECTIOND F (NOLOCK) ON F.SUB_SECTION_CODE=E.SUB_SECTION_CODE
			JOIN SECTIONM G (NOLOCK) ON G.SECTION_CODE=F.SECTION_CODE
						
			GOTO END_PROC
		END
				
		SET @CSTEP=420
		
		UPDATE CMD01106 SET TAX_PERCENTAGE=B.TAX_PERCENTAGE,TAX_METHOD=1,TAX_AMOUNT=B.TAX_AMOUNT,
		RFNET=B.NET-ISNULL(B.CMM_DISCOUNT_AMOUNT,0),CMM_DISCOUNT_AMOUNT=ISNULL(B.CMM_DISCOUNT_AMOUNT,0)
		FROM #TMPCMDTAX B WHERE B.ROW_ID=CMD01106.ROW_ID
				
		SET @CSTEP=430
		EXEC UPDATERFNET 'SLS',@CCMID
		
		EXEC SP3SBUILDSLS
		@CXNID=@CCMID
		,@NUPDATEMODE=2
		,@CERRMSG=@CERRMSG OUTPUT 
		
		IF ISNULL(@CERRMSG,'')<>''
			GOTO END_PROC
		
		SET @CSTEP=442
		DELETE #IMPORTEDBILLS WHERE CM_ID=@CCMID
	END
	
	GOTO END_PROC
	
END TRY

BEGIN CATCH
	SET @CERRMSG='SP3S_SYNCH_MBO_SLS_VENDOREAN : AT STEP - '+@CSTEP+', MESSAGE - '+ERROR_MESSAGE()
	GOTO END_PROC	
END CATCH

END_PROC:
	IF ISNULL(@CERRMSG,'')=''
		SELECT TOP 1 @CERRMSG=ERRORMSG FROM SLS_MBODATA WHERE DEPT_ID=@CLOCID AND ISNULL(ERRORMSG,'')<>''
	
	IF ISNULL(@CERRMSG,'')=''	
		SELECT TOP 1 @CERRMSG=ERROR_MESSAGE FROM #SLSIMPORT WHERE ISNULL(ERROR_MESSAGE,'')<>''
	
	IF ISNULL(@CERRMSG,'')=''	
	BEGIN
		SET @CPRODUCTCODE=''
		
		SELECT TOP 1 @CPRODUCTCODE=PRODUCT_CODE FROM SLS_MBODATA WHERE DEPT_ID=@CLOCID AND ISNULL(PROCESSED,0)=0
		IF ISNULL(@CPRODUCTCODE,'')<>''
			SET @CERRMSG='SOME ENTRIES NOT PROCESSED'
	END
	
	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRMSG,'')=''  
		BEGIN						  
			PRINT 'COMMITING TRANSACTION'
			COMMIT TRANSACTION
			
		END	
		ELSE
		BEGIN
			PRINT 'ROLLBACK TRANSACTION'
			ROLLBACK
		END	
	END
	
	DELETE FROM SLS_MBODATA_ERROR_DETAILS WHERE DEPT_ID=@CLOCID 
				
	INSERT SLS_MBODATA_ERROR_DETAILS ( PRODUCT_CODE, REF_NO, DEPT_ID, ERROR_MSG ) 
    SELECT PRODUCT_CODE, REF_NO, DEPT_ID, ERROR_MSG FROM @TERRORDETAILS
	
	
	DELETE FROM SLS_MBODATA WHERE DEPT_ID=@CLOCID
	
	SELECT ISNULL(@CERRMSG,'') AS ERRMSG,@CSTEP AS LAST_STEP
END
------ END OF PROCEDURE SP3S_SYNCH_MBO_SLS_VENDOREAN
