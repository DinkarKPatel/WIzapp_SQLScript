CREATE PROCEDURE SP_STOCK_RECON_HIST_PRD
(
	@MEMO_ID VARCHAR(100),
	@DEPT_ID VARCHAR(10),
	@USER_CODE VARCHAR(50),
	@C_DATE DATETIME
)
--WITH ENCRYPTION
AS
BEGIN

 BEGIN TRY
   BEGIN TRAN
   DECLARE @ST_DATE VARCHAR(20),@C_TITLE VARCHAR(500)
   
   SELECT @ST_DATE=CONVERT(VARCHAR(10),STM_START_DT,120),@C_TITLE =STM_TITLE 
   FROM PRD_STMH01106 WHERE MEMO_ID= @MEMO_ID
   
   IF NOT EXISTS(SELECT * FROM PRD_STK_RECON_HIST_MST WHERE RECON_ID = @MEMO_ID )  
   BEGIN
		IF OBJECT_ID('TEMPDB..#TMPSTKREC','U') IS NOT NULL
			DROP TABLE #TMPSTKREC
		
		SELECT ISNULL(A.PRODUCT_UID,B.PRODUCT_UID) AS PRODUCT_UID, ISNULL(A.PRODUCT_CODE,B.PRODUCT_CODE) AS PRODUCT_CODE,
		ISNULL(A.SCAN_QTY ,0)  AS SCAN_QTY      ,
		(CASE WHEN (ISNULL(B.QUANTITY_IN_STOCK,0) - ISNULL(A.SCAN_QTY,0)) >0   
		THEN (ISNULL(B.QUANTITY_IN_STOCK,0) - ISNULL(A.SCAN_QTY,0))    
		ELSE 0 END ) AS SHORTAGE_QTY ,
		(CASE WHEN (ISNULL(B.QUANTITY_IN_STOCK,0) - ISNULL(A.SCAN_QTY,0) ) <0       
        THEN ABS(ISNULL(B.QUANTITY_IN_STOCK,0) - ISNULL(A.SCAN_QTY,0))     
        ELSE 0 END ) AS EXCESS_QTY,
		ISNULL(B.QUANTITY_IN_STOCK,0) AS COMPUTER_QTY 
		INTO #TMPSTKREC
		FROM
		(SELECT A.PRODUCT_UID, PRODUCT_CODE,SUM(QUANTITY) AS SCAN_QTY FROM
		 PRD_STLD01106 A
		 JOIN PRD_STLM01106 B ON A.LOT_NO=B.LOT_NO 
		 WHERE B.MEMO_ID=@MEMO_ID
		 GROUP BY A.PRODUCT_UID,PRODUCT_CODE) A
		 
		 FULL OUTER JOIN 
		 (
		  SELECT A.PRODUCT_UID, PRODUCT_CODE,SUM(A.QUANTITY_IN_STOCK) AS QUANTITY_IN_STOCK 
		  FROM  PRD_PMT A (NOLOCK)
		  JOIN PRD_STMH01106 B (NOLOCK) ON A.REP_ID=B.REP_ID 
		  WHERE B.MEMO_ID=@MEMO_ID AND A.REP_ID<>''
		  GROUP BY A.PRODUCT_UID,PRODUCT_CODE)
		  B ON A.PRODUCT_CODE=B.PRODUCT_CODE AND A.PRODUCT_UID=B.PRODUCT_UID
	     
	     
	
	    INSERT PRD_STK_RECON_HIST_MST(RECON_ID,RECON_START_DT,RECON_END_DT,DEPT_ID,RECON_TITLE,
				   COMPUTER_QTY,COMPUTER_AMOUNT,SCAN_QTY,SCAN_AMT,SHORTAGE_QTY,SHORTAGE_AMT,
				   EXCESS_QTY,EXCESS_AMT,USER_CODE,LAST_UPDATE,SETTLEMENT,SETTLEMENT_QTY,SETTLEMENT_AMT)
		SELECT @MEMO_ID AS MEMO_ID,@ST_DATE,@C_DATE,@DEPT_ID,@C_TITLE,
		SUM(COMPUTER_QTY) AS COMPUTER_QTY , SUM(SK.MRP*A.COMPUTER_QTY) AS COMPUTER_AMOUNT ,
		SUM(SCAN_QTY) AS SCAN_QTY ,SUM(SCAN_QTY*SK.MRP)  AS SCAN_AMT ,
		SUM(SHORTAGE_QTY) AS SHORTAGE_QTY ,SUM(SHORTAGE_QTY*SK.MRP)  AS SHORTAGE_AMT ,
		SUM(EXCESS_QTY) AS EXCESS_QTY ,SUM(SK.MRP*EXCESS_QTY) AS EXCESS_AMT,
	   	@USER_CODE,GETDATE(),0,0,0
		FROM #TMPSTKREC A 
		JOIN PRD_SKU SK (NOLOCK) ON A.PRODUCT_CODE= SK.PRODUCT_CODE	AND A.PRODUCT_UID=SK.PRODUCT_UID	
		 	
		INSERT PRD_STK_RECON_HIST_DET (RECON_ID,PRODUCT_CODE,SCAN_QTY,SCAN_AMT,
								   SHORTAGE_QTY,SHORTAGE_AMT,EXCESS_QTY,EXCESS_AMT,
								   ROW_ID,LAST_UPDATE,SETTLEMENT_TYPE,SETTLEMENT_QTY,SETTLEMENT_AMT,COMPUTER_QTY,COMPUTER_AMOUNT,PRODUCT_UID)
		SELECT @MEMO_ID AS MEMO_ID,SK.PRODUCT_CODE,
		SUM(SCAN_QTY) AS SCAN_QTY ,SUM(SCAN_QTY*SK.MRP)  AS SCAN_AMT ,
		SUM(SHORTAGE_QTY) AS SHORTAGE_QTY ,SUM(SHORTAGE_QTY*SK.MRP)  AS SHORTAGE_AMT ,
		SUM(EXCESS_QTY) AS EXCESS_QTY ,SUM(SK.MRP*EXCESS_QTY) AS EXCESS_AMT,
		NEWID(),GETDATE() ,'',0,0,
		SUM(COMPUTER_QTY) AS COMPUTER_QTY , SUM(SK.MRP*A.COMPUTER_QTY) AS COMPUTER_AMOUNT ,A.PRODUCT_UID
		FROM #TMPSTKREC A 
		JOIN PRD_SKU SK (NOLOCK) ON A.PRODUCT_CODE= SK.PRODUCT_CODE AND A.PRODUCT_UID=SK.PRODUCT_UID	
		GROUP BY SK.PRODUCT_CODE,A.PRODUCT_UID
		HAVING NOT(SUM(SHORTAGE_QTY)= 0 AND SUM(SCAN_QTY)=0 AND SUM(EXCESS_QTY)=0   )
	END
	
	COMMIT
	SELECT '' AS ERRMSG	
 END TRY

 BEGIN CATCH
	IF @@TRANCOUNT>0
	  ROLLBACK

	SELECT ERROR_MESSAGE() AS ERRMSG
 END CATCH 	
END
