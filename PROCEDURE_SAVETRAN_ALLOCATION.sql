create PROCEDURE SAVETRAN_ALLOCATION
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CFINYEAR			VARCHAR(10),
	@CXNMEMOID			VARCHAR(40)=''
	
)
AS
BEGIN
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME1		VARCHAR(100),
			@CDETAILTABLENAME3		VARCHAR(100),
			@CDETAILTABLENAME4		VARCHAR(100),
			
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME1	VARCHAR(100),
			@CTEMPDETAILTABLENAME3	VARCHAR(100),
			@CTEMPDETAILTABLENAME4	VARCHAR(100),
			
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE1		VARCHAR(100),
			@CTEMPDETAILTABLE3		VARCHAR(100),
			@CTEMPDETAILTABLE4		VARCHAR(100),
			
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(4),
			@CLOCATIONID			VARCHAR(4),
			@CHODEPTID				VARCHAR(4),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,@CLOCID	VARCHAR(4)

	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	SET @NSTEP = 0		-- SETTTING UP ENVIRONMENT
	SET @CTEMPDBNAME = ''
	SET @CMASTERTABLENAME	= 'BUYER_ORDER_ALLOCATE_MST'
	SET @CDETAILTABLENAME1	= 'BUYER_ORDER_ALLOCATE_DET'
	SET @CDETAILTABLENAME3	= 'BUYER_ORDER_ALLOCATE_SUB_DET'
	SET @CDETAILTABLENAME4	= 'BUYER_ORDER_ALLOCATE_BARCODE'

	
	SET @CTEMPMASTERTABLENAME	= 'TEMP_'+@CMASTERTABLENAME+'_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME1	= 'TEMP_'+@CDETAILTABLENAME1+'_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME3	= 'TEMP_'+@CDETAILTABLENAME3+'_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME4	= 'TEMP_'+@CDETAILTABLENAME4+'_'+LTRIM(RTRIM(STR(@NSPID)))
	
	SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE1	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME1
	SET @CTEMPDETAILTABLE3	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME3
	SET @CTEMPDETAILTABLE4	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME4
	
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'MEMO_ID'
	SET @CMEMONO			= 'MEMO_NO'
	SET @NMEMONOLEN			= 10
	
		SET @CCMD = 'SELECT @CLOCID= location_code  FROM ' + @CTEMPMASTERTABLE
		EXEC SP_EXECUTESQL @CCMD, N'@CLOCID VARCHAR(4) OUTPUT', @CLOCID OUTPUT
								  
	
	SET @CLOCATIONID=@CLOCID
	
	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		

	SET @NSTEP = 10		-- GETTING DEPTID INFO FROM TEMP TABLE
	BEGIN TRY
		BEGIN TRANSACTION
		IF @NUPDATEMODE = 3
		BEGIN
		   SET @CKEYFIELDVAL1=@CXNMEMOID
		   IF ISNULL(@CKEYFIELDVAL1,'')=''
		   BEGIN
		    SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED FOR CANCELLION...'
			GOTO END_PROC  	
			END
			
			UPDATE BUYER_ORDER_ALLOCATE_MST SET CANCELLED =1 WHERE MEMO_ID =@CKEYFIELDVAL1
			
			UPDATE PMT SET ORDER_ID=NULL ,
			       ITEM_MERCHANT_CODE =NULL
			FROM BUYER_ORDER_ALLOCATE_MST A
			JOIN BUYER_ORDER_ALLOCATE_DET B ON A.MEMO_ID =B.MEMO_ID 
			JOIN BUYER_ORDER_ALLOCATE_SUB_DET C ON B.ROW_ID=C.REF_ROW_ID 
			JOIN BUYER_ORDER_ALLOCATE_BARCODE D ON C.ROW_ID =D.REF_ROW_ID 
			JOIN JOBWORK_PMT  PMT ON PMT.PRODUCT_CODE =D.PRODUCT_CODE
			WHERE A.MEMO_ID =@CKEYFIELDVAL1
			
			GOTO END_PROC  	
		END
		
		SET @NSTEP = 15
		-- GETTING DEPT_ID FROM TEMP MASTER TABLE
		SET @CCMD = 'SELECT @CMEMODEPTID = Location_code, @CKEYFIELDVAL1 = MEMO_ID FROM ' + @CTEMPMASTERTABLE
		EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT, @CKEYFIELDVAL1 VARCHAR(50) OUTPUT', 
								  @CMEMODEPTID OUTPUT, @CKEYFIELDVAL1 OUTPUT
		IF (@CMEMODEPTID IS NULL )
		BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED...'
			  GOTO END_PROC  		
		END
		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	
			SET @NSTEP = 20		-- GENERATING NEW KEY
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN
				-- GENERATING NEW MRR_NO		
				SET @NSAVETRANLOOP=0
				WHILE @NSAVETRANLOOP=0
				BEGIN
					SET @NSTEP = 23
					EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CLOCATIONID, 1,
									@CFINYEAR,0, @CMEMONOVAL OUTPUT   
					SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
											WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
											AND FIN_YEAR = '''+@CFINYEAR+''' )
									SET @NLOOPOUTPUT=0
								ELSE
									SET @NLOOPOUTPUT=1'
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
				END

				IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
					  GOTO END_PROC  		
				END

				SET @NSTEP = 30		-- GENERATING NEW ID
				-- GENERATING NEW ORDER ID
				SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+REPLICATE('0', (22-LEN(@CLOCATIONID + @CFINYEAR))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  GOTO END_PROC
				END
				
				SET @NSTEP = 35
				-- CHECK WETHER THE MEMO ID IS STILL LATER
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  GOTO END_PROC
				END

				SET @NSTEP = 40		-- UPDATING NEW ID INTO TEMP TABLES
				-- UPDATING NEWLY GENERATED WORK ORDER NO AND ID IN MASTER & DETAIL TABLES
				SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
							@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
				EXEC SP_EXECUTESQL @CCMD
				
				SET @NSTEP = 50
				
				SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD
				
			END
		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
			SET @NSTEP = 50		-- GETTING ID INFO FROM TEMP TABLE
			-- GETTING ORDER_ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = MEMO_ID, @CMEMONOVAL = MEMO_NO FROM ' + @CTEMPMASTERTABLE
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  GOTO END_PROC  		
			END
			
			SET @NSTEP = 60		-- UPDATING SENT_TO_HO FLAG TEMP TABLE
			
			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET LAST_UPDATE=GETDATE() '
			EXEC SP_EXECUTESQL @CCMD
			
				
		END	-- END OF EDITMODE

		SET @NSTEP = 95

		-- CHECK WETHER THE MEMO ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END

		-- UPDATING MASTER TABLE (PIM01106) FROM TEMP TABLE
		SET @NSTEP = 100		-- UPDATING MASTER TABLE

		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			, @BALWAYSUPDATE = 1
			
		

		SET @NSTEP = 130
		SET @CCMD = N'ALTER TABLE '+@CTEMPDETAILTABLE1+' ADD OLD_ROW_ID VARCHAR(40)'
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD
		
		
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET OLD_ROW_ID = ROW_ID'
        PRINT @CCMD  
        EXEC SP_EXECUTESQL @CCMD  
		
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(38), NEWID())  
        WHERE LEFT(ROW_ID,5) = ''LATER'''
        PRINT @CCMD  
        EXEC SP_EXECUTESQL @CCMD  
              
		
		 SET @CCMD = N'UPDATE B SET REF_ROW_ID=A.ROW_ID FROM ' + @CTEMPDETAILTABLE1 + ' A
		 JOIN ' + @CTEMPDETAILTABLE3 + ' B ON A.OLD_ROW_ID=B.REF_ROW_ID' 
		 PRINT @CCMD 
         EXEC SP_EXECUTESQL @CCMD 
         
         

		SET @NSTEP = 135
		SET @CCMD = N'ALTER TABLE '+@CTEMPDETAILTABLE3+' ADD OLD_ROW_ID VARCHAR(40)'
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD
		
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE3 + ' SET OLD_ROW_ID = ROW_ID'
        PRINT @CCMD  
        EXEC SP_EXECUTESQL @CCMD  
        
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE3 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(38), NEWID())  
        WHERE LEFT(ROW_ID,5) = ''LATER'''
        PRINT @CCMD  
        EXEC SP_EXECUTESQL @CCMD  
              
		
		 SET @CCMD = N'UPDATE B SET REF_ROW_ID=A.ROW_ID FROM ' + @CTEMPDETAILTABLE3 + ' A
		 JOIN ' + @CTEMPDETAILTABLE4 + ' B ON A.OLD_ROW_ID=B.REF_ROW_ID' 
		 PRINT @CCMD 
         EXEC SP_EXECUTESQL @CCMD 
         
         SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE4 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(38), NEWID())  
        WHERE LEFT(ROW_ID,5) = ''LATER'''
        PRINT @CCMD  
        EXEC SP_EXECUTESQL @CCMD  
         
         	
		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME1
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME1
			, @CKEYFIELD1	= 'ROW_ID'
			, @BALWAYSUPDATE = 1
		
		    		
		-- INSERTING/UPDATING THE ENTRIES IN [BUYER_ORDER_ALLOCATE_SUB_DET] TABLE FROM TEMPTABLE
		SET @NSTEP = 145		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES
		
			EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME3
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME3
			, @CKEYFIELD1	= 'ROW_ID'
			, @BALWAYSUPDATE = 1
	
		
			EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME4
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME4
			, @CKEYFIELD1	= 'ROW_ID'
			, @BALWAYSUPDATE = 1
		
   
UPDATE_UPC:	
	IF @NUPDATEMODE IN(1)
	BEGIN
	    
	  
	     
	     UPDATE A SET ORDER_ID=BUYER_ORDER_ID ,ITEM_MERCHANT_CODE=BD.ITEM_MERCHANT_CODE 
	     FROM JOBWORK_PMT  A
	     JOIN BUYER_ORDER_ALLOCATE_BARCODE B (NOLOCK) ON A.PRODUCT_CODE=B.PRODUCT_CODE
	     JOIN BUYER_ORDER_ALLOCATE_SUB_DET C (NOLOCK) ON C.ROW_ID=B.REF_ROW_ID
	     JOIN BUYER_ORDER_ALLOCATE_DET D (NOLOCK) ON D.ROW_ID=C.REF_ROW_ID
	     JOIN BUYER_ORDER_ALLOCATE_MST MST (NOLOCK)  ON MST.MEMO_ID=D.MEMO_ID 
	     LEFT JOIN BUYER_ORDER_DET BD (NOLOCK) ON BD.order_id =BUYER_ORDER_ID
	     AND MST.ARTICLE_CODE =BD.article_code AND MST.PARA1_CODE =BD.para1_code AND MST.PARA2_CODE =BD.PARA2_CODE
	     WHERE D.MEMO_ID=@CKEYFIELDVAL1
	     
	     
	     IF OBJECT_ID ('TEMPDB..#TMPALOCATE','U') IS NOT NULL
	        DROP TABLE #TMPALOCATE
	        
	     	SELECT A.MEMO_ID ,A.MEMO_DT , BR.PRODUCT_CODE ,A.ARTICLE_CODE ,A.PARA1_CODE ,A.PARA2_CODE 
	     	INTO #TMPALOCATE
			FROM BUYER_ORDER_ALLOCATE_MST A  (NOLOCK) 
			JOIN BUYER_ORDER_ALLOCATE_DET DET (NOLOCK) ON A.MEMO_ID=DET.MEMO_ID  
			JOIN BUYER_ORDER_ALLOCATE_SUB_DET SD (NOLOCK) ON DET.ROW_ID=SD.REF_ROW_ID  
			JOIN BUYER_ORDER_ALLOCATE_BARCODE BR (NOLOCK) ON BR.REF_ROW_ID=SD.ROW_ID  
			WHERE A.CANCELLED =0
			AND A.MEMO_ID=@CKEYFIELDVAL1
		
		   IF NOT EXISTS (SELECT TOP 1 'U' FROM #TMPALOCATE)
	       BEGIN
	       SET @CERRORMSG = 'BARCODE DETAILS NOT FOUND  Please check'
		   GOTO END_PROC

	      END
		
			
			
	    IF OBJECT_ID ('TEMPDB..#TMPVALIDATEART','U') IS NOT NULL
	       DROP TABLE #TMPVALIDATEART
			 
		SELECT ART1.article_no AS JOBCARD_ARTICLE_NO,ART.article_NO AS ALOCATION_ARTICLE,A.PRODUCT_CODE 
		 INTO #TMPVALIDATEART
		 FROM
		(
		  SELECT * FROM #TMPALOCATE
		
		) A
		LEFT JOIN
		(
		
		 SELECT A.ORDER_ID, A.PRODUCT_CODE ,SKU.article_code ,SKU.para1_code ,SKU.para2_code  
		FROM JOBWORK_PMT A (NOLOCK)
		JOIN SKU (NOLOCK) ON A.PRODUCT_CODE =SKU.PRODUCT_CODE
		WHERE ISNULL(A.ORDER_ID,'')<>'' --AND D.CANCELLED =0
		
		) B ON A.PRODUCT_CODE =B.PRODUCT_CODE 
		JOIN ARTICLE ART ON ART.article_code =A.article_code 
		JOIN ARTICLE ART1 ON ART1.article_code =B.article_code 
		WHERE (A.article_code <>B.ARTICLE_CODE OR A.para1_code <>B.PARA1_CODE OR A.para2_code <>B.PARA2_CODE )
        
	  IF EXISTS (SELECT TOP 1 'U' FROM #TMPVALIDATEART)
	  BEGIN
	       SET @CERRORMSG = 'MISMATCH ARTICLE FOUND AGAINST ALLOCATION Please check'
		   GOTO END_PROC

	  END
	     
	
         	
	GOTO END_PROC
	END
	

	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(RTRIM(STR(@NSTEP))) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		
		GOTO END_PROC
	END CATCH
	
END_PROC:
     

	IF ISNULL(@CCMDOUTPUT,'') = ''
	BEGIN
		INSERT @OUTPUT ( ERRMSG, MEMO_ID)
				VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )
		
		SELECT * FROM @OUTPUT	
	END
	ELSE
		EXEC SP_EXECUTESQL @CCMDOUTPUT
	
	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CCMDOUTPUT,'') = '' AND ISNULL(@CERRORMSG,'') = ''
			COMMIT TRANSACTION
		ELSE
			ROLLBACK
	END			
	
	
	
	SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPDETAILTABLE1 + ''',''U'') IS NOT NULL
  DROP TABLE ' + @CTEMPDETAILTABLE1 +'
                  IF OBJECT_ID( ''' + @CTEMPMASTERTABLE + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPMASTERTABLE +'
                  IF OBJECT_ID( ''' + @CTEMPDETAILTABLE3 + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPDETAILTABLE3 +' 
                  IF OBJECT_ID( ''' + @CTEMPDETAILTABLE4 + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPDETAILTABLE4 +''
	 EXEC SP_EXECUTESQL @CCMD
	 
END --new





