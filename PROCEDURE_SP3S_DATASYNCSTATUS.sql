CREATE PROC SP3S_DATASYNCSTATUS--(LocId 3 digit change by Sanjay:05-11-2024)
AS 
BEGIN

DECLARE @CtOTAL nUMERIC(14,0), @CMergetotal nUMERIC(14,0),@CCURLOCID VARCHAR(4)

SELECT TOP 1 @CCURLOCID=VALUE FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID'

IF  EXISTS (SELECT TOP 1 value FROM config WHERE CONFIG_OPTION='SYNCH_SKU_PROCESS_STARTED' and VALUE=1)
BEGIN
Select 	@CtOTAL= count(product_code) from sku (nolock)
Select 	@CMergetotal= count(code) from Masterdata (nolock)
END
SELECT 'PURCHASE ORDER' AS [TRANSACTION] ,COUNT(PO_id) AS [TOTAL MEMO],
SUM(CASE WHEN A.LAST_UPDATE =ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA SYNC],
SUM(CASE WHEN A.LAST_UPDATE <>ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA PENDING FOR SYNC],
MAX(A.HO_SYNCH_LAST_UPDATE) AS [LAST SYNC ON],
ISNULL(B.ERRMSG ,'') AS [ERROR]
FROM POM01106 A (NOLOCK)
LEFT JOIN XNTYPE_MERGING_ERRORS B ON B.XN_TYPE ='PO'
GROUP BY ISNULL(B.ERRMSG ,'')

UNION 

SELECT 'PURCHASE (Merging)' AS [TRANSACTION] ,COUNT(MRR_ID) AS [TOTAL MEMO],
SUM(CASE WHEN A.LAST_UPDATE =ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA SYNC],
SUM(CASE WHEN A.LAST_UPDATE <>ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA PENDING FOR SYNC],
MAX(ISNULL(HO_SYNCH_LAST_UPDATE ,'')) AS [LAST SYNC ON],
ISNULL(B.ERRMSG ,'') AS [ERROR]
FROM PIM01106 A (NOLOCK)
LEFT JOIN XNTYPE_MERGING_ERRORS B ON B.XN_TYPE ='PUR'
GROUP BY ISNULL(B.ERRMSG ,'')

UNION 

SELECT 'PURCHASE (Reco)' AS [TRANSACTION] ,COUNT(MRR_ID) AS [TOTAL MEMO],
SUM(CASE WHEN A.LAST_UPDATE =ISNULL(auto_posreco_last_update ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA SYNC],
SUM(CASE WHEN A.LAST_UPDATE <>ISNULL(auto_posreco_last_update ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA PENDING FOR SYNC],
MAX(ISNULL(auto_posreco_last_update ,'')) AS [LAST SYNC ON],
'' AS [ERROR]
FROM PIM01106 A (NOLOCK)

UNION 

SELECT 'SPLIT AND COMBINE (Merging)' AS [TRANSACTION] ,COUNT(A.MEMO_ID) AS [TOTAL MEMO],
SUM(CASE WHEN A.LAST_UPDATE =ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA SYNC],
SUM(CASE WHEN A.LAST_UPDATE <>ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA PENDING FOR SYNC],
MAX(ISNULL(HO_SYNCH_LAST_UPDATE ,'')) AS [LAST SYNC ON],
ISNULL(B.ERRMSG ,'') AS [ERROR]
FROM SNC_MST A (NOLOCK)
LEFT JOIN XNTYPE_MERGING_ERRORS B ON B.XN_TYPE ='SNC'
GROUP BY ISNULL(B.ERRMSG ,'')

UNION 

SELECT 'SPLIT AND COMBINE (Reco)' AS [TRANSACTION] ,COUNT(A.MEMO_ID) AS [TOTAL MEMO],
SUM(CASE WHEN A.LAST_UPDATE =ISNULL(auto_posreco_last_update ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA SYNC],
SUM(CASE WHEN A.LAST_UPDATE <>ISNULL(auto_posreco_last_update ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA PENDING FOR SYNC],
MAX(ISNULL(auto_posreco_last_update ,'')) AS [LAST SYNC ON],
'' AS [ERROR]
FROM SNC_MST A (NOLOCK)

UNION 

SELECT 'ITEM RATE REVISION' AS [TRANSACTION] ,COUNT(irm_memo_id) AS [TOTAL MEMO],
SUM(CASE WHEN A.LAST_UPDATE =ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA SYNC],
SUM(CASE WHEN A.LAST_UPDATE <>ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA PENDING FOR SYNC],
MAX(ISNULL(HO_SYNCH_LAST_UPDATE ,'')) AS [LAST SYNC ON],
ISNULL(B.ERRMSG ,'') AS [ERROR]
FROM IRM01106 A (NOLOCK)
LEFT JOIN XNTYPE_MERGING_ERRORS B ON B.XN_TYPE ='IRR'
where a.location_Code=@CCURLOCID
GROUP BY ISNULL(B.ERRMSG ,'')

UNION 
SELECT 'APPROVAL ISSUE (Merging)' AS [TRANSACTION] ,COUNT(A.memo_id) AS [TOTAL MEMO],
SUM(CASE WHEN A.LAST_UPDATE =ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA SYNC],
SUM(CASE WHEN A.LAST_UPDATE <>ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA PENDING FOR SYNC],
MAX(ISNULL(HO_SYNCH_LAST_UPDATE ,'')) AS [LAST SYNC ON],
ISNULL(B.ERRMSG ,'') AS [ERROR]
FROM APM01106 A (NOLOCK)
LEFT JOIN XNTYPE_MERGING_ERRORS B ON B.XN_TYPE ='APP'
GROUP BY ISNULL(B.ERRMSG ,'')

UNION 

SELECT 'APPROVAL ISSUE (Reco)' AS [TRANSACTION] ,COUNT(A.memo_id) AS [TOTAL MEMO],
SUM(CASE WHEN A.LAST_UPDATE =ISNULL(auto_posreco_last_update ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA SYNC],
SUM(CASE WHEN A.LAST_UPDATE <>ISNULL(auto_posreco_last_update ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA PENDING FOR SYNC],
MAX(ISNULL(auto_posreco_last_update ,'')) AS [LAST SYNC ON],
'' AS [ERROR]
FROM APM01106 A (NOLOCK)

UNION 
SELECT 'APPROVAL RETURN (Merging)' AS [TRANSACTION] ,COUNT(A.memo_id) AS [TOTAL MEMO],
SUM(CASE WHEN A.LAST_UPDATE =ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA SYNC],
SUM(CASE WHEN A.LAST_UPDATE <>ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA PENDING FOR SYNC],
MAX(ISNULL(HO_SYNCH_LAST_UPDATE ,'')) AS [LAST SYNC ON],
ISNULL(B.ERRMSG ,'') AS [ERROR]
FROM APPROVAL_RETURN_MST A (NOLOCK)
LEFT JOIN XNTYPE_MERGING_ERRORS B ON B.XN_TYPE ='APR'
GROUP BY ISNULL(B.ERRMSG ,'')

UNION 

SELECT 'APPROVAL RETURN (Reco)' AS [TRANSACTION] ,COUNT(A.memo_id) AS [TOTAL MEMO],
SUM(CASE WHEN A.LAST_UPDATE =ISNULL(auto_posreco_last_update ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA SYNC],
SUM(CASE WHEN A.LAST_UPDATE <>ISNULL(auto_posreco_last_update ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA PENDING FOR SYNC],
MAX(ISNULL(auto_posreco_last_update ,'')) AS [LAST SYNC ON],
'' AS [ERROR]
FROM APPROVAL_RETURN_MST A (NOLOCK)

UNION 

SELECT 'WSL PACK SLIP (Merging)' AS [TRANSACTION] ,COUNT(A.ps_id) AS [TOTAL MEMO],
SUM(CASE WHEN A.LAST_UPDATE =ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA SYNC],
SUM(CASE WHEN A.LAST_UPDATE <>ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA PENDING FOR SYNC],
MAX(ISNULL(HO_SYNCH_LAST_UPDATE ,'')) AS [LAST SYNC ON],
ISNULL(B.ERRMSG ,'') AS [ERROR]
FROM WPS_MST A (NOLOCK)
LEFT JOIN XNTYPE_MERGING_ERRORS B ON B.XN_TYPE ='WPS'
GROUP BY ISNULL(B.ERRMSG ,'')

UNION 

SELECT 'WSL PACK SLIP (Reco)' AS [TRANSACTION] ,COUNT(A.ps_id) AS [TOTAL MEMO],
SUM(CASE WHEN A.LAST_UPDATE =ISNULL(auto_posreco_last_update ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA SYNC],
SUM(CASE WHEN A.LAST_UPDATE <>ISNULL(auto_posreco_last_update ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA PENDING FOR SYNC],
MAX(ISNULL(auto_posreco_last_update ,'')) AS [LAST SYNC ON],
'' AS [ERROR]
FROM WPS_MST A (NOLOCK)


UNION 
SELECT 'WHOLESALE INV (Merging)' AS [TRANSACTION] ,COUNT(A.INV_ID) AS [TOTAL MEMO],
SUM(CASE WHEN A.LAST_UPDATE =ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA SYNC],
SUM(CASE WHEN A.LAST_UPDATE <>ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA PENDING FOR SYNC],
MAX(ISNULL(HO_SYNCH_LAST_UPDATE ,'')) AS [LAST SYNC ON],
ISNULL(B.ERRMSG ,'') AS [ERROR]
FROM INM01106 A (NOLOCK)
LEFT JOIN XNTYPE_MERGING_ERRORS B ON B.XN_TYPE ='WSL'
GROUP BY ISNULL(B.ERRMSG ,'')

UNION 

SELECT 'WHOLESALE INV (Reco)' AS [TRANSACTION] ,COUNT(A.INV_ID) AS [TOTAL MEMO],
SUM(CASE WHEN A.LAST_UPDATE =ISNULL(auto_posreco_last_update ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA SYNC],
SUM(CASE WHEN A.LAST_UPDATE <>ISNULL(auto_posreco_last_update ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA PENDING FOR SYNC],
MAX(ISNULL(auto_posreco_last_update ,'')) AS [LAST SYNC ON],
'' AS [ERROR]
FROM INM01106 A (NOLOCK)

UNION 

SELECT 'RETAIL SALE (Merging)' AS [TRANSACTION] ,COUNT(cm_id) AS [TOTAL MEMO],
SUM(CASE WHEN A.LAST_UPDATE =ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA SYNC],
SUM(CASE WHEN A.LAST_UPDATE <>ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA PENDING FOR SYNC],
MAX(ISNULL(HO_SYNCH_LAST_UPDATE ,'')) AS [LAST SYNC ON],
ISNULL(B.ERRMSG ,'') AS [ERROR]
FROM CMM01106 A (NOLOCK)
LEFT JOIN XNTYPE_MERGING_ERRORS B ON B.XN_TYPE ='SLS'
GROUP BY ISNULL(B.ERRMSG ,'')

UNION 

SELECT 'RETAIL SALE (Reco)' AS [TRANSACTION] ,COUNT(cm_id) AS [TOTAL MEMO],
SUM(CASE WHEN A.LAST_UPDATE =ISNULL(auto_posreco_last_update ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA SYNC],
SUM(CASE WHEN A.LAST_UPDATE <>ISNULL(auto_posreco_last_update,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA PENDING FOR SYNC],
MAX(ISNULL(auto_posreco_last_update ,'')) AS [LAST SYNC ON],
'' AS [ERROR]
FROM CMM01106 A (NOLOCK)

UNION 

SELECT 'CUSTOMER ADVANCE RECEIPT' AS [TRANSACTION] ,COUNT(ADV_REC_ID) AS [TOTAL MEMO],
SUM(CASE WHEN A.LAST_UPDATE =ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA SYNC],
SUM(CASE WHEN A.LAST_UPDATE <>ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA PENDING FOR SYNC],
MAX(A.HO_SYNCH_LAST_UPDATE) AS [LAST SYNC ON],
ISNULL(B.ERRMSG ,'') AS [ERROR]
FROM ARC01106 A (NOLOCK)
LEFT JOIN XNTYPE_MERGING_ERRORS B ON B.XN_TYPE ='ARC'
GROUP BY ISNULL(B.ERRMSG ,'')


UNION


SELECT 'Party Debit Note' AS [TRANSACTION] ,COUNT(rm_id ) AS [TOTAL MEMO],
SUM(CASE WHEN A.LAST_UPDATE =ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA SYNC],
SUM(CASE WHEN A.LAST_UPDATE <>ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA PENDING FOR SYNC],
MAX(A.HO_SYNCH_LAST_UPDATE) AS [LAST SYNC ON],
ISNULL(B.ERRMSG ,'') AS [ERROR]
FROM RMM01106 A (NOLOCK)
LEFT JOIN XNTYPE_MERGING_ERRORS B ON B.XN_TYPE ='PRT'
Where isnull(A.mode,1)<> 2
GROUP BY ISNULL(B.ERRMSG ,'')

UNION

SELECT 'Group  Debit Note' AS [TRANSACTION] ,COUNT(RM_ID) AS [TOTAL MEMO],
SUM(CASE WHEN A.LAST_UPDATE =ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA SYNC],
SUM(CASE WHEN A.LAST_UPDATE <>ISNULL(HO_SYNCH_LAST_UPDATE ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA PENDING FOR SYNC],
MAX(A.HO_SYNCH_LAST_UPDATE) AS [LAST SYNC ON],
ISNULL(B.ERRMSG ,'') AS [ERROR]
FROM RMM01106 A (NOLOCK)
LEFT JOIN XNTYPE_MERGING_ERRORS B ON B.XN_TYPE IN('PRT','DOCPRT')
Where isnull(A.mode,1)=  2
GROUP BY ISNULL(B.ERRMSG ,'')


UNION

SELECT 'WizClip Bill Upload' AS [TRANSACTION] ,COUNT(A.cm_id) AS [TOTAL MEMO],
SUM(CASE WHEN A.LAST_UPDATE =ISNULL(wizclip_bill_synch_last_update ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA SYNC],
SUM(CASE WHEN A.LAST_UPDATE <>ISNULL(wizclip_bill_synch_last_update ,A.LAST_UPDATE) THEN 1 ELSE 0 END) AS [DATA PENDING FOR SYNC],
MAX(wizclip_bill_synch_last_update) AS [LAST SYNC ON],
ERRMSG AS [ERROR]
FROM CMM01106 A (NOLOCK)
left outer join WIZCLIP_ERROR on 1=1
WHERE customer_code<>'000000000000' 
group by  ERRMSG
ORDER BY 1

END


--EXEc SP3S_DATASYNCSTATUS
--Exec SP3S_DATASENDING_MEMO





