CREATE PROCEDURE SP3S_JOBWORK_ISSUE
(
	 @DFROM_DT DATETIME
	,@DTO_DT DATETIME
	,@AGENCY_CODE VARCHAR(100)=''
	,@CANCELLED NUMERIC(1)=2--0 FOR UN-CANCELLED 1 FOR CANCELLED 2 FOR ALL
	,@CJobCardID VARCHAR(50)=''
	,@LOC VARCHAR(5)=''
)
--WITH ENCRYPTION
AS
BEGIN  

 if(@CJobCardID='' )
 BEGIN
 SELECT A.ISSUE_NO,A.ISSUE_ID AS MEMO_ID,
 ISSUE_DT=CONVERT(VARCHAR,A.ISSUE_DT,105),
 CANCELLED=CASE WHEN A.CANCELLED=0 THEN '' ELSE 'CANCELLED' END,
 A.COMPANY_CODE,LAST_UPDATE=CONVERT(VARCHAR,A.LAST_UPDATE,105),A.FIN_YEAR,
 ISSUED_BY,A.CHECKED_BY,U.USERNAME,EDT_USER_NAME=U1.USERNAME,
 A.SUBTOTAL,A.DISCOUNT_PERCENTAGE,A.DISCOUNT_AMOUNT,A.ROUND_OFF,A.TOTAL_AMOUNT,
 A.REF_NO,D.AGENCY_NAME,A.REMARKS,A.ISSUE_TYPE,A.WIP,      
 --JOBS.JOB_NAME,
 CONVERT(VARCHAR,G.DUE_DT,105) AS DELIVERY_DT ,  
 SUM((G.JOB_RATE*G.QUANTITY)) AS AMOUNT,SUM((G.QUANTITY)) AS ISSUE_QUANTITY,
 B.BIN_NAME,G.BIN_ID,PREVJOB.JOB_NAME AS PREV_JOB_NAME  ,'' MEMO_NO ,'' MEMO_ID                  
 FROM JOBWORK_ISSUE_MST A (NOLOCK)             
 JOIN JOBWORK_ISSUE_DET G (NOLOCK)  ON A.ISSUE_ID = G.ISSUE_ID                               
 --JOIN JOBS (NOLOCK) ON JOBS.JOB_CODE=G.JOB_CODE   
 JOIN USERS (NOLOCK) U ON A.USER_CODE=U.USER_CODE
 JOIN USERS (NOLOCK) U1 ON A.USER_CODE=U1.USER_CODE
 JOIN PRD_AGENCY_MST D (NOLOCK) ON A.AGENCY_CODE = D.AGENCY_CODE  
 JOIN BIN B (NOLOCK)ON B.BIN_ID =G.BIN_ID  
 LEFT JOIN JOBS PREVJOB (NOLOCK) ON PREVJOB.JOB_CODE=G.PREV_JOB_CODE  
 
 WHERE A.ISSUE_DT BETWEEN @DFROM_DT AND @DTO_DT  
	AND (@CANCELLED=2 OR A.CANCELLED=@CANCELLED)
	AND (@AGENCY_CODE='' OR A.AGENCY_CODE=@AGENCY_CODE)   
	AND (@LOC='' OR A.location_Code =@LOC)   
 GROUP BY  A.ISSUE_NO,A.ISSUE_ID,
 A.ISSUE_DT,A.CANCELLED,A.COMPANY_CODE,A.LAST_UPDATE,A.FIN_YEAR,
 A.ISSUED_BY,A.CHECKED_BY,U.USERNAME,U1.USERNAME,
 A.SUBTOTAL,A.DISCOUNT_PERCENTAGE,A.DISCOUNT_AMOUNT,A.ROUND_OFF,A.TOTAL_AMOUNT,
 A.REF_NO,D.AGENCY_NAME,A.REMARKS,A.ISSUE_TYPE,A.WIP--,JOBS.JOB_NAME
 ,G.DUE_DT  ,B.BIN_NAME,G.BIN_ID,PREVJOB.JOB_NAME
 END
 ELSE
 BEGIN
	SELECT A.ISSUE_NO,A.ISSUE_ID AS MEMO_ID,
	ISSUE_DT=CONVERT(VARCHAR,A.ISSUE_DT,105),
	CANCELLED=CASE WHEN A.CANCELLED=0 THEN '' ELSE 'CANCELLED' END,
	A.COMPANY_CODE,LAST_UPDATE=CONVERT(VARCHAR,A.LAST_UPDATE,105),A.FIN_YEAR,
	ISSUED_BY,A.CHECKED_BY,U.USERNAME,EDT_USER_NAME=U1.USERNAME,
	A.SUBTOTAL,A.DISCOUNT_PERCENTAGE,A.DISCOUNT_AMOUNT,A.ROUND_OFF,A.TOTAL_AMOUNT,
	A.REF_NO,D.AGENCY_NAME,A.REMARKS,A.ISSUE_TYPE,A.WIP,      
	--JOBS.JOB_NAME,
	CONVERT(VARCHAR,G.DUE_DT,105) AS DELIVERY_DT ,  
	SUM((G.JOB_RATE*G.QUANTITY)) AS AMOUNT,SUM((G.QUANTITY)) AS ISSUE_QUANTITY,
	B.BIN_NAME,G.BIN_ID,PREVJOB.JOB_NAME AS PREV_JOB_NAME  ,X.MEMO_NO ,X.MEMO_ID                  
	FROM JOBWORK_ISSUE_MST A (NOLOCK)             
	JOIN JOBWORK_ISSUE_DET G (NOLOCK)  ON A.ISSUE_ID = G.ISSUE_ID                               
	--JOIN JOBS (NOLOCK) ON JOBS.JOB_CODE=G.JOB_CODE   
	JOIN USERS (NOLOCK) U ON A.USER_CODE=U.USER_CODE
	JOIN USERS (NOLOCK) U1 ON A.USER_CODE=U1.USER_CODE
	JOIN PRD_AGENCY_MST D (NOLOCK) ON A.AGENCY_CODE = D.AGENCY_CODE  
	JOIN BIN B (NOLOCK)ON B.BIN_ID =G.BIN_ID  
	JOIN
	(
		SELECT PRODUCT_CODE,C.MEMO_NO,C.MEMO_ID 
		FROM ORD_PLAN_BARCODE_DET a (NOLOCK)
		JOIN ORD_PLAN_DET b (NOLOCK) ON b.ROW_ID=a.REFROW_ID
		JOIN ORD_PLAN_MST c (NOLOCK) ON c.MEMO_ID=b.MEMO_ID
		WHERE (C.MEMO_ID=@CJobCardID)
		GROUP BY PRODUCT_CODE,C.MEMO_NO,C.MEMO_ID 
	)X ON X.PRODUCT_CODE=G.product_code
	LEFT JOIN JOBS PREVJOB (NOLOCK) ON PREVJOB.JOB_CODE=G.PREV_JOB_CODE  
	WHERE A.ISSUE_DT BETWEEN @DFROM_DT AND @DTO_DT  
	AND (@CANCELLED=2 OR A.CANCELLED=@CANCELLED)
	AND (@AGENCY_CODE='' OR A.AGENCY_CODE=@AGENCY_CODE) 
		AND (@LOC='' OR A.location_Code=@LOC)   
  
	GROUP BY  A.ISSUE_NO,A.ISSUE_ID,
	A.ISSUE_DT,A.CANCELLED,A.COMPANY_CODE,A.LAST_UPDATE,A.FIN_YEAR,
	A.ISSUED_BY,A.CHECKED_BY,U.USERNAME,U1.USERNAME,
	A.SUBTOTAL,A.DISCOUNT_PERCENTAGE,A.DISCOUNT_AMOUNT,A.ROUND_OFF,A.TOTAL_AMOUNT,
	A.REF_NO,D.AGENCY_NAME,A.REMARKS,A.ISSUE_TYPE,A.WIP--,JOBS.JOB_NAME
	,G.DUE_DT  ,B.BIN_NAME,G.BIN_ID,PREVJOB.JOB_NAME ,X.MEMO_NO ,X.MEMO_ID 
 END                
---END OF THE PROCEDURE SP3S_JOBWORK_ISSUE

END
