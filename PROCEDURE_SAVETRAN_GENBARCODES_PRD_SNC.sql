-- PROCEDURE TO GENERATE BARCODES FOR A GIVEN MRR_ID OR PO_ID  
CREATE PROCEDURE SAVETRAN_GENBARCODES_PRD_SNC    
(    
 @CXNID VARCHAR(40),    
 @CPREFIX VARCHAR(50),    
 @NMODE INT= 1,    
 @NSPID INT=0,    
 @LOCID VARCHAR(2)='',    
 @CERRORMSG VARCHAR(MAX) OUTPUT    
)    
--WITH ENCRYPTION
AS     
BEGIN    
 -- @NMODE : SOURCE OF BARCODE GENERATION, 1- FROM PURCHASE, 2- FROM PO    
 --PRINT 'ROHIT 1'    
 -- THIS PROCEDURE ASSUMES THAT THE PID TABLE IS NORMALIZED FOR UNIQUE CODING    
 -- IF IT IS NOT NORMALIZED THEN THE PROCESS WILL FAIL    
    
 BEGIN TRY    
     
	 DECLARE @NROWS    BIGINT,    
	   @NEANROWS   BIGINT,    
	   @NFIXROWS   BIGINT,    
	   @NCTR    BIGINT,    
	   @CPIDROWID   VARCHAR(50),    
	   @CNEXTPRODUCTCODE VARCHAR(50),    
	   @NNEXTKEYVALUE  NUMERIC(30,0),    
	   @CPIMDEPTID   VARCHAR(5),  
	   @CBIN_ALIAS	VARCHAR(10),  
	   @CLOCID    VARCHAR(2),@CHOLOCID VARCHAR(5),    
	   @CCMD NVARCHAR(MAX),@CTEMPIRDTABLE VARCHAR(MAX),@NWHCOUNT INT,    
	   @CBARCODEPREFIX VARCHAR(100),@CADDPREFIX VARCHAR(50),@DMEMODT DATETIME,    
	   @CPREFIXYEARCODE BIT,@CPREFIXLOCID BIT,@CYEARCODE CHAR(2),@CADDLOCIDPREFIX CHAR(2),    
	   @CTEMPIRMTABLE VARCHAR(500),@NSTEP INT,@CCUSTOMPREFIX VARCHAR(50),@BLOOP BIT,@NPURLOCCNT INT    
		 ,@BRANDOMGEN BIT,@NBARCODELEN INT,@CARTICLENO VARCHAR(300),@CARTPREFIX VARCHAR(50),    
		 @BGENEANCODES BIT,@CGENEANCODES VARCHAR(5),    
	   @CEANPREFIX VARCHAR(10),@NEANLENGTH INT,@CEANLENGTH VARCHAR(5),@CPREFIXFLOORID VARCHAR(10),  
	   @CADDFLOORIDPREFIX VARCHAR(10),@NSNCROWS INT,@NLOOPQTY INT,@NBARCODEQTY INT,
	   @CMIXNMATCHACCODE CHAR(10),@NROWS1 INT,@NCODINGSCHEME INT      
	  
	          
	 SELECT @CYEARCODE='',@CADDLOCIDPREFIX='',@CERRORMSG=''    
	     
	 SET @NSTEP=10    
	
	 IF OBJECT_ID('TEMPDB..#PIDROWS','U') IS NOT NULL    
	  DROP TABLE #PIDROWS    
	    
	 IF OBJECT_ID('TEMPDB..#BARCODES','U') IS NOT NULL    
	  DROP TABLE #BARCODES    
	 /*UNMERGED:16MAY2013*/    
	 SELECT A.ROW_ID AS PID_ROW_ID,B.CODING_SCHEME,A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,CONVERT(INT,0) AS SRNO  
	 ,CONVERT(BIT,0) AS GEN_EAN_CODES  
	 INTO #PIDROWS   
	 FROM PID01106 A    
	 JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
	 WHERE 1=2    
	          
	 SELECT A.ROW_ID AS PID_ROW_ID,A.PRODUCT_CODE INTO #BARCODES FROM PID01106 A  WHERE 1=2    
	     
	 PRINT 'GENBC-1'    
	 SET @NSTEP=20    
	     
	 SET @NROWS = 0    
	 SET @NFIXROWS = 0    
	 SET @NEANROWS = 0    
	     
	     
	 SELECT TOP 1 @CGENEANCODES=VALUE FROM CONFIG WHERE CONFIG_OPTION='GEN_EAN_CODES'    
	 IF @CGENEANCODES='1'    
	  SET @BGENEANCODES=1    
	 ELSE    
	  SET @BGENEANCODES=0    
	     
	 SELECT TOP 1 @CEANPREFIX=VALUE FROM CONFIG WHERE CONFIG_OPTION='EAN_PREFIX'    
	 SELECT TOP 1 @CEANLENGTH=VALUE FROM CONFIG WHERE CONFIG_OPTION='EAN_LENGTH'    
	     
	 IF ISNULL(@CEANLENGTH,'')=''    
	  SET @NEANLENGTH=12    
	 ELSE    
	  SET @NEANLENGTH=CONVERT(INT,@CEANLENGTH)     
	     
	     
	 IF ISNULL(@LOCID,'')=''    
	  SELECT TOP 1 @CLOCID =DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID             
	 ELSE    
	  SELECT @CLOCID = @LOCID     
	        
		SELECT TOP 1 @CHOLOCID = [VALUE] FROM CONFIG WHERE CONFIG_OPTION = 'HO_LOCATION_ID'    
	      
	 IF ISNULL(@CLOCID,'') = ''     
		  GOTO END_PROC      
	     
     
   
	  PRINT 'ENTER BCGEN-1'    
	  SELECT @CPIMDEPTID = DEPT_ID,@DMEMODT=RECEIPT_DT FROM PRD_SNC_MST WHERE MEMO_ID = @CXNID    
	  IF ISNULL(@CPIMDEPTID,'') = ''    
			GOTO END_PROC    
	      
	  PRINT 'ENTER BCGEN-2'    
	  -- BARCODE GENERATION FOR FIXED CODES    
	  INSERT #BARCODES( PID_ROW_ID, PRODUCT_CODE )     
	  SELECT ROW_ID,B.ARTICLE_NO 
	  FROM PRD_SNC_DET A    
	  JOIN ARTICLE B ON A.ARTICLE_CODE = B.ARTICLE_CODE    
	  LEFT OUTER JOIN PRD_SNC_BARCODE_DET C ON C.REFROW_ID=A.ROW_ID
	  WHERE A.MEMO_ID = @CXNID AND  C.PRODUCT_CODE IS NULL   
	  AND  B.CODING_SCHEME = 1 
	  AND (B.GEN_EAN_CODES=0 OR @BGENEANCODES=0) 
	      
	  SET @NFIXROWS = @@ROWCOUNT    
	      
	  PRINT 'ENTER BCGEN-3'    
	  -- BARCODE GENERATION FOR LOT AND UNIQUE CODES    
	  INSERT #PIDROWS ( PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,ARTICLE_NO,SRNO) /*UNMERGED:16MAY2013*/     
	  SELECT A.ROW_ID, B.CODING_SCHEME, A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,A.SRNO    
	  FROM PRD_SNC_DET A    
	  JOIN ARTICLE B ON A.ARTICLE_CODE = B.ARTICLE_CODE    
	  LEFT OUTER JOIN PRD_SNC_BARCODE_DET C ON C.REFROW_ID=A.ROW_ID
	   WHERE A.MEMO_ID = @CXNID    
	  AND  B.CODING_SCHEME <> 1    
	  AND  C.PRODUCT_CODE IS NULL 
	  AND (B.GEN_EAN_CODES=0 OR @BGENEANCODES=0) 
	  ORDER BY A.SRNO     
	      
	 SET @NROWS=@@ROWCOUNT    
        

       -- BARCODE GENERATION FOR FIXED CODES  
     INSERT #PIDROWS ( PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,ARTICLE_NO,SRNO,GEN_EAN_CODES)  
     SELECT A.ROW_ID, B.CODING_SCHEME, A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,A.SRNO ,B.GEN_EAN_CODES   
	 FROM PRD_SNC_DET A  
	 JOIN ARTICLE B ON A.ARTICLE_CODE = B.ARTICLE_CODE
	 LEFT OUTER JOIN PRD_SNC_BARCODE_DET C ON C.REFROW_ID=A.ROW_ID  
	 WHERE A.MEMO_ID = @CXNID AND ISNULL(C.PRODUCT_CODE,'') = ''  
	 AND B.GEN_EAN_CODES=1 AND @BGENEANCODES=1  
	 ORDER BY A.SRNO    
   
      SET @NEANROWS=@@ROWCOUNT 
      
      

      
	 PRINT 'GENBC-4'    
	     
	 SET @NSTEP=90    
	
	 IF NOT EXISTS ( SELECT NAME FROM SYSOBJECTS WHERE NAME = 'SP_GETNEWPREFIX' )    
	 BEGIN    
		  SELECT TOP 1 @CADDPREFIX = VALUE FROM CONFIG WHERE 
		  CONFIG_OPTION='barcode_prefix' 
		      
		  SELECT TOP 1 @CPREFIXYEARCODE= VALUE FROM CONFIG WHERE 
		  CONFIG_OPTION='YEAR_CODE_IN_PC'
		  
		  IF ISNULL(@CPREFIXYEARCODE,'')='1'    
			SET @CYEARCODE= RIGHT(LTRIM(RTRIM(STR(DATEPART(YY,@DMEMODT)))),2)     
		   
		  
		  SELECT TOP 1 @CPREFIXFLOORID= VALUE FROM CONFIG WHERE 
		  CONFIG_OPTION='FLOOR_ID_IN_PC'
		  
		  IF ISNULL(@CPREFIXFLOORID,'')='1'    
				SET @CADDFLOORIDPREFIX=@CLOCID+ISNULL(@CBIN_ALIAS ,'')
		  ELSE  
				SET @CADDFLOORIDPREFIX=''  
		  
		      
		  SELECT TOP 1 @CPREFIXLOCID= VALUE FROM CONFIG WHERE 
		  CONFIG_OPTION='LOCATION_ID_IN_PC' 
		  
		  IF ISNULL(@CPREFIXLOCID,'')='1' AND ISNULL(@CPREFIXFLOORID,'')<>'1'   
			 SET @CADDLOCIDPREFIX=@CLOCID    
		  ELSE    
		  IF @CADDFLOORIDPREFIX=''  
		  BEGIN    
				-- IN CASE THE PURCHASES ARE DONE AT MULTIPLE LOCATIONS, FORCE THE LOCATION ID IN PREFIX    
				SELECT @NPURLOCCNT=COUNT(*) FROM LOCATION WHERE PUR_LOC = 1 OR DEPT_ID=@CHOLOCID    
				IF ISNULL(@NPURLOCCNT,0)>1    
				BEGIN    
			  IF NOT EXISTS (SELECT TOP 1 CONFIG_OPTION FROM CONFIG WHERE  CONFIG_OPTION='LOCATION_ID_IN_PC')     
				INSERT CONFIG ( CONFIG_OPTION, VALUE, ROW_ID, LAST_UPDATE, REMARKS)     
				SELECT 'LOCATION_ID_IN_PC' AS CONFIG_OPTION,'1' AS VALUE,    
				'' AS ROW_ID,GETDATE() AS  LAST_UPDATE,'' AS  REMARKS
			  ELSE    
			   UPDATE CONFIG SET VALUE='1' WHERE  CONFIG_OPTION='LOCATION_ID_IN_PC' 
			          
				  SET @CADDLOCIDPREFIX=@CLOCID    
		  END    
	  END    
	    
	  PRINT 'GENBC-5'    
	  
	   
	  SET @NSTEP=100    
	  SET  @CPREFIX = LTRIM(RTRIM(ISNULL(@CYEARCODE,''))) + LTRIM(RTRIM(ISNULL(@CADDLOCIDPREFIX,''))) +   
	   LTRIM(RTRIM(ISNULL(@CADDFLOORIDPREFIX,''))) +   LTRIM(RTRIM(ISNULL(@CADDPREFIX,'')))    
	 END     
	 ELSE    
	 BEGIN    
		  -- GETTING CUSTOM PREFIX FOR THE CURRENT ROW OF PID    
		  EXEC SP_GETNEWPREFIX @CPIDROWID, 'PUR', @CCUSTOMPREFIX OUTPUT    
		  IF @CCUSTOMPREFIX IS NULL    
		   GOTO END_PROC    
		  SET @CPREFIX = @CCUSTOMPREFIX    
	 END    

	IF @NEANROWS > 0 
	  BEGIN  
		 DECLARE @CEANSOURCEABLE VARCHAR(100)  
		 SET @CEANSOURCEABLE='SNC_DET'  
		 SET @NSTEP=150  
		 PRINT 'GENERATE EAN CODE FOR :'+STR(@NEANROWS)+STR(@NROWS)
		 EXEC GETNEXTEANCODE @NEANLENGTH,@CEANPREFIX,1,'', @NEANROWS,@CEANSOURCEABLE,@CXNID,@CERRORMSG OUTPUT   
		   
		 IF @CERRORMSG<>''  
		 BEGIN  
		  PRINT 'GENBARCODE_SNC-RETURND'  
		  GOTO END_PROC  
		 END    
	  END 
     
     
     IF CURSOR_STATUS('GLOBAL','PID_CUR') IN (0,1)
		BEGIN
			CLOSE PID_CUR
			DEALLOCATE PID_CUR
		END
     
      IF CURSOR_STATUS('GLOBAL','ART_CUR') IN (0,1)
		BEGIN
			CLOSE ART_CUR
			DEALLOCATE ART_CUR
		END

	 IF @NROWS > 0    
	 BEGIN    
	      
		  SET @NSTEP=110    
		      
		  PRINT 'BAR CODE PREFIX :'+@CPREFIX    
		      
		  PRINT 'GENBC-6'    
		      
		  --CHECKING IF BARCODE SHOULD BE GENERATED RANDOMLY OR USING GETNEXTKEY    
		  SELECT TOP 1 @BRANDOMGEN=ISNULL(VALUE,0) FROM CONFIG WHERE CONFIG_OPTION='PRODUCT_CODE_GENERATION_RANDOM' 
		  
		  SET @BRANDOMGEN=ISNULL(@BRANDOMGEN,0)      
		   
		  
		  IF @BRANDOMGEN=0  
		  BEGIN
			 -- GENERATE BARCODES FOR ARTICLES WHICH ARE CONSIDERED AS PREFIX FOR BAR CODE GENERATION    
			   IF EXISTS (SELECT TOP 1 PID_ROW_ID FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
					WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=0 AND B.GEN_EAN_CODES=0)     
			   BEGIN    		    
		  
			  SELECT @NSNCROWS=SUM(QUANTITY) FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
			  WHERE B.CODING_SCHEME IN (2,3)
			
				-- CALLING GETNEXTKEY PROCEDURE TO GENERATE NEW CODES IN BULK    
				EXEC GETNEXTKEY 'PRD_SKU', 'PRODUCT_CODE', 50, @CPREFIX, 0, '', @NSNCROWS,@CNEXTPRODUCTCODE OUTPUT     
				IF @CNEXTPRODUCTCODE IS NULL    
					GOTO END_PROC    
			       
			   PRINT 'NEXT PRODUCT CODE AVAILABLE:'+@CNEXTPRODUCTCODE+STR(LEN(@CNEXTPRODUCTCODE))+STR(LEN(@CPREFIX))    
			   SET @NNEXTKEYVALUE = CONVERT(NUMERIC(30,0),RIGHT(LTRIM(RTRIM(@CNEXTPRODUCTCODE)),LEN(@CNEXTPRODUCTCODE)-LEN(@CPREFIX)))    
			       
			   PRINT 'NEXT PRODUCT CODE VALUE:'+STR(@NNEXTKEYVALUE)    
			       
			   PRINT 'GENBC-7'    
			   SET @NSTEP=120    
			       
			       
			     
			   -- GENERATING MULTIPLE ROWS FOR NEWLY GENERATED PRODUCT CODES    
			   DECLARE PID_CUR CURSOR FOR     
			   SELECT PID_ROW_ID,A.QUANTITY,B.CODING_SCHEME FROM #PIDROWS A
			   JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE
			   WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=0 AND B.GEN_EAN_CODES=0
			   ORDER BY A.SRNO    
			       
			   OPEN PID_CUR      
			   FETCH NEXT FROM PID_CUR INTO @CPIDROWID,@NBARCODEQTY,@NCODINGSCHEME    
			   WHILE @@FETCH_STATUS = 0    
			   BEGIN    
					SET @NSTEP=125     
				    
					PRINT 'GENBC-8'
				    
				    DELETE  AA FROM #BARCODES AA  JOIN #PIDROWS CC ON AA.PRODUCT_CODE =CC.ARTICLE_NO 
				    AND AA.PID_ROW_ID = CC.PID_ROW_ID JOIN ARTICLE B ON CC.ARTICLE_CODE=B.ARTICLE_CODE
					WHERE AA.PID_ROW_ID = @CPIDROWID AND B.CODING_SCHEME =3
						    
					SET @NLOOPQTY=(CASE WHEN @NCODINGSCHEME=3 THEN @NBARCODEQTY ELSE 1 END)
				   
					WHILE @NLOOPQTY>0
					BEGIN    
						SET @BLOOP=1    
					        
						WHILE @BLOOP=1    
						BEGIN  
							 PRINT 'GENBC-9'  
							 
							 SET @NSTEP=135    
							 SET @CNEXTPRODUCTCODE = @CPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE)))       
						         
							 IF NOT EXISTS (SELECT TOP 1 PRODUCT_CODE FROM PRD_SKU WHERE PRODUCT_CODE=@CNEXTPRODUCTCODE)    
							 BEGIN    
								  SET @NSTEP=137    
								  INSERT #BARCODES ( PID_ROW_ID, PRODUCT_CODE )    
									VALUES   ( @CPIDROWID, @CNEXTPRODUCTCODE )    
							            
								  SET @BLOOP=0      
						
							 END       
						     
							 PRINT 'GENBC-10'    
						     
							 SET @NSTEP=138    
							 SET @NNEXTKEYVALUE = @NNEXTKEYVALUE + 1          
							 SET @NLOOPQTY=@NLOOPQTY-1
						END    
				         
					 END   
					 SET @NSTEP=140    
				        
					 FETCH NEXT FROM PID_CUR INTO @CPIDROWID,@NBARCODEQTY,@NCODINGSCHEME        
			   END    
			   CLOSE PID_CUR    
			   DEALLOCATE PID_CUR    
			   
			   PRINT 'GENBC-11'    
			   SET @NNEXTKEYVALUE = @NNEXTKEYVALUE - 1    
			   SET @CNEXTPRODUCTCODE = @CPREFIX + LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE)))    
			       
			   SET @NSTEP=150    
			       
			   ---- UPDATING KEYS TABLE WITH THE MAXIMUM BARCODE GENERATED     
			   UPDATE KEYS_PMT SET     
				LASTKEYVAL = LTRIM(RTRIM(@CNEXTPRODUCTCODE))     
			   WHERE TABLENAME = 'PRD_SKU'    
			   AND COLUMNNAME = 'PRODUCT_CODE'    
			   AND FINYEAR  = ''    
			   AND PREFIX  = @CPREFIX    
		   END
	
		  
		 -- GENERATE BARCODES FOR ARTICLES WHICH ARE CONSIDERED AS PREFIX FOR BAR CODE GENERATION    
	   IF EXISTS (SELECT TOP 1 PID_ROW_ID FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
			WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=1 AND B.GEN_EAN_CODES=0)     
	   BEGIN    
	       
		DECLARE ART_CUR CURSOR FOR SELECT DISTINCT A.ARTICLE_NO FROM #PIDROWS A    
		JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE WHERE 
		GENERATE_BARCODES_WITHARTICLE_PREFIX=1 AND B.GEN_EAN_CODES=0    
	        
		OPEN ART_CUR    
		FETCH NEXT FROM ART_CUR INTO @CARTICLENO    
		WHILE @@FETCH_STATUS=0    
		BEGIN    
	         
		 SET @CARTPREFIX=@CPREFIX+@CARTICLENO+'-'    
	    
		 SELECT @NROWS = COUNT(*) FROM #PIDROWS WHERE ARTICLE_NO=@CARTICLENO    
	         
		 -- CALLING GETNEXTKEY PROCEDURE TO GENERATE NEW CODES IN BULK    
		 EXEC GETNEXTKEY 'PRD_SKU', 'PRODUCT_CODE', 50, @CARTPREFIX, 0, '', @NROWS, @CNEXTPRODUCTCODE OUTPUT     
		 IF @CNEXTPRODUCTCODE IS NULL    
		  GOTO END_PROC    
	         
		 SET @NNEXTKEYVALUE = CAST(RIGHT(@CNEXTPRODUCTCODE,LEN(@CNEXTPRODUCTCODE)-LEN(@CARTPREFIX)) AS NUMERIC(30,0))    
	    
		 -- GENERATING MULTIPLE ROWS FOR NEWLY GENERATED PRODUCT CODES    
		 DECLARE PID_CUR CURSOR FOR     
		 SELECT PID_ROW_ID FROM #PIDROWS WHERE ARTICLE_NO=@CARTICLENO    
		 OPEN PID_CUR    
	         
		 FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
		 WHILE @@FETCH_STATUS = 0    
		 BEGIN    
		  SET @NSTEP=131    
	      
	        DELETE  AA FROM #BARCODES AA  JOIN #PIDROWS CC ON AA.PRODUCT_CODE =CC.ARTICLE_NO 
			AND AA.PID_ROW_ID = CC.PID_ROW_ID JOIN ARTICLE B ON CC.ARTICLE_CODE=B.ARTICLE_CODE
			WHERE AA.PID_ROW_ID = @CPIDROWID AND B.CODING_SCHEME =3
		
		 SELECT @NLOOPQTY=(CASE WHEN CODING_SCHEME =3 THEN QUANTITY  ELSE 1 END) FROM #PIDROWS A	WHERE ARTICLE_NO=@CARTICLENO AND A.PID_ROW_ID =@CPIDROWID
		 		    	    
		WHILE @NLOOPQTY>0
		BEGIN    
			     
		  SET @BLOOP=1    
	          
		  WHILE @BLOOP=1    
		  BEGIN    
		   SET @NSTEP=135    
		   SET @CNEXTPRODUCTCODE = @CARTPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE)))       
	           
		   IF NOT EXISTS (SELECT TOP 1 PRODUCT_CODE FROM PRD_SKU WHERE PRODUCT_CODE=@CNEXTPRODUCTCODE)      
		   BEGIN    
			SET @NSTEP=137    

				INSERT #BARCODES ( PID_ROW_ID, PRODUCT_CODE )    
				VALUES   ( @CPIDROWID, @CNEXTPRODUCTCODE )     
	 
			SET @BLOOP=0   
			
		   END       
	           
		   SET @NSTEP=138    
		   SET @NNEXTKEYVALUE = @NNEXTKEYVALUE + 1 
		   SET @NLOOPQTY=@NLOOPQTY-1            
		  END    
	      END
	       
		  FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
		 END    
		 CLOSE PID_CUR    
		 DEALLOCATE PID_CUR    
	         
		 SET @NNEXTKEYVALUE = @NNEXTKEYVALUE - 1    
		 SET @CNEXTPRODUCTCODE = @CARTPREFIX + CONVERT(VARCHAR(30), @NNEXTKEYVALUE)    
	    
		 -- UPDATING KEYS TABLE WITH THE MAXIMUM BARCODE GENERATED     
		 UPDATE KEYS_PMT SET     
		  LASTKEYVAL = LTRIM(RTRIM(@CNEXTPRODUCTCODE))     
		 WHERE TABLENAME = 'PRD_SKU'    
		 AND COLUMNNAME = 'PRODUCT_CODE'    
		 AND FINYEAR  = ''    
		 AND PREFIX  = @CARTPREFIX    
	         
		 FETCH NEXT FROM ART_CUR INTO @CARTICLENO    
		END    
	    END    
		CLOSE ART_CUR    
		DEALLOCATE ART_CUR    
	        
	   END    
	  END    	 
  
  
   
  
INS_CODES:    

   SET @NSTEP=350    
       
   PRINT 'GENBC-12'
   
   SET @NSTEP=360    
       

   SELECT TOP 1 @CMIXNMATCHACCODE=VALUE FROM CONFIG WHERE CONFIG_OPTION='MIXNMATCH_AC_CODE'    
   
   ALTER TABLE #BARCODES ADD PRODUCT_UID VARCHAR(100)
   UPDATE #BARCODES SET PRODUCT_UID=NEWID()
	
   -- INSERTING RECORDS IN PRD_SKU    
   INSERT PRD_SKU (PRODUCT_UID , PRODUCT_CODE,ARTICLE_CODE, PARA1_CODE, PARA2_CODE, PARA3_CODE,PARA4_CODE, PARA5_CODE, PARA6_CODE,    
	PURCHASE_PRICE, MRP,  LAST_UPDATE,INV_NO,INV_DT, RECEIPT_DT, AC_CODE,FORM_ID,WS_PRICE,TAX_AMOUNT ,CHALLAN_NO  ) 
	   
   SELECT B.PRODUCT_UID,  B.PRODUCT_CODE,A.ARTICLE_CODE, A.PARA1_CODE, A.PARA2_CODE, A.PARA3_CODE, A.PARA4_CODE, A.PARA5_CODE, A.PARA6_CODE,    
   A.PURCHASE_PRICE, A.MRP,  GETDATE() AS LAST_UPDATE,     
   C.MEMO_NO AS INV_NO, C.RECEIPT_DT, C.RECEIPT_DT,@CMIXNMATCHACCODE AS AC_CODE,     
   '0000000' AS FORM_ID,A.MRP AS WS_PRICE ,0 AS TAX_AMOUNT  ,'' AS CHALLAN_MO
   FROM #BARCODES B    
   JOIN PRD_SNC_DET A ON B.PID_ROW_ID=A.ROW_ID
   JOIN PRD_SNC_MST C ON C.MEMO_ID = A.MEMO_ID    
   JOIN ARTICLE ART ON A.ARTICLE_CODE = ART.ARTICLE_CODE    
   LEFT OUTER JOIN PRD_SKU D ON B.PRODUCT_CODE = D.PRODUCT_CODE    
   WHERE C.MEMO_ID = @CXNID AND D.PRODUCT_CODE IS NULL    
       
   SET @NSTEP=370    
       

   
   PRINT 'GENBC-14'    
   
   INSERT PRD_PMT (PRODUCT_UID, PRODUCT_CODE, QUANTITY_IN_STOCK,  DEPARTMENT_ID , LAST_UPDATE )    
	SELECT DISTINCT A.PRODUCT_UID, A.PRODUCT_CODE, 0 AS QUANTITY_IN_STOCK, C.DEPARTMENT_ID AS  DEPARTMENT_ID,GETDATE() AS LAST_UPDATE
	 FROM #BARCODES A    
	JOIN PRD_SNC_DET B ON A.PID_ROW_ID= B.ROW_ID
	JOIN PRD_SNC_MST C ON C.MEMO_ID = B.MEMO_ID    
	JOIN #BARCODES BC ON A.PRODUCT_CODE = BC.PRODUCT_CODE    
	LEFT OUTER JOIN PRD_PMT D ON A.PRODUCT_CODE = D.PRODUCT_CODE  AND C.DEPARTMENT_ID=D.DEPARTMENT_ID  
   WHERE B.MEMO_ID = @CXNID    
   AND   D.PRODUCT_CODE IS NULL    
   
   INSERT PRD_SNC_BARCODE_DET (PRODUCT_CODE,REFROW_ID,PRODUCT_UID)
   SELECT PRODUCT_CODE,PID_ROW_ID,PRODUCT_UID FROM #BARCODES
   
     
 END TRY     
     
 BEGIN CATCH    
    
	SET @CERRORMSG = 'PROCEDURE SAVETRAN_GENBARCODES_PRD_SNC : STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()    
    
 END CATCH    
     
END_PROC:    
     
END    
--******************************* END OF PROCEDURE SAVETRAN_GENBARCODES_SNC    
