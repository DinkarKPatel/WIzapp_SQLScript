create PROCEDURE SAVETRAN_HBD  
(  
 @NUPDATEMODE  NUMERIC(1,0),  
 @NSPID  VARCHAR(40),
 @CMEMOID VARCHAR(40)='',
 @CPREFIX VARCHAR(5)='',
 @CFINYEAR VARCHAR(10)='',
 @bCalledFromSlsSavetran BIT=0,
 @BAPPROVED BIT=0
)  
--WITH ENCRYPTION
AS  
BEGIN  
   
	DECLARE @NSTEP INT	  
	
BEGIN TRY  
	   
	   
	 -- @CMEMOID:  MEMOID IS REQUIRED IF @NUPDATEMODE IS 3 (FROM CANCELLATION)  
	 DECLARE @CTEMPDBNAME   VARCHAR(100),  
	   @CMASTERTABLENAME  VARCHAR(100),  
	   @CDETAILTABLENAME  VARCHAR(100),  
	   @CTEMPMASTERTABLENAME VARCHAR(100),  
	   @CTEMPDETAILTABLENAME VARCHAR(100),  
	   @CTEMPMASTERTABLE  VARCHAR(100),  
	   @CTEMPDETAILTABLE  VARCHAR(100),  
	   @CERRORMSG    VARCHAR(500),  
	   @LDONOTUPDATESTOCK  BIT,  
	   @CKEYFIELD1    VARCHAR(50),  
	   @CKEYFIELDVAL1   VARCHAR(50),  
	   @CKEYFIELD1_DETAIL2  VARCHAR(50),  
	   @CMEMONO    VARCHAR(20),  
	   @NMEMONOLEN    NUMERIC(20,0),  
	   @CMEMONOVAL    VARCHAR(50),  
	   @CMEMODEPTID   VARCHAR(4),  
	   @CLOCATIONID   VARCHAR(4),  
	   @CHODEPTID    VARCHAR(4),  
	   @CCMD     NVARCHAR(4000),  
	   @CCMDOUTPUT    NVARCHAR(4000),  
	   @NSAVETRANLOOP   BIT,  
	   @CREFAPPMEMOID   VARCHAR(40),  
	   @LENABLETEMPDATABASE BIT,@nXnSpId VARCHAR(40),
	   @BNEGSTOCKFOUND BIT  ,@cWhereClause VARCHAR(400),
	   @CSTATUSMSG varchar(1000),@NMULTIDNCNT int,
	   @CFIRSTDNNO varchar(50),@CLASTDNNO varchar(50),@CKEYSTABLE varchar(100),
	   @CLOCID				VARCHAR(4)


	 
	 set @nXnSpId=convert(varchar(40),newid())
	   
	 SET @NSTEP = 5  -- DO VALIDATIONS ON INPUT DATA BY USER  
	 EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  

	 SET @CSTATUSMSG=''
	 SET @NMULTIDNCNT=0
	 set @CFIRSTDNNO=''
	 set @CLASTDNNO=''
	   
	 DECLARE @CRETVAL VARCHAR(MAX)  
	   
	 DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100),STATUSMSG varchar(1000) )  
	   
	 SET @CREFAPPMEMOID = ''  
	   
	 SET @NSTEP = 7  -- SETTTING UP ENVIRONMENT  
	  
	  SET @CTEMPDBNAME = ''  
	  
	 SET @CMASTERTABLENAME = 'HOLD_BACK_DELIVER_MST'  
	 SET @CDETAILTABLENAME = 'HOLD_BACK_DELIVER_DET'  
	  
	 SET @CTEMPMASTERTABLENAME = 'PSHBD_HOLD_BACK_DELIVER_MST_UPLOAD'
	 SET @CTEMPDETAILTABLENAME = 'PSHBD_HOLD_BACK_DELIVER_DET_UPLOAD'
	  
	 SET @CTEMPMASTERTABLE = @CTEMPDBNAME + @CTEMPMASTERTABLENAME  
	 SET @CTEMPDETAILTABLE = @CTEMPDBNAME + @CTEMPDETAILTABLENAME  
	   
	 SET @CERRORMSG   = ''  
	 SET @LDONOTUPDATESTOCK = 0  
	 SET @CKEYFIELD1   = 'MEMO_ID'  
	  
	 SET @CMEMONO   = 'MEMO_NO'  
	 SET @NMEMONOLEN   = 10  
	  
	 
	   select @CLOCID=location_code from PSHBD_HOLD_BACK_DELIVER_MST_UPLOAD where SP_ID=@NSPID 
	
		SELECT @CLOCATIONID=@CLOCID
	
	 SELECT @CHODEPTID  = [VALUE] FROM CONFIG (nolock) WHERE  CONFIG_OPTION='HO_LOCATION_ID'    
	 
	 IF @bCalledFromSlsSavetran=0
		BEGIN TRANSACTION  
     
      IF @NUPDATEMODE IN (2)     
      BEGIN  
         SET @CKEYFIELDVAL1=@CMEMOID
      END  

	CREATE TABLE #ROWS(ROW_ID VARCHAR(50))
			
			
	  IF ISNULL(@BAPPROVED,0)=1
	      GOTO LBLAPPROVE

       IF  @NUPDATEMODE IN (2,3)  AND EXISTS (SELECT TOP 1 'U' FROM HOLD_BACK_DELIVER_MST A WITH (NOLOCK) WHERE ENTRY_MODE =2 AND MEMO_ID=@CMEMOID)
	  BEGIN

	      EXEC SP3S_UPDATE_CUSTOMERBALANCES @CKEYFIELDVAL1,'HBD',@CERRORMSG OUTPUT ,1

	  END
		
     	    
	  IF @NUPDATEMODE=3
	  BEGIN  
		   IF ISNULL(@CMEMOID,'')=''
		   BEGIN
				SET @CERRORMSG='MEMO ID REQUIRED FOR CANCELLATION OF MEMO.....PLEASE CHECK'
				GOTO END_PROC
		   END		 
		   
		   set @CKEYFIELDVAL1=@CMEMOID

		   SET @NSTEP=15 
		   EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid   
		   UPDATE HOLD_BACK_DELIVER_MST WITH (ROWLOCK) SET CANCELLED=1 WHERE MEMO_ID=@CMEMOID
		   
		   SET @NSTEP=20
		   EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
		 EXEC SP3S_UPDATEPMT_ALTERATION
		 @CXN_TYPE='PSHBD',
		 @CXNID   = @CMEMOID  
		, @NREVERTFLAG  = 1  
		, @NALLOWNEGSTOCK = 0    
		, @CCMD    = @CCMDOUTPUT OUTPUT  

		 IF @CCMDOUTPUT <> ''  
		   BEGIN  
				PRINT @CCMDOUTPUT  
	      
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'  
				SET @BNEGSTOCKFOUND=1      
				EXEC SP_EXECUTESQL @CCMDOUTPUT  
				GOTO END_PROC  
		   END  

		   GOTO END_PROC
	  END
	  
	    
	  SET @NSTEP=25  
	  EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  


	  --FOR MULTIPLE HOLD BACK

	   DECLARE @CCM_ID VARCHAR(50),@NOLDSPID VARCHAR(50),@CCUSTOMER_CODE VARCHAR(20),@DMULTIPLEHBD INT
	    SET @DMULTIPLEHBD=0

	 if @bCalledFromSlsSavetran=0 and @NUPDATEMODE = 1
	 begin
	     
	      SELECT A.REF_CMD_ROW_ID ,B.CM_ID  ,A.row_id ,CMM.CUSTOMER_CODE 
		  INTO #TMPMULTIPLEHBD
		  FROM PSHBD_HOLD_BACK_DELIVER_DET_UPLOAD A
		  JOIN CMD01106 B (NOLOCK) ON A.REF_CMD_ROW_ID =B.ROW_ID 
		  JOIN cmm01106 CMM (NOLOCK) ON B.CM_ID =CMM.CM_ID 
		  WHERE SP_ID=@NSPID

		  SELECT TOP 1   @CCM_ID=CM_ID FROM #TMPMULTIPLEHBD

		  IF EXISTS (SELECT TOP 1 'U' FROM #TMPMULTIPLEHBD WHERE CM_ID<>@CCM_ID)
		  begin
		       SET @NOLDSPID=@NSPID
			   SET @NSPID=CONVERT (VARCHAR(40),NEWID())

			   UPDATE A SET  SP_ID=@NSPID
			   FROM PSHBD_HOLD_BACK_DELIVER_MST_UPLOAD A (NOLOCK) 
			   WHERE SP_ID=@NOLDSPID

			LBLMULTIPLEHBD:

			 SELECT TOP 1   @CCM_ID=CM_ID,@CCUSTOMER_CODE=CUSTOMER_CODE  FROM #TMPMULTIPLEHBD
			 SET @DMULTIPLEHBD=1

			   UPDATE A SET  SP_ID=@NSPID
			   FROM PSHBD_HOLD_BACK_DELIVER_DET_UPLOAD A (NOLOCK) 
			   JOIN #TMPMULTIPLEHBD B ON A.row_id=B.ROW_ID 
			   WHERE SP_ID=@NOLDSPID AND B.CM_ID =@CCM_ID

			   UPDATE A SET  customer_code=@CCUSTOMER_CODE
			   FROM PSHBD_HOLD_BACK_DELIVER_MST_UPLOAD A (NOLOCK) 
			   WHERE SP_ID=@NSPID
			    

		  end

	 end




	    
	  SET @cWhereClause =' WHERE sp_id='''+@nSPId+''''
	  -- GETTING DEPT_ID FROM TEMP MASTER TABLE  
	  SET @CCMD = 'SELECT @CMEMODEPTID = Location_code FROM '   
		 + (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME ELSE @CTEMPMASTERTABLE +@cWhereClause END )  
	  EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(4) OUTPUT',@CMEMODEPTID OUTPUT  
	  IF (@CMEMODEPTID IS NULL )  
	  BEGIN  
		 SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'  
		 GOTO END_PROC      
	  END  
	  
	  -- START UPDATING XN TABLES   
	  IF @NUPDATEMODE = 1 -- ADDMODE   
	  BEGIN   

	        IF ISNULL(@CLOCATIONID,'')=''
			 BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
				GOTO END_PROC    
			 END

        	SET @CKEYSTABLE='KEYS_HBD_'+LTRIM(RTRIM(@CLOCID))
	     
		   SET @NSTEP = 30  -- GENERATING NEW KEY  
		   EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
		   -- GENERATING NEW MEMO NO    
		   SET @NSAVETRANLOOP=0  
		   WHILE @NSAVETRANLOOP=0  
		   BEGIN  
				SET @NSTEP = 35
				EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  	

	    --  		EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN,@CPREFIX, 1,  
					--@CFINYEAR,0, @CMEMONOVAL OUTPUT     

				EXEC GETNEXTKEY_XNS @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CPREFIX, 1,
								@CFINYEAR,0, @CKEYSTABLE,@CMEMONOVAL OUTPUT   

			      
				PRINT @CMEMONOVAL  
				SET @NSTEP = 37
				EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  	
				SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' (NOLOCK)   
					  WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' AND fin_year='''+@cFinYear+''' )  
					SET @NLOOPOUTPUT=0  
				   ELSE  
					SET @NLOOPOUTPUT=1'  
				PRINT @CCMD  
				EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT  
		   END  
		  
		   IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
		   BEGIN  
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'   
			  GOTO END_PROC      
		   END  
		  
		   SET @NSTEP = 40  -- GENERATING NEW ID  
		   EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
		   -- GENERATING NEW JOB ORDER ID  
		   
		   SET @CKEYFIELDVAL1 = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
		    
		   IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'    
		   BEGIN  
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
			  GOTO END_PROC  
		   END  
		  
		   SET @NSTEP = 45  -- UPDATING NEW ID INTO TEMP TABLES  
		   EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
		     
		   -- UPDATING NEWLY GENERATED JOB ORDER NO AND JOB ORDER ID IN PIM AND PID TEMP TABLES  
		   SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + '  WITH (ROWLOCK) SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' +   
			  @CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''',BIN_ID=''999'' ,FIN_YEAR='''+@CFINYEAR+''' '+@cWhereClause  
		   PRINT @CCMD  
		   EXEC SP_EXECUTESQL @CCMD  
		     
		   SET @NSTEP = 50
		   EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
		     
		   SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''',product_code='''' '  +@cWhereClause  
		   PRINT @CCMD  
		   EXEC SP_EXECUTESQL @CCMD  
		        
	  END     -- END OF ADDMODE  
	  -- RECHECKING IF ID IS STILL LATER  
	  IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
	  BEGIN  
		   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
		   GOTO END_PROC  
	  END  
	  

	 
	  -- UPDATING MASTER TABLE (PIM01106) FROM TEMP TABLE  
	  SET @NSTEP = 60
	  EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  

	  DECLARE @CFILTERCONDITION VARCHAR(100)
	  SET @CFILTERCONDITION='  sp_id='''+@nSPId+''''
	  
	  --SAVING MASTER TABLE
      EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN   
		  @CSOURCEDB = @CTEMPDBNAME  
		, @CSOURCETABLE = @CTEMPMASTERTABLENAME  
		, @CDESTDB  = ''  
		, @CDESTTABLE = @CMASTERTABLENAME  
		, @CKEYFIELD1 = @CKEYFIELD1  
		, @BALWAYSUPDATE = 1  
		, @CFILTERCONDITION=@CFILTERCONDITION  
	  
	   -- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE  
	  SET @NSTEP = 65  -- UPDATING TRANSACTION TABLE  
	  EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
	     
	  -- UPDATING ROW_ID IN TEMP TABLES - CMD01106  
	  SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' WITH (ROWLOCK) SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID()),product_code=''''  '+
			@cWhereClause  +' and (LEFT(ROW_ID,5) = ''LATER'' or isnull(ROW_ID,'''')='''')'  
	  EXEC SP_EXECUTESQL @CCMD  
	  
	   /*
		  AFTER THE MASTER TABLE HAS BEEN SAVED, CHECK IF THE HOLDBACK IS FOR REPAIR ITEMS I.E. MODE=2, IF THE 
		  HOLDBACK IS FOR REPAIR ITEMS DO THE FOLLOWING OPERATIONS.
		  1. VALIDATE THAT THE ARTICLE IS OF UNIQUE CODING SCHEME TYPE.
		  2. CHECK IF ANY ROW EXISTS FOR NORMALIZATION, IF EXISTS NORMALIZE THE ROW AND THEN GENERATE THE 
		     PRODUCT_CODE WITH NOMENCLATURE (DEPT_ID-RPR-SERIES)
	   */
	   set @nStep=67
	  EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
	  ---CHECK IF THE HOLDBACK IF FOR REPAIR ITEMS...
	  DECLARE @NMODE NUMERIC(1),@BNEEDS_NORMALIZATION BIT
	  SET @CCMD=N'SELECT @NMODE=MODE FROM '+@CTEMPMASTERTABLE +'  (nolock)  WHERE sp_id='''+@nSPId+''' '
	  PRINT @CCMD
	  EXEC SP_EXECUTESQL @CCMD,N'@NMODE NUMERIC(1) OUTPUT',@NMODE OUTPUT 
	   
	
	 -- IF @NMODE=2
	 -- BEGIN
		--	SET @NSTEP = 70
		--	EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
		--	--CHECK IF ARTICLES IN THE DETAIL TABLE IS OF UNIQUE CODING SCHEME TYPE, IF NOT FAIL VALIDATION
		--	SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM '+@CTEMPDETAILTABLE+' A (nolock)
		--	                      JOIN ARTICLE B (nolock) ON A.ARTICLE_CODE=B.ARTICLE_CODE AND B.CODING_SCHEME<>3 WHERE  A.SP_ID='''+@nSPId+''')
		--				SET @CERRORMSG=''ARTICLE MUST BE IN UNIQUE CODING SCHEME FOR REPAIR ITEMS.'''
		--	PRINT @CCMD
		--	EXEC SP_EXECUTESQL @CCMD,N'@CERRORMSG VARCHAR(500) OUTPUT',@CERRORMSG OUTPUT							
			
		--	--30 JUL 2018
		--	IF @CERRORMSG='1 .ARTICLE MUST BE IN UNIQUE CODING SCHEME FOR REPAIR ITEMS.'
		--	   SET @CERRORMSG=''
		--	--30 JUL 2018
			
		--	---IF VALIDATION HAS FAILED, ROLLBACK THE TRANSACTOIN....
		--	IF ISNULL(@CERRORMSG,'')<>''
		--		GOTO END_PROC
		--END


			SET @NSTEP = 75
			EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
			---IF CODING SCHEME FOR ALL ARTICLE IS UNIQUE, PROCEED FOR NORMALIZATION
			SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM '+@CTEMPDETAILTABLE+' (nolock) '+@cWhereclause+' AND  QUANTITY>1)
							SET @BNEEDS_NORMALIZATION=1'
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD,N'@BNEEDS_NORMALIZATION BIT OUTPUT',@BNEEDS_NORMALIZATION OUTPUT				
			
			delete from #rows
			/*NORMALIZATION IS REQUIRED FOR THE DETAIL CURSOR*/
			IF @BNEEDS_NORMALIZATION=1
			BEGIN
				SET @NSTEP = 85
				
			print 'come to step#85'
				EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  				
				
				
				--GETTING ALL ROWS THAT NEEDS TO BE NORMALIZED...
				INSERT into  #ROWS
				SELECT ROW_ID FROM PSHBD_HOLD_BACK_DELIVER_DET_UPLOAD A (nolock) 
				join Article art (nolock) on a.article_code =art.article_code 
				WHERE sp_id=@NSPID AND  QUANTITY>1 and art.coding_scheme =3


				--SET @CCMD=N'SELECT ROW_ID FROM '+@CTEMPDETAILTABLE+' (nolock) '+@cWhereclause+' AND  QUANTITY>1'
				--PRINT @CCMD
				--INSERT #ROWS
				--EXEC SP_EXECUTESQL @CCMD



				DECLARE @NQUANTITY NUMERIC(10,3),@CNOR_ROW_ID VARCHAR(50),@CNEW_ROW_ID VARCHAR(50)
						,@CNOR_TABLE VARCHAR(100),@DINSERTSTR VARCHAR(MAX)
				
				SET @NSTEP = 88
				DELETE A FROM  HBDTEMP_HOLD_BACK_DELIVER_DET_UPLOAD A (NOLOCK) WHERE SP_ID=@NSPID
				SET @CNOR_TABLE='HBDTEMP_HOLD_BACK_DELIVER_DET_UPLOAD'

				SELECT TOP 1  @DINSERTSTR=INSERTSTR  FROM MIRRORXNSINFO WHERE TABLENAME ='HOLD_BACK_DELIVER_DET'
				--FOR EACH ROW GET THE QUANTITY AND NORMAIZE THE ROWS 
				

				WHILE EXISTS(SELECT TOP 1 'U' FROM #ROWS)
				BEGIN

					 SET @NSTEP = 90
					 EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  

					 SELECT TOP 1 @CNOR_ROW_ID=ROW_ID FROM #ROWS
					 SET @CCMD=N'SELECT TOP 1 @NQUANTITY=QUANTITY FROM '+@CTEMPDETAILTABLE+'(nolock) '+@cWhereclause+' AND  ROW_ID='''+@CNOR_ROW_ID+''''
					 PRINT @CCMD
					 EXEC SP_EXECUTESQL @CCMD,N'@NQUANTITY NUMERIC(10,3) OUTPUT',@NQUANTITY OUTPUT
					 
					 SET @NSTEP = 100

					 EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
					 SET @CCMD=N'UPDATE '+@CTEMPDETAILTABLE+' WITH (ROWLOCK) SET QUANTITY=1  '+@cWhereclause+' AND  ROW_ID='''+@CNOR_ROW_ID+''''
					 PRINT @CCMD
					 EXEC SP_EXECUTESQL @CCMD
					 
					 SET @nStep=102
					 EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  

					 SET @CCMD=N'INSERT INTO '+@CNOR_TABLE+'('+@DINSERTSTR+',SP_ID)
					 SELECT '+@DINSERTSTR+',sp_id   FROM '+@CTEMPDETAILTABLE+' (nolock) '+@cWhereclause+' AND  ROW_ID='''+@CNOR_ROW_ID+''''
					 PRINT @CCMD
					 EXEC SP_EXECUTESQL @CCMD
					 
					 WHILE @NQUANTITY>1
					 BEGIN 
							SET @NSTEP = 105
							EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  

							SET @CNEW_ROW_ID=@CLOCATIONID+CONVERT(VARCHAR(40),NEWID())
							SET @CCMD=N'UPDATE '+@CNOR_TABLE+' WITH (ROWLOCK) SET ROW_ID='''+@CNEW_ROW_ID+''',PRODUCT_CODE='''''
							PRINT @CCMD
							EXEC SP_EXECUTESQL @CCMD
							
							SET @NSTEP = 107
							EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  

							EXEC UPDATEMASTERXN --donot change updatemasterxn_opt because target table is upload tables
								  @CSOURCEDB	= ''
								, @CSOURCETABLE = @CNOR_TABLE
								, @CDESTDB		= ''
								, @CDESTTABLE	= @CTEMPDETAILTABLE
								, @CKEYFIELD1	= 'ROW_ID'
								, @LINSERTONLY  = 1
								
							SET @NQUANTITY=@NQUANTITY-1	
					 END
					 
					 set @nStep=109
					 EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  

					 DELETE A FROM  HBDTEMP_HOLD_BACK_DELIVER_DET_UPLOAD A (NOLOCK) WHERE SP_ID=@NSPID

					 DELETE #ROWS WHERE ROW_ID=@CNOR_ROW_ID
				END
			END
			---END OF NORMALIZATION PROCESS.					
	
			SET @NSTEP = 110
			EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
			--NOW PROCEED FOR BARCODE GENERATION....
			--CHECK IF ROW EXISTS FOR BARCODE GENERATION
			DECLARE @BGEN_BARCODE BIT,@CBARCODE_PREFIX VARCHAR(10),
			@CROW_ID VARCHAR(50),@CNEWPRODUCT_CODE VARCHAR(50)
			
			SET @CBARCODE_PREFIX=@CLOCATIONID+'-'+'RPR-'
			
			
			SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM '+@CTEMPDETAILTABLE+' (nolock) '+@cWhereclause+' AND  ISNULL(PRODUCT_CODE,'''')='''')
							SET @BGEN_BARCODE=1'
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD,N'@BGEN_BARCODE BIT OUTPUT',@BGEN_BARCODE OUTPUT							
			
		
			IF @BGEN_BARCODE=1
			BEGIN
				SET @NSTEP = 115
				EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
				--ROWS EXISTS FOR BARCODE GENERATION.
				--GENERATE BARCODES BY ORDERING ON ARTICLE CODE, SO THAT BARCODE IS GENERATED IN SEQUENCE FOR ARTICLE_CODE

				
				--CREATE TABLE #SKU_UNQ(ROW_ID VARCHAR(40),ARTICLE_CODE CHAR(15),DESCRIPTION VARCHAR(50),PRODUCT_CODE VARCHAR(50))

				IF OBJECT_ID('TEMPDB..#SKU_UNQ','U') IS NOT NULL
				   DROP TABLE #SKU_UNQ

				SELECT A.ROW_ID,A.ARTICLE_CODE
							,(CASE WHEN ISNULL(A.DESCRIPTION,'')<>'' THEN A.DESCRIPTION
								   WHEN ISNULL(B.ARTICLE_NAME,'')<>'' THEN B.ARTICLE_NAME
								   ELSE ISNULL(B.ARTICLE_DESC,'') END) AS DESCRIPTION	
							,A.PRODUCT_CODE 
							,A.last_update
							into #SKU_UNQ
							FROM PSHBD_HOLD_BACK_DELIVER_DET_UPLOAD A (nolock) 
							JOIN ARTICLE B (nolock) ON A.ARTICLE_CODE=B.ARTICLE_CODE
							WHERE sp_id=@NSPID AND  ISNULL(A.PRODUCT_CODE,'')=''

						
				
				WHILE EXISTS(SELECT TOP 1 'U' FROM #SKU_UNQ WHERE ISNULL(PRODUCT_CODE,'')='')
				BEGIN
				--START OF LOOP FOR GENERATION OF PRODUCT_CODE FOR EACH ROW
					SET @CROW_ID=''
					SELECT TOP 1 @CROW_ID=ROW_ID FROM #SKU_UNQ WHERE ISNULL(PRODUCT_CODE,'')='' ORDER BY last_update
					
					SET @NSAVETRANLOOP=0  
					WHILE @NSAVETRANLOOP=0  
					BEGIN  
						SET @NSTEP = 125
						EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  

						SET @CNEWPRODUCT_CODE=''
						EXEC GETNEXTKEY 
								 @CTABLENAME='SKU'
								,@CCOLNAME='PRODUCT_CODE'
								,@NWIDTH=50
								,@CPREFIX=@CBARCODE_PREFIX
								,@NLZEROS=0
								,@CFINYEAR=''
								,@NROWCOUNT=1
								,@CNEWKEYVAL=@CNEWPRODUCT_CODE OUTPUT
						
						PRINT @CNEWPRODUCT_CODE
						
						IF EXISTS(SELECT TOP 1 'U' FROM SKU (NOLOCK) WHERE PRODUCT_CODE=@CNEWPRODUCT_CODE)
							SET @NSAVETRANLOOP=0
						ELSE 
							SET @NSAVETRANLOOP=1
					END
					
					IF ISNULL(@CNEWPRODUCT_CODE,'')=''
					BEGIN
						SET @CERRORMSG='ERROR GENERATING PRODUCT CODE FOR REPAIR ITEMS.CANNOT PROCEEED.'
						GOTO END_PROC
					END
					
					set @nStep=127
					EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
					UPDATE #SKU_UNQ SET PRODUCT_CODE=@CNEWPRODUCT_CODE WHERE ROW_ID=@CROW_ID
					
				--END OF LOOP FOR GENERATION OF PRODUCT_CODE FOR EACH ROW
				END
				
			
				SET @NSTEP = 130
				EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
				--INSERT THE GENERATED BARCODES IN SKU TABLE AND UPDATE THOSE VALUES IN HOLD BACK DETAIL TABLE
				SET @CCMD=N'UPDATE A SET PRODUCT_CODE=B.PRODUCT_CODE 
							FROM '+@CTEMPDETAILTABLE+' A (NOLOCK)
							JOIN #SKU_UNQ B ON A.ROW_ID=B.ROW_ID 
							' +@cWhereclause
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD
				
				SET @NSTEP = 135
				EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  


				
					INSERT SKU ( PRODUCT_CODE,PRODUCT_NAME,ARTICLE_CODE, PARA1_CODE, PARA2_CODE, PARA3_CODE,PARA4_CODE, PARA5_CODE, PARA6_CODE,    
					PURCHASE_PRICE, MRP,  LAST_UPDATE,INV_NO,INV_DT, RECEIPT_DT, AC_CODE,FORM_ID,WS_PRICE,ER_FLAG,CHALLAN_NO,BARCODE_CODING_SCHEME,EMP_CODE,VENDOR_EAN_NO,HSN_CODE,FIX_MRP,GST_PERCENTAGE  
					,BATCH_NO ,EXPIRY_DT,purchaseLocId   )    
					SELECT  DISTINCT A.PRODUCT_CODE,C.ARTICLE_NAME, A.ARTICLE_CODE, 
					isnull(CMD_SKU.PARA1_CODE,a.PARA1_CODE) as PARA1_CODE, 
					isnull(CMD_SKU.PARA2_CODE,a.PARA2_CODE) as PARA2_CODE, 
					isnull(CMD_SKU.PARA3_CODE,a.PARA3_CODE) as PARA3_CODE, 
					isnull(CMD_SKU.PARA4_CODE,a.PARA4_CODE) as PARA4_CODE, 
					isnull(CMD_SKU.PARA5_CODE,a.PARA5_CODE) as PARA5_CODE,
					isnull(CMD_SKU.PARA6_CODE,a.PARA6_CODE) as PARA6_CODE,    
			        0 AS PURCHASE_PRICE, 0 AS MRP,  GETDATE() AS LAST_UPDATE,     
					B.MEMO_NO AS INV_NO, B.MEMO_DT, B.MEMO_DT, '0000000000' AS AC_CODE,     
					'0000000' AS FORM_ID,0 ASWHOLESALE_PRICE,0 ASMEMO_TYPE,B.MEMO_NO AS CHALLAN_NO,
					 CASE WHEN  C.CODING_SCHEME=1 THEN 2 ELSE  C.CODING_SCHEME END AS CODING_SCHEME,  
					'0000000' AS EMP_CODE,'' AS VENDOR_EAN_NO ,isnull(CMD_SKU.HSN_CODE,c.hsn_code ) as hsn_code,
					 0 AS FIX_MRP,0 AS GST_PERCENTAGE  
					,'' AS BATCH_NO ,'' EXPIRY_DT,@CLOCATIONID purchaseLocId 
					FROM PSHBD_HOLD_BACK_DELIVER_DET_UPLOAD  A (NOLOCK)				    
					JOIN PSHBD_HOLD_BACK_DELIVER_MST_UPLOAD B (nolock) ON A.sp_ID = B.sp_ID    
					left JOIN CMD01106 CMD(NOLOCK) ON CMD.ROW_ID=A.ref_cmd_row_id
					left JOIN SKU CMD_SKU (NOLOCK) ON CMD_SKU.product_code=CMD.PRODUCT_CODE
					JOIN ARTICLE C (nolock) ON A.ARTICLE_CODE = C.ARTICLE_CODE     
					LEFT OUTER JOIN SKU D (nolock) ON A.PRODUCT_CODE = D.PRODUCT_CODE    
					WHERE B.SP_ID = @NSPID AND D.PRODUCT_CODE IS NULL    
					AND ISNULL(A.PRODUCT_CODE,'')<>''	
					
					
			INSERT SKU_OH( PRODUCT_CODE, DISCOUNT_AMOUNT, TAX_AMOUNT, FREIGHT, OTHER_CHARGES, ROUND_OFF, VALUE_ADD,EXCISE_DUTY_AMOUNT )    
		    SELECT DISTINCT a.PRODUCT_CODE,0 AS  DISCOUNT_AMOUNT, 0 AS TAX_AMOUNT,0 AS  FREIGHT,
		     0 AS OTHER_CHARGES, 0 AS ROUND_OFF,0 AS  VALUE_ADD,0 AS  EXCISE_DUTY_AMOUNT  
			 FROM PSHBD_HOLD_BACK_DELIVER_DET_UPLOAD  a 
			 left join  sku_oh b (NOLOCK) ON a.product_code=b.product_CODE
			 WHERE a.SP_ID = @nSpId  AND ISNULL(A.PRODUCT_CODE,'')<>'' and   b.product_code IS NULL	
			
						
									
		--	END
			
			set @nStep=137
			EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  

			IF EXISTS (SELECT TOP 1 'U' FROM PSHBD_HOLD_BACK_DELIVER_DET_UPLOAD A (NOLOCK)
			JOIN PSHBD_HOLD_BACK_DELIVER_MST_UPLOAD B  (NOLOCK) ON  A.SP_ID=B.SP_ID 
			WHERE  A.SP_ID=@NSPID  AND ISNULL(A.PRODUCT_CODE,'')=''
			)
			BEGIN
			   SET @CERRORMSG='BLANK BARCODE CAN NOT BE SAVED .'
              GOTO END_PROC
		    END

			--END OF BARCODE GENERATION PROCESS..


	  END
	  ELSE IF @NMODE=1
	  BEGIN
			SET @NSTEP = 140
			EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
			SET @CCMD=N'UPDATE '+@CTEMPDETAILTABLE+' WITH (ROWLOCK) SET ARTICLE_CODE=NULL '+@cWhereclause
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
	  END 
	  	  

	 IF @NUPDATEMODE=2
	  BEGIN   
		 SET @NSTEP = 145  -- UPDATING TRANSACTION TABLE   
	     EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
	     
		 EXEC SP3S_UPDATEPMT_ALTERATION 
		  @CXN_TYPE='PSHBD',
		 @CXNID   = @CKEYFIELDVAL1  
		, @NREVERTFLAG  = 1  
		, @NALLOWNEGSTOCK = 0    
		, @CCMD    = @CCMDOUTPUT OUTPUT  

		 IF @CCMDOUTPUT <> ''  
		   BEGIN  
				PRINT @CCMDOUTPUT  
	      
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'  
				SET @BNEGSTOCKFOUND=1      
				EXEC SP_EXECUTESQL @CCMDOUTPUT  
				GOTO END_PROC  
		   END  
	     
		 --hold back memo has been issued or delved then can not edit 
		 set @nStep=147
		  EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  

		  SELECT TOP 1 @CERRORMSG= 'Barcode has been '+
		  case when  isnull(issue_id,'')<>''  then 'issued memo_id: '+ issue_id
		       else 'Delivered memo_id: '+ deliver_memo_id end 
		  + ' barcode- '+A.PRODUCT_CODE +' can not Remove Please check ' 
		  FROM ITEM_STATUS A (nolock)
		  LEFT JOIN PSHBD_HOLD_BACK_DELIVER_DET_UPLOAD B (nolock) ON A.HBD_ROW_ID=B.ROW_ID AND B.SP_ID=@NSPID
		  WHERE a.HBD_MEMO_ID =@CKEYFIELDVAL1
		  and ( isnull(issue_id,'')<>'' or isnull(deliver_memo_id,'')<>'')
		  AND B.ROW_ID IS NULL

		  IF ISNULL(@CERRORMSG,'')<>''
		  BEGIN
	            GOTO END_PROC
		  END

		  -- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE  
		  SET @NSTEP = 150  -- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES  
		  EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
		     
		 	  --CHANGED BY ROHIT ON 28-08-2019
			  SET @CCMD=N'DELETE A   
			   FROM ' + @CDETAILTABLENAME + ' A WITH (ROWLOCK)  
			   LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' (NOLOCK) B ON A.ROW_ID = B.ROW_ID  AND b.sp_id='''+@nSpId+'''
			   WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''  
			   AND   B.ROW_ID IS NULL '
		   EXEC SP_EXECUTESQL @CCMD  
	   END		     
	   -- INSERTING/UPDATING THE ENTRIES IN PRD_JID TABLE FROM TEMPTABLE  
	   SET @NSTEP = 155  -- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES  
	   EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  

	 
	   -- CMD01106  
	   EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN   
		  @CSOURCEDB = @CTEMPDBNAME  
		, @CSOURCETABLE = @CTEMPDETAILTABLENAME  
		, @CDESTDB  = ''  
		, @CDESTTABLE = @CDETAILTABLENAME  
		, @CKEYFIELD1 = 'ROW_ID'  
		, @BALWAYSUPDATE = 1  
		, @CFILTERCONDITION = @CFILTERCONDITION
	   

	   SET @NSTEP=165
	   EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
	   IF EXISTS(SELECT TOP 1 'U' FROM HOLD_BACK_DELIVER_MST (NOLOCK) WHERE MEMO_ID=@CKEYFIELDVAL1 AND ISNULL(MEMO_DT,'')='')
	   BEGIN
	       SET @CERRORMSG='MEMO DATA SHOULD NOT BE EMPTY '
	       GOTO END_PROC
	   END

	   set @nStep=170
	   EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
	     EXEC SP3S_UPDATEPMT_ALTERATION 
		  @CXN_TYPE='PSHBD',
		 @CXNID   = @CKEYFIELDVAL1  
		, @NREVERTFLAG  = 0  
		, @NALLOWNEGSTOCK = 0    
		, @CCMD    = @CCMDOUTPUT OUTPUT  

 IF @CCMDOUTPUT <> ''  
   BEGIN  
		PRINT @CCMDOUTPUT  
	      
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'  
		SET @BNEGSTOCKFOUND=1      
		EXEC SP_EXECUTESQL @CCMDOUTPUT  
		GOTO END_PROC  
   END  
	    

	  ---- VALIDATING ENTRIES   
	  SET @NSTEP = 175  -- VALIDATING ENTRIES  
	  EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
	  EXEC VALIDATEXN  
		 @CXNTYPE = 'HBD'  
	   , @CXNID = @CKEYFIELDVAL1  
	   , @CCMD  = @CCMDOUTPUT OUTPUT 
	  
	  IF @CCMDOUTPUT <> ''  
	  BEGIN  
	   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION FAILED : ' + @CCMDOUTPUT + '...'  
	   GOTO END_PROC  
	  END  
	  
	  set @nstep=177
	  EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
	  IF EXISTS ( SELECT TOP 1 'U'  FROM HOLD_BACK_DELIVER_DET (nolock) WHERE MEMO_ID=@CKEYFIELDVAL1 AND QUANTITY=0)
	   BEGIN
	        SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' QUANTITY ZERO CAN NOT BE SAVED : '
	        GOTO END_PROC  
	    
	   END

	  -- AFTER SUCCESSFUL SAVING , JUST DROP THE TEMP TABLES CREATED BY APPLICATION  
	  SET @NSTEP = 180
	  EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  

	  UPDATE A  SET TOTAL_AMOUNT=ROUND(AMOUNT,0)
	  FROM HOLD_BACK_DELIVER_MST A with (rowlock)
	  JOIN
	  (
	   SELECT MEMO_ID ,SUM(QUANTITY*JOB_RATE) AS AMOUNT
	          FROM HOLD_BACK_DELIVER_DET (nolock)
	   WHERE MEMO_ID=@CKEYFIELDVAL1
	   GROUP BY MEMO_ID
	  ) B ON A.MEMO_ID =B.MEMO_ID 

	   IF   EXISTS (SELECT TOP 1 'U' FROM HOLD_BACK_DELIVER_MST A WITH (NOLOCK) WHERE ENTRY_MODE =2 AND MEMO_ID=@CKEYFIELDVAL1)
	  BEGIN

	     	DECLARE @tBal TABLE (CUSTOMER_CODE VARCHAR(20),balance NUMERIC(14,2))
			INSERT @tBal (CUSTOMER_CODE,balance)
			EXEC SP3S_UPDATE_CUSTOMERBALANCES @CKEYFIELDVAL1,'HBD',@CERRORMSG output ,0


	  END
	


	   IF ISNULL(@DMULTIPLEHBD,0)=1
	  BEGIN
	       exec SP3S_INSUPDATE_ITEM_STATUS 'PSHBD',@CKEYFIELDVAL1	   
		   DELETE  FROM PSHBD_HOLD_BACK_DELIVER_DET_UPLOAD WHERE SP_ID=@NSPID 
		   DELETE FROM #TMPMULTIPLEHBD WHERE CM_ID =@CCM_ID 
		   set @NMULTIDNCNT=@NMULTIDNCNT+1

		   IF @CFIRSTDNNO=''
		    SET @CFIRSTDNNO=@CMEMONOVAL

	       SET @CLASTDNNO=@CMEMONOVAL

		   IF EXISTS (SELECT TOP 1 'U' from  #TMPMULTIPLEHBD  )
		   begin
		      UPDATE HOLD_BACK_DELIVER_MST WITH (ROWLOCk) SET last_update=getdate(),HO_SYNCH_LAST_UPDATE='' WHERE memo_id=@CKEYFIELDVAL1
		      GOTO LBLMULTIPLEHBD
		    end

			 SET @CSTATUSMSG=LTRIM(RTRIM(STR(@NMULTIDNCNT)))+' NO. OF Customer Receipt ('+@CFIRSTDNNO+'-'+@CLASTDNNO+') GENERATED'

	  END

	

	  GOTO END_PROC 

LBLAPPROVE:
	 set @nStep=185
     EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
		
	   UPDATE A WITH (ROWLOCK) SET HBD_STATUS=B.HBD_STATUS,
	                PROCESS=B.PROCESS
	    FROM HOLD_BACK_DELIVER_DET A
	   JOIN HBD_HOLD_BACK_DELIVER_DET_UPLOAD B (NOLOCK) ON A.row_id =B.row_id
	   WHERE B.SP_ID=@NSPID



	  
 
   

	
END TRY  

BEGIN CATCH  
	  SET @CERRORMSG = 'ERROR IN PROCEDURE SAVTRAN_HBD AT STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()  
	  GOTO END_PROC  
END CATCH  
	   
END_PROC:  
	 set @nStep=190
	 EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
	 UPDATE HOLD_BACK_DELIVER_MST WITH (ROWLOCk) SET last_update=getdate() WHERE memo_id=@CKEYFIELDVAL1

     PRINT 'ERROR AT LAST : '+ISNULL(@CERRORMSG,'') + ISNULL(@CCMDOUTPUT,'') + STR(ISNULL(@BNEGSTOCKFOUND,0))
 
	 set @nStep=195
	 EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
	 IF ISNULL(@BAPPROVED,0)=0 and  ISNULL(@DMULTIPLEHBD,0)=0
		exec SP3S_INSUPDATE_ITEM_STATUS 'PSHBD',@CKEYFIELDVAL1	   

	 IF @@TRANCOUNT>0  
	 BEGIN  
		  IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')='' AND ISNULL(@BNEGSTOCKFOUND,0)=0  
		  BEGIN
			set @nStep=200
			EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
			UPDATE HOLD_BACK_DELIVER_MST WITH (ROWLOCK) SET HO_SYNCH_LAST_UPDATE ='' WHERE MEMO_ID=@CKEYFIELDVAL1

			IF @bCalledFromSlsSavetran=0
				commit TRANSACTION  
		  END  
		  ELSE		
		  BEGIN
			  IF @bCalledFromSlsSavetran=0
				ROLLBACK  
		  END	
	 END  
	   
	 IF ISNULL(@BNEGSTOCKFOUND,0)=0  
	 BEGIN  
		  INSERT @OUTPUT (ERRMSG, MEMO_ID,STATUSMSG)  
		   VALUES (ISNULL(@CERRORMSG,''),ISNULL(@CKEYFIELDVAL1,''),isnull(@CSTATUSMSG,''))  
		  
		  IF @bCalledFromSlsSavetran=0
		     SELECT * FROM @OUTPUT 
		  ELSE
		  SELECT ERRMSG,MEMO_ID FROM @OUTPUT
	 END  
	 
	 set @nStep=205
	 EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid    
	 EXEC SP_DELETEUPLOADTABLES 'HBD',@nSpId

	 set @nStep=210
	 EXEC SP_CHKXNSAVELOG 'hbd',@nStep,0,@nXnSpid  
END     
--END OF PROCEDURE - SAVETRAN_HBD


