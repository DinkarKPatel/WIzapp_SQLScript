-- PROCEDURE TO SAVE A JOB WORK ISSUE MEMO  
CREATE PROCEDURE SAVETRAN_JWI  
(  
 @NUPDATEMODE  NUMERIC(1,0),  
 @NSPID    INT,  
 @CFINYEAR   VARCHAR(10),  
 @CMACHINENAME  VARCHAR(100)='',  
 @CWINDOWUSERNAME VARCHAR(100)='',  
 @CWIZAPPUSERCODE VARCHAR(10)='0000000',  
 @CMEMOID   VARCHAR(40)='',  
 @CMEMONOPREFIX VARCHAR(40) ='',
 @BGETBARCODE BIT=0
)  
AS  
BEGIN  
 -- @NUPDATEMODE: 1- NEW MEMO ADDED,   
 --     2- EDITING OF MEMO,   
 --     3- CURRENT MEMO CANCELLED,   
  
 DECLARE @CTEMPDBNAME   VARCHAR(100),  
   @CMASTERTABLENAME  VARCHAR(100),  
   @CDETAILTABLENAME  VARCHAR(100),  
   @CTEMPMASTERTABLENAME VARCHAR(100),  
   @CTEMPDETAILTABLENAME VARCHAR(100),  
   @CTEMPMASTERTABLE  VARCHAR(300),  
   @CTEMPDETAILTABLE  VARCHAR(300),  
   @CDETAILTABLENAME1 VARCHAR(100),
   @CTEMPDETAILTABLENAME1 VARCHAR(100),
   @CTEMPDETAILTABLE1 VARCHAR(100),
   @CERRORMSG    VARCHAR(500),  
   @LDONOTUPDATESTOCK  BIT,  
   @CKEYFIELD1    VARCHAR(50),  
   @CKEYFIELDVAL1   VARCHAR(50),  
   @CMEMONO    VARCHAR(20),  
   @NMEMONOLEN    NUMERIC(20,0),  
   @CMEMONOVAL    VARCHAR(50),  
   @CLOCATIONID   VARCHAR(4),  
   @CHODEPTID    VARCHAR(4),  
   @CCMD     NVARCHAR(4000),  
   @CCMDOUTPUT    NVARCHAR(4000),  
   @NSAVETRANLOOP   BIT,  
   @NSTEP     INT,  
   @BNEGSTOCKFOUND BIT,  
   @CUSERALIAS VARCHAR(5), 
   @CEXPRERRORMSG VARCHAR(MAX),    
   @NISSUETYPE    NUMERIC(3),  
   @NSAVETRANISSUETYPE NUMERIC(3)  ,
   @BITEMRETURN BIT,@CLOCID    VARCHAR(4)
  
 DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))  
  
 SET @NSTEP = 0  -- SETTTING UP ENVIRONMENT  
  
 -- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
 SET @CTEMPDBNAME = ''  
  
 SET @CMASTERTABLENAME = 'JOBWORK_ISSUE_MST'  
 SET @CDETAILTABLENAME = 'JOBWORK_ISSUE_DET'  
 SET @CDETAILTABLENAME1 = 'JOBWORK_ISSUE_BOM'  --04 AUG 2018
  
  --+LTRIM(RTRIM(STR(@NSPID)))  
  
 SET @CTEMPMASTERTABLENAME = 'JWI_'+@CMASTERTABLENAME+'_UPLOAD'
 SET @CTEMPDETAILTABLENAME = 'JWI_'+@CDETAILTABLENAME+'_UPLOAD' 
 SET @CTEMPDETAILTABLENAME1 = 'JWI_'+@CDETAILTABLENAME1+'_UPLOAD'
  
 SET @CTEMPMASTERTABLE = @CTEMPDBNAME + @CTEMPMASTERTABLENAME  
 SET @CTEMPDETAILTABLE = @CTEMPDBNAME + @CTEMPDETAILTABLENAME  
 SET @CTEMPDETAILTABLE1 = @CTEMPDBNAME + @CTEMPDETAILTABLENAME1  --04 AUG 2018
   
 SET @CERRORMSG   = ''  
 SET @LDONOTUPDATESTOCK = 0  
 SET @CKEYFIELD1   = 'ISSUE_ID'  
 SET @CMEMONO   = 'ISSUE_NO'  
 SET @NMEMONOLEN   = 10  
  
  IF @NUPDATEMODE<>3
	 select @CLOCID=location_code from JWI_jobwork_issue_mst_UPLOAD where SP_ID=@NSPID 
  ELSE
	select @CLOCID=location_code from jobwork_issue_mst where issue_id=@cMemoId

  SET @CLOCATIONID=@CLOCID
   
 SELECT @CHODEPTID  = [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'    
  
 SET @NSTEP = 10  -- GETTING DEPTID INFO FROM TEMP TABLE  

 BEGIN TRY  
   
  IF OBJECT_ID('TEMPDB..#TMPPMT','U') IS NOT NULL  
      DROP TABLE #TMPPMT  
    
   SELECT PRODUCT_CODE INTO #TMPPMT FROM SKU WHERE 1=2  
  
  IF OBJECT_ID('TEMPDB..#TMPXNSTK','U') IS NOT NULL  
   DROP TABLE #TMPXNSTK           
    
  SELECT PRODUCT_CODE,QUANTITY_IN_STOCK AS XN_STOCK INTO #TMPXNSTK FROM PMT01106 WHERE 1=2
  
   EXEC SP_CHKXNSAVELOG 'JWI',@NSTEP,0,@NSPID,1
  
  IF @NUPDATEMODE<>3  
  BEGIN  
       
	   SELECT @NSAVETRANISSUETYPE=ISNULL(ISSUE_TYPE,0),@BITEMRETURN=Item_Return FROM JWI_JOBWORK_ISSUE_MST_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))

  END  

  

  BEGIN TRANSACTION  
	  
	  SET @CCMD=N'IF OBJECT_ID('''+@CTEMPMASTERTABLE+''',''U'') IS NOT NULL  
		  UPDATE '+@CTEMPMASTERTABLE+' SET BIN_ID=''000'' WHERE ISNULL(BIN_ID,'''')='''' and sp_id='''+LTRIM(RTRIM(STR(@NSPID)))+''''  
	  EXEC SP_EXECUTESQL @CCMD         
	  
	  SET @CCMD=N'IF OBJECT_ID('''+@CTEMPDETAILTABLE+''',''U'') IS NOT NULL  
		  UPDATE '+@CTEMPDETAILTABLE+' SET BIN_ID=''000''  WHERE ISNULL(BIN_ID,'''')='''' and sp_id='''+LTRIM(RTRIM(STR(@NSPID)))+''''  
	  EXEC SP_EXECUTESQL @CCMD   
    

	DECLARE @Ntradingmode INT,@nwip int
	SELECT @Ntradingmode=ISSUE_MODE,@nwip=wip  FROM JWI_JOBWORK_ISSUE_MST_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))

  IF @NUPDATEMODE<>3  
  BEGIN  
     EXEC SP_VALIDATEXN_BEFORESAVE 'JWI',@NSPID,'0000000',@NUPDATEMODE,@CCMDOUTPUT OUTPUT,@BNEGSTOCKFOUND OUTPUT  
	
	   IF ISNULL(@CCMDOUTPUT,'') <> ''  
	   BEGIN  
	   
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION ON TEMP DATA FAILED : ' + @CCMDOUTPUT + '...'  
			GOTO END_PROC 
	   END  
  END								
 
    
  IF @NUPDATEMODE = 3 AND ISNULL(@CMEMOID,'') = ''  
  BEGIN  
  
	   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED IF CALLED FROM CANCELLATION'  
	   GOTO END_PROC 
	        
  END  
    
        IF @NUPDATEMODE<>3  and isnull(@Ntradingmode,0)=0 and isnull(@nwip,0)=0 and @NSAVETRANISSUETYPE=1
		BEGIN
		  
		  EXEC SP3S_NORMALIZE_FIX_PRODUCT_CODE 'JWI',@NSPID,@NUPDATEMODE,
		  @CTEMPDETAILTABLE,@CMEMOID,@CERRORMSG OUTPUT,'',@CLOCID
		  IF ISNULL(@CERRORMSG,'')<>''
		  BEGIN
			   SET @CERRORMSG='ERROR IN NORMALIZATION'+@CERRORMSG
			   GOTO END_PROC
		  END
		END  
		--SELECT @NUPDATEMODE
  -- START UPDATING XN TABLES   
  IF @NUPDATEMODE = 1 -- ADDMODE   
  BEGIN   
      IF ISNULL(@CLOCATIONID,'')=''
	 BEGIN
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
		GOTO END_PROC    
	 END

      SET @NSTEP = 16


        DECLARE @CMANUALPREFIX VARCHAR(25)
        SET @CMANUALPREFIX=''
		
		SET @CCMD=N'SELECT @CMANUALPREFIX=MEMO_PREFIX FROM '+@CTEMPMASTERTABLE+' where sp_id='''+LTRIM(RTRIM(STR(@NSPID)))+''''
		PRINT @CCMD		
		EXEC SP_EXECUTESQL @CCMD,N'@CMANUALPREFIX VARCHAR(25) OUTPUT',@CMANUALPREFIX OUTPUT
		
		IF ISNULL(@CMANUALPREFIX,'')<>''
		BEGIN
		  IF RIGHT(@CMANUALPREFIX,1)<>'-'
		     SET @CMANUALPREFIX=@CMANUALPREFIX+'I'+'-'

			 set @CMEMONOPREFIX=@CLOCID+@CMANUALPREFIX

		     SET @NMEMONOLEN=LEN(@CMEMONOPREFIX)+6

		END
		

		
		
		
	   SET @NSTEP = 20  -- GENERATING NEW KEY  
	     
	   -- GENERATING NEW JOB ORDER NO    
	   SET @NSAVETRANLOOP=0  
	   WHILE @NSAVETRANLOOP=0  
	   BEGIN  
		EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,   
			@CFINYEAR,0, @CMEMONOVAL OUTPUT     
	      
		PRINT @CMEMONOVAL  
		SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+'   
			  WHERE '+@CMEMONO+'='''+@CMEMONOVAL+'''   
			  AND FIN_YEAR = '''+@CFINYEAR+''' )  
			SET @NLOOPOUTPUT=0  
		   ELSE  
			SET @NLOOPOUTPUT=1'  
		PRINT @CCMD  
		EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT  
	   END  
	   
	
	  
	   IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
	   BEGIN  
		  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'   
		  GOTO END_PROC      
	   END  
	  
	   SET @NSTEP = 30  -- GENERATING NEW ID  
	  
	   -- GENERATING NEW JOB ORDER ID  
	   
	 
      SET @CKEYFIELDVAL1 = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))


	   IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'    
	   BEGIN  
		  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
		  GOTO END_PROC  
	   END  
	  
	   SET @NSTEP = 40  -- UPDATING NEW ID INTO TEMP TABLES  
	  
	   -- UPDATING NEWLY GENERATED JOB ORDER NO AND JOB ORDER ID IN PIM AND PID TEMP TABLES  
	   SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' +   
		  @CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' where sp_id='''+LTRIM(RTRIM(STR(@NSPID)))+''' '  
	   PRINT @CCMD  
	   EXEC SP_EXECUTESQL @CCMD  
	   
	 
	    
	   SET @NSTEP = 41
	   SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' where sp_id='''+LTRIM(RTRIM(STR(@NSPID)))+''''  
	   PRINT @CCMD  
	   EXEC SP_EXECUTESQL @CCMD  
	   SET @NSTEP = 42
	   SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' where sp_id='''+LTRIM(RTRIM(STR(@NSPID)))+''''  
	   PRINT @CCMD  
	   IF EXISTS(SELECT TOP 1 * FROM SYSOBJECTS WHERE XTYPE='U' AND NAME=@CTEMPDETAILTABLE1)
		EXEC SP_EXECUTESQL @CCMD
  END     -- END OF ADDMODE  
  ELSE    -- CALLED FROM EDITMODE  
  BEGIN    -- START OF EDITMODE  
    
	   SET @NSTEP = 50  -- GETTING ID INFO FROM TEMP TABLE  
	   SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ' + @CKEYFIELD1 + ', @CMEMONOVAL = ' + @CMEMONO + ' FROM '  
		  + (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME + ' WHERE ISSUE_ID = ''' + @CMEMOID + ''''  
			ELSE @CTEMPMASTERTABLE+'  where sp_id='''+LTRIM(RTRIM(STR(@NSPID)))+''' ' END )  
	   EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT',   
			  @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT  
	         
	            
	   IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )  
	   BEGIN  
		  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'  
		  GOTO END_PROC      
	   END  
	  
	  EXEC SP_CHKXNSAVELOG 'JWI',@NSTEP,0,@NSPID,1
	     
   IF @NUPDATEMODE = 3     
   BEGIN  
		SET @NSTEP = 60  
		 
		 
		 IF EXISTS (SELECT TOP 1 'U' FROM JOBWORK_ISSUE_MST WHERE ISSUE_ID =@CKEYFIELDVAL1 AND ISNULL(ISSUE_MODE ,0)=1)
		 BEGIN
		     
		     EXEC VALIDATEXN_JWI_BEFORE_CANCELLED @CMEMO_ID=@CKEYFIELDVAL1, @CERRORMSG=@CERRORMSG OUTPUT
		     IF ISNULL(@CERRORMSG,'')<>''
		     BEGIN 
		         GOTO END_PROC
		     END
		 
		 END
	      
		SET @CCMD = N'SELECT @NSAVETRANISSUETYPE=ISSUE_TYPE FROM ' + @CMASTERTABLENAME +  
		   N' WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + ''''  
		EXEC SP_EXECUTESQL @CCMD,N'@NSAVETRANISSUETYPE NUMERIC(1) OUTPUT',@NSAVETRANISSUETYPE OUTPUT  
	    
        -- UPDATING SENTTOHO FLAG  
	    	
	    IF @NSAVETRANISSUETYPE=1  
		EXEC UPDATEPMT_JWI   
		   @CXNTYPE   = 'JWI'  
		 , @CXNNO   = @CMEMONOVAL  
		 , @CXNID   = @CKEYFIELDVAL1  
		 , @NREVERTFLAG  = 1  
		 , @NALLOWNEGSTOCK = 0  
		 , @NCHKDELBARCODES = 1  
		 , @NUPDATEMODE  = @NUPDATEMODE      
		 , @CCMD    = @CCMDOUTPUT OUTPUT  
		
		 
		SET @CCMD = N'UPDATE ' + @CMASTERTABLENAME + ' SET CANCELLED = 1 ' +   
		   N' WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + ''''  
		EXEC SP_EXECUTESQL @CCMD  
		    
			select @BITEMRETURN=Item_Return  from jobwork_issue_mst (nolock) where issue_id =@CKEYFIELDVAL1

		IF OBJECT_ID ('TEMPDB..#TMPJOBORDER','U') IS NOT NULL
		   DROP TABLE #TMPJOBORDER 

       create table #TMPJOBORDER(PRODUCT_CODE varchar(100),MEMO_ID varchar(100),ARTICLE_CODE varchar(50),JOB_CODE varchar(20))
	
	 EXEC SP_CHKXNSAVELOG 'JWI',@NSTEP,0,@NSPID,1

	if isnull(@BITEMRETURN,0)=0
	begin
		 insert into #TMPJOBORDER( PRODUCT_CODE ,MEMO_ID,ARTICLE_CODE,JOB_CODE)
		SELECT A.PRODUCT_CODE, DET.MEMO_ID,DET.ARTICLE_CODE,PJ.JOB_CODE
		FROM JOBWORK_ISSUE_DET A (NOLOCK)
		JOIN ORD_PLAN_BARCODE_DET BD (NOLOCK) ON A.PRODUCT_CODE =BD.PRODUCT_CODE 
		JOIN ORD_PLAN_DET DET (NOLOCK) ON BD.REFROW_ID=DET.ROW_ID 
		JOIN ORD_PLAN_JOB JOB ON  DET.MEMO_ID =JOB.MEMO_ID AND DET.ARTICLE_CODE =JOB.ARTICLE_CODE  AND A.JOB_CODE =JOB.JOB_CODE 
		LEFT JOIN
		(
			  SELECT PJ.MEMO_ID,PJ.ARTICLE_CODE  ,PJ.JOB_CODE ,PJ.JOB_ORDER  
			  FROM ORD_PLAN_JOB  PJ (NOLOCK)
		) PJ ON  DET.MEMO_ID=PJ.MEMO_ID AND DET.ARTICLE_CODE=PJ.ARTICLE_CODE AND JOB.JOB_ORDER-1 =PJ.JOB_ORDER  
		WHERE ISSUE_ID=@CKEYFIELDVAL1
	end
	else
	begin
	    

		;with cte as
		(
		SELECT A.PRODUCT_CODE, DET.MEMO_ID,DET.ARTICLE_CODE,PJ.JOB_CODE, PJ.JOB_ORDER ,
		sr=row_number () over(partition by a.product_code order by PJ.JOB_ORDER desc)
		FROM JOBWORK_ISSUE_DET A (NOLOCK)
		JOIN ORD_PLAN_BARCODE_DET BD (NOLOCK) ON A.PRODUCT_CODE =BD.PRODUCT_CODE 
		JOIN ORD_PLAN_DET DET (NOLOCK) ON BD.REFROW_ID=DET.ROW_ID 
		JOIN ORD_PLAN_JOB JOB ON  DET.MEMO_ID =JOB.MEMO_ID AND DET.ARTICLE_CODE =JOB.ARTICLE_CODE  AND A.JOB_CODE =JOB.JOB_CODE 
		LEFT JOIN
		(
			  SELECT PJ.MEMO_ID,PJ.ARTICLE_CODE  ,PJ.JOB_CODE ,PJ.JOB_ORDER  
			  FROM ORD_PLAN_JOB  PJ (NOLOCK)
		) PJ ON  DET.MEMO_ID=PJ.MEMO_ID AND DET.ARTICLE_CODE=PJ.ARTICLE_CODE AND PJ.JOB_ORDER  between JOB.JOB_ORDER and JOB.JOB_ORDER+1
		WHERE ISSUE_ID=@CKEYFIELDVAL1
		)
		 insert into #TMPJOBORDER( PRODUCT_CODE ,MEMO_ID,ARTICLE_CODE,JOB_CODE)
		 select PRODUCT_CODE ,MEMO_ID,ARTICLE_CODE,JOB_CODE
		 from cte where sr=1

	end

		IF EXISTS (SELECT TOP 1 'U' FROM #TMPJOBORDER)
		BEGIN

			UPDATE PMT SET  JOB_CODE =ISNULL(A.JOB_CODE ,''),
							 AGENCY_CODE  =ISNULL(C.AGENCY_CODE  ,'')
			FROM #TMPJOBORDER A
			JOIN JOBWORK_PMT PMT ON A.PRODUCT_CODE =PMT.PRODUCT_CODE
			LEFT JOIN
			(
			  SELECT B.PRODUCT_CODE ,B.JOB_CODE ,MST.AGENCY_CODE 
			  FROM   JOBWORK_ISSUE_DET B
			  JOIN JOBWORK_ISSUE_MST  MST ON B.ISSUE_ID =MST.ISSUE_ID 
			)  C ON A.PRODUCT_CODE =C.PRODUCT_CODE AND A.JOB_CODE =C.JOB_CODE 
		
		END
		else 
		begin
		    
			UPDATE PMT SET JOB_CODE =ISNULL(A.JOB_CODE ,''),
						   AGENCY_CODE  =ISNULL(B.AGENCY_CODE  ,'')
			FROM JOBWORK_ISSUE_DET A
			JOIN JOBWORK_ISSUE_MST B ON A.ISSUE_ID=B.ISSUE_ID
			JOIN JOBWORK_PMT PMT ON A.PRODUCT_CODE=PMT.PRODUCT_CODE
			WHERE A.ISSUE_ID=@CKEYFIELDVAL1

		end

		EXEC SP3S_upd_qty_lastupdate
			@nUpdateMode=3,
			@cXnType='JWI',
			@cMasterTable='JOBWORK_ISSUE_MST',
			@cMemoIdCol='ISSUE_ID',
			@cMemoId=@CKEYFIELDVAL1,
			@CERRORMSG=@CERRORMSG OUTPUT

		goto end_proc
   END  
   ELSE  
   BEGIN  
	  
	  SET @NSTEP = 65  -- UPDATING SENT_TO_HO FLAG TEMP TABLE  
	  SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET LAST_UPDATE=GETDATE() where sp_id='''+LTRIM(RTRIM(STR(@NSPID)))+''''  
	  EXEC SP_EXECUTESQL @CCMD  
	    
       SET @NSTEP = 70
	   SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' where sp_id='''+LTRIM(RTRIM(STR(@NSPID)))+''''  
	   PRINT @CCMD  
	   EXEC SP_EXECUTESQL @CCMD  
	   SET @NSTEP = 74
	   SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' where sp_id='''+LTRIM(RTRIM(STR(@NSPID)))+''''  
	   PRINT @CCMD  
	   IF EXISTS(SELECT TOP 1 * FROM JWI_JOBWORK_ISSUE_BOM_UPLOAD where sp_id =LTRIM(RTRIM(STR(@NSPID))))
	   EXEC SP_EXECUTESQL @CCMD  
      
   
   END  
  
    EXEC SP_CHKXNSAVELOG 'JWI',@NSTEP,0,@NSPID,1
  
   IF @NSAVETRANISSUETYPE=1 AND @NUPDATEMODE<>3  
   BEGIN  
    EXEC UPDATEPMT_JWI
       @CXNTYPE   = 'JWI'  
     , @CXNNO   = @CMEMONOVAL  
     , @CXNID   = @CKEYFIELDVAL1  
     , @NREVERTFLAG  = 1  
     , @NALLOWNEGSTOCK = 0  
     , @NCHKDELBARCODES = 1  
     , @NUPDATEMODE  = @NUPDATEMODE      
     , @CCMD    = @CCMDOUTPUT OUTPUT  
      
      
		IF (@NUPDATEMODE = 3)   
		BEGIN  
			 IF @CCMDOUTPUT <> ''  
			 BEGIN  
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'  
				  SET @BNEGSTOCKFOUND=1  
				  PRINT 'NEGATIVE STOCK FOUND-1'  
				  PRINT ISNULL(@CCMDOUTPUT,'@CCMDOUTPUT : NULL')  
				  EXEC SP_EXECUTESQL @CCMDOUTPUT  
			 END   
		       
		 GOTO END_PROC  
	 END 
	  
   END  
  END     -- END OF EDITMODE  
  
    EXEC SP_CHKXNSAVELOG 'JWI',@NSTEP,0,@NSPID,1
  SET @NSTEP = 95  
  -- RECHECKING IF ID IS STILL LATER  
  IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
  BEGIN  
   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR GETTING NEXT MEMO ID....'  
   GOTO END_PROC  
  END  
  
    DECLARE @CWHERECLAUSE VARCHAR(1000)
    SET @CWHERECLAUSE = ' SP_ID='+LTRIM(RTRIM(STR(@NSPID)))
    
  IF @NUPDATEMODE <> 3  
  BEGIN  

		IF @NUPDATEMODE IN (1,2)
		BEGIN
			SET @NSTEP = 100
			UPDATE a SET total_quantity=b.total_quantity FROM JWI_jobwork_issue_mst_UPLOAD A WITH (ROWLOCK) 
			JOIN (SELECT sp_id,sum(quantity) as total_quantity FROM JWI_jobwork_issue_det_UPLOAD b (NOLOCK)  
				  WHERE sp_id=@nSpId GROUP BY sp_id) b ON a.sp_id=b.sp_id

		 EXEC SP3S_upd_qty_lastupdate
			@nUpdateMode=@NUPDATEMODE,
			@cXnType='JWI',
			@cMasterTable='jobwork_issue_mst',
			@nSpId=@nSpId,
			@cMemoIdCol='issue_id',
			@cMemoId=@CKEYFIELDVAL1,
			@cXnDtCol='issue_dt',
			@CERRORMSG=@CERRORMSG OUTPUT

			IF ISNULL(@CERRORMSG,'')<>''
		       GOTO END_PROC

		END
	     
	   SET @NSTEP = 105  -- UPDATING MASTER TABLE  
	   EXEC UPDATEMASTERXN_MIRROR--UPDATEMASTERXN_OPT   --04 AUG 2018
		  @CSOURCEDB = @CTEMPDBNAME  
		, @CSOURCETABLE = @CTEMPMASTERTABLENAME  
		, @CDESTDB  = ''  
		, @CDESTTABLE = @CMASTERTABLENAME  
		, @CKEYFIELD1 = @CKEYFIELD1  
		,@BALWAYSUPDATE = 1  
	    ,@CFILTERCONDITION=@CWHERECLAUSE
	   -- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE  
	   SET @NSTEP = 110  -- UPDATING TRANSACTION TABLE  
	  
	  EXEC SP_CHKXNSAVELOG 'JWI',@NSTEP,0,@NSPID,1    

	  IF ISNULL(@BGETBARCODE,0)<>1 
	  BEGIN   

			   -- UPDATING ROW_ID IN TEMP TABLES  
			   SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(38), NEWID())  
					WHERE LEFT(ROW_ID,5) = ''LATER'' AND SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''' '  
			   EXEC SP_EXECUTESQL @CCMD  
	     
	     
	     
			   SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' ,HSN_CODE=''0000000000'' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''  
			   EXEC SP_EXECUTESQL @CCMD  
	  
			   -- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE  
			   SET @NSTEP = 114  -- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES  
	

			   SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + '   
				  WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''  
				  AND ROW_ID IN   
				  (  
				   SELECT A.ROW_ID   
				   FROM ' + @CDETAILTABLENAME + ' A   
				   LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B ON A.ROW_ID = B.ROW_ID  AND B.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+'''
				   WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''  
				   AND   B.ROW_ID IS NULL  
				  )'  
			   EXEC SP_EXECUTESQL @CCMD  

	   end
	  
	   -- INSERTING/UPDATING THE ENTRIES IN PRD_JID TABLE FROM TEMPTABLE  
	   SET @NSTEP = 116  -- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES  
	  EXEC SP_CHKXNSAVELOG 'JWI',@NSTEP,0,@NSPID,1 

	  IF  ISNULL(@BGETBARCODE,0)=1 
		 BEGIN

			   if @NUPDATEMODE =1 
				 begin
			      
				 	IF OBJECT_ID ('TEMPDB..#TMPRECBARCODE','U') IS NOT NULL
			           DROP TABLE #TMPRECBARCODE

					   SELECT TMP.AGENCY_CODE,pmt. DEPT_ID,PMT.PRODUCT_CODE,pmt.QUANTITY_IN_STOCK AS QUANTITY,'000' AS BIN_ID,TMP.JOB_CODE,'' AS DUE_DT,cast(0 as int) AS SP_ID,
						 SR=ROW_NUMBER () OVER (PARTITION BY TMP.ARTICLE_CODE ,TMP.PARA1_CODE ,TMP.PARA2_CODE ORDER BY A.PRODUCT_CODE),
						 TMP.ARTICLE_CODE ,TMP.PARA1_CODE ,TMP.PARA2_CODE ,TMP.REC_QTY,TMP.RATE,TMP.ROW_ID AS TMP_ROW_ID,
						 ISNULL(PMT.BOM_VALUE,0)+ISNULL(FG_VALUE,0) AS PP_VALUE,
						 PMT.ITEM_MERCHANT_CODE ,PMT.ORDER_ID ,
						 CAST('' AS VARCHAR(500)) AS iSSUE_BUYER_NAME,
						 CAST('' AS VARCHAR(100)) AS iSSUE_MERCHANT_NAME,t1.WOD_ROW_ID
				into #TMPRECBARCODE
				FROM JOBWORK_PMT PMT (NOLOCK)
				JOIN SKU (NOLOCK) ON PMT.PRODUCT_CODE =SKU.PRODUCT_CODE 
				JOIN ORD_PLAN_BARCODE_DET A (NOLOCK) ON PMT.PRODUCT_CODE=A.PRODUCT_CODE
				JOIN ORD_PLAN_DET T1 (NOLOCK) ON  A.REFROW_ID=T1.ROW_ID
				JOIN ORD_PLAN_MST T2 (NOLOCK) ON  T1.MEMO_ID=T2.MEMO_ID 
				LEFT JOIN ORD_PLAN_JOB T3 (NOLOCK) ON   T2.MEMO_ID=T3.MEMO_ID AND T3.ARTICLE_CODE=T1.ARTICLE_CODE AND ISNULL(T3.JOB_ORDER,0)>0
			    JOIN JWR_MISSING_BARCODE_UPLOAD TMP (NOLOCK) ON sku.ARTICLE_CODE =TMP.ARTICLE_CODE AND sku.PARA1_CODE =TMP.PARA1_CODE AND sku.PARA2_CODE =TMP.PARA2_CODE AND (ISNULL(TMP.JOBCARD_ID,'')=T2.MEMO_ID OR ISNULL(TMP.JOBCARD_ID,'')='')
				where 1=2

			if isnull(@BITEMRETURN,0)=0
			begin
           
			   ;WITH RECBARCODE AS 
			   (
				SELECT TMP.AGENCY_CODE,@CLOCID DEPT_ID,PMT.PRODUCT_CODE,pmt.QUANTITY_IN_STOCK AS QUANTITY,'000' AS BIN_ID,TMP.JOB_CODE,'' AS DUE_DT,@NSPID AS SP_ID,
						 SR=ROW_NUMBER () OVER (PARTITION BY TMP.ARTICLE_CODE ,TMP.PARA1_CODE ,TMP.PARA2_CODE ORDER BY A.PRODUCT_CODE),
						 TMP.ARTICLE_CODE ,TMP.PARA1_CODE ,TMP.PARA2_CODE ,TMP.REC_QTY,TMP.RATE,TMP.ROW_ID AS TMP_ROW_ID,
						 ISNULL(PMT.BOM_VALUE,0)+ISNULL(FG_VALUE,0) AS PP_VALUE,
						 PMT.ITEM_MERCHANT_CODE ,PMT.ORDER_ID ,
						 CAST('' AS VARCHAR(500)) AS iSSUE_BUYER_NAME,
						 CAST('' AS VARCHAR(100)) AS iSSUE_MERCHANT_NAME,t1.WOD_ROW_ID
				FROM JOBWORK_PMT PMT (NOLOCK)
				JOIN SKU (NOLOCK) ON PMT.PRODUCT_CODE =SKU.PRODUCT_CODE 
				JOIN ORD_PLAN_BARCODE_DET A (NOLOCK) ON PMT.PRODUCT_CODE=A.PRODUCT_CODE
				JOIN ORD_PLAN_DET T1 (NOLOCK) ON  A.REFROW_ID=T1.ROW_ID
				JOIN ORD_PLAN_MST T2 (NOLOCK) ON  T1.MEMO_ID=T2.MEMO_ID 
				LEFT JOIN ORD_PLAN_JOB T3 (NOLOCK) ON   T2.MEMO_ID=T3.MEMO_ID AND T3.ARTICLE_CODE=T1.ARTICLE_CODE AND ISNULL(T3.JOB_ORDER,0)>0
				LEFT JOIN
				(
				  SELECT PJ.MEMO_ID,PJ.ARTICLE_CODE  ,PJ.JOB_CODE ,PJ.JOB_ORDER  
				  FROM ORD_PLAN_JOB  PJ (NOLOCK)
				) PJ ON  T3.MEMO_ID=PJ.MEMO_ID AND T3.ARTICLE_CODE=PJ.ARTICLE_CODE AND ISNULL(T3.JOB_ORDER,0)-1 =PJ.JOB_ORDER  
				JOIN JWR_MISSING_BARCODE_UPLOAD TMP (NOLOCK) ON sku.ARTICLE_CODE =TMP.ARTICLE_CODE AND sku.PARA1_CODE =TMP.PARA1_CODE AND sku.PARA2_CODE =TMP.PARA2_CODE AND (ISNULL(TMP.JOBCARD_ID,'')=T2.MEMO_ID OR ISNULL(TMP.JOBCARD_ID,'')='')
				WHERE PMT.QUANTITY_IN_STOCK>0 AND T2.CANCELLED=0 
				AND( ISNULL(T2.ENFORCE_JOB_ORDER,0) =0 OR  ((ISNULL(PMT.JOB_CODE,'')='' AND ISNULL(T3.JOB_ORDER,0) =1)OR ( PMT.JOB_CODE =PJ.JOB_CODE )))
				AND (ISNULL(T2.ENFORCE_JOB_ORDER,0) =0 OR T3.JOB_CODE=TMP.JOB_CODE)
				--AND (@LEVEL_NO=0 OR T2.APPROVEDLEVELNO =99)
				AND t2.location_code =@CLOCID AND TMP.SP_ID =LTRIM(RTRIM(STR(@NSPID)))
				and pmt.Barcode_Cancelled =0
			
				)
				insert INTO #TMPRECBARCODE
				SELECT *  FROM RECBARCODE WHERE SR <=REC_QTY 


				end
				else
				begin

				   
			     ;WITH RECBARCODE AS 
			   (
				SELECT TMP.AGENCY_CODE,@CLOCID DEPT_ID,PMT.PRODUCT_CODE,pmt.QUANTITY_IN_STOCK AS QUANTITY,'000' AS BIN_ID,TMP.JOB_CODE,'' AS DUE_DT,@NSPID AS SP_ID,
						 SR=ROW_NUMBER () OVER (PARTITION BY TMP.ARTICLE_CODE ,TMP.PARA1_CODE ,TMP.PARA2_CODE ORDER BY A.PRODUCT_CODE),
						 TMP.ARTICLE_CODE ,TMP.PARA1_CODE ,TMP.PARA2_CODE ,TMP.REC_QTY,TMP.RATE,TMP.ROW_ID AS TMP_ROW_ID,
						 ISNULL(PMT.BOM_VALUE,0)+ISNULL(FG_VALUE,0) AS PP_VALUE,
						 PMT.ITEM_MERCHANT_CODE ,PMT.ORDER_ID ,
						 CAST('' AS VARCHAR(500)) AS iSSUE_BUYER_NAME,
						 CAST('' AS VARCHAR(100)) AS iSSUE_MERCHANT_NAME,t1.WOD_ROW_ID
				FROM JOBWORK_PMT PMT (NOLOCK)
				JOIN SKU (NOLOCK) ON PMT.PRODUCT_CODE =SKU.PRODUCT_CODE 
				JOIN ORD_PLAN_BARCODE_DET A (NOLOCK) ON PMT.PRODUCT_CODE=A.PRODUCT_CODE
				JOIN ORD_PLAN_DET T1 (NOLOCK) ON  A.REFROW_ID=T1.ROW_ID
				JOIN ORD_PLAN_MST T2 (NOLOCK) ON  T1.MEMO_ID=T2.MEMO_ID 
				LEFT JOIN ORD_PLAN_JOB T3 (NOLOCK) ON   T2.MEMO_ID=T3.MEMO_ID AND T3.ARTICLE_CODE=T1.ARTICLE_CODE AND ISNULL(T3.JOB_ORDER,0)>0
				LEFT JOIN
				(
				  SELECT PJ.MEMO_ID,PJ.ARTICLE_CODE  ,PJ.JOB_CODE ,PJ.JOB_ORDER  
				  FROM ORD_PLAN_JOB  PJ (NOLOCK)
				) PJ ON  T3.MEMO_ID=PJ.MEMO_ID AND T3.ARTICLE_CODE=PJ.ARTICLE_CODE and  PJ.JOB_ORDER between T3.JOB_ORDER and T3.JOB_ORDER+1 
				--AND (T3.JOB_ORDER+1 =PJ.JOB_ORDER or T3.JOB_ORDER =PJ.JOB_ORDER )  
				JOIN JWR_MISSING_BARCODE_UPLOAD TMP (NOLOCK) ON sku.ARTICLE_CODE =TMP.ARTICLE_CODE AND sku.PARA1_CODE =TMP.PARA1_CODE AND sku.PARA2_CODE =TMP.PARA2_CODE AND (ISNULL(TMP.JOBCARD_ID,'')=T2.MEMO_ID OR ISNULL(TMP.JOBCARD_ID,'')='')
				WHERE PMT.QUANTITY_IN_STOCK>0 AND T2.CANCELLED=0 
				AND(PMT.JOB_CODE =PJ.JOB_CODE )
				AND T3.JOB_CODE=TMP.JOB_CODE
				AND t2.location_code =@CLOCID AND TMP.SP_ID =LTRIM(RTRIM(STR(@NSPID)))
				and pmt.Barcode_Cancelled =0
				and isnull(pmt.JOB_CODE,'') <>''
			
				)
				insert INTO #TMPRECBARCODE
				SELECT *  FROM RECBARCODE WHERE SR <=REC_QTY 

				end
         
			     UPDATE A SET ITEM_MERCHANT_CODE =B.ITEM_MERCHANT_CODE ,ORDER_ID =B.ORDER_ID 
				 FROM #TMPRECBARCODE A (NOLOCK)
				 JOIN BUYER_ORDER_DET B (NOLOCK) ON A.WOD_ROW_ID =B.row_id 
				 WHERE ISNULL(A.ORDER_ID,'') =''


				 UPDATE A SET iSSUE_BUYER_NAME=C.AC_NAME, iSSUE_MERCHANT_NAME=EMP.emp_name 
				 FROM #TMPRECBARCODE A
				 JOIN BUYER_ORDER_MST B (NOLOCK) ON A.ORDER_ID =B.order_id 
				 JOIN LM01106 C (NOLOCK) ON B.ac_code =C.AC_CODE 
				 LEFT JOIN employee EMP (NOLOCK) ON A.ITEM_MERCHANT_CODE =EMP.emp_code 
				 WHERE ISNULL(A.ORDER_ID,'') =''
			 
			
				IF OBJECT_ID ('TEMPDB..#TMPMISMATCHQTY','U') IS NOT NULL
				   DROP TABLE #TMPMISMATCHQTY

				SELECT A.ARTICLE_CODE ,A.PARA1_CODE ,A.PARA2_CODE ,A.REC_QTY,sum(QUANTITY) AS BARCODE_QTY  
				INTO #TMPMISMATCHQTY
				FROM #TMPRECBARCODE A
				GROUP BY A.ARTICLE_CODE ,A.PARA1_CODE ,A.PARA2_CODE ,A.REC_QTY 
				HAVING A.REC_QTY<>sum(QUANTITY) 

				
				IF EXISTS (SELECT TOP 1 'U' FROM #TMPMISMATCHQTY)
				BEGIN
     
					 DECLARE @CSTR VARCHAR(1000)

					 SELECT TOP 1 @CSTR=' ARTICLE:'+ ARTICLE_NO +',PARA1_NAME:'+PARA1_NAME +',PARA2_NAME:'+PARA2_NAME +',REC QTY:' +STR(REC_QTY) +',BARCODE QTY:'+STR(BARCODE_QTY)
					 FROM #TMPMISMATCHQTY A
					 JOIN ARTICLE B ON A.ARTICLE_CODE =B.ARTICLE_CODE 
					 JOIN PARA1 P1 ON P1.PARA1_CODE =A.PARA1_CODE 
					 JOIN PARA2 P2 ON P2.PARA2_CODE =A.PARA2_CODE 

					SET @CERRORMSG = 'STEP- '  +@CSTR+ ' ISSUE DETAILS NOT FOUND PLEASE CHECK  '  
					GOTO END_PROC

				END


				DECLARE @NTOTALQTY NUMERIC(10,0),@NCALTOTALQTY NUMERIC(10,0)

				select @NCALTOTALQTY=sum(quantity) from #TMPRECBARCODE
				select @NTOTALQTY=SUM(rec_qty)  from JWR_MISSING_BARCODE_UPLOAD (NOLOCK) where sp_id =LTRIM(RTRIM(STR(@NSPID)))

				IF ISNULL(@NTOTALQTY,0)<>ISNULL(@NCALTOTALQTY,0)
				BEGIN
				    	SET @CERRORMSG = 'MISMATCH IN TOTAL Quantity:'+RTRIM(LTRIM(STR(ISNULL(@NTOTALQTY,0))))+' & BARCODE ASSIGN QTY  ' +RTRIM(LTRIM(STR(ISNULL(@NCALTOTALQTY,0))))
					    GOTO END_PROC

				END
				
				
				end
	  END 
	  ELSE
	  BEGIN
	   EXEC UPDATEMASTERXN_MIRROR--UPDATEMASTERXN_OPT   --04 AUG 2018
		  @CSOURCEDB = @CTEMPDBNAME  
		, @CSOURCETABLE = @CTEMPDETAILTABLENAME  
		, @CDESTDB  = ''  
		, @CDESTTABLE = @CDETAILTABLENAME  
		, @CKEYFIELD1 = 'ROW_ID'  
		,@BALWAYSUPDATE = 1  
		 ,@CFILTERCONDITION=@CWHERECLAUSE

	END

	 
	   --04 AUG 2018
	   SET @NSTEP = 117
	   IF EXISTS(SELECT TOP 1 * FROM JWI_JOBWORK_ISSUE_BOM_UPLOAD where sp_id =LTRIM(RTRIM(STR(@NSPID))))
	   BEGIN
	   
		   DELETE FROM JOBWORK_ISSUE_BOM WHERE ISSUE_ID =@CKEYFIELDVAL1
	   
			EXEC UPDATEMASTERXN_MIRROR--UPDATEMASTERXN 
				  @CSOURCEDB	= @CTEMPDBNAME
				, @CSOURCETABLE = @CTEMPDETAILTABLENAME1
				, @CDESTDB		= ''
				, @CDESTTABLE	= @CDETAILTABLENAME1
				, @CKEYFIELD1	= 'ISSUE_ID'
				, @BALWAYSUPDATE = 1
				,@CFILTERCONDITION=@CWHERECLAUSE
	   --04 AUG 2018		
   
   END

   SET @NSTEP = 140   
   
      
  END  
      EXEC SP_CHKXNSAVELOG 'JWI',@NSTEP,0,@NSPID,1
  -- VALIDATING ENTRIES   
  SET @NSTEP = 150  -- VALIDATING ENTRIES  
  
  EXEC VALIDATEXN  
     @CXNTYPE = 'JWI'    
   , @CXNID = @CKEYFIELDVAL1  
   , @CCMD  = @CCMDOUTPUT OUTPUT  
   , @CUSERCODE = @CWIZAPPUSERCODE
  
  IF @CCMDOUTPUT <> ''  
  BEGIN  
   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION FAILED : ' + @CCMDOUTPUT + '...'  
   GOTO END_PROC  
  END  
  
  -- AFTER SUCCESSFUL SAVING , JUST DROP THE TEMP TABLES CREATED BY APPLICATION  
  SET @NSTEP = 170 

  DECLARE @NISSUE_MODE INT, @Nissue_type INT,@DISSUE_DT DATETIME
  SELECT @NISSUE_MODE=ISSUE_MODE,@DISSUE_DT=issue_dt,@Nissue_type=issue_type  FROM JOBWORK_ISSUE_MST (NOLOCK) WHERE issue_id =@CKEYFIELDVAL1
  
  
  IF ISNULL(@NISSUE_MODE,0)=0 AND ISNULL(@Nissue_type,0)=1
  BEGIN
       
      IF EXISTS ( SELECT TOP 1 'U' FROM JOBWORK_ISSUE_DET A (NOLOCK)
	  JOIN JOBWORK_ISSUE_MST MST (NOLOCK) ON A.ISSUE_ID=MST.ISSUE_ID 
	  Join sku_names sn (nolock) on a.product_code =sn.product_Code 
      LEFT JOIN PMT01106 B (NOLOCK) ON A.PRODUCT_CODE =B.PRODUCT_CODE AND mst.location_Code =B.DEPT_ID AND A.BIN_ID =B.BIN_ID 
        WHERE A.ISSUE_ID =@CKEYFIELDVAL1 AND B.PRODUCT_CODE IS NULL AND   ISNULL(MST.WIP,0)=0 and ISNULL(sn.stock_na,0)=0
        )
        BEGIN
           SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' STOCK GOING NEGATIVE'  
           GOTO END_PROC 
        END
         
  END
  
 
			DECLARE @CPARTY_GSTN_NO VARCHAR(20),@BREGISTERED BIT,@BGSTBILL INT
			DECLARE @CPARTYSTATECODE VARCHAR(2),@CGSTCUTOFFDATE VARCHAR(100)
			SET @BGSTBILL=0
			SELECT @CGSTCUTOFFDATE=VALUE FROM CONFIG WHERE CONFIG_OPTION ='GST_CUT_OFF_DATE'
			
			IF ISNULL(@CGSTCUTOFFDATE,'')<>''
			BEGIN
				
				IF @DISSUE_DT>=CONVERT(DATE,@CGSTCUTOFFDATE)
				   SET @BGSTBILL=1
			END

		
	
		
    IF @BGSTBILL=1 and ISNULL(@BGETBARCODE,0)=0
	BEGIN
		   
			SET @NSTEP=187
			DELETE FROM GST_TAXINFO_CALC WITH (ROWLOCK) WHERE SP_ID=CAST(@NSPID AS VARCHAR)
			DELETE FROM GST_TAXINFO_CALC_OH WITH (ROWLOCK) WHERE SP_ID=CAST(@NSPID AS VARCHAR)
			
			
		
			SELECT TOP 1 @CPARTY_GSTN_NO=AC_GST_NO,@CPARTYSTATECODE=C.AC_GST_STATE_CODE,
			@BREGISTERED=ISNULL(REGISTERED_GST_DEALER,0),
			@DISSUE_DT=A.ISSUE_DT 
			FROM JOBWORK_ISSUE_MST A 
			JOIN PRD_AGENCY_MST B ON A.AGENCY_CODE =B.AGENCY_CODE 
			JOIN LMP01106 C ON B.AC_CODE=C.AC_CODE 
			WHERE A.issue_id =@CKEYFIELDVAL1	
			
            
			UPDATE A SET PARTY_STATE_CODE=@CPARTYSTATECODE
			FROM JOBWORK_ISSUE_MST A WHERE ISNULL(PARTY_STATE_CODE,'') IN('','00')
			AND ISSUE_ID=@CKEYFIELDVAL1
			
			UPDATE A SET BILL_LEVEL_TAX_METHOD=CASE WHEN ISNULL(@NTRADINGMODE,0)=0 THEN 2 ELSE 1 END FROM JOBWORK_ISSUE_MST A WHERE ISSUE_ID=@CKEYFIELDVAL1

			if exists (SELECT TOP 1 'U' FROM JOBWORK_ISSUE_MST A (nolock) WHERE ISSUE_ID=@CKEYFIELDVAL1 and wip =1 and isnull(ISSUE_MODE,0)=0)
			begin
			     
				 INSERT GST_TAXINFO_CALC	WITH (ROWLOCK) ( PRODUCT_CODE, SP_ID ,NET_VALUE,TAX_METHOD,ROW_ID,QUANTITY,SOURCE_DEPT_ID,MRP,HSN_CODE)  
				SELECT A.PRODUCT_CODE,@NSPID AS SP_ID,
				ISNULL(A.QUANTITY,0)*ISNULL(A.PURCHASE_PRICE,0)  AS NET_VALUE,
				BILL_LEVEL_TAX_METHOD  AS TAX_METHOD,-- ISNULL(B.BILL_LEVEL_TAX_METHOD,0)
				ROW_ID,QUANTITY,b.location_Code ,ISNULL(A.QUANTITY,0)*ISNULL(A.PURCHASE_PRICE,0)  MRP,Art.HSN_CODE 
				FROM JOBWORK_ISSUE_DET  A
				JOIN JOBWORK_ISSUE_MST B ON A.issue_id =B.issue_id 
				JOIN wip_pmt SKU ON SKU .PRODUCT_CODE =A.PRODUCT_CODE 
				join ARTICLE art (nolock) on art.article_code=sku.Article_code
				WHERE A.ISSUE_ID=@CKEYFIELDVAL1

			
			end
			else
			begin
			
				 INSERT GST_TAXINFO_CALC	WITH (ROWLOCK) ( PRODUCT_CODE, SP_ID ,NET_VALUE,TAX_METHOD,ROW_ID,QUANTITY,SOURCE_DEPT_ID,MRP,HSN_CODE)  
				SELECT A.PRODUCT_CODE,@NSPID AS SP_ID,
				ISNULL(A.QUANTITY,0)*ISNULL(A.PURCHASE_PRICE,0)  AS NET_VALUE,
				BILL_LEVEL_TAX_METHOD  AS TAX_METHOD,-- ISNULL(B.BILL_LEVEL_TAX_METHOD,0)
				ROW_ID,QUANTITY,b.location_Code ,SKU.MRP,A.HSN_CODE 
				FROM JOBWORK_ISSUE_DET  A
				JOIN JOBWORK_ISSUE_MST B ON A.issue_id =B.issue_id 
				 JOIN SKU ON SKU .PRODUCT_CODE =A.PRODUCT_CODE 
				WHERE A.ISSUE_ID=@CKEYFIELDVAL1


			
			end
           --wip pmt not maintain sku
     
					
			EXEC SP3S_GST_TAX_CAL
				@CXN_TYPE='JWI',
				@CMEMO_ID='',
				@DMEMO_DT=@DISSUE_DT,
				@NSPID=@NSPID,
				@CPARTYSTATE_CODE=@CPARTYSTATECODE,
				@BPARTYREGISTERED=@BREGISTERED,
				@CPARTY_GSTN_NO=@CPARTY_GSTN_NO,
				@CERRMSG=@CERRORMSG OUTPUT,
				@cLocationId=@CLOCID
		 
			
			IF ISNULL(@CERRORMSG,'')<>''
				 GOTO END_PROC
				 
				 
				 UPDATE A SET IGST_AMOUNT =ISNULL(TMP.IGST_AMOUNT,0),
				 CGST_AMOUNT =ISNULL(TMP.CGST_AMOUNT,0),
				 SGST_AMOUNT =ISNULL(TMP.SGST_AMOUNT,0),
				 HSN_CODE =TMP.HSN_CODE ,
				 GST_PERCENTAGE=ISNULL(TMP.GST_PERCENTAGE,0),
				 XN_VALUE_WITH_GST =ISNULL(TMP.XN_VALUE_WITH_GST,0),
				 XN_VALUE_WITHOUT_GST =ISNULL(TMP.XN_VALUE_WITHOUT_GST,0),
				 CESS_AMOUNT=ISNULL(TMP.CESS_AMOUNT,0),
				 gst_cess_percentage =isnull(tmp.gst_cess_percentage,0),
				 Gst_Cess_Amount =isnull(tmp.Gst_Cess_Amount,0)
				 FROM JOBWORK_ISSUE_DET A (NOLOCK)
				 JOIN GST_TAXINFO_CALC TMP (NOLOCK) ON A.ROW_ID =TMP.ROW_ID 
				 WHERE TMP.SP_ID =CAST(@NSPID AS VARCHAR)
				 AND A.ISSUE_ID=@CKEYFIELDVAL1

			  EXEC SP3S_REPROCESS_GST_CALCULATION @CKEYFIELDVAL1,'JWI',0,@CERRORMSG OUTPUT 
			  IF ISNULL(@CERRORMSG,'')<>''
			  GOTO END_PROC
   
	END
	ELSE IF @BGSTBILL=1 and ISNULL(@BGETBARCODE,0)=1
	BEGIN

	        SET @NSTEP = 200
		    
		  EXEC SP_CHKXNSAVELOG 'JWI',@NSTEP,0,@NSPID,1 

	        DECLARE @NBILL_LEVEL_TAX_METHOD INT
		    DELETE FROM GST_TAXINFO_CALC WITH (ROWLOCK) WHERE SP_ID=CAST(@NSPID AS VARCHAR)
			DELETE FROM GST_TAXINFO_CALC_OH WITH (ROWLOCK) WHERE SP_ID=CAST(@NSPID AS VARCHAR)
			
			UPDATE A SET BILL_LEVEL_TAX_METHOD=CASE WHEN ISNULL(@NTRADINGMODE,0)=0 THEN 2 ELSE 1 END FROM JOBWORK_ISSUE_MST A WHERE ISSUE_ID=@CKEYFIELDVAL1
		
			SELECT TOP 1 @CPARTY_GSTN_NO=AC_GST_NO,@CPARTYSTATECODE=C.AC_GST_STATE_CODE,
			@BREGISTERED=ISNULL(REGISTERED_GST_DEALER,0),
			@DISSUE_DT=A.ISSUE_DT ,@NBILL_LEVEL_TAX_METHOD=a.BILL_LEVEL_TAX_METHOD 
			FROM JOBWORK_ISSUE_MST A 
			JOIN PRD_AGENCY_MST B ON A.AGENCY_CODE =B.AGENCY_CODE 
			JOIN LMP01106 C ON B.AC_CODE=C.AC_CODE 
			WHERE A.issue_id =@CKEYFIELDVAL1	
			
            
			UPDATE A SET PARTY_STATE_CODE=@CPARTYSTATECODE
			FROM JOBWORK_ISSUE_MST A WHERE ISNULL(PARTY_STATE_CODE,'') IN('','00')
			AND ISSUE_ID=@CKEYFIELDVAL1
			
		
			
			SET @NSTEP = 210
			  EXEC SP_CHKXNSAVELOG 'JWI',@NSTEP,0,@NSPID,1 

			INSERT GST_TAXINFO_CALC	WITH (ROWLOCK) ( PRODUCT_CODE, SP_ID ,NET_VALUE,TAX_METHOD,ROW_ID,QUANTITY,SOURCE_DEPT_ID,MRP,HSN_CODE,ISSUE_DUE_DT)  
			SELECT '' PRODUCT_CODE,@NSPID AS SP_ID,
			0  AS NET_VALUE,
			isnull(@NBILL_LEVEL_TAX_METHOD,0)  AS TAX_METHOD,-- ISNULL(B.BILL_LEVEL_TAX_METHOD,0)
			a.ROW_ID,1 as QUANTITY,@CLOCATIONID,art.MRP,art.HSN_CODE ,A.DUE_DT
			FROM JWR_MISSING_BARCODE_UPLOAD  A
			JOIN ARTICLE ART (nolock) ON ART.ARTICLE_CODE =A.ARTICLE_CODE 
			WHERE A.SP_ID=LTRIM(RTRIM(STR(@NSPID)))



			IF @NUPDATEMODE =1
			BEGIN
			    

				UPDATE A SET NET_VALUE = B.PP_VALUE 
				FROM GST_TAXINFO_CALC A (NOLOCK)
				JOIN
				(
				  SELECT TMP_ROW_ID ,PP_VALUE 
				  FROM #TMPRECBARCODE
				  GROUP BY TMP_ROW_ID ,PP_VALUE 
				) B ON A.ROW_ID =B.TMP_ROW_ID 
				WHERE A.SP_ID=LTRIM(RTRIM((@NSPID)))

			END
		
           
		  SET @NSTEP = 222
					
			EXEC SP3S_GST_TAX_CAL
				@CXN_TYPE='JWI',
				@CMEMO_ID='',
				@DMEMO_DT=@DISSUE_DT,
				@NSPID=@NSPID,
				@CPARTYSTATE_CODE=@CPARTYSTATECODE,
				@BPARTYREGISTERED=@BREGISTERED,
				@CPARTY_GSTN_NO=@CPARTY_GSTN_NO,
				@CERRMSG=@CERRORMSG OUTPUT,
				@cLocationId=@CLOCID
		 
			
			IF ISNULL(@CERRORMSG,'')<>''
				 GOTO END_PROC
  EXEC SP_CHKXNSAVELOG 'JWI',@NSTEP,0,@NSPID,1 

         IF @NUPDATEMODE =1 
		 BEGIN

		     print 'test'
			 CREATE INDEX IX_TMPRECBARCODE_PC on #TMPRECBARCODE(product_code)
			 CREATE INDEX IX_TMPRECBARCODE_iISSUE_ID on #TMPRECBARCODE(DEPT_ID)
			 CREATE INDEX IX_TMPRECBARCODE_PP_VALUE on #TMPRECBARCODE(PP_VALUE)

			INSERT JOBWORK_ISSUE_DET	( BIN_ID, COMPANY_CODE, DEPT_ID,ISSUE_ID,JOB_CODE ,QUANTITY,ROW_ID,PRODUCT_CODE,JOB_RATE,LAST_UPDATE ,
			IGST_AMOUNT,CGST_AMOUNT ,SGST_AMOUNT,HSN_CODE,GST_PERCENTAGE,XN_VALUE_WITH_GST, XN_VALUE_WITHOUT_GST,CESS_AMOUNT,GST_CESS_PERCENTAGE ,GST_CESS_AMOUNT,PURCHASE_PRICE ,BUYER_NAME,MERCHANT_NAME,due_dt  )  

			 SELECT   BIN_ID,'01' COMPANY_CODE, DEPT_ID,@CKEYFIELDVAL1 ISSUE_ID,JOB_CODE ,a.QUANTITY QUANTITY,NEWID() ROW_ID,A.PRODUCT_CODE,ISNULL(RATE,0) AS JOB_RATE,GETDATE() AS LAST_UPDATE ,
			         ISNULL(TMP.IGST_AMOUNT,0),CGST_AMOUNT =ISNULL(TMP.CGST_AMOUNT,0),SGST_AMOUNT =ISNULL(TMP.SGST_AMOUNT,0),HSN_CODE =TMP.HSN_CODE ,
				     GST_PERCENTAGE=ISNULL(TMP.GST_PERCENTAGE,0),XN_VALUE_WITH_GST =ISNULL(TMP.XN_VALUE_WITH_GST,0),XN_VALUE_WITHOUT_GST =ISNULL(TMP.XN_VALUE_WITHOUT_GST,0),
				     CESS_AMOUNT=ISNULL(TMP.CESS_AMOUNT,0),GST_CESS_PERCENTAGE =ISNULL(TMP.GST_CESS_PERCENTAGE,0),GST_CESS_AMOUNT =ISNULL(TMP.GST_CESS_AMOUNT,0),a.PP_VALUE ,
					 A.ISSUE_BUYER_NAME,A.ISSUE_MERCHANT_NAME,TMP.ISSUE_DUE_DT 
			  FROM  #TMPRECBARCODE A 
			  JOIN GST_TAXINFO_CALC TMP ON A.TMP_ROW_ID =TMP.ROW_ID 
			  WHERE TMP.SP_ID =LTRIM(RTRIM(STR(@NSPID)))

			 
				
		 END
		 else 
		 begin
		 SET @NSTEP = 224
		          UPDATE A SET remarks =TMP.REMARKS  FROM JOBWORK_ISSUE_DET A (NOLOCK)
				  JOIN SKU B ON A.PRODUCT_CODE =B.PRODUCT_CODE 
				  JOIN JWI_JOBWORK_ISSUE_DET_UPLOAD TMP (NOLOCK) ON TMP.ROW_ID = CAST('LATER'+B.ARTICLE_CODE +B.PARA1_CODE +B.PARA2_CODE AS VARCHAR(40)) and TMP.SP_ID =LTRIM(RTRIM(STR(@NSPID)))
				  WHERE  A.ISSUE_ID=@CKEYFIELDVAL1

		          EXEC SP_CHKXNSAVELOG 'JWI',@NSTEP,0,@NSPID,1   
			     	IF OBJECT_ID ('TEMPDB..#TMPBARCODEREMOVE','U') IS NOT NULL
					   DROP TABLE #TMPBARCODEREMOVE 

				  SELECT A.PRODUCT_CODE,A.JOB_CODE 
				   INTO #TMPBARCODEREMOVE
				  FROM JOBWORK_ISSUE_DET A (NOLOCK)
				  JOIN SKU B ON A.PRODUCT_CODE =B.PRODUCT_CODE 
				  LEFT JOIN GST_TAXINFO_CALC TMP (NOLOCK) ON TMP.ROW_ID = CAST('LATER'+B.ARTICLE_CODE +B.PARA1_CODE +B.PARA2_CODE AS VARCHAR(40)) AND TMP.SP_ID =LTRIM(RTRIM(STR(@NSPID)))
				  WHERE  A.ISSUE_ID=@CKEYFIELDVAL1 AND TMP.ROW_ID IS NULL


			     	IF OBJECT_ID ('TEMPDB..#TMPJOBupdate','U') IS NOT NULL
					   DROP TABLE #TMPJOBupdate 
		   
					SELECT A.PRODUCT_CODE, DET.MEMO_ID,DET.ARTICLE_CODE,PJ.JOB_CODE
					INTO #TMPJOBupdate
					FROM #TMPBARCODEREMOVE A (NOLOCK)
					JOIN ORD_PLAN_BARCODE_DET BD (NOLOCK) ON A.PRODUCT_CODE =BD.PRODUCT_CODE 
					JOIN ORD_PLAN_DET DET (NOLOCK) ON BD.REFROW_ID=DET.ROW_ID 
					JOIN ORD_PLAN_JOB JOB ON  DET.MEMO_ID =JOB.MEMO_ID AND DET.ARTICLE_CODE =JOB.ARTICLE_CODE  AND A.JOB_CODE =JOB.JOB_CODE 
					LEFT JOIN
					(
						  SELECT PJ.MEMO_ID,PJ.ARTICLE_CODE  ,PJ.JOB_CODE ,PJ.JOB_ORDER  
						  FROM ORD_PLAN_JOB  PJ (NOLOCK)
					) PJ ON  DET.MEMO_ID=PJ.MEMO_ID AND DET.ARTICLE_CODE=PJ.ARTICLE_CODE AND JOB.JOB_ORDER-1 =PJ.JOB_ORDER  
				
				SET @NSTEP = 226
				  EXEC SP_CHKXNSAVELOG 'JWI',@NSTEP,0,@NSPID,1 

					IF EXISTS (SELECT TOP 1 'U' FROM #TMPJOBupdate)
					BEGIN

						UPDATE PMT SET  JOB_CODE =ISNULL(A.JOB_CODE ,''),
										 AGENCY_CODE  =ISNULL(C.AGENCY_CODE  ,'')
						FROM #TMPJOBupdate A
						JOIN JOBWORK_PMT PMT ON A.PRODUCT_CODE =PMT.PRODUCT_CODE
						LEFT JOIN
						(
						  SELECT B.PRODUCT_CODE ,B.JOB_CODE ,MST.AGENCY_CODE 
						  FROM   JOBWORK_ISSUE_DET B
						  JOIN JOBWORK_ISSUE_MST  MST ON B.ISSUE_ID =MST.ISSUE_ID 
						)  C ON A.PRODUCT_CODE =C.PRODUCT_CODE AND A.JOB_CODE =C.JOB_CODE 
		
					END
					else 
					begin
		    
						UPDATE PMT SET JOB_CODE =ISNULL(A.JOB_CODE ,''),
									   AGENCY_CODE  =''
						FROM #TMPJOBupdate A
						JOIN JOBWORK_PMT PMT ON A.PRODUCT_CODE=PMT.PRODUCT_CODE
						

					end

SET @NSTEP = 228
  EXEC SP_CHKXNSAVELOG 'JWI',@NSTEP,0,@NSPID,1 

		          DELETE A 
				  FROM JOBWORK_ISSUE_DET A (NOLOCK)
				  JOIN SKU B ON A.PRODUCT_CODE =B.PRODUCT_CODE 
				  left JOIN GST_TAXINFO_CALC TMP (NOLOCK) ON TMP.ROW_ID = CAST('LATER'+B.ARTICLE_CODE +B.PARA1_CODE +B.PARA2_CODE AS VARCHAR(40)) and TMP.SP_ID =LTRIM(RTRIM(STR(@NSPID)))
				  WHERE  A.ISSUE_ID=@CKEYFIELDVAL1 and tmp.row_id is null
SET @NSTEP = 230
		         UPDATE A SET IGST_AMOUNT =ISNULL(TMP.IGST_AMOUNT,0),
				 CGST_AMOUNT =ISNULL(TMP.CGST_AMOUNT,0),
				 SGST_AMOUNT =ISNULL(TMP.SGST_AMOUNT,0),
				 HSN_CODE =TMP.HSN_CODE ,
				 GST_PERCENTAGE=ISNULL(TMP.GST_PERCENTAGE,0),
				 XN_VALUE_WITH_GST =ISNULL(TMP.XN_VALUE_WITH_GST,0),
				 XN_VALUE_WITHOUT_GST =ISNULL(TMP.XN_VALUE_WITHOUT_GST,0),
				 CESS_AMOUNT=ISNULL(TMP.CESS_AMOUNT,0),
				 gst_cess_percentage =isnull(tmp.gst_cess_percentage,0),
				 Gst_Cess_Amount =isnull(tmp.Gst_Cess_Amount,0),
				 due_dt=TMP.ISSUE_DUE_DT
				 FROM JOBWORK_ISSUE_DET A (NOLOCK)
				 JOIN SKU B (nolock) ON A.PRODUCT_CODE =B.PRODUCT_CODE 
				 JOIN GST_TAXINFO_CALC TMP (NOLOCK) ON TMP.ROW_ID = CAST('LATER'+B.ARTICLE_CODE +B.PARA1_CODE +B.PARA2_CODE AS VARCHAR(40))
				 WHERE TMP.SP_ID =LTRIM(RTRIM(STR(@NSPID)))
				 AND A.ISSUE_ID=@CKEYFIELDVAL1


		 end
	
	END

	ELSE
	BEGIN
		    
		    
				 UPDATE A SET IGST_AMOUNT =0,
				 CGST_AMOUNT =0,
				 SGST_AMOUNT =0,
				 HSN_CODE ='0000000000',
				 GST_PERCENTAGE=0,
				 XN_VALUE_WITH_GST =ISNULL(QUANTITY,0)*ISNULL(JOB_RATE,0),
				 XN_VALUE_WITHOUT_GST =ISNULL(QUANTITY,0)*ISNULL(JOB_RATE,0),
				 CESS_AMOUNT=0,
				  gst_cess_percentage =0,
				 Gst_Cess_Amount =0
				 FROM JOBWORK_ISSUE_DET A (NOLOCK)
				 WHERE A.ISSUE_ID=@CKEYFIELDVAL1
					
		
		
	END

	
	  EXEC SP_CHKXNSAVELOG 'JWI',@NSTEP,0,@NSPID,1 	

	 IF NOT EXISTS (SELECT TOP 1 'U' FROM JOBWORK_ISSUE_DET (NOLOCK) WHERE ISSUE_ID =@CKEYFIELDVAL1)
	  BEGIN
	      SET @CERRORMSG = 'Blank barcode can no be saved'  
          GOTO END_PROC 

	  END

  IF @NUPDATEMODE=1
  BEGIN
      
    UPDATE A SET JOB_CODE=B.JOB_CODE ,AGENCY_CODE =B.AGENCY_CODE 
	FROM  JOBWORK_PMT A (NOLOCK)
	JOIN 
	( 
		SELECT B.PRODUCT_CODE,B.DEPT_ID,B.BIN_ID,JOB_CODE, A.AGENCY_CODE ,
		      SUM(QUANTITY) AS QUANTITY   
		FROM JOBWORK_ISSUE_DET B (NOLOCK)   
		JOIN JOBWORK_ISSUE_MST A (NOLOCK) ON A.ISSUE_ID=B.ISSUE_ID 
		WHERE  ISNULL(A.ISSUE_MODE  ,0)=1 AND ISNULL(A.ISSUE_TYPE   ,0)=1 
		AND B.ISSUE_ID = @CKEYFIELDVAL1 
		AND A.CANCELLED=0
		GROUP BY B.PRODUCT_CODE,B.DEPT_ID  ,B.BIN_ID,JOB_CODE, A.AGENCY_CODE
	) B  ON A.PRODUCT_CODE = B.PRODUCT_CODE   
	AND A.DEPT_ID = B.DEPT_ID  
	AND A.BIN_ID = B.BIN_ID 
  
  END


  
IF @NUPDATEMODE <>3
BEGIN
	  			
	   IF @NSAVETRANISSUETYPE=1  
	   BEGIN  
			EXEC UPDATEPMT_JWI   
			   @CXNTYPE   = 'JWI'  
			 , @CXNNO   = @CMEMONOVAL  
			 , @CXNID   = @CKEYFIELDVAL1  
			 , @NREVERTFLAG  = 0  
			 , @NALLOWNEGSTOCK = 0  
			 , @NCHKDELBARCODES = 1  
			 , @NUPDATEMODE  = @NUPDATEMODE      
			 , @CCMD    = @CCMDOUTPUT OUTPUT  
     
  
  
			IF ISNULL(@CCMDOUTPUT,'') <> ''  
			BEGIN  
			 SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'  
       
			 SET @BNEGSTOCKFOUND=1      
       
			 PRINT 'NEGATIVE STOCK FOUND-2-'+@CCMDOUTPUT  
       
			 EXEC SP_EXECUTESQL @CCMDOUTPUT  
			 GOTO END_PROC  
			END  
	   END  

 END


		UPDATE A SET Total_Gst_Cess_Amount = B.Gst_Cess_Amount,
		             total_quantity =b.total_qty 
		FROM JOBWORK_ISSUE_MST A (nolock)
		join
		(
		   SELECT issue_id ,sum(Gst_Cess_Amount)  AS Gst_Cess_Amount,
		   sum(quantity) as total_qty
		    from JOBWORK_ISSUE_DET 
		   WHERE ISSUE_ID =@CKEYFIELDVAL1
		   GROUP BY  issue_id 
		) B ON A.issue_id =B.issue_id
          WHERE A.ISSUE_ID =@CKEYFIELDVAL1

   

    
   
 END TRY  
   
 BEGIN CATCH  
  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()  
  GOTO END_PROC  
 END CATCH  
   
END_PROC:  


 IF @@TRANCOUNT>0  
 BEGIN  
  IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')='' AND ISNULL(@BNEGSTOCKFOUND,0)=0  
  BEGIN
		UPDATE JOBWORK_ISSUE_MST SET LAST_UPDATE=GETDATE(),reconciled=0 WHERE ISSUE_ID=@CKEYFIELDVAL1
		UPDATE XNLOG SET LAST_UPDATE=GETDATE() WHERE TABLENAME='JOBWORK_ISSUE_MST'
		UPDATE jobwork_issue_mst SET HO_SYNCH_LAST_UPDATE='' WHERE issue_id=@CKEYFIELDVAL1 
		COMMIT TRANSACTION
  END	
  ELSE  
   ROLLBACK  
 END  
 

 IF ISNULL(@BNEGSTOCKFOUND,0)=0  
 BEGIN  
  INSERT @OUTPUT ( ERRMSG, MEMO_ID)  
  VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )  
  
  SELECT * FROM @OUTPUT   
 END 
 
 	
	DELETE FROM JWI_JOBWORK_ISSUE_MST_UPLOAD where sp_id =LTRIM(RTRIM(STR(@NSPID)))
	DELETE FROM JWI_JOBWORK_ISSUE_DET_UPLOAD where sp_id =LTRIM(RTRIM(STR(@NSPID)))	
	DELETE FROM JWI_JOBWORK_ISSUE_BOM_UPLOAD where sp_id =LTRIM(RTRIM(STR(@NSPID)))
	DELETE  A  FROM JWR_MISSING_BARCODE_UPLOAD  A (NOLOCK) where a.sp_id=LTRIM(RTRIM(STR(@NSPID)))

	
  
  

END     
------------------------------------------------------ END OF PROCEDURE SAVETRAN_JWI  


