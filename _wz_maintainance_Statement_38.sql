

IF NOT EXISTS (SELECT CONFIG_OPTION FROM CONFIG WHERE 
			   CONFIG_OPTION='RESET_SENTFORRECON' AND VALUE=1)
BEGIN

	DECLARE @CCURLOCID CHAR(2),@CHOLOCID CHAR(2),@CTABLENAME VARCHAR(100),@CCMD NVARCHAR(MAX)

	SELECT TOP 1 @CCURLOCID = VALUE FROM CONFIG WHERE CONFIG_OPTION = 'LOCATION_ID'
	SELECT TOP 1 @CHOLOCID = VALUE FROM CONFIG WHERE CONFIG_OPTION = 'HO_LOCATION_ID'

	PRINT 'RESETTING SENT FOR RECON COLUMN'
	
	IF NOT EXISTS (SELECT CONFIG_OPTION FROM CONFIG WHERE CONFIG_OPTION='RESET_SENTFORRECON')
		INSERT CONFIG (CONFIG_OPTION,VALUE,ROW_ID,LAST_UPDATE)
			   VALUES ('RESET_SENTFORRECON',1,'',GETDATE())	
	ELSE
		UPDATE CONFIG SET VALUE=1 WHERE CONFIG_OPTION='RESET_SENTFORRECON'
	
	
	IF @CCURLOCID<>@CHOLOCID AND EXISTS (SELECT TOP 1 SENT_ID FROM XNRECON_LOG)
	BEGIN		
		IF CURSOR_STATUS('GLOBAL','CMDCUR') IN (0,1)
		BEGIN
			CLOSE CMDCUR
			DEALLOCATE CMDCUR
		END	

		DECLARE CMDCUR CURSOR FOR SELECT TABLENAME FROM RECONMSTTABLEINFO
		OPEN CMDCUR
		FETCH NEXT FROM CMDCUR INTO @CTABLENAME
		WHILE @@FETCH_STATUS=0
		BEGIN
			PRINT 'UPDATING SENT FOR RECON COLUMN FOR TABLE :'+@CTABLENAME
			
			SET @CCMD='UPDATE '+@CTABLENAME+' SET SENT_FOR_RECON=0'
						
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD  			
			
			FETCH NEXT FROM CMDCUR INTO @CTABLENAME
		END
		
		CLOSE CMDCUR
		DEALLOCATE CMDCUR				
		
		UPDATE XNRECON_LOG SET SENT_ID=RECON_ID
	END
	
END
		
