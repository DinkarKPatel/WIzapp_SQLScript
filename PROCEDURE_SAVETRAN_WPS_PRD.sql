CREATE PROCEDURE SAVETRAN_WPS_PRD
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT=0,
	@CMEMONOPREFIX		VARCHAR(50)='',
	@CFINYEAR			VARCHAR(10)='',
	@CMACHINENAME		VARCHAR(100)='',
	@CWINDOWUSERNAME	VARCHAR(100)='',
	@CWIZAPPUSERCODE	VARCHAR(10)='0000000',
	@CMEMOID			VARCHAR(40)='',	
	@CCOMPUTERIP		VARCHAR(20)='',
	@CLOCID				VARCHAR(2)=''
)
--WITH ENCRYPTION
AS
BEGIN
	-- @NUPDATEMODE:	1- NEW WHOLESALE BOX ADDED, 
	--					2- EDIT A GIVEN BOX
	--					3- CURRENT MEMO CANCELLED, 
	

	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME		VARCHAR(100),			
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(2),
			@CLOCATIONID			VARCHAR(2),
			@CHODEPTID				VARCHAR(2),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@BNEGSTOCKFOUND BIT,
			@CMSG					VARCHAR(MAX),@BPURLOC BIT,
			@CPSID	VARCHAR(40)	

	DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	SET @NSTEP = 0		-- SETTTING UP ENVIRONMENT
	SET @CTEMPDBNAME = ''

	SET @CMASTERTABLENAME	= 'PRD_PS_MST'
	SET @CDETAILTABLENAME	= 'PRD_PS_DET'	
  

	SET @CTEMPMASTERTABLENAME	= 'TEMP_PRD_PS_MST_'+LTRIM(RTRIM(STR(@NSPID)))
	SET @CTEMPDETAILTABLENAME	= 'TEMP_PRD_PS_DET_'+LTRIM(RTRIM(STR(@NSPID)))
		

	SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME
	
	
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'PS_ID'
	SET @CMEMONO			= 'PS_NO'
	SET @NMEMONOLEN			= 10
	
	IF ISNULL(@CLOCID,'')=''
		SELECT @CLOCATIONID		= DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 
	ELSE
		SELECT @CLOCATIONID=@CLOCID
	
	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		

	SET @NSTEP = 5		-- GETTING DEPTID INFO FROM TEMP TABLE
	
	BEGIN TRANSACTION
	
	BEGIN TRY
	
		IF @NUPDATEMODE=4
		GOTO LBLUPDATEDISPATCHDETAILS
			
		IF OBJECT_ID('TEMPDB..#TMPPMT','U') IS NOT NULL
			DROP TABLE #TMPPMT
		
		SELECT PRODUCT_UID INTO #TMPPMT FROM PRD_SKU WHERE 1=2

		IF OBJECT_ID('TEMPDB..#TMPXNSTK','U') IS NOT NULL
			DROP TABLE #TMPXNSTK						   
		
		SELECT PRODUCT_UID,QUANTITY_IN_STOCK AS XN_STOCK INTO #TMPXNSTK FROM PRD_PMT WHERE 1=2

		IF @NUPDATEMODE=3 		
		BEGIN
			SET @NSTEP = 10
			
			
			IF ISNULL(@CMEMOID,'') = ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED .....CANNOT PROCEED'
				GOTO END_PROC  		
			END
			
			SET @CKEYFIELDVAL1=@CMEMOID
			
						
			SET @NSTEP = 17
			
			PRINT 'CANCEL'
			
			EXEC UPDATEPMT_PRD 
				  @CXNTYPE			= 'WPS'  
				, @CXNNO			= @CMEMONOVAL
				, @CXNID			= @CKEYFIELDVAL1
				, @NREVERTFLAG		= 1
				, @NALLOWNEGSTOCK	= 0
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= @NUPDATEMODE				
				, @CCMD				= @CCMDOUTPUT OUTPUT
			
			IF @CCMDOUTPUT <> ''
			BEGIN
				PRINT @CCMDOUTPUT
				
				SET @NSTEP = 19
					
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'
				SET @BNEGSTOCKFOUND=1				
				EXEC SP_EXECUTESQL @CCMDOUTPUT
				GOTO END_PROC
			END
		
			SET @NSTEP = 22
			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE ' + @CMASTERTABLENAME + ' SET CANCELLED = 1,LAST_UPDATE=GETDATE() ' + 
						N' WHERE ' + @CKEYFIELD1 + ' = ''' + @CMEMOID + ''''
			EXEC SP_EXECUTESQL @CCMD
			
			GOTO END_PROC
			
		END
		
		SET @NSTEP = 42
		
	
		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	
			-- GENERATING NEW JOB ORDER NO		
			SET @NSAVETRANLOOP=0
			WHILE @NSAVETRANLOOP=0
			BEGIN
			
				SET @NSTEP = 45		-- GENERATING NEW KEY
				
				--SET @CMEMONOPREFIX='LATER'	
				EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX,1,
								@CFINYEAR,0, @CMEMONOVAL OUTPUT   
			
			
				SET @NSTEP = 50
				
				PRINT @CMEMONOVAL
				SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
										WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
										AND FIN_YEAR = '''+@CFINYEAR+''' )
								SET @NLOOPOUTPUT=0
							ELSE
								SET @NLOOPOUTPUT=1'
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
			END

			IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
				  GOTO END_PROC  		
			END

			SET @NSTEP = 55		-- GENERATING NEW ID

			-- GENERATING NEW JOB ORDER ID
			SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+ REPLICATE('0', 10-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL)) --MANISH
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
				  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
				  GOTO END_PROC
			END

			SET @NSTEP = 60		-- UPDATING NEW ID INTO TEMP TABLES

			-- UPDATING NEWLY GENERATED JOB ORDER NO AND JOB ORDER ID IN PIM AND PID TEMP TABLES
			SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
						@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
		
			SET @NSTEP = 65
			
			SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''
			
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 70
			
			-- GETTING DEPT_ID FROM TEMP MASTER TABLE
			SET @CCMD = 'SELECT @CMEMODEPTID = LEFT(PS_NO,2) FROM ' + @CTEMPMASTERTABLE 
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT', 
							   @CMEMODEPTID OUTPUT
			IF (@CMEMODEPTID IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'
				  GOTO END_PROC  		
			END							
				
			
		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
		
			SET @NSTEP = 75		-- GETTING ID INFO FROM TEMP TABLE

			-- GETTING DEPT_ID FROM TEMP MASTER TABLE
			SET @CCMD = 'SELECT @CMEMODEPTID = LEFT(PS_ID,2) FROM ' + @CMASTERTABLENAME --MANISH
			
			EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT', 
							   @CMEMODEPTID OUTPUT
							   
			IF (@CMEMODEPTID IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED... INCORRECT PARAMETER'
				  GOTO END_PROC  		
			END

			SET @NSTEP = 80
			
			-- GETTING MEMO ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ' + @CKEYFIELD1 + ', @CMEMONOVAL = ' + @CMEMONO + ' FROM '
						+ (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME + ' WHERE INV_ID = ''' + @CMEMOID + '''' --MANISH
								ELSE @CTEMPMASTERTABLE END )
			
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
							   
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  GOTO END_PROC  		
			END
			
			SET @NSTEP = 85		-- STORING OLD STATUS OF BARCODES 
			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET LAST_UPDATE=GETDATE() '
			EXEC SP_EXECUTESQL @CCMD
			
			
		

			-- REVERTING BACK THE STOCK OF PMT W.R.T CURRENT ISSUE
			SET @NSTEP = 95		-- REVERTING STOCK

			EXEC UPDATEPMT_PRD
				  @CXNTYPE			= 'WPS'  
				, @CXNNO			= @CMEMONOVAL
				, @CXNID			= @CKEYFIELDVAL1
				, @NREVERTFLAG		= 1
				, @NALLOWNEGSTOCK	= 0
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= @NUPDATEMODE				
				, @CCMD				= @CCMDOUTPUT OUTPUT
			
			IF @CCMDOUTPUT <> ''
			BEGIN
				SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR REVERTING THE STOCK STATUS IN PMT....'
				SET @BNEGSTOCKFOUND=1					
				EXEC SP_EXECUTESQL @CCMDOUTPUT
				GOTO END_PROC
			END	
		END					-- END OF EDITMODE
		--EXEC SP_VALIDATEXN_BEFORESAVE 'WSL',@NSPID,'0000000',@NUPDATEMODE,@CCMDOUTPUT OUTPUT,@BNEGSTOCKFOUND OUTPUT
		--IF ISNULL(@CCMDOUTPUT,'') <> ''
		--BEGIN
		--	SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION ON TEMP DATA FAILED : ' + @CCMDOUTPUT + '...'
		--	GOTO END_PROC
		--END

		SET @NSTEP = 98
		
		-- RECHECKING IF ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END

		SET @NSTEP = 100		-- UPDATING MASTER TABLE


		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			, @BALWAYSUPDATE = 1
			

		-- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE
		SET @NSTEP = 110		-- UPDATING TRANSACTION TABLE

		-- UPDATING ROW_ID IN TEMP TABLES
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE LEFT(ROW_ID,5) = ''LATER'''
		EXEC SP_EXECUTESQL @CCMD

		-- DELETING EXISTING ENTRIES FROM PID01106 TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
		SET @NSTEP = 114		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES

		SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME + ' 
					WHERE ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
					AND ROW_ID IN 
					(
						SELECT A.ROW_ID 
						FROM ' + @CDETAILTABLENAME + ' A 
						LEFT OUTER JOIN ' + @CTEMPDETAILTABLE + ' B ON A.ROW_ID = B.ROW_ID
						WHERE A.' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + '''
						AND   B.ROW_ID IS NULL
					)'
		EXEC SP_EXECUTESQL @CCMD

		SET @NSTEP = 120		-- UPDATING TRANSACTION TABLE

		-- UPDATING NET RATE COLUMN TEMP TABLES FOR ZERO VALUES
		--SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE + ' SET NET_RATE=(RATE -(DISCOUNT_AMOUNT/QUANTITY))'
		--EXEC SP_EXECUTESQL @CCMD


		SET @NSTEP = 123		-- UPDATING TRANSACTION TABLE

		-- INSERTING/UPDATING THE ENTRIES IN PRD_JID TABLE FROM TEMPTABLE
		SET @NSTEP = 125		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME
			, @CKEYFIELD1	= 'ROW_ID'
			, @BALWAYSUPDATE = 1
			

	LBLUPDATESTOCK:
		-- UPDATING STOCK OF PMT W.R.T. CURRENT MEMO
		SET @NSTEP = 130		-- UPDATING PMT TABLE

		EXEC UPDATEPMT_PRD 
			  @CXNTYPE			= 'WPS'  
			, @CXNNO			= @CMEMONOVAL
			, @CXNID			= @CKEYFIELDVAL1
			, @NREVERTFLAG		= 0
			, @NALLOWNEGSTOCK	= 0
			, @NCHKDELBARCODES	= 1
			, @NUPDATEMODE		= @NUPDATEMODE				
			, @CCMD				= @CCMDOUTPUT OUTPUT
		
		IF @CCMDOUTPUT <> ''
		BEGIN
			PRINT @CCMDOUTPUT
			
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR UPDATING THE STOCK STATUS IN PMT....'
			SET @BNEGSTOCKFOUND=1				
			EXEC SP_EXECUTESQL @CCMDOUTPUT
			GOTO END_PROC
		END
	

		SET @NSTEP = 140	
		

		SET @NSTEP = 145
		DECLARE @NSUBTOTAL NUMERIC(14,2),@NTAX NUMERIC(10,2)

		-- UPDATING TOTALS IN PIM TABLE
		
	
		UPDATE A SET SUBTOTAL = ISNULL( B.SUBTOTAL ,0 )
		FROM PRD_PS_MST A LEFT OUTER JOIN
		( 	
			SELECT	PS_ID, SUM(QUANTITY*SALE_RATE) AS SUBTOTAL
			FROM PRD_PS_DET 
			WHERE PS_ID = @CKEYFIELDVAL1
			GROUP BY PS_ID  
		) B ON  A.PS_ID = B.PS_ID  
		WHERE A.PS_ID = @CKEYFIELDVAL1
				
		
				
		--SET @NSTEP = 175
		--EXEC UPDATERFNET_PRD 'WSL',@CKEYFIELDVAL1
		
		-- VALIDATING ENTRIES 
		--SET @NSTEP = 177		-- VALIDATING ENTRIES

		--EXEC VALIDATEXN_WSL_PRD   
		--	 @CXNID	= @CKEYFIELDVAL1
		--	, @NUPDATEMODE = @NUPDATEMODE			
		--	, @CERRORMSG		= @CCMDOUTPUT OUTPUT

		--IF @CCMDOUTPUT <> ''
		--BEGIN
		--	SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION FAILED : ' + @CCMDOUTPUT + '...'
		--	GOTO END_PROC
		--END
		
		-- AFTER SUCCESSFUL SAVING , JUST DROP THE TEMP TABLES CREATED BY APPLICATION
		
				
		---CHANGES UPDATE PRD_SKU		
		
		--UPDATE PRD_SKU SET WORK_ORDER_ID=A.REF_WO_ID
		--FROM PRD_INM01106 A 
		--JOIN PRD_IND01106 B ON A.INV_ID = B.INV_ID 
		--JOIN PRD_SKU C ON B.PRODUCT_UID = C.PRODUCT_UID 
		--WHERE A.INV_ID= @CKEYFIELDVAL1
		
		
				
		GOTO END_PROC


LBLUPDATEDISPATCHDETAILS:

	--IF @NUPDATEMODE=4
	--BEGIN
	--	SET @NSTEP = 235
					
	--	EXEC UPDATEMASTERXN 
	--			  @CSOURCEDB	= @CTEMPDBNAME
	--			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
	--			, @CDESTDB		= ''
	--			, @CDESTTABLE	= @CMASTERTABLENAME
	--			, @CKEYFIELD1	= 'INV_ID'
		

	--	SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ' + @CKEYFIELD1 + ' FROM '+@CTEMPMASTERTABLE 
			
	--	EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT', 
	--						   @CKEYFIELDVAL1 OUTPUT
							   
				
	--	GOTO END_PROC		
	--END
		
	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		-- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG, '''' AS MEMO_ID'
		
		GOTO END_PROC
	END CATCH
	
END_PROC:
	
		

	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
			COMMIT TRANSACTION
			--ROLLBACK
			
		ELSE
			ROLLBACK
	END
	
	
	IF ISNULL(@BNEGSTOCKFOUND,0)=0
	BEGIN
		INSERT @OUTPUT ( ERRMSG, MEMO_ID)
				VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CKEYFIELDVAL1,'') )

		SELECT * FROM @OUTPUT	
	END	
	
		
	SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPDETAILTABLE + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPDETAILTABLE
	EXEC SP_EXECUTESQL @CCMD
	


    SET @CCMD = N'IF OBJECT_ID( ''' + @CTEMPMASTERTABLE + ''',''U'') IS NOT NULL
                  DROP TABLE ' + @CTEMPMASTERTABLE
	EXEC SP_EXECUTESQL @CCMD
	
	
END						
------------------------------------------------------ END OF PROCEDURE SAVETRAN_WSL
