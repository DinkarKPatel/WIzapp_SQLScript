CREATE PROCEDURE PPC_SAVETRAN_WSL_BUYERORDER
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				INT,
	@CFINYEAR			VARCHAR(10),
	@CXNMEMOID			VARCHAR(40)='',
	@CLOCID				VARCHAR(2)='',
	@CUSER_CODE         CHAR(7)=''	
)
----WITH ENCRYPTION
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET NOCOUNT ON
BEGIN
	DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME1		VARCHAR(100),
			@CDETAILTABLENAME2		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME1	VARCHAR(100),
			@CTEMPDETAILTABLENAME2	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE1		VARCHAR(100),
			@CTEMPDETAILTABLE2		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(2),
			@CLOCATIONID			VARCHAR(2),
			@CHODEPTID				VARCHAR(2),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@LENABLETEMPDATABASE	BIT,
			@CMEMONOPREFIX VARCHAR(10)
			

	DECLARE @OUTPUT TABLE (ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))
	
	SET @CMEMONOPREFIX=@CLOCID

	SET @NSTEP = 10		-- SETTTING UP ENVIRONMENT
	
	SET @CTEMPDBNAME = ''

	SET @CMASTERTABLENAME	= 'PPC_BUYER_ORDER_MST'
	SET @CDETAILTABLENAME1	= 'PPC_BUYER_ORDER_DET'
	SET @CDETAILTABLENAME2	= 'PPC_BUYER_ORDER_SUB_DET'
	
	SET @CTEMPMASTERTABLENAME	= 'WSLORD_PPC_BUYER_ORDER_MST_UPLOAD'
	SET @CTEMPDETAILTABLENAME1	= 'WSLORD_PPC_BUYER_ORDER_DET_UPLOAD'
	SET @CTEMPDETAILTABLENAME2	= 'WSLORD_PPC_BUYER_ORDER_SUB_DET_UPLOAD'
	
	
	SET @CTEMPMASTERTABLE	=  @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE1	=  @CTEMPDETAILTABLENAME1
	SET @CTEMPDETAILTABLE2	=  @CTEMPDETAILTABLENAME2
	
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'ORDER_ID'
	SET @CMEMONO			= 'ORDER_NO'
	SET @NMEMONOLEN			= LEN(@CMEMONOPREFIX)+6
	
	IF ISNULL(@CLOCID,'')=''
		SELECT @CLOCATIONID	= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='LOCATION_ID'
	ELSE
		SELECT @CLOCATIONID=@CLOCID
		
	SELECT @CHODEPTID = [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		

	BEGIN TRANSACTION
	BEGIN TRY
		
		SET @NSTEP = 20

		IF ISNULL(@CXNMEMOID,'') = '' AND @NUPDATEMODE IN (3,4)
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED '
			GOTO END_PROC  		
		END
		
		IF @NUPDATEMODE=3
		BEGIN
		   
		--VALIDATE IF PO HAS BEEN GENERATE OF BUYER ORDER 		   
			IF EXISTS (SELECT TOP 1 'U'  FROM PPC_BUYER_ORDER_MST A JOIN PPC_BUYER_ORDER_DET B ON A.ORDER_ID=B.ORDER_ID
			JOIN PPC_BO_ART_JOBS C ON B.ROW_ID =C.REF_ROW_ID JOIN PPC_POD01106 D ON C.ROW_ID=D.BO_BOM_ROW_ID
			JOIN PPC_POM01106 E ON E.PO_ID=D.PO_ID WHERE E.CANCELLED =0 AND  A.ORDER_ID =@CXNMEMOID)
			BEGIN
			    
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' PO GENERATE OF THIS ORDER PLEASE CHECK...'
			  GOTO END_PROC  	
			
			END
		
		-- VALIDATE OF ORDER IF FG BARCODE HAS BEEN GENERATED
		    IF EXISTS (SELECT TOP 1 'U'  FROM PPC_BUYER_ORDER_MST A  JOIN PPC_BUYER_ORDER_DET B ON A.ORDER_ID=B.ORDER_ID
			JOIN PPC_FGBCG_DET C ON B.ROW_ID=C.BO_DET_ROW_ID JOIN PPC_FGBCG_MST D ON C.MEMO_ID=D.MEMO_ID 
			WHERE D.CANCELLED=0 AND  A.ORDER_ID =@CXNMEMOID)
			BEGIN
                 SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' BARCODE GENERATE OF THIS ORDER PLEASE CHECK...'
			     GOTO END_PROC  	
			END
			
			SET @NSTEP = 30		
			SET @CCMD=N' UPDATE PPC_BUYER_ORDER_MST SET CANCELLED=1,LAST_UPDATE=GETDATE() WHERE ORDER_ID='''+@CXNMEMOID+''''
			EXEC SP_EXECUTESQL @CCMD
			GOTO END_PROC
		END
		
		IF @NUPDATEMODE=4
		BEGIN
		    DECLARE @APPROVEDVALUE INT
		    
		   SELECT TOP 1  @APPROVEDVALUE=A.VALUE  FROM USER_ROLE_DET  A
		   JOIN USER_ROLE_MST B ON A.ROLE_ID=B.ROLE_ID
		   JOIN USERS C ON B.ROLE_ID=C.ROLE_ID 
		   WHERE FORM_NAME='WSLBUYERORDERNEW.ASPX' 
		   AND FORM_OPTION ='APPROVED' AND USER_CODE=@CUSER_CODE
		   
		   IF ISNULL(@APPROVEDVALUE,0)=0 AND @CUSER_CODE<>'0000000'
		   BEGIN
		          SET @CERRORMSG='USER DOES NOT ACCESS TO ALLOW APPROVED ORDER..'
				  GOTO END_PROC 	
		   END
		   UPDATE PPC_BUYER_ORDER_MST SET LAST_UPDATE=GETDATE(),APPROVED=1,APPROVED_BY=@CUSER_CODE WHERE ORDER_ID=@CXNMEMOID
		   GOTO END_PROC
		END
		
		SET @NSTEP = 40
		
		--GETTING DEPT_ID FROM TEMP MASTER TABLE
		SET @CCMD = 'SELECT @CMEMODEPTID = DEPT_ID, @CKEYFIELDVAL1 = ORDER_ID FROM ' + @CTEMPMASTERTABLE +' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''' '
		EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT, @CKEYFIELDVAL1 VARCHAR(50) OUTPUT', 
								  @CMEMODEPTID OUTPUT, @CKEYFIELDVAL1 OUTPUT
		IF (@CMEMODEPTID IS NULL)
		BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED...'
			  GOTO END_PROC  		
		END

		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	
			SET @NSTEP = 50		-- GENERATING NEW KEY
			
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN
				-- GENERATING NEW MRR_NO		
				SET @NSAVETRANLOOP=0
				WHILE @NSAVETRANLOOP=0
				BEGIN
					EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
									@CFINYEAR,0, @CMEMONOVAL OUTPUT   
					
					SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
											WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
											AND FIN_YEAR = '''+@CFINYEAR+''' )
									SET @NLOOPOUTPUT=0
								ELSE
									SET @NLOOPOUTPUT=1'
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
				END--WHILE

				IF ISNULL(@CMEMONOVAL,'')=''   OR @CMEMONOVAL LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
					  GOTO END_PROC  		
				END

				SET @NSTEP = 60		-- GENERATING NEW ID
                
                
				-- GENERATING NEW ORDER ID
				SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+ REPLICATE('0', 15-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL))
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  GOTO END_PROC
				END
				
				SET @NSTEP = 70
				-- CHECK WETHER THE MEMO ID IS STILL LATER
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  GOTO END_PROC
				END

				SET @NSTEP = 80		-- UPDATING NEW ID INTO TEMP TABLES
                
               IF EXISTS( SELECT TOP 1 'U' FROM WSLORD_PPC_BUYER_ORDER_MST_UPLOAD A
                JOIN PPC_BUYER_ORDER_MST B ON A.BILL_NO =B.BILL_NO 
                WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID))) AND B.CANCELLED=0)
                BEGIN
                    SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DUPLICATE BILL NO FOUND PLEASE CHECK....'
					 GOTO END_PROC
                END
               
               	-- UPDATING NEWLY GENERATED MEMO NO AND MEMO ID IN BUYER ORDER MST AND BUYER ORDER DET TEMP TABLES
				SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
							@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
				PRINT @CCMD		
				EXEC SP_EXECUTESQL @CCMD
				
				SET @NSTEP = 90
				SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
				PRINT @CCMD	
				EXEC SP_EXECUTESQL @CCMD
			
			
			SET @CCMD = N'UPDATE '+ @CTEMPDETAILTABLE2 + ' SET ROW_ID = NEWID() WHERE LEFT(ROW_ID,5) = ''LATER'' AND SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
			PRINT @CCMD	
			EXEC SP_EXECUTESQL @CCMD
			
	    END
		END-- END OF ADDMODE
		
		ELSE-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
			SET @NSTEP = 110		-- GETTING ID INFO FROM TEMP TABLE
			
			-- GETTING ORDER_ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ORDER_ID, @CMEMONOVAL = ORDER_NO FROM ' + @CTEMPMASTERTABLE +' WHERE SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  GOTO END_PROC  		
			END
			
			SET @NSTEP = 120		-- UPDATING SENT_TO_HO FLAG TEMP TABLE
			
			SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' WHERE LEFT(ORDER_ID,5) = ''LATER'' AND SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
			PRINT @CCMD	
			EXEC SP_EXECUTESQL @CCMD
			
			
			
			
			SET @NSTEP = 130	
			SET @CCMD = N'UPDATE '+ @CTEMPDETAILTABLE2 + ' SET ROW_ID = NEWID() WHERE LEFT(ROW_ID,5) = ''LATER'' AND SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
			PRINT @CCMD	
			EXEC SP_EXECUTESQL @CCMD
			
			SET @NSTEP = 140
			
			IF EXISTS (SELECT TOP 1 'U' FROM PPC_BUYER_ORDER_DET B 
			JOIN PPC_BO_ART_JOBS JOB ON B.ROW_ID=JOB.REF_ROW_ID
			LEFT OUTER JOIN WSLORD_PPC_BUYER_ORDER_DET_UPLOAD C ON B.ROW_ID =C.ROW_ID  AND C.SP_ID =LTRIM(RTRIM(STR(@NSPID)))
			WHERE B.ORDER_ID=@CKEYFIELDVAL1  AND C.ROW_ID IS NULL)
			BEGIN
			   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' JOB ASSIGN OF THIS ORDER CAN NOT REMOVE...'
			   GOTO END_PROC  
			   
			
			END
			
			
			DELETE A FROM PPC_BUYER_ORDER_SUB_DET A
			JOIN PPC_BUYER_ORDER_DET B ON A.REF_ROW_ID =B.ROW_ID
			LEFT OUTER JOIN WSLORD_PPC_BUYER_ORDER_DET_UPLOAD C ON B.ROW_ID =C.ROW_ID AND C.SP_ID =LTRIM(RTRIM(STR(@NSPID)))
			WHERE B.ORDER_ID=@CKEYFIELDVAL1  AND C.ROW_ID IS NULL
			
			DELETE B FROM PPC_BUYER_ORDER_DET B 
			LEFT OUTER JOIN WSLORD_PPC_BUYER_ORDER_DET_UPLOAD C ON B.ROW_ID =C.ROW_ID AND C.SP_ID =LTRIM(RTRIM(STR(@NSPID)))
			WHERE B.ORDER_ID=@CKEYFIELDVAL1  AND C.ROW_ID IS NULL
			
	    END					-- END OF EDITMODE
        
        UPDATE WSLORD_PPC_BUYER_ORDER_MST_UPLOAD SET EDT_USER_CODE='0000000' WHERE ISNULL(EDT_USER_CODE,'')='' AND SP_ID=LTRIM(RTRIM(STR(@NSPID)))
   
       IF OBJECT_ID('TEMPDB..#TMPORDERDET','U') IS NOT NULL
          DROP TABLE #TMPORDERDET
          
          SELECT ROW_ID=NEWID(),ROW_ID AS REF_ROW_ID INTO #TMPORDERDET 
          FROM WSLORD_PPC_BUYER_ORDER_DET_UPLOAD  
          WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))
          AND LEFT(ROW_ID,5) = 'LATER'
          
          
          UPDATE A SET ROW_ID =B.ROW_ID 
          FROM WSLORD_PPC_BUYER_ORDER_DET_UPLOAD A
          JOIN #TMPORDERDET B ON A.ROW_ID=B.REF_ROW_ID
		  WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))
          AND LEFT(A.ROW_ID,5) = 'LATER'	
          
          UPDATE A SET REF_ROW_ID =B.ROW_ID 
          FROM WSLORD_PPC_BUYER_ORDER_SUB_DET_UPLOAD A
          JOIN #TMPORDERDET B ON A.REF_ROW_ID=B.REF_ROW_ID
		  WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))
          AND LEFT(A.REF_ROW_ID,5) = 'LATER'	
          
         
         IF @NUPDATEMODE=2
            BEGIN
               EXEC VALIDATE_PPC_BUYER_ORDER_BEFORESAVE  
					 @CXNID = @CKEYFIELD1  
				   , @NUPDATEMODE = @NUPDATEMODE
				   , @NSPID=@NSPID    
				   , @CERRORMSG  = @CCMDOUTPUT OUTPUT  
  
			   IF @CCMDOUTPUT <> ''  
			      BEGIN  
			        SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' DATA VALIDATION FAILED : ' + @CCMDOUTPUT + '...'  
			        GOTO END_PROC  
			      END  
            END
         
        DECLARE @FILTER VARCHAR(MAX)
	    SET @FILTER=' B.SP_ID='''+LTRIM(RTRIM(STR(@NSPID)))+''''
		SET @NSTEP = 150
		
		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			, @BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@FILTER
			
		
		SET @NSTEP = 160		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME1
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME1
			, @CKEYFIELD1	= 'ROW_ID'
			, @BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@FILTER
			
		
		EXEC UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME2
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME2
			, @CKEYFIELD1	= 'ROW_ID'
			, @BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@FILTER
			
	  ----VALIDATE QUANTITY AND BREAK UP----
	  IF EXISTS (SELECT TOP 1'U' 
				 FROM PPC_BUYER_ORDER_DET A
	             JOIN 
				 (
					SELECT REF_ROW_ID,SUM(QUANTITY) AS QUANTITY  FROM PPC_BUYER_ORDER_SUB_DET
					GROUP BY REF_ROW_ID
				 ) B ON A.ROW_ID =B.REF_ROW_ID 
				 WHERE A.QUANTITY <>B.QUANTITY )
	     BEGIN
	       SET @CERRORMSG='RATIO QTY MISMATCH.....CAN NOT CHANGE'  
		   GOTO END_PROC
	     END
			
	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		GOTO END_PROC
	END CATCH
	
END_PROC:
	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
		   BEGIN
		     --29 NOV 2017: VISHAL -- ADD
		     IF @NUPDATEMODE IN (1,2)--ADDMODE	
		        BEGIN	
	   	          ;WITH CTE AS
			      (SELECT ORDER_ID,ROW_ID,RNO=ROW_NUMBER()OVER(ORDER BY TS DESC) FROM WSLORD_PPC_BUYER_ORDER_DET_UPLOAD (NOLOCK) WHERE SP_ID=@NSPID)
			      UPDATE D SET D.ROW_ID=CTE.ROW_ID,D.MEMO_ID=CTE.ORDER_ID,D.SPID=NULL
                  FROM PPC_WSL_BYER_ORDER_DOCUMENT D, CTE
                  WHERE D.SPID=@NSPID AND D.ROW_ID LIKE 'LATER%' AND RNO=CAST(SUBSTRING(D.ROW_ID,6,5)AS INT) --AND @NUPDATEMODE=1
	            END  
	         --29 NOV 2017: VISHAL --ADD	   
	         COMMIT TRANSACTION	   
	       END		
		ELSE
			ROLLBACK
	END
	
	INSERT @OUTPUT(ERRMSG,MEMO_ID) VALUES (ISNULL(@CERRORMSG,''),ISNULL(@CKEYFIELDVAL1,''))
	
	SELECT * FROM @OUTPUT	
	
	---DROPPING TEMP TABLES
	IF ISNULL(@CERRORMSG,'')='' AND 1=1
	   BEGIN
	     DELETE FROM WSLORD_PPC_BUYER_ORDER_MST_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))
	     DELETE FROM WSLORD_PPC_BUYER_ORDER_DET_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))	
	     DELETE FROM WSLORD_PPC_BUYER_ORDER_SUB_DET_UPLOAD WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))	
       END
   SET NOCOUNT OFF
END						
------------- END OF PROCEDURE SAVETRAN_BUYERORDER_NEW		-----------------------------------------