create PROCEDURE ACT_TRIALLIST
(	
	@NTRIALMODE INT = 0,
	@CTRIALHEADCODE VARCHAR(10) = '',
	@CDEPTID VARCHAR(4), 
	@DOPENINGDT DATETIME, 
	@DCLOSINGDT DATETIME, 
	@CFINYEAR VARCHAR(10), 
	@CCOMPANYCODE VARCHAR(2),
	@NDIVFACTOR NUMERIC(14) = 1
)
--WITH ENCRYPTION
AS
BEGIN
	-- @NTRIALMODE : 0-LEGERONLY, 1-ROOTHEADS, 2-HEADSANDLEDGERS, 3-HEADSONLY

	DECLARE @CLOOKUPHEADCODE VARCHAR(10), @CHEADCODETREE VARCHAR(MAX), @CSTOCKINHANDTREE VARCHAR(MAX)

	DECLARE @RETTABLEC TABLE ( HEAD_CODE VARCHAR(10), AC_CODE VARCHAR(10), AC_NAME VARCHAR(100), 
							   OPENING_DR NUMERIC(14,2), OPENING_CR NUMERIC(14,2), 
							   DEBIT NUMERIC(14,2), CREDIT NUMERIC(14,2), 
							   CLOSING_DR NUMERIC(14,2), CLOSING_CR NUMERIC(14,2), HEAD BIT, 
							   LOOKUP_HEAD_CODE VARCHAR(10), INTERNAL_HEAD_CODE VARCHAR(10) )

	-- TEMP TABLE TO STORED THE LIST OF LOCATIONS CURRENTLY SELECTED
	-- JOIN THIS TABLE IN EACH QUERY TO GET THE RESULT FOR SINGLE, MULTIPLE OR ALL LOCATIONS
	DECLARE @LOCLISTC TABLE ( DEPT_ID CHAR(4) )
	
	IF @CDEPTID <> ''
		INSERT @LOCLISTC VALUES ( @CDEPTID )
	ELSE
	BEGIN
		IF EXISTS ( SELECT TOP 1 DEPT_ID FROM ACT_FILTER_LOC (NOLOCK) WHERE SP_ID = @@SPID )
			INSERT @LOCLISTC
			SELECT DEPT_ID FROM ACT_FILTER_LOC  (NOLOCK) WHERE SP_ID = @@SPID
		ELSE
			INSERT @LOCLISTC
			SELECT DEPT_ID FROM LOCATION  (NOLOCK) WHERE LOC_TYPE=1 AND DEPT_ID=MAJOR_DEPT_ID
	END


	INSERT @RETTABLEC
	SELECT HEAD_CODE, AC_CODE, AC_NAME, 
		( CASE WHEN OPENING>0 THEN OPENING ELSE 0 END ) AS OPENING_DR,
		( CASE WHEN OPENING<0 THEN ABS(OPENING) ELSE 0 END ) AS OPENING_CR,
		DEBIT, 
		CREDIT, 
		( CASE WHEN CLOSING>0 THEN CLOSING ELSE 0 END ) AS CLOSING_DR,
		( CASE WHEN CLOSING<0 THEN ABS(CLOSING) ELSE 0 END ) AS CLOSING_CR, 
		CAST(0 AS BIT) AS HEAD, '' AS LOOKUP_HEAD_CODE, '' AS INTERNAL_HEAD_CODE
	FROM DBO.FN_ACT_OPENING_XN_CLOSING( '', @CTRIALHEADCODE, @CDEPTID, @DOPENINGDT, @DCLOSINGDT, @CFINYEAR, @CCOMPANYCODE )
	ORDER BY AC_NAME

	--*** SPECIAL CONSIDERATION FOR "STOCK IN HAND" HEADS
	--*** IN CASE OF "STOCK IN HAND" HEADS, THE CLOSING WILL BE SAME AS OPENING IN TRAIL BALACE
	SELECT @CSTOCKINHANDTREE = DBO.FN_ACT_TRAVTREE( '0000000017' )
	--*** UPDATING THE CLOSING BALANCE WITH OPENING IN THE RETURNING TABLE FOR "STOCK IN HAND" HEADS
	UPDATE @RETTABLEC SET CLOSING_DR = OPENING_DR, CLOSING_CR = OPENING_CR
	WHERE CHARINDEX( HEAD_CODE, @CSTOCKINHANDTREE ) >0


--	IF @NTRIALMODE > 0					-- NOT 0- LEGERONLY
--	BEGIN
		IF @NTRIALMODE IN (0,1,3)			-- 1-ROOTHEADS, 3-HEADSONLY
		BEGIN
			DECLARE ABC CURSOR FOR
			SELECT HEAD_CODE, DBO.FN_ACT_TRAVTREE( HEAD_CODE ) AS HEAD_CODE_TREE FROM HD01106  (NOLOCK) WHERE HEAD_CODE = MAJOR_HEAD_CODE
		END
		ELSE								-- 2-HEADSANDLEDGERS
		BEGIN
			DECLARE ABC CURSOR FOR
			SELECT HEAD_CODE, DBO.FN_ACT_TRAVTREE( HEAD_CODE ) AS HEAD_CODE_TREE FROM HD01106  (NOLOCK) WHERE MAJOR_HEAD_CODE = @CTRIALHEADCODE
		END
	
		OPEN ABC 
		FETCH NEXT FROM ABC INTO @CLOOKUPHEADCODE, @CHEADCODETREE
		WHILE @@FETCH_STATUS = 0
		BEGIN

			IF @NTRIALMODE IN (0,1,3)			-- 1-ROOTHEADS, 3-HEADSONLY
				UPDATE @RETTABLEC SET LOOKUP_HEAD_CODE = @CLOOKUPHEADCODE
				WHERE CHARINDEX( HEAD_CODE, @CHEADCODETREE ) > 0
			ELSE							-- 2-HEADSANDLEDGERS
				UPDATE @RETTABLEC SET LOOKUP_HEAD_CODE = @CLOOKUPHEADCODE
				WHERE CHARINDEX( HEAD_CODE, @CHEADCODETREE ) > 0
				AND HEAD_CODE <> @CTRIALHEADCODE
			
			FETCH NEXT FROM ABC INTO @CLOOKUPHEADCODE, @CHEADCODETREE
		END
		CLOSE ABC
		DEALLOCATE ABC


		IF @NTRIALMODE IN (0,1,3)			-- 1-ROOTHEADS, 3-HEADSONLY
		BEGIN
			DECLARE INTHD_CUR CURSOR FOR
			SELECT HEAD_CODE, DBO.FN_ACT_TRAVTREE( HEAD_CODE ) AS HEAD_CODE_TREE FROM HD01106  (NOLOCK) WHERE HEAD_CODE BETWEEN '0000000001' AND '0000000030'
	
			OPEN INTHD_CUR
			FETCH NEXT FROM INTHD_CUR INTO @CLOOKUPHEADCODE, @CHEADCODETREE
			WHILE @@FETCH_STATUS = 0
			BEGIN
				UPDATE @RETTABLEC SET INTERNAL_HEAD_CODE = @CLOOKUPHEADCODE
				WHERE CHARINDEX( HEAD_CODE, @CHEADCODETREE ) > 0
				
				FETCH NEXT FROM INTHD_CUR INTO @CLOOKUPHEADCODE, @CHEADCODETREE
			END
			CLOSE INTHD_CUR
			DEALLOCATE INTHD_CUR
		END
--	END

	-- DELETE ENTRIES FROM @RETTABLEC WHERE EVERYTHING IS ZERO
	DELETE FROM @RETTABLEC WHERE ( OPENING_DR=0 AND OPENING_CR=0 AND DEBIT=0 AND CREDIT=0 AND CLOSING_DR=0 AND CLOSING_CR=0 )

--	SELECT * FROM @RETTABLEC

	-- RETURN THE QUERY RESULT ACCORDING TO @NTRIALMODE
	IF @NTRIALMODE = 0					-- 0- LEDGERONLY
	BEGIN
		SELECT A.LOOKUP_HEAD_CODE, C.HEAD_NAME AS LOOKUP_HEAD_NAME, 
			A.INTERNAL_HEAD_CODE, D.HEAD_NAME AS INTERNAL_HEAD_NAME, 
			A.HEAD_CODE, B.HEAD_NAME, A.AC_CODE, A.AC_NAME, 
		 	 (CASE WHEN  E.BILL_BY_BILL =0 THEN 'BILL BY BILL' ELSE 'ON ACCOUNT' END) AS BILL_BY_BILL, F.AC_CODE AS BROKER_AC_CODE, 
			(CASE WHEN ISNULL(F.AC_NAME,'')='' THEN 'MISC' ELSE F.AC_NAME END) AS BROKER_AC_NAME,
			ROUND( A.OPENING_DR/@NDIVFACTOR, 2) AS OPENING_DR, 
			ROUND( A.OPENING_CR/@NDIVFACTOR, 2) AS OPENING_CR, 
			ROUND( A.DEBIT/@NDIVFACTOR, 2) AS DEBIT, 
			ROUND( A.CREDIT/@NDIVFACTOR, 2) AS CREDIT, 
			ROUND( A.CLOSING_DR/@NDIVFACTOR, 2) AS CLOSING_DR, 
			ROUND( A.CLOSING_CR/@NDIVFACTOR, 2) AS CLOSING_CR, 
			CAST(0 AS BIT) AS HEAD
		FROM @RETTABLEC A 
		JOIN HD01106 B  (NOLOCK) ON A.HEAD_CODE = B.HEAD_CODE 
		JOIN HD01106 C  (NOLOCK) ON A.LOOKUP_HEAD_CODE = C.HEAD_CODE
		JOIN HD01106 D  (NOLOCK) ON A.INTERNAL_HEAD_CODE = D.HEAD_CODE
		LEFT OUTER JOIN LMP01106 E  (NOLOCK) ON A.AC_CODE = E.AC_CODE 
		LEFT OUTER JOIN LM01106 F  (NOLOCK) ON ISNULL(E.BROKER_AC_CODE, '0000000000' ) = F.AC_CODE 		
		ORDER BY LOOKUP_HEAD_NAME, INTERNAL_HEAD_NAME, B.HEAD_NAME, A.AC_NAME
	END
	ELSE
	IF @NTRIALMODE = 1					-- 1- ROOT HEADS
	BEGIN
		SELECT A.LOOKUP_HEAD_CODE AS HEAD_CODE, '' AS AC_CODE, B.HEAD_NAME AS AC_NAME, 
			ROUND( SUM(A.OPENING_DR)/@NDIVFACTOR, 2) AS OPENING_DR, 
			ROUND( SUM(A.OPENING_CR)/@NDIVFACTOR, 2) AS OPENING_CR, 
			ROUND( SUM(A.DEBIT)/@NDIVFACTOR, 2) AS DEBIT, 
			ROUND( SUM(A.CREDIT)/@NDIVFACTOR, 2) AS CREDIT, 
			( CASE WHEN SUM(A.CLOSING_DR) - SUM(A.CLOSING_CR) >0 
				   THEN ROUND( (SUM(A.CLOSING_DR) - SUM(A.CLOSING_CR))/@NDIVFACTOR, 2)
				   ELSE 0 END ) AS CLOSING_DR, 
			( CASE WHEN SUM(A.CLOSING_DR) - SUM(A.CLOSING_CR) <0 
				   THEN ROUND( ABS(SUM(A.CLOSING_DR) - SUM(A.CLOSING_CR))/@NDIVFACTOR, 2)
				   ELSE 0 END ) AS CLOSING_CR, 
			CAST(1 AS BIT) AS HEAD
		FROM @RETTABLEC A
		JOIN HD01106 B  (NOLOCK) ON A.LOOKUP_HEAD_CODE = B.HEAD_CODE
		GROUP BY A.LOOKUP_HEAD_CODE, B.HEAD_NAME
		ORDER BY B.HEAD_NAME
	END
	ELSE
	IF @NTRIALMODE = 2					-- 2- HEADSANDLEDGERS
	BEGIN
		SELECT A.LOOKUP_HEAD_CODE AS HEAD_CODE, '' AS AC_CODE, B.HEAD_NAME AS AC_NAME, 
			ROUND( SUM(A.OPENING_DR)/@NDIVFACTOR, 2) AS OPENING_DR, 
			ROUND( SUM(A.OPENING_CR)/@NDIVFACTOR, 2) AS OPENING_CR, 
			ROUND( SUM(A.DEBIT)/@NDIVFACTOR, 2) AS DEBIT, 
			ROUND( SUM(A.CREDIT)/@NDIVFACTOR, 2) AS CREDIT, 
			( CASE WHEN SUM(A.CLOSING_DR) - SUM(A.CLOSING_CR) >0 
				   THEN ROUND( (SUM(A.CLOSING_DR) - SUM(A.CLOSING_CR))/@NDIVFACTOR, 2)
				   ELSE 0 END ) AS CLOSING_DR, 
			( CASE WHEN SUM(A.CLOSING_DR) - SUM(A.CLOSING_CR) <0 
				   THEN ROUND( ABS(SUM(A.CLOSING_DR) - SUM(A.CLOSING_CR))/@NDIVFACTOR, 2)
				   ELSE 0 END ) AS CLOSING_CR, 
			CAST(1 AS BIT) AS HEAD
		FROM @RETTABLEC A
		JOIN HD01106 B  (NOLOCK) ON A.LOOKUP_HEAD_CODE = B.HEAD_CODE
		GROUP BY A.LOOKUP_HEAD_CODE, B.HEAD_NAME
		UNION ALL
		SELECT A.HEAD_CODE, A.AC_CODE, A.AC_NAME, 
			ROUND( A.OPENING_DR/@NDIVFACTOR, 2) AS OPENING_DR, 
			ROUND( A.OPENING_CR/@NDIVFACTOR, 2) AS OPENING_CR, 
			ROUND( A.DEBIT/@NDIVFACTOR, 2) AS DEBIT, 
			ROUND( A.CREDIT/@NDIVFACTOR, 2) AS CREDIT, 
			ROUND( A.CLOSING_DR/@NDIVFACTOR, 2) AS CLOSING_DR, 
			ROUND( A.CLOSING_CR/@NDIVFACTOR, 2) AS CLOSING_CR, 
			CAST(0 AS BIT) AS HEAD
		FROM @RETTABLEC A
		WHERE A.LOOKUP_HEAD_CODE = '' AND A.HEAD_CODE = @CTRIALHEADCODE
		ORDER BY HEAD DESC, AC_NAME

--	SELECT * FROM @RETTABLEC

	END
	ELSE
	IF @NTRIALMODE = 3					-- 3- HEADS ONLY
	BEGIN
		SELECT A.LOOKUP_HEAD_CODE AS MAJOR_HEAD_CODE, B.HEAD_NAME AS MAJOR_HEAD_NAME, 
			A.INTERNAL_HEAD_CODE, D.HEAD_NAME AS INTERNAL_HEAD_NAME, 
			A.HEAD_CODE, C.HEAD_NAME,
			ROUND( SUM(A.OPENING_DR)/@NDIVFACTOR, 2) AS OPENING_DR, 
			ROUND( SUM(A.OPENING_CR)/@NDIVFACTOR, 2) AS OPENING_CR, 
			ROUND( SUM(A.DEBIT)/@NDIVFACTOR, 2) AS DEBIT, 
			ROUND( SUM(A.CREDIT)/@NDIVFACTOR, 2) AS CREDIT, 
			( CASE WHEN SUM(A.CLOSING_DR) - SUM(A.CLOSING_CR) >0 
				   THEN ROUND( (SUM(A.CLOSING_DR) - SUM(A.CLOSING_CR))/@NDIVFACTOR, 2)
				   ELSE 0 END ) AS CLOSING_DR, 
			( CASE WHEN SUM(A.CLOSING_DR) - SUM(A.CLOSING_CR) <0 
				   THEN ROUND( ABS(SUM(A.CLOSING_DR) - SUM(A.CLOSING_CR))/@NDIVFACTOR, 2)
				   ELSE 0 END ) AS CLOSING_CR, 
			CAST(1 AS BIT) AS HEAD
		FROM @RETTABLEC A
		JOIN HD01106 B  (NOLOCK) ON A.LOOKUP_HEAD_CODE = B.HEAD_CODE
		JOIN HD01106 C  (NOLOCK) ON A.HEAD_CODE = C.HEAD_CODE
		JOIN HD01106 D  (NOLOCK) ON A.INTERNAL_HEAD_CODE = D.HEAD_CODE
		GROUP BY A.LOOKUP_HEAD_CODE, B.HEAD_NAME, A.INTERNAL_HEAD_CODE, D.HEAD_NAME, A.HEAD_CODE, C.HEAD_NAME
		ORDER BY MAJOR_HEAD_NAME, INTERNAL_HEAD_NAME, C.HEAD_NAME
	END
END
