create PROCEDURE SAVETRAN_BUYPLAN
(
@NUPDATEMODE INT,
@NSPID VARCHAR(40),
@CMEMO_NO VARCHAR(10)=''
,@EDIT_CLICKED	    BIT=0
)
AS  
BEGIN  
 -- @NUPDATEMODE: 1- NEW MEMO ADDED,   
 --     2- EDITING OF MEMO,   
 --     3- CURRENT MEMO CANCELLED,   
  
 DECLARE @CTEMPDBNAME   VARCHAR(100),  
   @CMASTERTABLENAME  VARCHAR(100),  
   @CDETAILTABLENAME1  VARCHAR(100),  
   @CDETAILTABLENAME2  VARCHAR(100),  
   @CTEMPMASTERTABLENAME VARCHAR(100),  
   @CTEMPDETAILTABLENAME1 VARCHAR(100),  
   @CTEMPDETAILTABLENAME2 VARCHAR(100),  
   @CTEMPMASTERTABLE  VARCHAR(300),  
   @CTEMPDETAILTABLE1  VARCHAR(300),  
   @CTEMPDETAILTABLE2  VARCHAR(300),  
   @CERRORMSG    VARCHAR(500),  
  
   @CKEYFIELD1    VARCHAR(50),  
   @CMEMONO    VARCHAR(20),  
   @NMEMONOLEN    NUMERIC(20,0),  
   @CMEMONOVAL    VARCHAR(50),  
   @CLOCATIONID   VARCHAR(4),  
   @CHODEPTID    VARCHAR(4),  
   @CCMD     NVARCHAR(4000),  
   @CCMDOUTPUT    NVARCHAR(4000),  
   @NSAVETRANLOOP   BIT,  
   @NSTEP     INT, 
   @CFINYEAR VARCHAR(10) ,
   @CMEMONOPREFIX VARCHAR(10) ,@clOcId char(4) 
  
 DECLARE @OUTPUT TABLE ( ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))
 DECLARE @OUTPUT1 TABLE ( ERRMSG VARCHAR(2000), SECTION_NAME VARCHAR(100),BUDGET_PLAN_NAME VARCHAR(500),BUDGET_AMOUNT NUMERIC(10,2),BUY_PLAN_AMOUNT NUMERIC(10,2))    
  
  
 SET @NSTEP = 0  -- SETTTING UP ENVIRONMENT  
  
 
  SET @CTEMPDBNAME = '' 
  SET @CFINYEAR='' 
  
 SET @CMASTERTABLENAME = 'BUY_PLAN_MST'  
 SET @CDETAILTABLENAME1 = 'BUY_PLAN_DET'  
   

 SET @CTEMPMASTERTABLENAME = 'BUYPL_BUY_PLAN_MST_UPLOAD'
 SET @CTEMPDETAILTABLENAME1 = 'BUYPL_BUY_PLAN_DET_UPLOAD'
   
  
 SET @CTEMPMASTERTABLE = @CTEMPDBNAME + @CTEMPMASTERTABLENAME  
 SET @CTEMPDETAILTABLE1 = @CTEMPDBNAME + @CTEMPDETAILTABLENAME1  
   
   
 SET @CERRORMSG   = ''  

 SET @CMEMONO   = 'MEMO_NO'  
 SET @NMEMONOLEN   = 10  
  
  
  select @cLocId=location_code from BUYPL_BUY_PLAN_MST_UPLOAD where SP_ID=@NSPID 
  
	set @CLOCATIONID=@cLocId

 SELECT @CHODEPTID  = [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'    
  
 SET @NSTEP = 10  -- GETTING DEPTID INFO FROM TEMP TABLE  
   
    
   
 BEGIN TRY  
  

  
  BEGIN TRANSACTION  
  
  IF ISNULL(@CLOCATIONID,'')=''
 BEGIN
    SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
	GOTO END_PROC    
 END
    
  
    
  IF @NUPDATEMODE = 3 AND ISNULL(@CMEMO_NO,'') = ''  
  BEGIN

   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO NO REQUIRED IF CALLED FROM CANCELLATION'  
   GOTO END_PROC      
  END  
    
  -- START UPDATING XN TABLES   
  IF @NUPDATEMODE = 1 -- ADDMODE   
  BEGIN   
     
   SET @NSTEP=15  
     
   SET @CMEMONOPREFIX=@CLOCATIONID  
     
    
   SET @NSTEP = 20  -- GENERATING NEW KEY  
     
   -- GENERATING NEW JOB ORDER NO    
   SET @NSAVETRANLOOP=0  
   WHILE @NSAVETRANLOOP=0  
   BEGIN  
    EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,   
        '',0, @CMEMONOVAL OUTPUT     
      
    PRINT @CMEMONOVAL  
    SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+'   
          WHERE '+@CMEMONO+'='''+@CMEMONOVAL+'''   
           )  
        SET @NLOOPOUTPUT=0  
       ELSE  
        SET @NLOOPOUTPUT=1'  
    PRINT @CCMD  
    EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT  
   END  
  
   IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
   BEGIN  
      SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'   
      GOTO END_PROC      
   END  
  
   
  
   SET @NSTEP = 40  -- UPDATING NEW ID INTO TEMP TABLES  
  
   -- UPDATING NEWLY GENERATED JOB ORDER NO AND JOB ORDER ID IN PIM AND PID TEMP TABLES  
   SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+'''  
       WHERE SP_ID='''+LTRIM(RTRIM(@NSPID))+''''  
   PRINT @CCMD  
   EXEC SP_EXECUTESQL @CCMD  
  
  
  SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLENAME1 + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+'''  
     WHERE SP_ID='''+LTRIM(RTRIM(@NSPID))+'''' 
   PRINT @CCMD  
   EXEC SP_EXECUTESQL @CCMD  
  
  END     -- END OF ADDMODE  
  ELSE    -- CALLED FROM EDITMODE  
  BEGIN    -- START OF EDITMODE  
    
	   SET @NSTEP = 50  -- GETTING ID INFO FROM TEMP TABLE  
	 
	   SET @CCMD = 'SELECT @CMEMONOVAL = ' + @CMEMONO + ' FROM '  
		  + (CASE WHEN @NUPDATEMODE=3 THEN @CMASTERTABLENAME + ' WHERE MEMO_NO = ''' + @CMEMO_NO + ''''  
			ELSE @CTEMPMASTERTABLE END )  
	   PRINT @CCMD  
	   EXEC SP_EXECUTESQL @CCMD, N' @CMEMONOVAL VARCHAR(50) OUTPUT',    @CMEMONOVAL OUTPUT  
	            
	   IF  (@CMEMONOVAL IS NULL )  
	   BEGIN  
		  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'  
		  GOTO END_PROC      
	   END 
	    
  
   SET @NSTEP = 55  -- STORING OLD STATUS OF BARCODES   
  
     
   IF @NUPDATEMODE = 3     
   BEGIN  
    SET @NSTEP = 60  
    -- UPDATING SENTTOHO FLAG  
    SET @CCMD = N'UPDATE ' + @CMASTERTABLENAME + ' SET CANCELLED = 1,LAST_UPDATE=GETDATE() ' +   
       N' WHERE ' + @CMEMONO + ' = ''' + @CMEMONOVAL + ''''  
    EXEC SP_EXECUTESQL @CCMD  
   END  
 
     
   END     -- END OF EDITMODE     
   
 DECLARE @CFILTERCONDITION VARCHAR(2000)
 SET @CFILTERCONDITION='B.SP_ID='''+LTRIM(RTRIM(@NSPID))+'''' 
  
  SET @NSTEP = 95  
    
  -- RECHECKING IF ID IS STILL LATER  
  IF @CMEMONOVAL IS NULL OR @CMEMONOVAL LIKE '%LATER%'  
  BEGIN  
   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR GETTING NEXT MEMO NO....'  
   GOTO END_PROC  
  END  
  
  IF @NUPDATEMODE <> 3  
  BEGIN  
      
   SET @NSTEP = 105  -- UPDATING MASTER TABLE  
  
  
   EXEC UPDATEMASTERXN_MIRROR   
      @CSOURCEDB = @CTEMPDBNAME  
    , @CSOURCETABLE = @CTEMPMASTERTABLENAME  
    , @CDESTDB  = ''  
    , @CDESTTABLE = @CMASTERTABLENAME  
    , @CKEYFIELD1 = @CMEMONO  
    ,@BALWAYSUPDATE = 1  
        ,@CFILTERCONDITION=@CFILTERCONDITION 

  
 
     
   SET @NSTEP = 112  
     
   -- UPDATING ROW_ID IN TEMP TABLES  
   SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET  ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(38), NEWID())  
        WHERE LEFT(ROW_ID,5) = ''LATER'' AND SP_ID='''+LTRIM(RTRIM(@NSPID))+''''
   PRINT  @CCMD  
   EXEC SP_EXECUTESQL @CCMD  
  
   -- DELETING EXISTING ENTRIES FROM DETAIL TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE  
   SET @NSTEP = 114  -- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES  
  
   SET @CCMD = N'DELETE A
       FROM ' + @CDETAILTABLENAME1 + ' A   
       LEFT OUTER JOIN ' + @CTEMPDETAILTABLE1 + ' B ON A.ROW_ID = B.ROW_ID   AND B.SP_ID='''+LTRIM(RTRIM(@NSPID))+''' 
       WHERE A.' + @CMEMONO + ' = ''' + @CMEMONOVAL + ''' 
       AND   B.ROW_ID IS NULL  
      '
   PRINT  @CCMD  
   EXEC SP_EXECUTESQL @CCMD  
     
  
   SET @NSTEP = 130  -- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES  
  
   EXEC UPDATEMASTERXN_MIRROR   
      @CSOURCEDB = @CTEMPDBNAME  
    , @CSOURCETABLE = @CTEMPDETAILTABLENAME1  
    , @CDESTDB  = ''  
    , @CDESTTABLE = @CDETAILTABLENAME1  
    , @CKEYFIELD1 = 'ROW_ID'  
    ,@BALWAYSUPDATE = 1
        ,@CFILTERCONDITION=@CFILTERCONDITION 
  
  
   SET @NSTEP = 135 
   
  
   
   IF @NUPDATEMODE<>3
   BEGIN
   
		INSERT INTO @OUTPUT1(ERRMSG , SECTION_NAME,BUDGET_PLAN_NAME ,BUDGET_AMOUNT ,BUY_PLAN_AMOUNT )    
		SELECT 'BUY PLAN AMOUNT CANT''T BE GREATOR THAN BUDGET AMOUNT ' AS ERRMSG,F.SECTION_NAME, B.BUDGET_PLAN_NAME,A.BUDGET_AMOUNT,F.BUY_PLAN_AMOUNT
		FROM BUDGET_PLAN_DET A(NOLOCK)
		JOIN BUDGET_PLAN_MST B(NOLOCK) ON A.MEMO_NO=B.MEMO_NO
		JOIN
		(
			SELECT D.SECTION_NAME, E.BUDGET_PLAN_MEMO_NO, D.SECTION_CODE,SUM(QUANTITY*A.PURCHASE_PRICE) AS BUY_PLAN_AMOUNT 
			FROM BUY_PLAN_DET A 
			JOIN BUY_PLAN_MST E(NOLOCK) ON E.MEMO_NO=A.MEMO_NO
			JOIN ARTICLE B(NOLOCK) ON B.ARTICLE_CODE=A.ARTICLE_CODE
			JOIN SECTIOND C(NOLOCK) ON C.SUB_SECTION_CODE=B.SUB_SECTION_CODE
			JOIN SECTIONM D(NOLOCK) ON D.SECTION_CODE=C.SECTION_CODE
			WHERE E.CANCELLED=0
			GROUP BY D.SECTION_CODE,E.BUDGET_PLAN_MEMO_NO,D.SECTION_NAME
		)F ON F.SECTION_CODE=A.SECTION_CODE
		AND B.MEMO_NO=F.BUDGET_PLAN_MEMO_NO WHERE A.BUDGET_AMOUNT < F.BUY_PLAN_AMOUNT

         
           SELECT TOP 1  @CERRORMSG= ERRMSG FROM @OUTPUT1 WHERE ISNULL(ERRMSG,'')<>''
		  GOTO END_PROC 
		 
   END
   

   
		  
		  
     
END    
   
 END TRY  
   
 BEGIN CATCH  
  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()  
    
  GOTO END_PROC  
 END CATCH  
   
END_PROC:  
  
   
 IF @@TRANCOUNT>0  
 BEGIN  
  IF ISNULL(@CERRORMSG,'')='' 
  BEGIN
		COMMIT TRANSACTION
  END	
  ELSE  
         ROLLBACK  
 END  
   
  INSERT @OUTPUT ( ERRMSG, MEMO_ID)  
  VALUES ( ISNULL(@CERRORMSG,''), ISNULL(@CMEMONOVAL,'') )
  
 
  IF EXISTS(SELECT TOP 1'U' FROM @OUTPUT1) AND @NUPDATEMODE<>3
  SELECT * FROM @OUTPUT1 
  ELSE  
  SELECT * FROM @OUTPUT   
  
  
 DELETE FROM BUYPL_BUY_PLAN_MST_UPLOAD WHERE SP_ID=@NSPID
 DELETE FROM BUYPL_BUY_PLAN_DET_UPLOAD WHERE SP_ID=@NSPID 
END    
------------------------------------------------------ END OF PROCEDURE SAVETRAN_BUYPLAN
