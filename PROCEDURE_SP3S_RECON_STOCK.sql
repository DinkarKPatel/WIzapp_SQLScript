CREATE PROCEDURE SP3S_RECON_STOCK
(
	 @CMEMO_ID VARCHAR(20)
	,@NEXCESS_STLMT_MODE NUMERIC(1)=1 /*1: CREATE UNCANCELLATION MEMO*/
	,@NSHORTAGE_STLMT_MODE NUMERIC(1)=1 /*1: CREATE CANCELLATION, 2: CREATE SALE*/
	,@CUSER_CODE VARCHAR(7)
	,@CFIN_YEAR VARCHAR(5)
	,@DMEMO_DT DATETIME='',
	@CLOCID VARCHAR(5)=''
)
--WITH ENCRYPTION
AS
BEGIN
BEGIN TRY
		DECLARE @CERRMSG VARCHAR(500),@CSTEP VARCHAR(10),@CDEPT_ID VARCHAR(5)
			   ,@CMEMOPREFIX VARCHAR(5),@CMEMONOVAL VARCHAR(20),@CMEMOIDVAL VARCHAR(25)
			   ,@CBIN_ID VARCHAR(3),@CCMDOUTPUT VARCHAR(500),@CUSERALIAS VARCHAR(2),@CKEYSTABLE VARCHAR(100)
			   ,@CMEMONOLEN VARCHAR(5),@NMEMONOLEN NUMERIC(5),@CSH_MEMO_NO VARCHAR(50)
			   ,@CEX_MEMO_NO VARCHAR(50),@CREP_ID VARCHAR(10)
		
		IF ISNULL(@DMEMO_DT,'')=''
			SET @DMEMO_DT=CONVERT(VARCHAR,GETDATE(),110)
		
		DECLARE @TOUTPUT TABLE(SH_MEMO_NO VARCHAR(50),EX_MEMO_NO VARCHAR(50),ERRMSG VARCHAR(500))	   
		
		
		SET @CSTEP =0

		IF @CLOCID=''
		SELECT TOP 1 @CDEPT_ID=DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 
		ELSE 
		SET @CDEPT_ID=@CLOCID


		SELECT TOP 1 @CBIN_ID=RECON_BIN_ID,@CREP_ID=REP_ID FROM STMH01106 WHERE MEMO_ID=@CMEMO_ID
		
		SET @CSTEP =10
		IF NOT EXISTS(SELECT TOP 1 'U' FROM USERS WHERE USER_CODE=@CUSER_CODE)
		BEGIN
			SET @CERRMSG='INVALID USER.PLEASE CHECK'
			GOTO END_PROC
		END
						
		SET @CSTEP=20
		--GETTING LIST OF PRODUCT_CODES FOR SETTLEMENT
		IF OBJECT_ID('TEMPDB..#EXCESSCODES','U') IS NOT NULL
			DROP TABLE #EXCESSCODES
		
		IF OBJECT_ID('TEMPDB..#SHORTAGECODES','U') IS NOT NULL
			DROP TABLE #SHORTAGECODES
		
		SET @CSTEP =30
		SELECT A.DEPT_ID,A.RECON_BIN_ID AS BIN_ID,B.PRODUCT_CODE,B.SHORTAGE_QTY AS QUANTITY
		INTO #SHORTAGECODES
		--INTO #EXCESSCODES
		FROM STMH01106 A 
		JOIN STK_RECON_HIST_DET B ON A.MEMO_ID=B.RECON_ID
		WHERE A.MEMO_ID=@CMEMO_ID AND B.SHORTAGE_QTY>0
		
		SET @CSTEP =40
		SELECT A.DEPT_ID,A.RECON_BIN_ID AS BIN_ID,B.PRODUCT_CODE,B.EXCESS_QTY AS QUANTITY
		--INTO #SHORTAGECODES
		INTO #EXCESSCODES
		FROM STMH01106 A 
		JOIN STK_RECON_HIST_DET B ON A.MEMO_ID=B.RECON_ID
		WHERE A.MEMO_ID=@CMEMO_ID AND B.EXCESS_QTY>0
		
		--SELECT * FROM #SHORTAGECODES
		--SELECT * FROM #EXCESSCODES
		BEGIN TRANSACTION
		--UPDATE PMT01106 SET REP_ID='' WHERE REP_ID=@CREP_ID AND DEPT_ID=@CDEPT_ID AND BIN_ID=@CBIN_ID
		---SETTLEMENT FOR SHORTAGE QUANTITY
		SET @CSTEP =50
		IF EXISTS(SELECT TOP 1 'U' FROM #SHORTAGECODES) /*PROCEED FOR SHORTAGE SETTLEMENT*/
		BEGIN
			IF @NSHORTAGE_STLMT_MODE=1 /*CREATE CANCELLATION MEMO FOR SHORTAGE QUANTIY*/
			BEGIN
				SET @CSTEP =60
				PRINT 'CREATING CANCELLATION FOR SHORTAGE QUANTITY'
				SET @CMEMOPREFIX=@CDEPT_ID+'C-'
				SET @CSTEP =70
				LBL_CNCKEY: 	
				EXEC GETNEXTKEY 'ICM01106','CNC_MEMO_NO',10,@CMEMOPREFIX,1,@CFIN_YEAR,0,@CMEMONOVAL OUTPUT   
				SET @CSTEP =80
				IF ISNULL(@CMEMONOVAL,'')=''
				BEGIN
					SET @CERRMSG='ERROR GENERATING CNC MEMO_NO..'
					GOTO END_PROC
				END
				
				SET @CSTEP =90
				IF EXISTS(SELECT TOP 1 'U' FROM ICM01106 WHERE CNC_MEMO_NO=@CMEMONOVAL AND FIN_YEAR=@CFIN_YEAR)
					GOTO LBL_CNCKEY
				
				SET @CSTEP =100
				SET @CMEMOIDVAL = @CDEPT_ID + @CFIN_YEAR+ REPLICATE('0', 15-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL))
				
				SET @CSTEP =110
				IF @CMEMOIDVAL IS NULL  
				BEGIN
					  SET @CERRMSG = 'ERROR GENERATING CNC MEMO ID'
					  GOTO END_PROC
				END
				
				SET @CSTEP =120
				--SELECT @CMEMONOVAL,@CMEMOIDVAL 
				INSERT ICM01106	( CNC_MEMO_NO, CNC_MEMO_DT, CANCELLED, CNC_TYPE, TOTAL_AMOUNT, DEPT_ID, LAST_UPDATE, USER_CODE
								, APPROVED, SENT_TO_HO, CNC_MEMO_ID, FIN_YEAR, UPLOADED_TO_ACTIVSTREAM, REF_MEMO_ID, REF_XN_TYPE
								, FROM_STOCKAUDIT, EDT_USER_CODE, CNC_TIME, STOCK_ADJ_NOTE, CNC_DT, RFOPT_UPDATED, REMARKS
								, SENT_FOR_RECON, BIN_ID )  
				SELECT 	@CMEMONOVAL AS CNC_MEMO_NO,@DMEMO_DT AS CNC_MEMO_DT,0 AS CANCELLED,1 AS CNC_TYPE
						,0 AS TOTAL_AMOUNT,@CDEPT_ID AS DEPT_ID,GETDATE() AS LAST_UPDATE,@CUSER_CODE AS USER_CODE
						,1 AS APPROVED,0 AS SENT_TO_HO,@CMEMOIDVAL AS CNC_MEMO_ID,@CFIN_YEAR AS FIN_YEAR
						,0 AS UPLOADED_TO_ACTIVSTREAM,'' AS REF_MEMO_ID,'' AS REF_XN_TYPE,0 AS FROM_STOCKAUDIT
						,'0000000' AS EDT_USER_CODE,@DMEMO_DT AS CNC_TIME,0 AS STOCK_ADJ_NOTE,@DMEMO_DT AS CNC_DT
						,0 AS RFOPT_UPDATED,'' AS REMARKS,0 AS SENT_FOR_RECON,@CBIN_ID AS BIN_ID 
				
				SET @CSTEP =130
				INSERT ICD01106	( CNC_MEMO_NO, PRODUCT_CODE, QUANTITY, DEPT_ID, ROW_ID, LAST_UPDATE, CNC_MEMO_ID, FIN_YEAR, RATE
								, ADJ_PERCENTAGE, BIN_ID )  
				SELECT 	@CMEMONOVAL AS CNC_MEMO_NO, PRODUCT_CODE,QUANTITY,DEPT_ID,@CDEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID
				,GETDATE() AS LAST_UPDATE,@CMEMOIDVAL AS CNC_MEMO_ID,@CFIN_YEAR AS FIN_YEAR,0 AS RATE,0 AS ADJ_PERCENTAGE, BIN_ID 
				FROM #SHORTAGECODES
				
				SET @CSTEP =140
				--REDUCING STOCK IN PMT01106 FOR THE CANCELLATION MEMO
				EXEC UPDATEPMT 
					  @CXNTYPE			= 'CNC'
					, @CXNNO			= @CMEMONOVAL
					, @CXNID			= @CMEMOIDVAL
					, @NREVERTFLAG		= 0
					, @NALLOWNEGSTOCK	= 0
					, @NCHKDELBARCODES	= 1
					, @NUPDATEMODE		= 1				
					, @CCMD				= @CCMDOUTPUT OUTPUT
				
				SET @CSTEP =150	
				SET @CSH_MEMO_NO=@CMEMONOVAL	
				
				UPDATE B SET B.SETTLEMENT_TYPE='CNC',B.SETTLEMENT_QTY=C.QUANTITY
				FROM STMH01106 A 
				JOIN STK_RECON_HIST_DET B ON A.MEMO_ID=B.RECON_ID
				JOIN #SHORTAGECODES C ON B.PRODUCT_CODE=C.PRODUCT_CODE AND B.SHORTAGE_QTY=C.QUANTITY
				WHERE A.MEMO_ID=@CMEMO_ID AND B.SHORTAGE_QTY>0
			END --END OF CREATING CANCELLATION MEMO
			ELSE IF @NSHORTAGE_STLMT_MODE=2 /*CREATE CASH MEMO FOR SHORTAGE QUANTITY*/
			BEGIN
				SET @CSTEP =160
				PRINT 'CREATING CASH MEMO FOR SHORTAGE QUANTITY'
				SELECT TOP 1 @CUSERALIAS=USER_ALIAS FROM USERS WHERE USER_CODE=@CUSER_CODE
				SET @CSTEP =170
				SELECT TOP 1 @CMEMONOLEN=VALUE FROM CONFIG WHERE CONFIG_OPTION='SLS_MEMO_LEN'
				
				SET @CSTEP =180
				IF ISNULL(@CMEMONOLEN,'')<>''
					SET @NMEMONOLEN=CONVERT(INT,@CMEMONOLEN)
				ELSE 
					SET @NMEMONOLEN=10
				
				SET @CSTEP =190
				SET @CKEYSTABLE='KEYS_CMM_'+LTRIM(RTRIM(@CUSERALIAS))
				SET @CMEMOPREFIX=@CDEPT_ID+LTRIM(RTRIM(@CUSERALIAS))+'-'
				
				SET @CSTEP =200
				LBL_SLSKEY: 	
				EXEC GETNEXTKEY_OPT 'CMM01106', 'CM_NO', @NMEMONOLEN, @CMEMOPREFIX, 1,
								@CFIN_YEAR,0, @CKEYSTABLE,@CMEMONOVAL OUTPUT
				
				SET @CSTEP =210
				IF ISNULL(@CMEMONOVAL,'')=''
				BEGIN
					SET @CERRMSG='ERROR GENERATING CM_NO..'
					GOTO END_PROC
				END
				
				SET @CSTEP =220
				IF EXISTS(SELECT TOP 1 'U' FROM CMM01106 WHERE CM_NO=@CMEMONOVAL AND FIN_YEAR=@CFIN_YEAR)
					GOTO LBL_SLSKEY
				
				SET @CSTEP =230
				SET @CMEMOIDVAL = @CDEPT_ID + @CFIN_YEAR+ REPLICATE('0', 15-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL))
				
				SET @CSTEP =240
				IF @CMEMOIDVAL IS NULL  
				BEGIN
					  SET @CERRMSG = 'ERROR GENERATING CM_ID'
					  GOTO END_PROC
				END
				
				SET @CSTEP =250
				--SELECT @CMEMONOVAL,@CMEMOIDVAL
				INSERT CMM01106	( REMARKS, SENT_FOR_RECON, PARTY_TYPE, AC_CODE, MANUAL_DISCOUNT, MANUAL_ROUNDOFF, BIN_ID
								, PATCHUP_RUN, SUBTOTAL_R, PASSPORT_NO, TICKET_NO, FLIGHT_NO, FC_RATE, POSTEDINAC, CM_NO
								, CM_DT, CM_MODE, SUBTOTAL, DT_CODE, DISCOUNT_PERCENTAGE, DISCOUNT_AMOUNT, NET_AMOUNT
								, CUSTOMER_CODE, CANCELLED, USER_CODE, LAST_UPDATE, EXEMPTED,  SENT_TO_HO
								, CM_TIME, CM_ID, REF_CM_ID, FIN_YEAR, ATD_CHARGES, COPIES_PTD, ROUND_OFF, MEMO_TYPE, PAY_MODE
								, SMS_SENT, AUTOENTRY, CASH_TENDERED, PAYBACK, ECOUPON_ID, CAMPAIGN_GC_OTP, SALESSETUPINEFFECT
								, EDT_USER_CODE, GV_AMOUNT, REF_NO, SENT_FOR_GR, MRP_WSP, MANUAL_BILL )  
				SELECT 	'' AS REMARKS,0 AS SENT_FOR_RECON,1 AS PARTY_TYPE,'0000000000' AS AC_CODE,0 AS MANUAL_DISCOUNT,0 AS MANUAL_ROUNDOFF
						,@CBIN_ID AS BIN_ID,0 AS PATCHUP_RUN,0 AS SUBTOTAL_R,'' AS PASSPORT_NO,'' AS TICKET_NO,'' AS FLIGHT_NO
						,0 AS FC_RATE,0 AS POSTEDINAC,@CMEMONOVAL AS CM_NO,@DMEMO_DT AS CM_DT,1 AS CM_MODE,0 AS SUBTOTAL
						,'0000000' AS DT_CODE,0 AS DISCOUNT_PERCENTAGE,0 AS DISCOUNT_AMOUNT,0 AS NET_AMOUNT,'000000000000' AS CUSTOMER_CODE
						,0 AS CANCELLED,@CUSER_CODE AS USER_CODE,GETDATE() AS LAST_UPDATE,0 AS EXEMPTED,0 AS SENT_TO_HO
						,@DMEMO_DT AS CM_TIME,@CMEMOIDVAL AS CM_ID,'' AS REF_CM_ID,@CFIN_YEAR AS FIN_YEAR,0 AS ATD_CHARGES
						,0 AS COPIES_PTD,0 AS ROUND_OFF,1 AS MEMO_TYPE,1 AS PAY_MODE,0 AS SMS_SENT,0 AS AUTOENTRY,0 AS CASH_TENDERED
						,0 AS PAYBACK,'' AS ECOUPON_ID,'' AS CAMPAIGN_GC_OTP,0 AS SALESSETUPINEFFECT,'0000000' AS EDT_USER_CODE,0 AS GV_AMOUNT
						,'' AS REF_NO,1 AS SENT_FOR_GR,1 AS MRP_WSP,0 AS MANUAL_BILL 
				
				SET @CSTEP =260
				INSERT CMD01106	( PRODUCT_CODE, QUANTITY, MRP, NET, DISCOUNT_PERCENTAGE, DISCOUNT_AMOUNT, ROW_ID, LAST_UPDATE
								, TAX_PERCENTAGE, TAX_AMOUNT, EMP_CODE, SLSDET_ROW_ID, DEPT_ID, OLD_MRP, REF_SLS_MEMO_ID
								, REALIZE_SALE, CM_ID, RFNET, TAX_TYPE, TAX_METHOD, EAN, EMP_CODE1, EMP_CODE2, ITEM_DESC
								, WEIGHTED_AVG_DISC_PCT, WEIGHTED_AVG_DISC_AMT, MANUAL_DISCOUNT, FIX_MRP, SR_NO, HOLD_FOR_ALTER
								, PACK_SLIP_ID, XN_TYPE, REPEAT_PUR_ORDER, BIN_ID, REF_ORDER_ID, FOC_QUANTITY, CMM_DISCOUNT_AMOUNT
								, NRM_ID )  
				SELECT 	  A.PRODUCT_CODE, QUANTITY,B.MRP AS MRP,0 AS NET,0 AS DISCOUNT_PERCENTAGE,0 AS DISCOUNT_AMOUNT
						, @CDEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID,GETDATE() AS LAST_UPDATE
						,0 AS TAX_PERCENTAGE,0 AS TAX_AMOUNT,'0000000' AS EMP_CODE,'' AS SLSDET_ROW_ID,@CDEPT_ID AS DEPT_ID
						,0 AS OLD_MRP,'' AS REF_SLS_MEMO_ID
						,0 AS REALIZE_SALE,@CMEMOIDVAL AS CM_ID,0 AS RFNET,1 AS TAX_TYPE,0 AS TAX_METHOD,'' AS EAN,'0000000' AS EMP_CODE1
						,'0000000' AS EMP_CODE2,'' AS ITEM_DESC
						,0 AS WEIGHTED_AVG_DISC_PCT,0 AS WEIGHTED_AVG_DISC_AMT,0 AS MANUAL_DISCOUNT,0 AS FIX_MRP
						,ROW_NUMBER() OVER(ORDER BY A.PRODUCT_CODE) AS SR_NO,0 AS HOLD_FOR_ALTER
						,'' AS PACK_SLIP_ID,'' AS XN_TYPE,0 AS REPEAT_PUR_ORDER,@CBIN_ID AS BIN_ID,'' AS REF_ORDER_ID,0 AS FOC_QUANTITY
						,0 AS CMM_DISCOUNT_AMOUNT,'' AS NRM_ID 
				FROM #SHORTAGECODES	A
				JOIN SKU B ON A.PRODUCT_CODE=B.PRODUCT_CODE	 
				
				SET @CSTEP =270
				--REDUCING STOCK FOR SHORTAGE STOCK
				EXEC UPDATEPMT_SLS 
				  @CXNTYPE			= 'SLS'
				, @CXNNO			= @CMEMONOVAL
				, @CXNID			= @CMEMOIDVAL
				, @NREVERTFLAG		= 0
				, @NALLOWNEGSTOCK	= 0
				, @NCHKDELBARCODES	= 1
				, @NUPDATEMODE		= 1
				, @CCMD				= @CCMDOUTPUT OUTPUT
				
				SET @CSTEP =280
				SET @CSH_MEMO_NO=@CMEMONOVAL
				
				UPDATE B SET B.SETTLEMENT_TYPE='SLS',B.SETTLEMENT_QTY=C.QUANTITY
				FROM STMH01106 A 
				JOIN STK_RECON_HIST_DET B ON A.MEMO_ID=B.RECON_ID
				JOIN #SHORTAGECODES C ON B.PRODUCT_CODE=C.PRODUCT_CODE AND B.SHORTAGE_QTY=C.QUANTITY
				WHERE A.MEMO_ID=@CMEMO_ID AND B.SHORTAGE_QTY>0
			END
			ELSE 
			BEGIN
				SET @CERRMSG='INVALID SETTLEMENT MODE FOR SHORTAGE STOCK.'
				GOTO END_PROC
			END
		END
		---END OF SETTLEMENT FOR SHORTAGE QUANTITY
		
		---SETTLEMENT FOR EXCESS QUANTITY
		IF EXISTS(SELECT TOP 1 'U' FROM #EXCESSCODES) /*PROCEED FOR UNCANCELLATION*/
		BEGIN
			 IF @NEXCESS_STLMT_MODE=1
			 BEGIN
				SET @CSTEP =290
				PRINT 'CREATING UNCANCELLATION MEMO FOR EXCESS QUANTITY'
				SET @CMEMOPREFIX=@CDEPT_ID+'U-'
				SET @CSTEP =300
				LBL_UNCKEY: 	
				EXEC GETNEXTKEY 'ICM01106','CNC_MEMO_NO',10,@CMEMOPREFIX,1,@CFIN_YEAR,0,@CMEMONOVAL OUTPUT   
				
				SET @CSTEP =310
				IF ISNULL(@CMEMONOVAL,'')=''
				BEGIN
					SET @CERRMSG='ERROR GENERATING CNC MEMO_NO..'
					GOTO END_PROC
				END
				
				SET @CSTEP =320
				IF EXISTS(SELECT TOP 1 'U' FROM ICM01106 WHERE CNC_MEMO_NO=@CMEMONOVAL AND FIN_YEAR=@CFIN_YEAR)
					GOTO LBL_UNCKEY
				
				SET @CSTEP =330
				SET @CMEMOIDVAL = @CDEPT_ID + @CFIN_YEAR+ REPLICATE('0', 15-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL))
				
				SET @CSTEP =340
				IF @CMEMOIDVAL IS NULL  
				BEGIN
					  SET @CERRMSG = 'ERROR GENERATING UNC MEMO ID'
					  GOTO END_PROC
				END
				
				SET @CSTEP =350
				--SELECT @CMEMONOVAL,@CMEMOIDVAL 
				INSERT ICM01106	( CNC_MEMO_NO, CNC_MEMO_DT, CANCELLED, CNC_TYPE, TOTAL_AMOUNT, DEPT_ID, LAST_UPDATE, USER_CODE
								, APPROVED, SENT_TO_HO, CNC_MEMO_ID, FIN_YEAR, UPLOADED_TO_ACTIVSTREAM, REF_MEMO_ID, REF_XN_TYPE
								, FROM_STOCKAUDIT, EDT_USER_CODE, CNC_TIME, STOCK_ADJ_NOTE, CNC_DT, RFOPT_UPDATED, REMARKS
								, SENT_FOR_RECON, BIN_ID )  
				SELECT 	@CMEMONOVAL AS CNC_MEMO_NO,@DMEMO_DT AS CNC_MEMO_DT,0 AS CANCELLED,2 AS CNC_TYPE
						,0 AS TOTAL_AMOUNT,@CDEPT_ID AS DEPT_ID,GETDATE() AS LAST_UPDATE,@CUSER_CODE AS USER_CODE
						,1 AS APPROVED,0 AS SENT_TO_HO,@CMEMOIDVAL AS CNC_MEMO_ID,@CFIN_YEAR AS FIN_YEAR
						,0 AS UPLOADED_TO_ACTIVSTREAM,'' AS REF_MEMO_ID,'' AS REF_XN_TYPE,0 AS FROM_STOCKAUDIT
						,'0000000' AS EDT_USER_CODE,@DMEMO_DT AS CNC_TIME,0 AS STOCK_ADJ_NOTE,@DMEMO_DT AS CNC_DT
						,0 AS RFOPT_UPDATED,'' AS REMARKS,0 AS SENT_FOR_RECON,@CBIN_ID AS BIN_ID 
				
				SET @CSTEP =360
				INSERT ICD01106	( CNC_MEMO_NO, PRODUCT_CODE, QUANTITY, DEPT_ID, ROW_ID, LAST_UPDATE, CNC_MEMO_ID, FIN_YEAR, RATE
								, ADJ_PERCENTAGE, BIN_ID )  
				SELECT 	@CMEMONOVAL AS CNC_MEMO_NO, PRODUCT_CODE,QUANTITY,DEPT_ID,@CDEPT_ID+CONVERT(VARCHAR(40),NEWID()) AS ROW_ID
				,GETDATE() AS LAST_UPDATE,@CMEMOIDVAL AS CNC_MEMO_ID,@CFIN_YEAR AS FIN_YEAR,0 AS RATE,0 AS ADJ_PERCENTAGE, BIN_ID 
				FROM #EXCESSCODES
				
				SET @CSTEP =370
				--REDUCING STOCK IN PMT01106 FOR THE CANCELLATION MEMO
				EXEC UPDATEPMT 
					  @CXNTYPE			= 'UNC'
					, @CXNNO			= @CMEMONOVAL
					, @CXNID			= @CMEMOIDVAL
					, @NREVERTFLAG		= 0
					, @NALLOWNEGSTOCK	= 0
					, @NCHKDELBARCODES	= 1
					, @NUPDATEMODE		= 1				
					, @CCMD				= @CCMDOUTPUT OUTPUT		
				
				SET @CSTEP =380	
				SET @CEX_MEMO_NO=@CMEMONOVAL
				
				UPDATE B SET B.SETTLEMENT_TYPE='UNC',B.SETTLEMENT_QTY=C.QUANTITY
				FROM STMH01106 A 
				JOIN STK_RECON_HIST_DET B ON A.MEMO_ID=B.RECON_ID
				JOIN #EXCESSCODES C ON B.PRODUCT_CODE=C.PRODUCT_CODE AND B.SHORTAGE_QTY=C.QUANTITY
				WHERE A.MEMO_ID=@CMEMO_ID AND B.SHORTAGE_QTY>0
			 END
			 --END OF UNCANCELLATION FOR EXCESS QUANTITY
			 ELSE
			 BEGIN
				SET @CERRMSG='INVALID SETTLEMENT MODE FOR EXCESS STOCK'
			 END
			 --END OF SETTLEMENT FOR EXCESS QUANTITY
		END
END TRY
BEGIN CATCH
		SET @CERRMSG='ERROR AT STEP - '+@CSTEP+', MESSAGE - '+ERROR_MESSAGE()
		
		IF @@TRANCOUNT>0
			ROLLBACK TRANSACTION
END CATCH

END_PROC:
	IF ISNULL(@CERRMSG,'')=''	
	BEGIN 
		INSERT @TOUTPUT(SH_MEMO_NO,EX_MEMO_NO,ERRMSG)
		SELECT ISNULL(@CSH_MEMO_NO,''),ISNULL(@CEX_MEMO_NO,''),ISNULL(@CERRMSG,'')
		
		UPDATE STMH01106 SET SETTLED=1,LAST_UPDATE=GETDATE() WHERE MEMO_ID=@CMEMO_ID
		UPDATE STK_RECON_HIST_MST SET SETTLEMENT=1,LAST_UPDATE=GETDATE() WHERE RECON_ID=@CMEMO_ID
				
		IF @@TRANCOUNT>0
			COMMIT
	END
	ELSE
	BEGIN
		INSERT @TOUTPUT(SH_MEMO_NO,EX_MEMO_NO,ERRMSG)
		SELECT '','',@CERRMSG
		
		IF @@TRANCOUNT>0
			ROLLBACK
	END
	
	SELECT * FROM @TOUTPUT
END
--END OF PROCEDURE - SP3S_RECON_STOCK
