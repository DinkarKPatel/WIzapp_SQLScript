create PROCEDURE ACT_LEDGERDETAIL        
(         
	@CACCODE VARCHAR(20),         
	@CDEPTID VARCHAR(4),         
	@DFROMDT DATETIME,         
	@DTODT DATETIME,        
	@CFINYEAR VARCHAR(10),         
	@CCOMPANYCODE VARCHAR(2)        
)        
--WITH ENCRYPTION
AS        
BEGIN        
	SET NOCOUNT ON
	PRINT 'STARTING PROCEDURE ' + CAST( GETDATE() AS VARCHAR(50) )

	DECLARE @CTMPACCODE VARCHAR(20),@NOPENING NUMERIC(18,2),@NCLOSING NUMERIC(18,2),@CVMID VARCHAR(MAX),     
	@CVDID VARCHAR(MAX),@CCONSIDERPENDINGPACKSLIP VARCHAR(2)        
	    
	DECLARE @LEDGERC TABLE ( AC_CODE VARCHAR(MAX), VOUCHER_DT DATETIME, RECON_DT DATETIME, VM_ID VARCHAR(MAX), 
			MRR_LIST VARCHAR (MAX),BILL_NO VARCHAR(MAX), REF_NO VARCHAR(MAX),     
			VOUCHER_NO VARCHAR(MAX), VD_ID VARCHAR(MAX), VOUCHER_TYPE VARCHAR(MAX),     
			VOUCHER_TYPE_ALIAS VARCHAR(MAX), QUANTITY NUMERIC(10,2), X_TYPE VARCHAR(2),     
			VS_AC_NAME VARCHAR(100), VS_NARRATION VARCHAR(MAX), VS_DEBIT_AMOUNT NUMERIC(14,2),     
			VS_CREDIT_AMOUNT NUMERIC(14,2), NARRATION VARCHAR(MAX), OPENING NUMERIC(14,2),     
			DEBIT_AMOUNT NUMERIC(14,2), CREDIT_AMOUNT NUMERIC(14,2), CLOSING NUMERIC(14,2),
            DEPT_ID VARCHAR(5), HEAD_CODE VARCHAR(50) ) 
            
	-- TEMP TABLE TO STORED THE LIST OF LOCATIONS CURRENTLY SELECTED
	-- JOIN THIS TABLE IN EACH QUERY TO GET THE RESULT FOR SINGLE, MULTIPLE OR ALL LOCATIONS
	DECLARE @LOCLISTC TABLE ( DEPT_ID CHAR(4) )
	
	PRINT 'LEDGER-1'	
	SELECT TOP 1 @CCONSIDERPENDINGPACKSLIP=VALUE FROM CONFIG WHERE CONFIG_OPTION='CONSIDER_PENDING_PACKSLIP_IN_LEDGER'
	
	PRINT 'LEDGER-2'
		
		
	IF @CDEPTID <> ''
		INSERT @LOCLISTC VALUES ( @CDEPTID )
	ELSE
	BEGIN
		IF EXISTS ( SELECT TOP 1 DEPT_ID FROM ACT_FILTER_LOC WHERE SP_ID = @@SPID )
			INSERT @LOCLISTC
			SELECT DEPT_ID FROM ACT_FILTER_LOC WHERE SP_ID = @@SPID
		ELSE
			INSERT @LOCLISTC
			SELECT DEPT_ID FROM LOCATION WHERE LOC_TYPE=1 AND DEPT_ID=MAJOR_DEPT_ID
	END

	PRINT 'LEDGER-3'
	
	IF CURSOR_STATUS('GLOBAL','MULTILEDGER') IN (0,1)
	BEGIN
		CLOSE MULTILEDGER
		DEALLOCATE MULTILEDGER
	END

	IF OBJECT_ID('TEMPDB..#TMPWPS','U') IS NOT NULL
		DROP TABLE #TMPWPS
		
	SELECT a.location_Code  AS DEPT_ID, 'WPS'+A.PS_ID AS VM_ID,PS_NO,PS_DT,SUBTOTAL AS AMOUNT ,CONVERT(VARCHAR(400),'') AS AC_NAME
	INTO #TMPWPS FROM WPS_MST A WHERE 1=2
			
	IF ISNULL(@CCONSIDERPENDINGPACKSLIP,'')='1'
	BEGIN
		IF OBJECT_ID('TEMPDB..#TMPLM','U') IS NOT NULL
			DROP TABLE #TMPLM
		
		SELECT AC_CODE INTO #TMPLM FROM LM01106 WHERE 1=2
			
		IF @CACCODE = '' 
			INSERT #TMPLM
			SELECT AC_CODE FROM LM01106 WHERE PRINT_LEDGER = 1        
		ELSE
			INSERT #TMPLM
			SELECT @CACCODE AS AC_CODE 
				
		INSERT #TMPWPS
		SELECT a.location_Code  AS DEPT_ID, 'WPS'+A.PS_ID AS VM_ID,PS_NO,PS_DT,SUM(RATE*QUANTITY) AS SUBTOTAL,
		AC_NAME AS AMOUNT 
		FROM WPS_MST A
		JOIN WPS_DET D ON A.PS_ID=D.PS_ID
		LEFT OUTER JOIN 
		(SELECT A.PS_ID FROM IND01106 A JOIN WPS_MST B ON A.PS_ID=B.PS_ID
		 JOIN INM01106 C ON C.INV_ID=A.INV_ID
		 JOIN #TMPLM E ON E.AC_CODE=C.AC_CODE WHERE 
		 C.CANCELLED=0 AND B.CANCELLED=0 AND PS_DT BETWEEN @DFROMDT AND @DTODT  GROUP BY A.PS_ID) B ON A.PS_ID=B.PS_ID
		JOIN LM01106 C ON C.AC_CODE=A.AC_CODE
		JOIN #TMPLM E ON E.AC_CODE=C.AC_CODE
		WHERE PS_DT BETWEEN @DFROMDT AND @DTODT AND CANCELLED=0 AND B.PS_ID IS NULL
		GROUP BY A.PS_ID,PS_NO,PS_DT,AC_NAME
		
	END
		
	IF @CACCODE = ''  -- IN CASE THE SUPPLIED AC_CODE IS EMPTY THEN IT IS IN MULTI LEDGER MODE        
	BEGIN        
		DECLARE MULTILEDGER CURSOR FOR        
		SELECT AC_CODE FROM LM01106 WHERE PRINT_LEDGER = 1        
	END        
	ELSE        
	BEGIN        
		DECLARE MULTILEDGER CURSOR FOR        
		SELECT @CACCODE        
	END  
		    
	OPEN MULTILEDGER        
	FETCH NEXT FROM MULTILEDGER INTO @CTMPACCODE         
	WHILE @@FETCH_STATUS = 0        
	BEGIN        
		SET @NOPENING = 0
		SET @NCLOSING = 0
 		  
--		DELETE FROM @LEDGERC        

		-- GETTING THE LEDGER ROW DATA        
		INSERT @LEDGERC    
		SELECT  @CTMPACCODE AS AC_CODE, X.VOUCHER_DT, X.RECON_DT , X.VM_ID, X.MRR_LIST, X.BILL_NO,X.REF_NO, X.VOUCHER_NO, X.VD_ID, X.VOUCHER_TYPE,     
			    X.VOUCHER_TYPE_ALIAS, X.QUANTITY,     
			    ( CASE WHEN Y.DEBIT_AMOUNT <> 0 THEN 'DR' ELSE 'CR' END ) AS X_TYPE,        
				X.VS_AC_NAME, X.VS_NARRATION, X.VS_DEBIT_AMOUNT, X.VS_CREDIT_AMOUNT, Y.NARRATION,         
				@NOPENING AS OPENING, Y.DEBIT_AMOUNT, Y.CREDIT_AMOUNT, 0 AS CLOSING  ,DEPT_ID ,HEAD_CODE       
		FROM         
		(         
			 SELECT   B.VOUCHER_DT, A.RECON_DT ,  B.VM_ID,B.MRR_LIST,(CASE WHEN ISNULL(B.BILL_NO,'')='' THEN ISNULL(VDN.REF_NO,'') ELSE B.BILL_NO END) AS [BILL_NO],  
			   B.REF_NO,B.VOUCHER_NO, A.VD_ID, D.VOUCHER_TYPE, D.VOUCHER_TYPE_ALIAS,         
			   B.QUANTITY, C.AC_NAME AS VS_AC_NAME, A.NARRATION AS VS_NARRATION,         
			   A.DEBIT_AMOUNT AS VS_DEBIT_AMOUNT, A.CREDIT_AMOUNT AS VS_CREDIT_AMOUNT,
			   (CASE WHEN ISNULL(A.COST_CENTER_DEPT_ID,'')='' THEN B.location_code  ELSE A.COST_CENTER_DEPT_ID END)  AS DEPT_ID ,
			   C.HEAD_CODE FROM VD01106 A            
			JOIN VM01106 B ON A.VM_ID = B.VM_ID       
			LEFT OUTER JOIN 
			(SELECT A.REF_NO,A.VD_ID FROM VDN01106 A JOIN VD01106 B ON A.VD_ID=B.VD_ID
			 JOIN VM01106 C ON C.VM_ID=B.VM_ID 
			 JOIN @LOCLISTC LOCLIST ON B.COST_CENTER_DEPT_ID = LOCLIST.DEPT_ID
			 WHERE C.VOUCHER_DT BETWEEN @DFROMDT AND @DTODT 
			 AND A.TS=(SELECT TOP 1 TS FROM VDN01106 WHERE VD_ID=A.VD_ID))
			 VDN ON VDN.VD_ID=A.VD_ID 
			JOIN LM01106 C ON A.AC_CODE = C.AC_CODE      
			JOIN VCHTYPE D ON B.VOUCHER_CODE = D.VOUCHER_CODE        
			JOIN @LOCLISTC LOCLIST ON B.location_code  = LOCLIST.DEPT_ID
			WHERE B.VOUCHER_DT BETWEEN @DFROMDT AND @DTODT        
			AND B.CANCELLED = 0 AND ISNULL(B.OP_ENTRY,0)=0  AND ISNULL(B.MEMO,0)=0 
			-- AND B.DEPT_ID = ( CASE WHEN @CDEPTID <> '' THEN @CDEPTID ELSE B.DEPT_ID END )        
			AND A.VM_ID IN         
			(         
				SELECT VM_ID FROM VD01106 WHERE AC_CODE = @CTMPACCODE        
			)        
			AND A.AC_CODE <> @CTMPACCODE        
			
			UNION 
			SELECT   PS_DT AS VOUCHER_DT,'' AS RECON_DT ,VM_ID,'' AS MRR_LIST,PS_NO AS [BILL_NO],  
		    '' AS REF_NO,PS_NO AS VOUCHER_NO,VM_ID AS VD_ID,'SALES' AS VOUCHER_TYPE,'SALE' AS VOUCHER_TYPE_ALIAS,         
		    1 AS QUANTITY,'' AS VS_AC_NAME,'' AS VS_NARRATION,         
		    0 AS VS_DEBIT_AMOUNT,0 AS VS_CREDIT_AMOUNT, DEPT_ID ,'' AS HEAD_CODE            
		    FROM #TMPWPS
		    

		) X        
		JOIN         
		(        
			SELECT A.VM_ID , A.NARRATION, A.DEBIT_AMOUNT, A.CREDIT_AMOUNT        
			FROM VD01106 A        
			JOIN VM01106 B ON A.VM_ID = B.VM_ID        
			JOIN @LOCLISTC LOCLIST ON B.location_code  = LOCLIST.DEPT_ID
			WHERE B.VOUCHER_DT BETWEEN @DFROMDT AND @DTODT        
			AND B.CANCELLED = 0 AND ISNULL(B.OP_ENTRY,0)=0  AND ISNULL(B.MEMO,0)=0 
			-- AND B.DEPT_ID = ( CASE WHEN @CDEPTID <> '' THEN @CDEPTID ELSE B.DEPT_ID END )        
			AND A.AC_CODE = @CTMPACCODE
			UNION 
			SELECT VM_ID,'PROFORMA INVOICE#'+PS_NO,AMOUNT AS DEBIT_AMOUNT,0 AS CREDIT_AMOUNT
			FROM #TMPWPS         
		) Y ON X.VM_ID = Y.VM_ID        
		ORDER BY X.VOUCHER_DT, X.VM_ID, (X.VS_DEBIT_AMOUNT + X.VS_CREDIT_AMOUNT) DESC        
		  
		DECLARE ABC CURSOR FOR        
		SELECT VM_ID FROM @LEDGERC WHERE AC_CODE = @CTMPACCODE GROUP BY VM_ID HAVING COUNT(*)>1
		    
		-- REMOVING THE REPETITIVE AMOUNT OF MASTER ENTRY
		OPEN ABC        
		FETCH NEXT FROM ABC INTO @CVMID        
		WHILE @@FETCH_STATUS = 0        
		BEGIN        
			SELECT TOP 1 @CVDID = VD_ID FROM @LEDGERC WHERE VM_ID = @CVMID AND AC_CODE = @CTMPACCODE        
			    
			UPDATE @LEDGERC SET DEBIT_AMOUNT = 0, CREDIT_AMOUNT = 0        
			WHERE VM_ID = @CVMID AND VD_ID <> @CVDID AND AC_CODE = @CTMPACCODE        
			    
			FETCH NEXT FROM ABC INTO @CVMID        
		END        
		CLOSE ABC        
		DEALLOCATE ABC        

		DELETE FROM @LEDGERC WHERE DEBIT_AMOUNT = 0 AND CREDIT_AMOUNT = 0 AND VS_DEBIT_AMOUNT = 0 AND VS_CREDIT_AMOUNT = 0    

		FETCH NEXT FROM MULTILEDGER INTO @CTMPACCODE         
	END        
	CLOSE MULTILEDGER        
	DEALLOCATE MULTILEDGER        


LAST:
	SELECT	A.AC_CODE, A.VOUCHER_DT, A.RECON_DT , A.VM_ID, A.MRR_LIST, A.BILL_NO, A.REF_NO, A.VOUCHER_NO, A.VD_ID, A.VOUCHER_TYPE,     
			A.VOUCHER_TYPE_ALIAS, A.QUANTITY,  A.X_TYPE,  A.VS_AC_NAME, A.VS_NARRATION, VS_DEBIT_AMOUNT,
			A.VS_CREDIT_AMOUNT, A.NARRATION, A.OPENING, 
			SUM(A.DEBIT_AMOUNT) AS DEBIT_AMOUNT, SUM(A.CREDIT_AMOUNT) AS CREDIT_AMOUNT,  
			A.CLOSING, B.AC_NAME, B.ADDRESS0, B.ADDRESS1, B.ADDRESS2, B.AREA_NAME, 
			B.PINCODE, B.CITY, B.STATE, B.PAN_NO, B.PHONES_R, B.PHONES_O, B.PHONES_FAX, B.MOBILE, 
			B.CST_NO, B.SST_NO, B.TIN_NO     , C.AC_NAME AS BROKER_AC_NAME,A.DEPT_ID ,A.HEAD_CODE
	FROM @LEDGERC A 
	JOIN LMV01106 B ON A.AC_CODE = B.AC_CODE  
	LEFT OUTER JOIN LM01106 C  ON B.BROKER_AC_CODE = ISNULL(C.AC_CODE, '0000000000') --NEW ADDED   
--	WHERE ( A.DEBIT_AMOUNT <> 0 OR A.CREDIT_AMOUNT <> 0 OR A.VS_DEBIT_AMOUNT <> 0 OR A.VS_CREDIT_AMOUNT <> 0 )    
	GROUP BY A.AC_CODE, A.VOUCHER_DT, A.RECON_DT , A.VM_ID, A.MRR_LIST, A.BILL_NO, A.REF_NO, A.VOUCHER_NO, A.VD_ID, A.VOUCHER_TYPE,     
			A.VOUCHER_TYPE_ALIAS, A.QUANTITY,  A.X_TYPE,  A.VS_AC_NAME, A.VS_NARRATION, 
			A.NARRATION, A.OPENING,   A.CLOSING, B.AC_NAME, B.ADDRESS0, B.ADDRESS1, B.ADDRESS2, 
			B.AREA_NAME, B.PINCODE, B.CITY, B.STATE, B.PAN_NO, B.PHONES_R, B.PHONES_O, 
			B.PHONES_FAX, B.MOBILE, B.CST_NO, B.SST_NO, B.TIN_NO , A.VS_CREDIT_AMOUNT, 
			A.VS_DEBIT_AMOUNT, C.AC_NAME,A.DEPT_ID ,A.HEAD_CODE
	ORDER BY B.AC_NAME, A.VOUCHER_DT, A.VM_ID ,A.DEPT_ID ,A.X_TYPE DESC

END
