create PROCEDURE SAVETRAN_BUYERORDER
(
	@NUPDATEMODE		NUMERIC(1,0),
	@NSPID				varchar(50),
	@CMEMONOPREFIX		VARCHAR(50),
	@CFINYEAR			VARCHAR(10),
	@CMACHINENAME		VARCHAR(100)='',
	@CWINDOWUSERNAME	VARCHAR(100)='',
	@CWIZAPPUSERCODE	VARCHAR(10)='0000000',
	@CXNMEMOID			VARCHAR(40)='',
	@BGEN_BARCODE		BIT=0	,
	@bCalledfromAro BIT=0
)
--WITH 
AS
BEGIN
    DECLARE @CTEMPDBNAME			VARCHAR(100),
			@CMASTERTABLENAME		VARCHAR(100),
			@CDETAILTABLENAME1		VARCHAR(100),
			@CDETAILTABLENAME2		VARCHAR(100),
			@CTEMPMASTERTABLENAME	VARCHAR(100),
			@CTEMPDETAILTABLENAME1	VARCHAR(100),
			@CTEMPDETAILTABLENAME2	VARCHAR(100),
			@CTEMPDETAILTABLENAME3	VARCHAR(100),
			@CTEMPDETAILTABLENAME4	VARCHAR(100),
			@CTEMPMASTERTABLE		VARCHAR(100),
			@CTEMPDETAILTABLE1		VARCHAR(100),
			@CTEMPDETAILTABLE2		VARCHAR(100),
			@CTEMPDETAILTABLE3		VARCHAR(100),
			@CTEMPDETAILTABLE4		VARCHAR(100),
			@CERRORMSG				VARCHAR(500),
			@LDONOTUPDATESTOCK		BIT,
			@CKEYFIELD1				VARCHAR(50),
			@CKEYFIELDVAL1			VARCHAR(50),
			@CMEMONO				VARCHAR(20),
			@NMEMONOLEN				NUMERIC(20,0),
			@CMEMONOVAL				VARCHAR(50),
			@CMEMODEPTID			VARCHAR(4),
			@CLOCATIONID			VARCHAR(4),
			@CHODEPTID				VARCHAR(4),
			@CCMD					NVARCHAR(4000),
			@CCMDOUTPUT				NVARCHAR(4000),
			@NSAVETRANLOOP			BIT,
			@NSTEP					INT,
			@NBLANKROW              INT,
			@CPARTY_GSTN_NO VARCHAR(50),@CPARTYSTATECODE VARCHAR(50),@NPARTYTYPE INT,@DORDERDT DATETIME,
			@CLOCID				VARCHAR(4)

	DECLARE @CTEMPTABLE VARCHAR(100),@CTEMPTABLE1 VARCHAR(100),@CTEMPTABLE2 VARCHAR(100),@BUNIQUE_CODING_EXISTS BIT
	   ,@CSERIAL_NO CHAR(10),@CROW_ID VARCHAR(50),@BNORMALIZE BIT,@NQUANTITY NUMERIC(10,3)
	   ,@BGEN_PCODE BIT
	   ,@CFIN_PREFIX VARCHAR(2),@CORD_PREFIX VARCHAR(3),@CMEMO_SERIES VARCHAR(10),@CBARCODE_SERIES VARCHAR(10)
	   ,@CBARCODE_PREFIX VARCHAR(20),@CNEWPRODUCT_CODE VARCHAR(50)
	   ,@BBARCODE_EXISTS BIT,@CNEW_ROWID VARCHAR(50),@CCUR_LOC_ID VARCHAR(2)
	   , @BNEGSTOCKFOUND bit
	

	
	
	
	DECLARE @OUTPUT TABLE(ERRMSG VARCHAR(2000), MEMO_ID VARCHAR(100))

	SET @NSTEP = 0		-- SETTTING UP ENVIRONMENT
	
	-- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
	SET @CTEMPDBNAME = ''

	SET @CMASTERTABLENAME	= 'WSL_ORDER_MST'
	SET @CDETAILTABLENAME1	= 'WSL_ORDER_DET'
	SET @CDETAILTABLENAME2	= 'TDD01106'
	
	SET @CTEMPMASTERTABLENAME	= 'WSLORD_WSL_ORDER_MST_UPLOAD'
	SET @CTEMPDETAILTABLENAME1	= 'WSLORD_WSL_ORDER_det_UPLOAD'
	SET @CTEMPDETAILTABLENAME2	= 'WSLORD_TDD01106_UPLOAD'
	SET @CTEMPDETAILTABLENAME3	= 'WSLORD_WSL_ORDER_ADV_RECEIPT_UPLOAD'
	SET @CTEMPDETAILTABLENAME4	= 'WSLORD_WSL_ORDER_BOM_UPLOAD'
	
	SET @CTEMPMASTERTABLE	= @CTEMPDBNAME + @CTEMPMASTERTABLENAME
	SET @CTEMPDETAILTABLE1	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME1
	SET @CTEMPDETAILTABLE2	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME2
	SET @CTEMPDETAILTABLE3	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME3
	SET @CTEMPDETAILTABLE4	= @CTEMPDBNAME + @CTEMPDETAILTABLENAME4
		
	SET @CERRORMSG			= ''
	SET @LDONOTUPDATESTOCK	= 0
	SET @CKEYFIELD1			= 'ORDER_ID'
	SET @CMEMONO			= 'ORDER_NO'
	SET @NMEMONOLEN			= 10
	
	
	select @CLOCID=location_code from WSLORD_WSL_ORDER_MST_UPLOAD where SP_ID=@NSPID 
	
		SELECT @CLOCATIONID=@CLOCID
		
	SELECT @CHODEPTID		= [VALUE] FROM CONFIG WHERE CONFIG_OPTION='HO_LOCATION_ID'		

    SET @CCUR_LOC_ID= @CLOCATIONID
    SET @CMEMONOPREFIX=@CCUR_LOC_ID+@CCUR_LOC_ID

	--Remove config changes Discuss with sir with new Patten if use config any client Please details share with sanjiv sir and change it
	--DECLARE @CINHOUSE_PROCESSING_FOR_RETAIL_BO VARCHAR(5)
	--SELECT TOP 1 @CINHOUSE_PROCESSING_FOR_RETAIL_BO=VALUE  FROM CONFIG WHERE CONFIG_OPTION='INHOUSE_PROCESSING_FOR_RETAIL_BO'

	IF OBJECT_ID('TEMPDB..#BARCODE_NETQTY','U') IS NOT NULL
			DROP TABLE #BARCODE_NETQTY

		SELECT DEPT_ID,BIN_ID,PRODUCT_CODE,quantity_in_stock AS XN_QTY
		,CONVERT(BIT,0) AS new_entry
		INTO #BARCODE_NETQTY FROM PMT01106 (NOLOCK) WHERE 1=2

	BEGIN TRANSACTION
	
	BEGIN TRY
	
	
	    IF ISNULL(@CLOCATIONID,'')='' and @NUPDATEMODE in(1,2)
		 BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
			GOTO END_PROC    
		 END
	    --WHEN ROW IS BLANK
	     SET  @NSTEP=5
	    
	     SET @CCMD = 'IF OBJECT_ID ('''+@CTEMPDETAILTABLE1+''',''U'') IS NOT NULL
	     BEGIN
		    DELETE FROM ' + @CTEMPDETAILTABLE1 +' WHERE ISNULL(ARTICLE_CODE,'''')=''''    and sp_id='''+@NSPID +'''
		 END '  
		 PRINT @CCMD 
		 EXEC SP_EXECUTESQL @CCMD
		 
		SET @NSTEP = 10	

		IF @nUpdatemode=1
			UPDATE WSLORD_WSL_ORDER_MST_UPLOAD WITH (ROWLOCK) SET fin_year='01'+dbo.FN_GETFINYEAR(order_dt)
			WHERE sp_id=@nSpid AND ISNULL(fin_year,'')=''

		IF ISNULL(@CXNMEMOID,'') = '' AND @NUPDATEMODE IN (3,4)
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' MEMO ID REQUIRED '
			GOTO END_PROC  		
		END
		
		IF @NUPDATEMODE=4
			GOTO LBLLINKADVANCES

		

	
		IF @NUPDATEMODE=3
		BEGIN
		    
			If  (SELECT count(*) FROM WSL_ORDER_DET A (NOLOCK)
			           JOIN POD01106 B (NOLOCK) ON A.PRODUCT_CODE =B.PRODUCT_CODE
					   JOIN POM01106 C (NOLOCK)  ON B.PO_ID=C.PO_ID 
					   WHERE C.CANCELLED =0 and a.order_id=@CXNMEMOID)>0
			begin
			   
			   set @CERRORMSG='po has been generated you cannot cancel'
			   GOTO END_PROC
			end

			SET @CCMD=N'DELETE FROM WSL_ORDER_ADV_RECEIPT WHERE ORDER_ID='''+@CXNMEMOID+''''
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD
			
			EXEC SP3S_UPDATE_CUSTOMERBALANCES @CXNMEMOID,'WSLORD',@CERRORMSG OUTPUT ,1

			IF ISNULL(@CERRORMSG,'')<>''
			GOTO END_PROC
			
			SET @NSTEP = 15		
			SET @CCMD=N' UPDATE WSL_ORDER_MST SET CANCELLED=1,LAST_UPDATE=GETDATE() WHERE ORDER_ID='''+@CXNMEMOID+''''
			EXEC SP_EXECUTESQL @CCMD
			
			
			
			GOTO END_PROC
		END
		
		SET @NSTEP = 17
		
		-- GETTING DEPT_ID FROM TEMP MASTER TABLE
		SET @CCMD = 'SELECT @CMEMODEPTID = DEPT_ID, @CKEYFIELDVAL1 = ORDER_ID FROM ' + @CTEMPMASTERTABLE +' where sp_id ='''+@NSPID+''' '
		EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(2) OUTPUT, @CKEYFIELDVAL1 VARCHAR(50) OUTPUT', 
								  @CMEMODEPTID OUTPUT, @CKEYFIELDVAL1 OUTPUT
		IF (@CMEMODEPTID IS NULL)
		BEGIN
			  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED...'
			  --SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
			  GOTO END_PROC  		
		END
		
		-- START UPDATING XN TABLES	
		IF @NUPDATEMODE = 1 -- ADDMODE	
		BEGIN	
			SET @NSTEP = 20		-- GENERATING NEW KEY
			
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN
				-- GENERATING NEW MRR_NO		
				SET @NSAVETRANLOOP=0
				WHILE @NSAVETRANLOOP=0
				BEGIN
					EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,
									@CFINYEAR,0, @CMEMONOVAL OUTPUT   
					
					SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+' 
											WHERE '+@CMEMONO+'='''+@CMEMONOVAL+''' 
											AND FIN_YEAR = '''+@CFINYEAR+''' )
									SET @NLOOPOUTPUT=0
								ELSE
									SET @NLOOPOUTPUT=1'
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT
				END

				IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'	
					  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
					  GOTO END_PROC  		
				END

				SET @NSTEP = 30		-- GENERATING NEW ID

				-- GENERATING NEW ORDER ID
				SET @CKEYFIELDVAL1 = @CLOCATIONID + RIGHT(@CFINYEAR,2)+REPLICATE('0', (22-LEN(@CLOCATIONID + RIGHT(@CFINYEAR,2)))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
				
				IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
				BEGIN
					  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					  GOTO END_PROC
				END
				
				SET @NSTEP = 40		-- UPDATING NEW ID INTO TEMP TABLES

				-- UPDATING NEWLY GENERATED PO NO AND PO ID IN ORDER MST AND ORDER DET TEMP TABLES
				SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' + 
							@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' where sp_id ='''+@NSPID+''' '
				EXEC SP_EXECUTESQL @CCMD
			
				SET @CCMD = 'UPDATE ' + @CTEMPDETAILTABLE1 + ' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''' where sp_id ='''+@NSPID+''' '
				EXEC SP_EXECUTESQL @CCMD
				
			    
			END
			
		END					-- END OF ADDMODE
		ELSE				-- CALLED FROM EDITMODE
		BEGIN				-- START OF EDITMODE
		
			SET @NSTEP = 50		-- GETTING ID INFO FROM TEMP TABLE
			
			-- GETTING ORDER_ID WHICH IS BEING EDITED
			SET @CCMD = 'SELECT @CKEYFIELDVAL1 = ORDER_ID, @CMEMONOVAL = ORDER_NO FROM ' + @CTEMPMASTERTABLE +' where sp_id ='''+@NSPID+''''
			EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT', 
							   @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT
			IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )
			BEGIN
				  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'
				  -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'
				  
				  GOTO END_PROC  		
			END
			
			SET @NSTEP = 60		-- UPDATING SENT_TO_HO FLAG TEMP TABLE
			
			-- UPDATING SENTTOHO FLAG
			SET @CCMD = N'UPDATE ' + @CTEMPMASTERTABLE + ' SET SENT_TO_HO = 0,LAST_UPDATE=GETDATE()  where sp_id ='''+@NSPID+''' '
			EXEC SP_EXECUTESQL @CCMD
			
			
--SELECT a.order_id ,a.customer_code  ,c.customer_code  
--								FROM WSL_ORDER_MST A 
--								JOIN WSL_ORDER_ADV_RECEIPT B ON A.ORDER_ID=B.ORDER_ID
--								JOIN ARC01106 C ON B.ADV_REC_ID=C.ADV_REC_ID

--								WHERE A.ORDER_ID='H10112200000H1H1000014' AND A.CUSTOMER_CODE<>C.CUSTOMER_CODE
			/*VALIDATION FOR CUSTOMER: CUSTOMER WHO HAS BOOKED ORDER SHOULD BE SAME WITH WHOM THE ADVANCE IS LINKED.*/
			SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' 
									FROM '+@CTEMPMASTERTABLE+' A 
									JOIN WSL_ORDER_ADV_RECEIPT B ON A.ORDER_ID=B.ORDER_ID
									JOIN ARC01106 C ON B.ADV_REC_ID=C.ADV_REC_ID
									WHERE A.ORDER_ID='''+@CKEYFIELDVAL1+''' AND A.CUSTOMER_CODE<>C.CUSTOMER_CODE and sp_id ='''+@NSPID+''')
						SET @CERRORMSG=''ADVANCE TO THIS ORDER BELONGS TO DIFFERENT CUSTOMER.CANNNOT SAVE.'''
			
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD,N'@CERRORMSG VARCHAR(500) OUTPUT',@CERRORMSG OUTPUT
			
			IF ISNULL(@CERRORMSG,'')<>''
				GOTO END_PROC

		EXEC SP3S_UPDATE_CUSTOMERBALANCES @CKEYFIELDVAL1,'WSLORD',@CERRORMSG OUTPUT ,1

		IF ISNULL(@CERRORMSG,'')<>''
		GOTO END_PROC
	
		END					-- END OF EDITMODE

		SET @NSTEP = 65

		SET @CCMD=N'UPDATE '+@CTEMPMASTERTABLE+' SET CONVERTED_BY_USER_CODE=NULL WHERE CONVERTED_BY_USER_CODE='''' and sp_id ='''+@NSPID+''''
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD
		
		-- CHECK WETHER THE MEMO ID IS STILL LATER
		IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
		BEGIN
			SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
			GOTO END_PROC
		END

		-- UPDATING MASTER TABLE (PIM01106) FROM TEMP TABLE
		SET @NSTEP = 70		-- UPDATING MASTER TABLE


		DECLARE @CWHERECLAUSE VARCHAR(1000)
        SET @CWHERECLAUSE = ' b.SP_ID='''+LTRIM(RTRIM((@NSPID)))+''' '

		EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPMASTERTABLENAME
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= @CKEYFIELD1
			, @BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@CWHERECLAUSE
	   
		-- UPDATING TRANSACTION TABLE (PID01106) FROM TEMP TABLE
		SET @NSTEP = 75		-- UPDATING TRANSACTION TABLE
		/*
		DELETE A FROM SKU_BO A
		JOIN WSL_ORDER_MST B ON A.ORDER_ID= B.ORDER_ID 
		JOIN WSL_ORDER_DET C ON B.ORDER_ID = C.ORDER_ID  
		WHERE A.ORDER_ID= @CKEYFIELDVAL1 AND ISNULL(C.ORDER_TYPE,0)=1
		*/
		SET @CCMD = N'DECLARE  @DETROW TABLE ( OLD_ROW_ID	VARCHAR(40), NEW_ROW_ID	VARCHAR(40))
		INSERT @DETROW 
		SELECT ROW_ID,''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID()) AS NEW_ROW_ID FROM ' + @CTEMPDETAILTABLE1 + ' WHERE  LEFT(ROW_ID,5) = ''LATER''  and sp_id ='''+LTRIM(RTRIM((@NSPID)))+'''
		UPDATE A SET A.ROW_ID = B.NEW_ROW_ID FROM ' + @CTEMPDETAILTABLE1 + ' A JOIN @DETROW B ON A.ROW_ID = B.OLD_ROW_ID where SP_ID='''+LTRIM(RTRIM((@NSPID)))+'''
		UPDATE A SET A.TMD_ROW_ID = B.NEW_ROW_ID FROM ' + @CTEMPDETAILTABLE2 + ' A JOIN @DETROW B ON A.TMD_ROW_ID = B.OLD_ROW_ID where SP_ID='''+LTRIM(RTRIM((@NSPID)))+'''
		UPDATE A SET A.REF_ROW_ID = B.NEW_ROW_ID FROM ' + @CTEMPDETAILTABLE4 + ' A JOIN @DETROW B ON A.REF_ROW_ID = B.OLD_ROW_ID where SP_ID='''+LTRIM(RTRIM((@NSPID)))+''' '
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD

		
		
		SET @NSTEP = 80
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE2 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE LEFT(ROW_ID,5) = ''LATER'' and SP_ID='''+LTRIM(RTRIM((@NSPID)))+''' '
		EXEC SP_EXECUTESQL @CCMD
		
		
		SET @NSTEP = 83
		SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE4 + ' SET ROW_ID = ''' + @CLOCATIONID + ''' + CONVERT(VARCHAR(40), NEWID())
					  WHERE LEFT(ROW_ID,5) = ''LATER'' and SP_ID='''+LTRIM(RTRIM((@NSPID)))+''''
		EXEC SP_EXECUTESQL @CCMD
        
        
		-- DELETING EXISTING ENTRIES FROM DETAILS TABLE WHERE ROW_ID NOT FOUND IN TEMPTABLE
		SET @NSTEP = 86		-- UPDATING TRANSACTION TABLE - DELETING EXISTING ENTRIES
		SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME1 + ' 
					WHERE CANCELLED=0 AND ' + @CKEYFIELD1 + ' = ''' + @CKEYFIELDVAL1 + ''' 
					AND ROW_ID NOT IN (SELECT ROW_ID FROM ' + @CTEMPDETAILTABLE1 + ' where SP_ID='''+LTRIM(RTRIM((@NSPID)))+''' )'
		EXEC SP_EXECUTESQL @CCMD
		
		
		SET @NSTEP = 90
		SET @CCMD = N'DELETE A
					FROM  WSL_ORDER_BOM A
					JOIN '+@CTEMPDETAILTABLE1+' B ON A.REF_ROW_ID=B.ROW_ID
					WHERE  
					A.ROW_ID NOT IN (SELECT ROW_ID FROM ' + @CTEMPDETAILTABLE4 + ' where SP_ID='''+LTRIM(RTRIM((@NSPID)))+''')
					AND B.ORDER_ID='''+@CKEYFIELDVAL1+''' and SP_ID='''+LTRIM(RTRIM((@NSPID)))+''''
		PRINT @CCMD			
		EXEC SP_EXECUTESQL @CCMD
		
		
		SET @NSTEP = 95
		SET @CCMD = N'DELETE FROM ' + @CDETAILTABLENAME2 + ' 
					WHERE  TMD_ROW_ID IN (SELECT DISTINCT ROW_ID FROM ' + @CTEMPDETAILTABLE1 + ' where SP_ID='''+LTRIM(RTRIM((@NSPID)))+''') 
					 '
		EXEC SP_EXECUTESQL @CCMD
		
		
		IF @BGEN_BARCODE=1
		BEGIN
			--FOR GENERATING BARCODE, FIRST NORMALIZE AND THEN GENERATE PRODUCT_CODE
			--CHECK IF THE ARTICLE IS DISCRETE AND ITS CODING SCHEME IS UNIQUE FOR NORMALIZATION
			SET @NSTEP = 100
			SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM '+@CTEMPDETAILTABLE1+' A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE
								  WHERE A.QUANTITY>1 AND B.DISCON<>2 and SP_ID='''+LTRIM(RTRIM((@NSPID)))+''')
						SET @BUNIQUE_CODING_EXISTS=1'
			PRINT @CCMD			
			EXEC SP_EXECUTESQL @CCMD,N'@BUNIQUE_CODING_EXISTS BIT OUTPUT',@BUNIQUE_CODING_EXISTS OUTPUT
			
			--SELECT 'UNIQUE CODING EXISTS',@BUNIQUE_CODING_EXISTS
			/*
			ARTICLE WITH UNIQUE CODING SCHEME EXISTS AND ITS QUANTITY IS MORE THAN 1 ,THUS WE NEED TO NORMALIZE THE DATA FIRST
			POINTS TO CONSIDER WHILE NORMALIZATION
			1. SERIAL NUMBER NEEDS TO BE UPDATED IN SEQUENCE
			*/
			IF @BUNIQUE_CODING_EXISTS=1
			BEGIN
				SET @NSTEP = 103
				SET @CSERIAL_NO=0
				IF CURSOR_STATUS('GLOBAL','CUR_NORMALIZE') IN (0,1)
				BEGIN
					CLOSE CUR_NORMALIZE
					DEALLOCATE CUR_NORMALIZE
				END
				
				SET @NSTEP = 106
				SET @CCMD=N'DECLARE CUR_NORMALIZE CURSOR FOR SELECT ROW_ID FROM '+@CTEMPDETAILTABLE1+' where SP_ID='''+LTRIM(RTRIM((@NSPID)))+''' ORDER BY SERIAL_NO ASC'
				PRINT  @CCMD
				EXEC SP_EXECUTESQL @CCMD
				OPEN CUR_NORMALIZE
				FETCH NEXT FROM CUR_NORMALIZE INTO @CROW_ID
				WHILE @@FETCH_STATUS=0
				BEGIN
					
					SET @NSTEP = 110
					SET @CSERIAL_NO=@CSERIAL_NO+1
					--SELECT 'UNIQUE ROW',@CSERIAL_NO,@CROW_ID
					---CHECK IF THIS ROW
					SET @BNORMALIZE=0
					SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM '+@CTEMPDETAILTABLE1+' A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE
										  WHERE B.DISCON<>2 AND A.QUANTITY>1 AND ROW_ID='''+@CROW_ID+''' and SP_ID='''+LTRIM(RTRIM((@NSPID)))+''')
								SET @BNORMALIZE=1'
					PRINT @CCMD			
					EXEC SP_EXECUTESQL @CCMD,N'@BNORMALIZE BIT OUTPUT',@BNORMALIZE OUTPUT
					--SELECT 'NORMALIZE THIS ROW',@BNORMALIZE
					IF @BNORMALIZE=1
					BEGIN
						SET @NSTEP = 115
						--THIS ROW NEEDS TO BE NORMALIZED
						SET @CTEMPTABLE='_'+@CTEMPDETAILTABLE1
						SET @CTEMPTABLE1='_'+@CTEMPDETAILTABLE2
						SET @CTEMPTABLE2='_'+@CTEMPDETAILTABLE4

						SET @CCMD=N'IF OBJECT_ID('''+@CTEMPTABLE+''',''U'') IS NOT NULL
										DROP TABLE '+@CTEMPTABLE+'
									IF OBJECT_ID('''+@CTEMPTABLE1+''',''U'') IS NOT NULL
										DROP TABLE '+@CTEMPTABLE1+'
									IF OBJECT_ID('''+@CTEMPTABLE2+''',''U'') IS NOT NULL
										DROP TABLE '+@CTEMPTABLE2+'	
										
																													
									SELECT * INTO '+@CTEMPTABLE+' FROM '+@CTEMPDETAILTABLE1+' WHERE ROW_ID='''+@CROW_ID+'''
									SELECT * INTO '+@CTEMPTABLE1+' FROM '+@CTEMPDETAILTABLE2+' WHERE TMD_ROW_ID='''+@CROW_ID+'''
									SELECT * INTO '+@CTEMPTABLE2+' FROM '+@CTEMPDETAILTABLE4+' WHERE REF_ROW_ID='''+@CROW_ID+'''
									SELECT @NQUANTITY=QUANTITY FROM '+@CTEMPDETAILTABLE1+' WHERE ROW_ID='''+@CROW_ID+''' and sp_id ='''+@NSPID+''' '
						PRINT @CCMD
						EXEC SP_EXECUTESQL @CCMD,N'@NQUANTITY NUMERIC(10,3) OUTPUT',@NQUANTITY OUTPUT
						
						SET @NSTEP = 120
						SET @CCMD=N'UPDATE '+@CTEMPDETAILTABLE1+' SET RFNET=(RFNET/QUANTITY),DISCOUNT_AMOUNT=(DISCOUNT_AMOUNT/QUANTITY),QUANTITY=1,SERIAL_NO='+LTRIM(RTRIM(@CSERIAL_NO))+' WHERE ROW_ID='''+@CROW_ID+''' and sp_id ='''+@NSPID+'''
									UPDATE '+@CTEMPTABLE+' SET RFNET=(RFNET/QUANTITY),DISCOUNT_AMOUNT=(DISCOUNT_AMOUNT/QUANTITY),QUANTITY=1 WHERE ROW_ID='''+@CROW_ID+''''
						PRINT @CCMD
						EXEC SP_EXECUTESQL @CCMD
						
						WHILE @NQUANTITY>1
						BEGIN
						
							SET @NSTEP = 122
							SET @CSERIAL_NO=@CSERIAL_NO+1
							SET @CNEW_ROWID=@CLOCATIONID+CONVERT(VARCHAR(40),NEWID())
							SET @CCMD=N'UPDATE '+@CTEMPTABLE+' SET ROW_ID='''+@CNEW_ROWID+''',SERIAL_NO='+LTRIM(RTRIM(@CSERIAL_NO))
							PRINT @CCMD
							EXEC SP_EXECUTESQL @CCMD	
							
							SET @NSTEP = 125
							SET @CCMD=N'UPDATE '+@CTEMPTABLE1+' SET TMD_ROW_ID='''+@CNEW_ROWID+''',ROW_ID='''+@CLOCATIONID+'''+CONVERT(VARCHAR(40),NEWID())'
							PRINT @CCMD
							EXEC SP_EXECUTESQL @CCMD
							
							SET @NSTEP = 128
							SET @CCMD=N'UPDATE '+@CTEMPTABLE2+' SET REF_ROW_ID='''+@CNEW_ROWID+''',ROW_ID='''+@CLOCATIONID+'''+CONVERT(VARCHAR(40),NEWID())'
							PRINT @CCMD
							EXEC SP_EXECUTESQL @CCMD	
							
							
						
							
							SET @NSTEP = 130
							EXEC UPDATEMASTERXN--UPDATEMASTERXN 
								  @CSOURCEDB	= ''
								, @CSOURCETABLE = @CTEMPTABLE
								, @CDESTDB		= ''
								, @CDESTTABLE	= @CTEMPDETAILTABLE1
								, @CKEYFIELD1	= 'ROW_ID'
								, @BALWAYSUPDATE = 1
								,@CFILTERCONDITION=@CWHERECLAUSE
								
							--SELECT * FROM WSL_ORDER_DET WHERE ORDER_ID='0101118000000101000075'
							
							SET @NSTEP = 135	
							EXEC UPDATEMASTERXN--UPDATEMASTERXN 
								  @CSOURCEDB	= ''
								, @CSOURCETABLE = @CTEMPTABLE1
								, @CDESTDB		= ''
								, @CDESTTABLE	= @CTEMPDETAILTABLE2
								, @CKEYFIELD1	= 'ROW_ID'
								, @BALWAYSUPDATE = 1
								,@CFILTERCONDITION=@CWHERECLAUSE
							
							SET @NSTEP = 140	
							EXEC UPDATEMASTERXN--UPDATEMASTERXN 
								  @CSOURCEDB	= ''
								, @CSOURCETABLE = @CTEMPTABLE2
								, @CDESTDB		= ''
								, @CDESTTABLE	= @CTEMPDETAILTABLE4
								, @CKEYFIELD1	= 'ROW_ID'
								, @BALWAYSUPDATE = 1	
								,@CFILTERCONDITION=@CWHERECLAUSE									
						
						
					
							SET @NQUANTITY=@NQUANTITY-1
						END	
						
						SET @NSTEP = 145
						SET @CCMD=N'IF OBJECT_ID('''+@CTEMPTABLE+''',''U'') IS NOT NULL
										DROP TABLE '+@CTEMPTABLE
						PRINT @CCMD 
						EXEC SP_EXECUTESQL @CCMD	
						
					END
					ELSE 
					BEGIN
						SET @NSTEP = 150
						SET @CCMD=N'UPDATE '+@CTEMPDETAILTABLE1+' SET SERIAL_NO='+LTRIM(RTRIM(@CSERIAL_NO))+' WHERE ROW_ID='''+@CROW_ID+''' and sp_id ='''+@NSPID+''' '
						PRINT @CCMD
						EXEC SP_EXECUTESQL @CCMD
						
					END
					
				FETCH NEXT FROM CUR_NORMALIZE INTO @CROW_ID
				END
				CLOSE CUR_NORMALIZE
				DEALLOCATE CUR_NORMALIZE
			END	
			
			SET @NSTEP = 155
			----NOW GENERATE BARCODES 
			/*CHECK IF ROW EXISTS FOR BARCODE GENERATION*/
			SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM '+@CTEMPDETAILTABLE1+' WHERE ISNULL(PRODUCT_CODE,'''')='''' and sp_id ='''+@NSPID+''' )
						SET @BGEN_PCODE=1'
			PRINT @CCMD
			EXEC SP_EXECUTESQL @CCMD,N'@BGEN_PCODE BIT OUTPUT',@BGEN_PCODE OUTPUT
			
			--SELECT 'GENERATE PRODUCT CODE',@BGEN_PCODE
			--SET @CMEMONOPREFIX='HO'
			IF @BGEN_PCODE=1
			BEGIN
				SET @NSTEP = 160	
				---BARCODE NEEDS TO BE GENERATED
				SET @CORD_PREFIX='O'
				SET @CFIN_PREFIX=RIGHT(@CFINYEAR,2)
				SET @CCMD=N'SELECT @CMEMO_SERIES=CONVERT(INT,LTRIM(RTRIM(RIGHT(ORDER_NO,6)))) FROM '+@CTEMPMASTERTABLENAME	+' where sp_id='''+@NSPID+'''  '
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD,N'@CMEMO_SERIES VARCHAR(10) OUTPUT',@CMEMO_SERIES OUTPUT
				
				SET @NSTEP = 165
				IF ISNULL(@CORD_PREFIX,'')='' OR ISNULL(@CFIN_PREFIX,'')='' OR ISNULL(@CMEMO_SERIES,'')=''
				BEGIN
					SET @CERRORMSG='ERROR GENERATING BARCODES AS BARCODE PREFIX COULDNOT BE GENERATED.'
					GOTO END_PROC
				END
				
				SET @CBARCODE_PREFIX=@CLOCATIONID+@CORD_PREFIX+@CFIN_PREFIX+@CMEMO_SERIES+'-'

			
				--SELECT 'BARCODE PREFIX',@CBARCODE_PREFIX
				
				SET @NSTEP = 170
				SET @CCMD=N'SELECT @CBARCODE_SERIES=MAX(CONVERT(INT,LTRIM(RTRIM(REPLACE(PRODUCT_CODE,'''+@CBARCODE_PREFIX+''',''''))))) 
							FROM '+@CTEMPDETAILTABLE1+' where sp_id='''+@NSPID +''''
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD,N'@CBARCODE_SERIES VARCHAR(10) OUTPUT',@CBARCODE_SERIES OUTPUT
				
				
				SET @CBARCODE_SERIES=ISNULL(@CBARCODE_SERIES,0)
				
				IF CURSOR_STATUS('GLOBAL','CUR_UPDPCODES') IN (0,1)
				BEGIN
					CLOSE CUR_UPDPCODES
					DEALLOCATE CUR_UPDPCODES
				END
				
				SET @NSTEP = 175
				SET @CCMD=N'DECLARE CUR_UPDPCODES CURSOR FOR SELECT ROW_ID FROM '+@CTEMPDETAILTABLE1+' WHERE 
							ISNULL(PRODUCT_CODE,'''')='''' and sp_id='''+@NSPID+''' ORDER BY SERIAL_NO ASC '
				PRINT @CCMD
				EXEC SP_EXECUTESQL @CCMD
				OPEN CUR_UPDPCODES
				FETCH NEXT FROM CUR_UPDPCODES INTO @CROW_ID
				WHILE @@FETCH_STATUS=0
				BEGIN
					SET @NSTEP = 180
				  NEXT_PRODUCT_CODE:		
					SET @CBARCODE_SERIES=@CBARCODE_SERIES+1
					SET @CNEWPRODUCT_CODE=@CBARCODE_PREFIX+@CBARCODE_SERIES
					IF ISNULL(@CNEWPRODUCT_CODE,'')=''
					BEGIN
						SET @CERRORMSG='ERROR GENERATING PRODUCT_CODE..CANNOT PROCEED.'
						GOTO END_PROC
					END
					
					SET @NSTEP = 185
					
					SET @BBARCODE_EXISTS=0
					SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' FROM '+@CTEMPDETAILTABLE1+' WHERE PRODUCT_CODE='''+@CNEWPRODUCT_CODE+''' and sp_id='''+@NSPID+''' )
								   SET @BBARCODE_EXISTS=1'
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD,N'@BBARCODE_EXISTS BIT OUTPUT',@BBARCODE_EXISTS OUTPUT
					
					IF @BBARCODE_EXISTS=1
						GOTO NEXT_PRODUCT_CODE
					
					SET @NSTEP = 190	
					SET @CCMD=N'UPDATE '+@CTEMPDETAILTABLE1+' SET PRODUCT_CODE='''+@CNEWPRODUCT_CODE+''' WHERE ROW_ID='''+@CROW_ID+''' and sp_id='''+@NSPID+''' '		 
					PRINT @CCMD
					EXEC SP_EXECUTESQL @CCMD
				FETCH NEXT FROM CUR_UPDPCODES INTO @CROW_ID
				END
				CLOSE CUR_UPDPCODES
				DEALLOCATE CUR_UPDPCODES
				
			END
			
			SET @NSTEP = 195
			UPDATE WSL_ORDER_MST SET APPROVED=1 WHERE ORDER_ID=@CKEYFIELDVAL1
		END


		SET @NSTEP = 197
		
		DECLARE @BGSTMEMO BIT,@CGSTCUTOFFDATE VARCHAR(20),@DGSTDATE DATETIME
		DECLARE @DONOT_CALCULATE_GST_ADV_RECEIPT VARCHAR(10)
		SELECT TOP 1 @DONOT_CALCULATE_GST_ADV_RECEIPT=VALUE  FROM CONFIG WHERE CONFIG_OPTION='DONOT_CALCULATE_GST_ADV_RECEIPT'

		SELECT @DORDERDT = ORDER_DT FROM WSL_ORDER_MST WHERE ORDER_ID=@CKEYFIELDVAL1
		
		SET @BGSTMEMO=0
		SELECT @CGSTCUTOFFDATE=VALUE FROM CONFIG WHERE CONFIG_OPTION ='GST_CUT_OFF_DATE'
	    
		IF @CGSTCUTOFFDATE<>''
		BEGIN
			SELECT @DGSTDATE=CAST(@CGSTCUTOFFDATE AS DATETIME)
		    
			IF @DORDERDT>=@DGSTDATE
				SET @BGSTMEMO=1
		END
		
		IF @BGSTMEMO=1 AND ISNULL(@DONOT_CALCULATE_GST_ADV_RECEIPT,'')<>'1'
		BEGIN		
			DECLARE @NCOUNTHSN INT,@CSDNAME VARCHAR(500),@CARTICLENO VARCHAR(200)
			
			SET @CPARTY_GSTN_NO = ''
			
			DELETE FROM GST_TAXINFO_CALC WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))
			
			SET @NSTEP = 200
			
			SET @CCMD=N'SELECT '''' AS PRODUCT_CODE,'+LTRIM(RTRIM(STR(@NSPID)))+' AS SP_ID,B.HSN_CODE,
			A.WS_PRICE AS NET_VALUE,2 AS tax_method,ROW_ID,1 AS QUANTITY FROM '+@CTEMPDETAILTABLE1+' A
			JOIN '+@CTEMPMASTERTABLE+' d (NOLOCK) ON a.order_id=d.order_id and a.sp_id=d.sp_id 
			JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE
			JOIN SECTIOND C ON C.SUB_SECTION_CODE=B.SUB_SECTION_CODE
			where a.sp_id='''+@NSPID+''' '
			
			SET @NSTEP = 204
				print @CCMD
			INSERT GST_TAXINFO_CALC	( PRODUCT_CODE, SP_ID ,HSN_CODE,NET_VALUE,TAX_METHOD,ROW_ID,QUANTITY )  
			EXEC SP_EXECUTESQL @CCMD
		

		
			
			
			SET @CCMD=N'SELECT TOP 1 @CARTICLENO=ARTICLE_NO FROM '+@CTEMPDETAILTABLE1+' A
						JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE
						JOIN SECTIOND C ON C.SUB_SECTION_CODE=B.SUB_SECTION_CODE
						WHERE ISNULL(B.HSN_CODE,'''') IN ('''',''0000000000'') and a.sp_id='''+@NSPID+''''
			EXEC SP_EXECUTESQL @CCMD,N'@CARTICLENO VARCHAR(50) OUTPUT',@CARTICLENO OUTPUT
			
			IF ISNULL(@CARTICLENO,'')<>''
			BEGIN
				SELECT @CSDNAME=SUB_SECTION_NAME+'('+SECTION_NAME FROM SECTIOND A 
				JOIN ARTICLE B ON A.SUB_SECTION_CODE=B.SUB_SECTION_CODE
				JOIN SECTIONM C ON C.SECTION_CODE=A.SECTION_CODE
				WHERE ARTICLE_NO=@CARTICLENO
				
				SET @CERRORMSG='ARTICLE NO. :'+@CARTICLENO+' HAVING SUB SECTION :'+@CSDNAME+' IS HAVING BLANK HSN CODE....PLEASE CHECK'
				GOTO END_PROC
			END
						
			----- GENERATE HSN CODE AND GST% IF BARCODES ARE GENERATED FOR ALL ENTRIES
			SET @NSTEP = 205
			SET @CCMD=N'SELECT @NPARTYTYPE=MODE,@DORDERDT=ORDER_DT FROM '+@CTEMPDETAILTABLE1+' A
						JOIN '+@CTEMPMASTERTABLE+' B ON A.ORDER_ID=B.ORDER_ID and a.sp_id=b.sp_id 
						where a.sp_id='''+@NSPID+''''
						
			EXEC SP_EXECUTESQL @CCMD,N'@NPARTYTYPE INT OUTPUT,@DORDERDT DATETIME OUTPUT',@NPARTYTYPE OUTPUT,@DORDERDT OUTPUT
			
			
			SET @NSTEP = 207
			IF @NPARTYTYPE=1
				SET @CCMD=N'SELECT @CPARTY_GSTN_NO=AC_GST_NO,@CPARTYSTATECODE=AC_GST_STATE_CODE FROM '+@CTEMPMASTERTABLE+' A
							JOIN LMP01106 B ON A.AC_CODE=B.AC_CODE 
							where a.sp_id='''+@NSPID+''' '
			ELSE
				SET @CCMD=N'SELECT @CPARTY_GSTN_NO=ISNULL(CUS_GST_NO,''''),@CPARTYSTATECODE=CUS_GST_STATE_CODE FROM '+@CTEMPMASTERTABLE+' A 
							JOIN CUSTDYM B ON A.CUSTOMER_CODE=B.CUSTOMER_CODE
							where a.sp_id='''+@NSPID+''' '
			
			EXEC SP_EXECUTESQL @CCMD,N'@CPARTY_GSTN_NO VARCHAR(50) OUTPUT,@CPARTYSTATECODE CHAR(2) OUTPUT',@CPARTY_GSTN_NO OUTPUT,@CPARTYSTATECODE OUTPUT
			
			--SELECT @DORDERDT,@CPARTYSTATECODE,@CPARTY_GSTN_NO
			
			SET @NSTEP = 210						
			EXEC SP3S_GST_TAX_CAL
			@CXN_TYPE='WSLORD',
			@CMEMO_ID='',
			@DMEMO_DT=@DORDERDT,
			@NSPID=@NSPID,
			@CPARTYSTATE_CODE=@CPARTYSTATECODE,
			@CPARTY_GSTN_NO=@CPARTY_GSTN_NO,
			@CERRMSG=@CERRORMSG OUTPUT
			,@cLocationId=@CLOCID
			
			
			IF ISNULL(@CERRORMSG,'')<>''
				GOTO END_PROC
			
			SELECT @NCOUNTHSN=COUNT(DISTINCT HSN_CODE) FROM GST_TAXINFO_CALC WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID)))
			
			IF @NCOUNTHSN>1
			BEGIN
				SET @CERRORMSG='ITEMS WITH ONLY ONE HSN CODE ARE ALLOWED IN ORDER'
				GOTO END_PROC	
			END
			
			IF EXISTS (SELECT HSN_CODE FROM GST_TAXINFO_CALC WHERE SP_ID=LTRIM(RTRIM(STR(@NSPID))))
			BEGIN		
				SET @NSTEP = 213
				SET @CCMD=N'UPDATE A SET HSN_CODE=B.HSN_CODE,GST_PERCENTAGE=B.GST_PERCENTAGE FROM '+@CTEMPDETAILTABLE1+' A
							JOIN GST_TAXINFO_CALC B ON A.ROW_ID=B.ROW_ID
							where a.sp_id='''+@NSPID+''''
				EXEC SP_EXECUTESQL @CCMD
			END
			
		END
		ELSE
		BEGIN
			SET @NSTEP = 215
			SET @CCMD = N'UPDATE ' + @CTEMPDETAILTABLE1+' SET HSN_CODE=''0000000000'' WHERE ISNULL(HSN_CODE,'''')  IN('''')  and sp_id='''+@NSPID+''''
			EXEC SP_EXECUTESQL @CCMD		
			
		END
	    
	
		-- INSERTING/UPDATING THE ENTRIES IN PID01106 TABLE FROM TEMPTABLE
		SET @NSTEP = 217		-- UPDATING TRANSACTION TABLE - INSERTING NEW ENTRIES

		EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLE1
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME1
			, @CKEYFIELD1	= 'ROW_ID'
			, @BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@CWHERECLAUSE
		
		SET @NSTEP = 220

		 EXEC UPDATERFNET 'WOD',@CKEYFIELDVAL1
		 SET @NSTEP = 121		
		 EXEC SP3S_DSTRBT_MST_COMP 'WOD',@CKEYFIELDVAL1 
         
         
		SET @NSTEP = 225		
		----CHANGE
		EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME2
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CDETAILTABLENAME2
			, @CKEYFIELD1	= 'ROW_ID'
			, @BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@CWHERECLAUSE
		
		----
		SET @NSTEP = 230		
		EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME4
			, @CDESTDB		= ''
			, @CDESTTABLE	= 'WSL_ORDER_BOM'
			, @CKEYFIELD1	= 'ROW_ID'
			, @BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@CWHERECLAUSE
		
		
		SET @NSTEP = 235
		SET @CCMD = N'DELETE FROM CUST_MEASURMENT_DET WHERE EXISTS
		(
		SELECT A.CUSTOMER_CODE,B.ARTICLE_CODE,C.ATTRIBUTE_CODE
		FROM '+@CTEMPMASTERTABLENAME+' AS A JOIN '
		+@CTEMPDETAILTABLENAME1+' AS B ON A.ORDER_ID = B.ORDER_ID and a.sp_id=b.sp_id 
		JOIN '+@CTEMPDETAILTABLENAME2+' AS C ON C.TMD_ROW_ID = B.ROW_ID and c.sp_id=b.sp_id 
		WHERE CUST_MEASURMENT_DET.CUSTOMER_CODE = A.CUSTOMER_CODE AND CUST_MEASURMENT_DET.ARTICLE_CODE = B.ARTICLE_CODE 
		AND CUST_MEASURMENT_DET.M_CODE=C.ATTRIBUTE_CODE 
		and a.sp_id='''+@NSPID+''' 
		)'
		--PRINT @SQL
		EXEC SP_EXECUTESQL @CCMD
		
		
		SET @NSTEP = 240
		SET @CCMD = N'INSERT INTO CUST_MEASURMENT_DET(CUSTOMER_CODE,ARTICLE_CODE,M_CODE,MEASURMENT,LAST_UPDATE,ROW_ID)
		SELECT A.CUSTOMER_CODE,B.ARTICLE_CODE,C.ATTRIBUTE_CODE,C.MEASURMENT,GETDATE(),B.ROW_ID
		FROM '+@CTEMPMASTERTABLENAME+' AS A JOIN '
		+@CTEMPDETAILTABLENAME1+' AS B ON A.ORDER_ID = B.ORDER_ID and a.sp_id=b.sp_id 
		JOIN '+@CTEMPDETAILTABLENAME2+' AS C ON C.TMD_ROW_ID = B.ROW_ID and b.sp_id=c.sp_id 
		where a.sp_id ='''+@NSPID+''' '

		--PRINT @SQL
		EXEC SP_EXECUTESQL @CCMD

			SET @NSTEP = 250
			
		

		DECLARE @tBal TABLE (CUSTOMER_CODE VARCHAR(20),balance NUMERIC(14,2))
		INSERT @TBAL (CUSTOMER_CODE,BALANCE)
		EXEC SP3S_UPDATE_CUSTOMERBALANCES @CKEYFIELDVAL1,'WSLORD',@CERRORMSG OUTPUT ,0

		--SELECT @NBILLBALANCE=BALANCE FROM @TBAL
        
        
		GOTO END_PROC
		
LBLLINKADVANCES:

		SET @NSTEP = 245		
		
		SET @CCMD=N'UPDATE '+@CTEMPDETAILTABLE3+' SET ORDER_ID='''+@CXNMEMOID+''' where sp_id ='''+@NSPID+''' '
		EXEC SP_EXECUTESQL @CCMD
		
		
		SET @NSTEP = 250		
		EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN 
			  @CSOURCEDB	= @CTEMPDBNAME
			, @CSOURCETABLE = @CTEMPDETAILTABLENAME3
			, @CDESTDB		= ''
			, @CDESTTABLE	= 'WSL_ORDER_ADV_RECEIPT'
			, @CKEYFIELD1	= 'ADV_REC_ID'
			, @BALWAYSUPDATE = 1
			,@CFILTERCONDITION=@CWHERECLAUSE
		
		

		SET @NSTEP = 255
		/*VALIDATION FOR CUSTOMER: CUSTOMER WHO HAS BOOKED ORDER SHOULD BE SAME WITH WHOM THE ADVANCE IS LINKED.*/
		SET @CCMD=N'IF EXISTS(SELECT TOP 1 ''U'' 
								FROM WSL_ORDER_MST A 
								JOIN WSL_ORDER_ADV_RECEIPT B ON A.ORDER_ID=B.ORDER_ID
								JOIN ARC01106 C ON B.ADV_REC_ID=C.ADV_REC_ID
								WHERE A.ORDER_ID='''+@CXNMEMOID+''' AND A.CUSTOMER_CODE<>C.CUSTOMER_CODE)
					SET @CERRORMSG=''1ADVANCE TO THIS ORDER BELONGS TO DIFFERENT CUSTOMER.CANNNOT SAVE.'''
		PRINT @CCMD
		EXEC SP_EXECUTESQL @CCMD,N'@CERRORMSG VARCHAR(500) OUTPUT',@CERRORMSG OUTPUT
		
		
		SET @NSTEP = 260
		SET @CCMD=N' UPDATE WSL_ORDER_MST SET LAST_UPDATE=GETDATE() WHERE ORDER_ID='''+@CXNMEMOID+''''
			EXEC SP_EXECUTESQL @CCMD
		
			
		SET @CKEYFIELDVAL1=@CXNMEMOID



		GOTO END_PROC
		
	END TRY
	BEGIN CATCH
		SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
		
		GOTO END_PROC
	END CATCH
	
END_PROC:
	
	UPDATE wsl_order_mst set last_update=getdate(),HO_SYNCH_LAST_UPDATE='' where order_id=@CKEYFIELDVAL1
	
---------------------- INSERTING DATA IN CUST_MEASURMENT_DET FROM TMP TABLES
	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')='' AND ISNULL(@CCMDOUTPUT,'')=''
			commit TRANSACTION
		ELSE
			ROLLBACK
	END
	
	
	INSERT @OUTPUT ( ERRMSG, MEMO_ID)
		VALUES (ISNULL(@CERRORMSG,''),ISNULL(@CKEYFIELDVAL1,''))

	SELECT * FROM @OUTPUT	

	--savetran use temperory tables 
		SET @CCMD=N'IF OBJECT_ID('''+@CTEMPTABLE+''',''U'') IS NOT NULL
                          DROP TABLE '+@CTEMPTABLE+'
                      IF OBJECT_ID('''+@CTEMPTABLE1+''',''U'') IS NOT NULL
                          DROP TABLE '+@CTEMPTABLE1+'
                       IF OBJECT_ID('''+@CTEMPTABLE2+''',''U'') IS NOT NULL
                         DROP TABLE '+@CTEMPTABLE2+' '
		exec sp_executesql 	@CCMD


	DELETE A FROM WSLORD_WSL_ORDER_MST_UPLOAD  A (NOLOCK)  WHERE SP_ID =@NSPID 
	DELETE A FROM WSLORD_WSL_ORDER_det_UPLOAD  A (NOLOCK)  WHERE SP_ID =@NSPID 
	DELETE A FROM WSLORD_TDD01106_UPLOAD  A (NOLOCK)  WHERE SP_ID =@NSPID 
	DELETE A FROM WSLORD_WSL_ORDER_ADV_RECEIPT_UPLOAD  A (NOLOCK)  WHERE SP_ID =@NSPID 
	DELETE A FROM WSLORD_WSL_ORDER_BOM_UPLOAD  A (NOLOCK)  WHERE SP_ID =@NSPID 


	
END						
------------------------------------------------------END OF PROCEDURE SAVETRAN_BUYERORDER


