create PROCEDURE SAVETRAN_BOOK_INWARD_SUPPLY
(
   @NUPDATEMODE INT,
   @NSPID     INT,
   @CMEMONOPREFIX  VARCHAR(50),
   @CFINYEAR   VARCHAR(10) ,
   @CMEMOID VARCHAR(40)=''
)
AS
BEGIN
        DECLARE @CCMD NVARCHAR(MAX),
        @CTEMPMASTERTABLE VARCHAR(100),
        @CTEMPLOCTABLE VARCHAR(100),
        @CTEMPDETAILTABLE VARCHAR(100),
        @CDESTDB VARCHAR(1000),
        @LENABLETEMPDATABASE BIT,
        @CTEMPDBNAME VARCHAR(100),
        --@NSTEP INT,
        @NSTEP VARCHAR(10),
        @CERRORMSG NVARCHAR(MAX)
        ,@CMEMONOVAL VARCHAR(50),
        @CKEYFIELD1 VARCHAR(50),
        @CKEYFIELDVAL VARCHAR(50),
        @CLOCATIONID VARCHAR(4),
        @NSAVETRANLOOP BIT,
        @CKEYFIELDVAL1 VARCHAR(50),
        @CMASTERTABLENAME VARCHAR(100),
        
        @CMEMONO VARCHAR(20),@NMEMONOLEN NUMERIC(20,0),@CDET_ROW_ID VARCHAR(50),
        @CDETAILTABLENAME VARCHAR(100),@CLOCTABLENAME VARCHAR(100),@CKEYFIELD VARCHAR(50),
        @CTEMPMASTERTABLENAME VARCHAR(1000),@CTEMPDETAILTABLENAME VARCHAR(1000),@CTEMPLOCTABLENAME VARCHAR(1000)
        ,@CMEMODEPTID   VARCHAR(4), @DCMDT DATETIME,@REGISTERED BIT,@AC_CODE VARCHAR(50),@HSNCODE VARCHAR(15)
        
    
    BEGIN TRY
    BEGIN TRANSACTION    
 
	SELECT @NSTEP = 0	
	
   SET @CDESTDB = DB_NAME()+'.DBO.'  
   -- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
	SET @CTEMPDBNAME = ''
	
	SET	@NSTEP = 2
	
	SET @CMASTERTABLENAME   = 'SUPPLY_EXPENSE_XN_MST'        
    SET @CDETAILTABLENAME   = 'SUPPLY_EXPENSE_XN_DET'  
     
	SET @CKEYFIELD1   = 'MEMO_ID'  
	SET @CMEMONO   = 'MEMO_NO'  
	SET @NMEMONOLEN   = 10 
    
    
    SET @NSTEP = 10  
    SET @CTEMPMASTERTABLENAME  = 'TEMP_'+@CMASTERTABLENAME+'_'+LTRIM(RTRIM(STR(@NSPID)))        
    SET @CTEMPDETAILTABLENAME  = 'TEMP_'+@CDETAILTABLENAME+'_'+LTRIM(RTRIM(STR(@NSPID)))  
   
      SET @NSTEP = 20          
      SET @CTEMPMASTERTABLE   = @CTEMPDBNAME + @CTEMPMASTERTABLENAME        
      SET @CTEMPDETAILTABLE   = @CTEMPDBNAME + @CTEMPDETAILTABLENAME     
    
   
   IF @NUPDATEMODE=3 AND ISNULL(@CMEMOID,'')<>''
   BEGIN
        UPDATE SUPPLY_EXPENSE_XN_MST SET CANCELLED=1 WHERE MEMO_ID=@CMEMOID
     GOTO END_PROC
   END

  SET @NSTEP=11
     SET @CCMD=N'SELECT @HSNCODE=ISNULL(HSN_CODE,''0000000000'') FROM '+@CTEMPDETAILTABLE+' 
                              WHERE ISNULL(HSN_CODE,''0000000000'')=''0000000000'''
     PRINT @CCMD
     EXEC SP_EXECUTESQL @CCMD,N'@HSNCODE VARCHAR(15) OUTPUT',@HSNCODE OUTPUT             
     
     IF @HSNCODE='0000000000'
                  
     BEGIN
        SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' BLANK HSN CODE CAN NOT BE SAVED...'  
        GOTO END_PROC  
         
     END         
         

  
  -- START UPDATING XN TABLES   
  IF @NUPDATEMODE = 1 -- ADDMODE   
  BEGIN 
  
    SET @NSTEP=30
	  -- GETTING DEPT_ID FROM TEMP MASTER TABLE  
	  SET @CCMD = 'SELECT @CMEMODEPTID = location_code, @CKEYFIELDVAL1 = MEMO_ID FROM '+@CTEMPMASTERTABLE  
	   
	  EXEC SP_EXECUTESQL @CCMD, N'@CMEMODEPTID VARCHAR(4) OUTPUT, @CKEYFIELDVAL1 VARCHAR(50) OUTPUT',   
			  @CMEMODEPTID OUTPUT, @CKEYFIELDVAL1 OUTPUT  
			  
	  IF (@CMEMODEPTID IS NULL )  
	  BEGIN  
		 SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE SAVED...'  
		 --SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'  
		 GOTO END_PROC      
	  END 
	  
	  set @CLOCATIONID=@CMEMODEPTID
      

	   SET @NSTEP = 40  -- GENERATING NEW KEY  
	   PRINT 'GENERATING NEW KEY... START'     
	   IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
	   BEGIN  
			-- GENERATING NEW MRR_NO    
			SET @NSAVETRANLOOP=0  
			WHILE @NSAVETRANLOOP=0  
			BEGIN  
				 SET @NSTEP=90  
				 EXEC GETNEXTKEY @CMASTERTABLENAME, @CMEMONO, @NMEMONOLEN, @CMEMONOPREFIX, 1,  
					 @CFINYEAR,0, @CMEMONOVAL OUTPUT     
			       
				 PRINT @CMEMONOVAL  
			       
				 SET @NSTEP=50  
				 SET @CCMD=N'IF EXISTS ( SELECT '+@CMEMONO+' FROM '+@CMASTERTABLENAME+'   
					   WHERE '+@CMEMONO+'='''+@CMEMONOVAL+'''   
					   AND FIN_YEAR = '''+@CFINYEAR+''' )  
					 SET @NLOOPOUTPUT=0  
					ELSE  
					 SET @NLOOPOUTPUT=1'  
				 PRINT @CCMD  
				 EXEC SP_EXECUTESQL @CCMD, N'@NLOOPOUTPUT BIT OUTPUT',@NLOOPOUTPUT=@NSAVETRANLOOP OUTPUT  
			END 
			
			
		  
			IF @CMEMONOVAL IS NULL  OR @CMEMONOVAL LIKE '%LATER%'
			BEGIN  
			   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO NO....'   
			   -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'  
			   GOTO END_PROC      
			END  
		  
			PRINT 'GENERATING NEW KEY... START'     
		  
			SET @NSTEP = 60  -- GENERATING NEW ID  
			
		  
			-- GENERATING NEW MRR ID  
			SET @CKEYFIELDVAL1 = @CLOCATIONID + @CFINYEAR+REPLICATE('0', (22-LEN(@CLOCATIONID + @CFINYEAR))-LEN(LTRIM(RTRIM(@CMEMONOVAL))))  + LTRIM(RTRIM(@CMEMONOVAL))
 
		    
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'
			BEGIN  
			   SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'  
			   -- SET @CRETCMD= N'SELECT '''+@CERRORMSG+''' AS ERRMSG,'''' AS MEMO_ID'  
			   GOTO END_PROC  
			END  
		  
			SET @NSTEP = 70  -- UPDATING NEW ID INTO TEMP TABLES  
		  
			SET @CCMD = 'UPDATE ' + @CTEMPMASTERTABLE + ' SET ' + @CMEMONO+'=''' + @CMEMONOVAL+''',' +   
			   @CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''''  
			EXEC SP_EXECUTESQL @CCMD 
			
			SET @NSTEP=80  
           --UPDATE TEMP DETAIL TABLE   
		   SET @CCMD = N'UPDATE '+@CTEMPDETAILTABLE+' SET '+@CKEYFIELD1+' = '''+@CKEYFIELDVAL1+''',  
		   ROW_ID = NEWID()'  
		   PRINT @CCMD  
		   EXEC SP_EXECUTESQL @CCMD  		
					
		
				
	   SET @NSTEP=90  
       SET @CCMD = N'UPDATE '+@CTEMPDETAILTABLE+ ' SET ROW_ID = NEWID()   
       WHERE LEFT(ROW_ID,5) = ''LATER'' '    
       PRINT @CCMD  
       EXEC SP_EXECUTESQL @CCMD
       


	  END  
  
  END     -- END OF ADDMODE  
  ELSE    -- CALLED FROM EDITMODE  
  BEGIN    -- START OF EDITMODE  
    
	   SET @NSTEP = 100  -- GETTING ID INFO FROM TEMP TABLE  
	  
	   -- GETTING MRR_ID WHICH IS BEING EDITED  
	   SET @CCMD = 'SELECT @CKEYFIELDVAL1 = MEMO_ID, @CMEMONOVAL = MEMO_NO FROM '+@CTEMPMASTERTABLE  
	   PRINT @CCMD  
	   EXEC SP_EXECUTESQL @CCMD, N'@CKEYFIELDVAL1 VARCHAR(50) OUTPUT, @CMEMONOVAL VARCHAR(50) OUTPUT',   
			  @CKEYFIELDVAL1 OUTPUT, @CMEMONOVAL OUTPUT  
	   IF (@CKEYFIELDVAL1 IS NULL ) OR (@CMEMONOVAL IS NULL )  
	   BEGIN  
		  SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR ACCESSING THE RECORD TO BE MODIFIED...'          
		  GOTO END_PROC      
	   END 
	   
	   SET @NSTEP=80  
           --UPDATE TEMP DETAIL TABLE   
	  SET @CCMD = N'UPDATE '+@CTEMPDETAILTABLE+ ' SET ROW_ID = NEWID()   
       WHERE LEFT(ROW_ID,5) = ''LATER'' '    
       PRINT @CCMD  
       EXEC SP_EXECUTESQL @CCMD		
					 
 
  END     -- END OF EDITMODE 
  
		   
		    		
					
    
  SET @NSTEP=1000      
      
  IF((@NUPDATEMODE=1 ) OR (@NUPDATEMODE=2 ) ) 
 
  BEGIN
	  
      SET @NSTEP=110  -- UPDATE MASTER

	  EXEC UPDATEMASTERXN   
			 @CSOURCEDB = @CTEMPDBNAME  
		   , @CSOURCETABLE = @CTEMPMASTERTABLENAME  
		   , @CDESTDB  = ''  
		   , @CDESTTABLE = @CMASTERTABLENAME  
		   , @CKEYFIELD1 = @CKEYFIELD1  
		   , @BALWAYSUPDATE = 1    
		      
      SET @NSTEP=115   -- UPDATE DETAILS
		     
		   
		    
	  EXEC UPDATEMASTERXN   
		 @CSOURCEDB = @CTEMPDBNAME  
	   , @CSOURCETABLE = @CTEMPDETAILTABLENAME  
	   , @CDESTDB  = ''  
	   , @CDESTTABLE = @CDETAILTABLENAME  
	   , @CKEYFIELD1 = 'ROW_ID'  
	   , @BALWAYSUPDATE = 1 
		   
	   
	   DECLARE @COTHERMEMONO VARCHAR(50),@DOTHERMEMODT DATETIME
	   
	     
	   SET @NSTEP=120
	   
	   SELECT TOP 1 @COTHERMEMONO=B.MEMO_NO,@DOTHERMEMODT=B.MEMO_DT FROM SUPPLY_EXPENSE_XN_MST A 
	   JOIN SUPPLY_EXPENSE_XN_MST B ON A.AC_CODE=B.AC_CODE AND A.BILL_NO=B.BILL_NO AND 
	   DBO.FN_GETFINYEAR(A.BILL_DT)=DBO.FN_GETFINYEAR(B.BILL_DT)
	   WHERE A.MEMO_ID=@CKEYFIELDVAL1 AND B.MEMO_ID<>@CKEYFIELDVAL1 AND B.CANCELLED=0
	   
	   IF ISNULL(@COTHERMEMONO,'')<>''
	   BEGIN
			SET @CERRORMSG='DUPLICATE BILL NO. FOUND IN OTHER MEMO NO.:'+@COTHERMEMONO+' DATED :'+CONVERT(VARCHAR,@DOTHERMEMODT,105)
			GOTO END_PROC
	   END
  END

	SET @NSTEP = 125
	DECLARE @BLOCALBILL BIT,@CPARTYSTATECODE CHAR(7)
	
	SELECT @CPARTYSTATECODE='',@BLOCALBILL=0
	
	DELETE FROM GST_TAXINFO_CALC WHERE SP_ID=CAST(@NSPID AS VARCHAR)
	
	INSERT GST_TAXINFO_CALC	( PRODUCT_CODE, SP_ID ,NET_VALUE,TAX_METHOD,ROW_ID,QUANTITY,HSN_CODE,SOURCE_DEPT_ID )  
	SELECT '',@NSPID AS SP_ID,(QUANTITY*RATE)AS NET_VALUE,
	GST_CALC_TAX_METHOD AS TAX_METHOD,ROW_ID,QUANTITY ,HSN_CODE,DEPT_ID
	FROM SUPPLY_EXPENSE_XN_MST
	A JOIN SUPPLY_EXPENSE_XN_DET B ON A.MEMO_ID=B.MEMO_ID
	WHERE A.MEMO_ID=@CKEYFIELDVAL1
	
	SELECT @DCMDT=BILL_DT, @CPARTYSTATECODE=PARTY_STATE_CODE,@AC_CODE=AC_CODE
	FROM SUPPLY_EXPENSE_XN_MST WHERE MEMO_ID=@CKEYFIELDVAL1
	
	SELECT @REGISTERED=REGISTERED_GST_DEALER FROM LMP01106 WHERE AC_CODE=@AC_CODE
	
	EXEC SP3S_GST_TAX_CAL
	@CXN_TYPE='EXP',
	@CMEMO_ID='',
	@DMEMO_DT=@DCMDT,
	@NSPID=@NSPID,
	@CPARTYSTATE_CODE=@CPARTYSTATECODE,
	@BPARTYREGISTERED=@REGISTERED,
	@CERRMSG=@CERRORMSG OUTPUT
	
    IF ISNULL(@CERRORMSG,'')<>''  
		GOTO END_PROC 
    
	
	SET @NSTEP = 140
	UPDATE SUPPLY_EXPENSE_XN_DET SET 
	--TAX_AMOUNT=0,TAX_PERCENTAGE=0,
	GST_PERCENTAGE=B.GST_PERCENTAGE,IGST_AMOUNT=B.IGST_AMOUNT,
	CGST_AMOUNT=B.CGST_AMOUNT,SGST_AMOUNT=B.SGST_AMOUNT,
	XN_VALUE_WITHOUT_GST=B.XN_VALUE_WITHOUT_GST,XN_VALUE_WITH_GST=B.XN_VALUE_WITH_GST
	FROM GST_TAXINFO_CALC B WHERE B.ROW_ID=SUPPLY_EXPENSE_XN_DET.ROW_ID 
	AND B.SP_ID=CAST(@NSPID AS VARCHAR)
	AND MEMO_ID=@CKEYFIELDVAL1						
	
	SET @NSTEP = 145
    UPDATE A SET TDS_AMOUNT=CEILING(B.TOTAL_AMOUNT*C.TDS_PERCENTAGE/100) FROM SUPPLY_EXPENSE_XN_MST A --ROUND CHANGES BY VEDPAL
    JOIN  (SELECT MEMO_ID,SUM(XN_VALUE_WITHOUT_GST) AS TOTAL_AMOUNT FROM SUPPLY_EXPENSE_XN_DET 
		   WHERE MEMO_ID=@CKEYFIELDVAL1  GROUP BY MEMO_ID) B ON A.MEMO_ID=B.MEMO_ID
    JOIN TDS_SECTION C ON C.TDS_CODE=A.TDS_CODE

				
    SET @NSTEP = 150
    
    UPDATE SUPPLY_EXPENSE_XN_MST SET TOTAL_AMOUNT=B.TOTAL_AMOUNT
    FROM (SELECT MEMO_ID,SUM(XN_VALUE_WITH_GST) AS TOTAL_AMOUNT FROM SUPPLY_EXPENSE_XN_DET WHERE MEMO_ID=@CKEYFIELDVAL1
		  GROUP BY MEMO_ID) B
    WHERE B.MEMO_ID=SUPPLY_EXPENSE_XN_MST.MEMO_ID

	SET @NSTEP=160

	UPDATE SUPPLY_EXPENSE_XN_MST SET ROUND_OFF=ROUND(TOTAL_AMOUNT,0)-TOTAL_AMOUNT
	WHERE MEMO_ID=@CKEYFIELDVAL1 AND ISNULL(MANUAL_ROUND_OFF,0)=0
	
	SET @NSTEP=165
	
	UPDATE SUPPLY_EXPENSE_XN_MST SET TOTAL_AMOUNT=TOTAL_AMOUNT+ROUND_OFF
	WHERE MEMO_ID=@CKEYFIELDVAL1 
	 
END TRY  

BEGIN CATCH  
     SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()  
END CATCH  

END_PROC:
 IF @@TRANCOUNT>0  
	 BEGIN  
	    
	  IF ISNULL(@CERRORMSG,'')='' 
		   COMMIT TRANSACTION  
	   ELSE  
		  ROLLBACK  
	 END  
	  
    SELECT @CERRORMSG AS ERRMSG,@CKEYFIELDVAL1 AS MEMO_ID 
  
END	
----------------------------------------------------- END OF PROCEDURE SAVETRAN_BOOK_INWARD_SUPPLY
