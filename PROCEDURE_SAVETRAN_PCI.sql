CREATE PROCEDURE SAVETRAN_PCI  --(LocId 3 digit change by Sanjay:06-11-2024)
(  
  @SPID INT  
 ,@CFINYEAR VARCHAR(10)  
 ,@CMEMONOPREFIX VARCHAR(50)
)  
--WITH ENCRYPTION
AS  
BEGIN  
 --PETTY CASH IN
 DECLARE @CCMD NVARCHAR(MAX)  
   ,@NSTEP NUMERIC(5,0)  
   ,@CERRORMSG VARCHAR(MAX)  
   ,@CTEMPDBNAME VARCHAR(100)  
   ,@CTEMPTABLENAME VARCHAR(100)  
   ,@CACTUALTABLENAME VARCHAR(100)    
   ,@NMEMONOLEN NUMERIC(20,0)  
   ,@CMEMONOVAL VARCHAR(50)  
   ,@CMEMOIDVAL VARCHAR(50)  
   ,@CLOCATIONID VARCHAR(4)  
   ,@CIDFIELD VARCHAR(50) 
   ,@CHODEPTID VARCHAR(4) 
 BEGIN TRY  
  BEGIN TRANSACTION  
    
  SET @NSTEP=1  
    
  
	
	SELECT TOP 1 @CHODEPTID	= [VALUE] FROM CONFIG(NOLOCK) WHERE  CONFIG_OPTION='HO_LOCATION_ID'
    
  -- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List
   SET @CTEMPDBNAME = ''  
  SET @CIDFIELD='MEMO_ID'  
    
  SET @NSTEP=10  
  SET @CACTUALTABLENAME='PCI_MST'  
    
    
  SET @NSTEP=20  
  SET @CTEMPTABLENAME='TEMP_' +@CACTUALTABLENAME +'_'+LTRIM(RTRIM(@SPID))   
    

	
	SET @cCmd=N'SELECT TOP 1 @cLocationId=location_code FROM '+@CTEMPTABLENAME
	EXEC SP_EXECUTESQL @cCmd,N'@cLocationId varchar(4) output',@cLocationId OUTPUT

  SET @NSTEP=30  
  SET @NMEMONOLEN='10'  

  IF ISNULL(@CLOCATIONID,'')=''
 BEGIN
    SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' LOCATION ID CAN NOT BE BLANK  '  
	GOTO END_PROC    
 END
    
  SET @NSTEP=40  
  --GENERATING MEMO_NO  
  EXEC GETNEXTKEY  @CTABLENAME=@CACTUALTABLENAME  
      ,@CCOLNAME='MEMO_NO'  
      ,@NWIDTH=@NMEMONOLEN  
      ,@CPREFIX=@CMEMONOPREFIX  
      ,@NLZEROS=1  
      ,@CFINYEAR=@CFINYEAR  
      ,@NROWCOUNT=0  
      ,@CNEWKEYVAL=@CMEMONOVAL OUTPUT  
  SET @NSTEP=50  
  IF ISNULL(@CMEMONOVAL,'')=''  
   BEGIN  
    SET @CERRORMSG='ERROR GENERATING NEW MEMO NUMBER.'  
    GOTO END_PROC  
   END  
  ELSE  
   BEGIN  
    SET @CMEMOIDVAL=@CLOCATIONID+@CFINYEAR+REPLICATE('0',15-LEN(LTRIM(RTRIM(@CMEMONOVAL)))) + LTRIM(RTRIM(@CMEMONOVAL))  
   END  
    
  SET @NSTEP=60  
  IF ISNULL(@CMEMOIDVAL,'')=''   
   BEGIN  
    SET @CERRORMSG='ERROR GENERATING NEW MEMO ID'  
   END  
    
  SET @NSTEP=65  
  SET @CCMD=N'IF NOT EXISTS(SELECT * FROM SYS.TABLES WHERE NAME='''+@CTEMPTABLENAME+''')  
     SET @CERRORMSGOUT=''TEMPERORY TABLE DOESNOT EXISTS..PLEASE CHECK.....'''  
  PRINT @CCMD       
  EXEC SP_EXECUTESQL @CCMD,N'@CERRORMSGOUT VARCHAR(MAX) OUTPUT',@CERRORMSGOUT=@CERRORMSG OUTPUT  
  IF ISNULL(@CERRORMSG,'')<>''  
  GOTO END_PROC  
    
  SET @NSTEP=70  
  SET @CCMD=N'UPDATE '+@CTEMPTABLENAME +' SET MEMO_NO='''+@CMEMONOVAL+''' , MEMO_ID='''+@CMEMOIDVAL+''''  
  PRINT @CCMD  
  EXEC SP_EXECUTESQL @CCMD   
    
  SET @NSTEP=80  
  EXEC UPDATEMASTERXN_OPT--UPDATEMASTERXN   
     @CSOURCEDB = @CTEMPDBNAME  
   , @CSOURCETABLE = @CTEMPTABLENAME  
   , @CDESTDB  = ''  
   , @CDESTTABLE = @CACTUALTABLENAME  
   , @CKEYFIELD1 = @CIDFIELD  
   , @BALWAYSUPDATE = 0  
 END TRY  
   
 BEGIN CATCH  
  SELECT @NSTEP AS STEPNUMBER,@CERRORMSG AS ERROR_MESSAGE, ERROR_NUMBER() AS ERROR_NUMBER,ERROR_MESSAGE() AS ERRORMESSAGE  
 END CATCH  
   
END_PROC:  
 UPDATE  pci_mst WITH (ROWLOCk) SET last_update=getdate() WHERE memo_id=@CMEMOIDVAL

 IF @@TRANCOUNT>0  
 BEGIN  
  IF ISNULL(@CERRORMSG,'') = ''  
   BEGIN  
    UPDATE  PCI_MST WITH (ROWLOCK) SET HO_SYNCH_LAST_UPDATE='' WHERE MEMO_ID=@CMEMOIDVAL 
    COMMIT TRANSACTION  
   END  
  ELSE  
   BEGIN  
    ROLLBACK  
    SELECT @NSTEP AS STEP_NUMBER, @CERRORMSG AS ERROR_MESSAGE  
   END   
 END  
  SET @CCMD=N'DROP TABLE '+@CTEMPTABLENAME  
  EXEC SP_EXECUTESQL @CCMD   
END   
----------------------------END SAVETRAN SAVETRAN_PCI
