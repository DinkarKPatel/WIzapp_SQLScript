-- PROCEDURE TO GENERATE BARCODES FOR A GIVEN MRR_ID OR PO_ID  
CREATE PROCEDURE SAVETRAN_GENBARCODES_RECEIVE    
(      
 @CPREFIX VARCHAR(50),    
 @NMODE INT= 1,    
 @NSPID INT=0,    
 @LOCID VARCHAR(4)='', 
 @CTEMPDETAILTABLE1 VARCHAR(100),   
 @CERRORMSG VARCHAR(MAX) OUTPUT    
)    
AS     
BEGIN    
     
 BEGIN TRY    
     
	 DECLARE @NROWS BIGINT,    
	   @NEANROWS BIGINT,    
	   @NFIXROWS BIGINT,    
	   @NCTR     BIGINT,    
	   @CPIDROWID   VARCHAR(50),    
	   @CNEXTPRODUCTCODE VARCHAR(50),    
	   @NNEXTKEYVALUE  NUMERIC(30,0),    
	   @CPIMDEPTID   VARCHAR(5),  
	   @CBIN_ALIAS	VARCHAR(10),  
	   @CLOCID    VARCHAR(2),@CHOLOCID VARCHAR(5),    
	   @CCMD NVARCHAR(MAX),@CTEMPIRDTABLE VARCHAR(MAX),@NWHCOUNT INT,    
	   @CBARCODEPREFIX VARCHAR(100),@CADDPREFIX VARCHAR(50),@DMEMODT DATETIME,    
	   @CPREFIXYEARCODE BIT,@CPREFIXLOCID BIT,@CYEARCODE CHAR(2),@CADDLOCIDPREFIX CHAR(4),    
	   @CTEMPIRMTABLE VARCHAR(500),@NSTEP INT,@CCUSTOMPREFIX VARCHAR(50),@BLOOP BIT,@NPURLOCCNT INT,    
	   @BRANDOMGEN BIT,@NBARCODELEN INT,@CARTICLENO VARCHAR(300),@CARTPREFIX VARCHAR(50),    
	   @BGENEANCODES BIT,@CGENEANCODES VARCHAR(5),    
	   @CEANPREFIX VARCHAR(10),@NEANLENGTH INT,@CEANLENGTH VARCHAR(5),@CPREFIXFLOORID VARCHAR(10),  
	   @CADDFLOORIDPREFIX VARCHAR(10),@NSNCROWS INT,@NLOOPQTY INT,@NBARCODEQTY INT,
	   @CMIXNMATCHACCODE CHAR(10),@NROWS1 INT,@NCODINGSCHEME INT ,@CPREFIXMONTHCODE VARCHAR(10),
	   @MONTHCODE VARCHAR(2)
	  
	          
	 SELECT @CYEARCODE='',@CADDLOCIDPREFIX='',@CERRORMSG=''    
	     
	 SET @NSTEP=10    
	     
	 IF OBJECT_ID('TEMPDB..#PIDROWS','U') IS NOT NULL    
	    DROP TABLE #PIDROWS    
	    
	 IF OBJECT_ID('TEMPDB..#BARCODES','U') IS NOT NULL    
	    DROP TABLE #BARCODES    
	 /*UNMERGED:16MAY2013*/    
	 SELECT A.ROW_ID AS PID_ROW_ID,B.CODING_SCHEME,A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,CONVERT(INT,0) AS SRNO  
	 ,CONVERT(BIT,0) AS GEN_EAN_CODES  
	 INTO #PIDROWS   
	 FROM PID01106 A 
	 JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
	 WHERE 1=2    
	          
	 SELECT A.ROW_ID AS PID_ROW_ID,A.PRODUCT_CODE INTO #BARCODES FROM PID01106 A  WHERE 1=2    
	     
	 PRINT 'GENBC-1'    
	 SET @NSTEP=20    
	     
	 SET @NROWS = 0    
	 SET @NFIXROWS = 0    
	 SET @NEANROWS = 0    
	     
	   
	     
	 SELECT TOP 1 @CGENEANCODES=VALUE FROM CONFIG WHERE CONFIG_OPTION='GEN_EAN_CODES'    
	 
	 IF @CGENEANCODES='1'    
	    SET @BGENEANCODES=1    
	 ELSE    
	    SET @BGENEANCODES=0    
	     
	 SELECT TOP 1 @CEANPREFIX=VALUE FROM CONFIG WHERE CONFIG_OPTION='EAN_PREFIX'    
	 SELECT TOP 1 @CEANLENGTH=VALUE FROM CONFIG WHERE CONFIG_OPTION='EAN_LENGTH'    
	     
	 IF ISNULL(@CEANLENGTH,'')=''    
	    SET @NEANLENGTH=12    
	 ELSE    
	    SET @NEANLENGTH=CONVERT(INT,@CEANLENGTH)     
	     
	    
	    SELECT @CLOCID = @LOCID     
	        
     SELECT TOP 1 @CHOLOCID = [VALUE] FROM CONFIG WHERE CONFIG_OPTION = 'HO_LOCATION_ID'    
	      
	 IF ISNULL(@CLOCID,'') = ''     
		GOTO END_PROC      
	     
    
      PRINT 'ENTER BCGEN-1'    
	  SELECT @DMEMODT=GETDATE() 
	  
	  IF NOT EXISTS (SELECT TOP 1 'U' FROM JWR_JOBWORK_RECEIVE_FG_DET_UPLOAD WHERE SP_ID=@NSPID AND ARTICLE_CODE<>'')
	  BEGIN
	      SET @CERRORMSG='ARTICLE REQUIRED FOR UNIQUE BARCODE GENERATION '
	      GOTO END_PROC
	  END   
	  
	  

	  PRINT 'ENTER BCGEN-3'    
	  -- BARCODE GENERATION FOR LOT AND UNIQUE CODES    
	  INSERT #PIDROWS ( PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,ARTICLE_NO,SRNO) /*UNMERGED:16MAY2013*/     
	  SELECT A.ROW_ID, B.CODING_SCHEME, A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,A.SRNO    
	  FROM JWR_JOBWORK_RECEIVE_FG_DET_UPLOAD A  (NOLOCK)  
	  JOIN ARTICLE B ON A.ARTICLE_CODE = B.ARTICLE_CODE    
	  WHERE A.sp_id = @NSPID    
	  AND B.CODING_SCHEME =3
	  AND (B.GEN_EAN_CODES=0 OR @BGENEANCODES=0) 
	  AND B.ARTICLE_PRD_MODE  <>3
	  ORDER BY A.SRNO     
	      
	 SET @NROWS=@@ROWCOUNT    

 
      
	 PRINT 'GENBC-4'    
	     
	 SET @NSTEP=90    
	    
	 IF NOT EXISTS ( SELECT NAME FROM SYSOBJECTS WHERE NAME = 'SP_GETNEWPREFIX' )    
	 BEGIN    
		  SELECT TOP 1 @CADDPREFIX = VALUE FROM CONFIG WHERE 
		  CONFIG_OPTION='barcode_prefix'
		      
		  SELECT TOP 1 @CPREFIXYEARCODE= VALUE FROM CONFIG WHERE
		  CONFIG_OPTION='YEAR_CODE_IN_PC'
		  
		  IF ISNULL(@CPREFIXYEARCODE,'')='1'    
			SET @CYEARCODE= RIGHT(LTRIM(RTRIM(STR(DATEPART(YY,@DMEMODT)))),2)     
		   

		   
		    SELECT TOP 1 @CPREFIXMONTHCODE= VALUE FROM CONFIG WHERE CONFIG_OPTION='MONTH_CODE_IN_PC'
		  IF ISNULL(@CPREFIXMONTHCODE,'')='1'
			SELECT @MONTHCODE=CASE WHEN MONTH(GETDATE())<10 THEN '0'+ CAST(MONTH(GETDATE()) AS VARCHAR(2)) ELSE CAST(MONTH(GETDATE())AS VARCHAR(2))  END
		   
		  

		  
		  SELECT TOP 1 @CPREFIXFLOORID= VALUE FROM CONFIG WHERE 
		  CONFIG_OPTION='FLOOR_ID_IN_PC'
		  
		  IF ISNULL(@CPREFIXFLOORID,'')='1'    
				SET @CADDFLOORIDPREFIX=@CLOCID+ISNULL(@CBIN_ALIAS ,'')
		  ELSE  
				SET @CADDFLOORIDPREFIX=''  
		  
		      
		  SELECT TOP 1 @CPREFIXLOCID= VALUE FROM CONFIG WHERE 
		  CONFIG_OPTION='LOCATION_ID_IN_PC'
		  
		  IF ISNULL(@CPREFIXLOCID,'')='1' AND ISNULL(@CPREFIXFLOORID,'')<>'1'   
			 SET @CADDLOCIDPREFIX=@CLOCID    
		  ELSE    
		  IF @CADDFLOORIDPREFIX=''  
		  BEGIN    
			  --IN CASE THE PURCHASES ARE DONE AT MULTIPLE LOCATIONS, FORCE THE LOCATION ID IN PREFIX    
			  SELECT @NPURLOCCNT=COUNT(*) FROM LOCATION WHERE PUR_LOC = 1 OR DEPT_ID=@CHOLOCID    
			  IF ISNULL(@NPURLOCCNT,0)>1    
				BEGIN    
			  IF NOT EXISTS (SELECT TOP 1 CONFIG_OPTION FROM CONFIG WHERE  CONFIG_OPTION='LOCATION_ID_IN_PC')     
				INSERT CONFIG (  CONFIG_OPTION, VALUE, ROW_ID, LAST_UPDATE, REMARKs )     
				SELECT 'LOCATION_ID_IN_PC' AS CONFIG_OPTION,'1' AS VALUE,    
				'' AS ROW_ID,GETDATE() AS  LAST_UPDATE,'' AS  REMARKS
			  ELSE    
			   UPDATE CONFIG SET VALUE='1' WHERE  CONFIG_OPTION='LOCATION_ID_IN_PC'
			          
				  SET @CADDLOCIDPREFIX=@CLOCID    
		  END    
	  END    
	    
	  PRINT 'GENBC-5'    
	  
	   
	  SET @NSTEP=100    
	  SET  @CPREFIX = LTRIM(RTRIM(ISNULL(@CYEARCODE,''))) + 
	                  LTRIM(RTRIM(ISNULL(@MONTHCODE,''))) +
	                  LTRIM(RTRIM(ISNULL(@CADDLOCIDPREFIX,''))) +   
	                  LTRIM(RTRIM(ISNULL(@CADDFLOORIDPREFIX,''))) +  
					  LTRIM(RTRIM(ISNULL(@CADDPREFIX,'')))    
	 END     
	 ELSE    
	 BEGIN    
		  -- GETTING CUSTOM PREFIX FOR THE CURRENT ROW OF PID    
		  EXEC SP_GETNEWPREFIX @CPIDROWID, 'PUR', @CCUSTOMPREFIX OUTPUT    
		  IF @CCUSTOMPREFIX IS NULL    
		   GOTO END_PROC    
		  SET @CPREFIX = @CCUSTOMPREFIX    
	 END    

	IF @NEANROWS > 0 
	  BEGIN  
		 DECLARE @CEANSOURCEABLE VARCHAR(100)  
		 SET @CEANSOURCEABLE='ORD_PLAN_DET'  
		 SET @NSTEP=150  
		 PRINT 'GENERATE EAN CODE FOR :'+STR(@NEANROWS)+STR(@NROWS)
		 EXEC GETNEXTEANCODE @NEANLENGTH,@CEANPREFIX,1,'', @NEANROWS,@CEANSOURCEABLE,'',@CERRORMSG OUTPUT   
		   
		 IF @CERRORMSG<>''  
		 BEGIN  
		  PRINT 'GENBARCODE_JOBCARD-RETURND'  
		  GOTO END_PROC  
		 END    
	  END 


	 IF @NROWS > 0    
	 BEGIN    
	      
		  SET @NSTEP=110    
		      
		  PRINT 'BAR CODE PREFIX :'+@CPREFIX    
		      
		  PRINT 'GENBC-6'    
		      
		  --CHECKING IF BARCODE SHOULD BE GENERATED RANDOMLY OR USING GETNEXTKEY    
		  SELECT TOP 1 @BRANDOMGEN=ISNULL(VALUE,0) FROM CONFIG WHERE CONFIG_OPTION='PRODUCT_CODE_GENERATION_RANDOM' 
		  SET @BRANDOMGEN=ISNULL(@BRANDOMGEN,0)      
		   
		  IF @BRANDOMGEN=0  
		  BEGIN
			 -- GENERATE BARCODES FOR ARTICLES WHICH ARE CONSIDERED AS PREFIX FOR BAR CODE GENERATION    
			   IF EXISTS (SELECT TOP 1 PID_ROW_ID 
						  FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
						  WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=0 AND B.GEN_EAN_CODES=0)     
			   BEGIN    		    
		  
			   
			  SELECT @NSNCROWS=SUM(QUANTITY) FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
			  WHERE B.CODING_SCHEME IN (2,3)
			
				-- CALLING GETNEXTKEY PROCEDURE TO GENERATE NEW CODES IN BULK    
				EXEC GETNEXTKEY 'SKU', 'PRODUCT_CODE', 50, @CPREFIX, 0, '', @NSNCROWS,@CNEXTPRODUCTCODE OUTPUT     
				IF @CNEXTPRODUCTCODE IS NULL    
					GOTO END_PROC    
			       
			   PRINT 'NEXT PRODUCT CODE AVAILABLE:'+@CNEXTPRODUCTCODE+STR(LEN(@CNEXTPRODUCTCODE))+STR(LEN(@CPREFIX))    
			   SET @NNEXTKEYVALUE = CONVERT(NUMERIC(30,0),RIGHT(LTRIM(RTRIM(@CNEXTPRODUCTCODE)),LEN(@CNEXTPRODUCTCODE)-LEN(@CPREFIX)))    
			       
			   PRINT 'NEXT PRODUCT CODE VALUE:'+STR(@NNEXTKEYVALUE)    
			       
			   PRINT 'GENBC-7'    
			   SET @NSTEP=120    
			       
			   -- GENERATING MULTIPLE ROWS FOR NEWLY GENERATED PRODUCT CODES    
			   DECLARE PID_CUR CURSOR FOR     
			   SELECT PID_ROW_ID,A.QUANTITY,B.CODING_SCHEME FROM #PIDROWS A
			   JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE
			   WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=0 AND B.GEN_EAN_CODES=0
			   ORDER BY A.SRNO    
			       
			   OPEN PID_CUR    
			       
			   FETCH NEXT FROM PID_CUR INTO @CPIDROWID,@NBARCODEQTY,@NCODINGSCHEME    
			   WHILE @@FETCH_STATUS = 0    
			   BEGIN    
					SET @NSTEP=130     
				    
					PRINT 'GENBC-8'
				    
				 --   DELETE  AA FROM #BARCODES AA  JOIN #PIDROWS CC ON AA.PRODUCT_CODE =CC.ARTICLE_NO 
				 --   AND AA.PID_ROW_ID = CC.PID_ROW_ID JOIN ARTICLE B ON CC.ARTICLE_CODE=B.ARTICLE_CODE
					--WHERE AA.PID_ROW_ID = @CPIDROWID AND B.CODING_SCHEME =3
				
						    
					SET @NLOOPQTY=(CASE WHEN @NCODINGSCHEME=3 THEN @NBARCODEQTY ELSE 1 END)
					WHILE @NLOOPQTY>0
					BEGIN    
						SET @BLOOP=1    
					        
						WHILE @BLOOP=1    
						BEGIN  
							 PRINT 'GENBC-9'  
							 
							 SET @NSTEP=135    
							 SET @CNEXTPRODUCTCODE = @CPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE)))       
						         
							 IF NOT EXISTS (SELECT TOP 1 PRODUCT_CODE FROM SKU WHERE PRODUCT_CODE=@CNEXTPRODUCTCODE)    
							 BEGIN    
								  SET @NSTEP=137    
								  INSERT #BARCODES ( PID_ROW_ID, PRODUCT_CODE )    
									VALUES   ( @CPIDROWID, @CNEXTPRODUCTCODE )    
							            
								  SET @BLOOP=0      
							 END       
						     
							 PRINT 'GENBC-10'    
						     
							 SET @NSTEP=138    
							 SET @NNEXTKEYVALUE = @NNEXTKEYVALUE + 1          
							 SET @NLOOPQTY=@NLOOPQTY-1
						END    
				         
					 END   
					 SET @NSTEP=140    
				        
					 FETCH NEXT FROM PID_CUR INTO @CPIDROWID,@NBARCODEQTY,@NCODINGSCHEME        
			   END    
			   CLOSE PID_CUR    
			   DEALLOCATE PID_CUR    
			   
			   PRINT 'GENBC-11'    
			   SET @NNEXTKEYVALUE = @NNEXTKEYVALUE - 1    
			   SET @CNEXTPRODUCTCODE = @CPREFIX + LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE)))    
			       
			   SET @NSTEP=150    
			       
			   ---- UPDATING KEYS TABLE WITH THE MAXIMUM BARCODE GENERATED     
			   UPDATE KEYS_PMT SET     
				LASTKEYVAL = LTRIM(RTRIM(@CNEXTPRODUCTCODE))     
			   WHERE TABLENAME = 'SKU'    
			   AND COLUMNNAME = 'PRODUCT_CODE'    
			   AND FINYEAR  = ''    
			   AND PREFIX  = @CPREFIX    
		   END
	
		  
		 -- GENERATE BARCODES FOR ARTICLES WHICH ARE CONSIDERED AS PREFIX FOR BAR CODE GENERATION    
	   IF EXISTS (SELECT TOP 1 PID_ROW_ID FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
			WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=1 AND B.GEN_EAN_CODES=0)     
	   BEGIN    
	         
		DECLARE ART_CUR CURSOR FOR SELECT DISTINCT A.ARTICLE_NO FROM #PIDROWS A    
		JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE WHERE 
		GENERATE_BARCODES_WITHARTICLE_PREFIX=1 AND B.GEN_EAN_CODES=0    
	        
		OPEN ART_CUR    
		FETCH NEXT FROM ART_CUR INTO @CARTICLENO    
		WHILE @@FETCH_STATUS=0    
		BEGIN    
	         
		 SET @CARTPREFIX=@CPREFIX+@CARTICLENO+'-'    
	    
		 SELECT @NROWS = COUNT(*) FROM #PIDROWS WHERE ARTICLE_NO=@CARTICLENO    
	         
		 -- CALLING GETNEXTKEY PROCEDURE TO GENERATE NEW CODES IN BULK    
		 EXEC GETNEXTKEY 'SKU', 'PRODUCT_CODE', 50, @CARTPREFIX, 0, '', @NROWS, @CNEXTPRODUCTCODE OUTPUT     
		 IF @CNEXTPRODUCTCODE IS NULL    
		  GOTO END_PROC    
	         
		 SET @NNEXTKEYVALUE = CAST(RIGHT(@CNEXTPRODUCTCODE,LEN(@CNEXTPRODUCTCODE)-LEN(@CARTPREFIX)) AS NUMERIC(30,0))    
	    
		 -- GENERATING MULTIPLE ROWS FOR NEWLY GENERATED PRODUCT CODES    
		 DECLARE PID_CUR CURSOR FOR     
		 SELECT PID_ROW_ID FROM #PIDROWS WHERE ARTICLE_NO=@CARTICLENO    
	         
		 OPEN PID_CUR    
	         
		 FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
		 WHILE @@FETCH_STATUS = 0    
		 BEGIN    
		  SET @NSTEP=130     
	        
		  SET @BLOOP=1    
	          
		  WHILE @BLOOP=1    
		  BEGIN    
		   SET @NSTEP=135    
		   SET @CNEXTPRODUCTCODE = @CARTPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE)))       
	           
		   IF NOT EXISTS (SELECT TOP 1 PRODUCT_CODE FROM SKU WHERE PRODUCT_CODE=@CNEXTPRODUCTCODE)    
		   BEGIN    
			SET @NSTEP=137    
			
			IF EXISTS ( SELECT * FROM #BARCODES WHERE PID_ROW_ID = @CPIDROWID)
				UPDATE #BARCODES SET PRODUCT_CODE=@CNEXTPRODUCTCODE WHERE PID_ROW_ID=@CPIDROWID
				ELSE  
				INSERT #BARCODES ( PID_ROW_ID, PRODUCT_CODE )    
				VALUES   ( @CPIDROWID, @CNEXTPRODUCTCODE )     
	              
			SET @BLOOP=0      
		   END       
	           
		   SET @NSTEP=138    
		   SET @NNEXTKEYVALUE = @NNEXTKEYVALUE + 1          
		  END    
	         
		  FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
		 END    
		 CLOSE PID_CUR    
		 DEALLOCATE PID_CUR    
	         
		 SET @NNEXTKEYVALUE = @NNEXTKEYVALUE - 1    
		 SET @CNEXTPRODUCTCODE = @CARTPREFIX + CONVERT(VARCHAR(30), @NNEXTKEYVALUE)    
	    
		 -- UPDATING KEYS TABLE WITH THE MAXIMUM BARCODE GENERATED     
		 UPDATE KEYS_PMT SET     
		  LASTKEYVAL = LTRIM(RTRIM(@CNEXTPRODUCTCODE))     
		 WHERE TABLENAME = 'SKU'    
		 AND COLUMNNAME = 'PRODUCT_CODE'    
		 AND FINYEAR  = ''    
		 AND PREFIX  = @CARTPREFIX    
	         
		 FETCH NEXT FROM ART_CUR INTO @CARTICLENO    
		END    
	        
		CLOSE ART_CUR    
		DEALLOCATE ART_CUR    
	        
	   END    
	  END    	 
  END
INS_CODES:    

   SET @NSTEP=350    
       
   PRINT 'GENBC-12'
   
   SET @NSTEP=360    
       

   SELECT TOP 1 @CMIXNMATCHACCODE=VALUE FROM CONFIG WHERE CONFIG_OPTION='MIXNMATCH_AC_CODE'  
   
   IF OBJECT_ID('TEMPDB..#TMPCODE','U') IS NOT NULL
       DROP TABLE #TMPCODE
  
   SELECT A.ROW_ID
   INTO #TMPCODE
   FROM
   ( 
   SELECT ROW_ID,SUM(QUANTITY) AS QUANTITY 
   FROM JWR_JOBWORK_RECEIVE_FG_DET_UPLOAD A
   WHERE SP_ID=@NSPID 
    GROUP BY ROW_ID
   ) A
   LEFT OUTER JOIN
   (
     SELECT PID_ROW_ID,COUNT(*) AS QTY
     FROM #BARCODES 
     GROUP BY PID_ROW_ID
   ) B ON A.ROW_ID=B.PID_ROW_ID 
   WHERE A.QUANTITY <>ISNULL(B.QTY,0)
   
    
   IF EXISTS (SELECT TOP 1'U' FROM #TMPCODE)
   BEGIN
       
       SET @CERRORMSG=' ERROR IN BARCODE GENERATION PLEASE CHECK'
       GOTO END_PROC  
   END
   
   
     IF OBJECT_ID('TEMPDB..#TMPVALIDATEISSUEQTY','U') IS NOT NULL
       DROP TABLE #TMPVALIDATEISSUEQTY
  
   
   SELECT A.* 
   INTO #TMPVALIDATEISSUEQTY
   FROM 
   (
   SELECT  REF_ROW_ID ,SUM(QUANTITY) AS REC_QTY 
   FROM JWR_JOBWORK_RECEIVE_FG_DET_UPLOAD A
   WHERE SP_ID=@NSPID 
   GROUP BY REF_ROW_ID
   ) A
   JOIN
   (
     SELECT A.ROW_ID ,A.quantity -ISNULL(REC.REC_QTY,0) AS PENDING_ISSUE_QTY
     FROM jobwork_issue_det A (NOLOCK)
     JOIN jobwork_issue_mst B (NOLOCK) ON A.ISSUE_ID =B.issue_id 
     LEFT JOIN 
     (SELECT REF_ROW_ID ,SUM(QUANTITY) AS REC_QTY 
       FROM jobwork_receipt_det C (NOLOCK) 
       JOIN jobwork_receipt_mst D (NOLOCK) ON C.receipt_id =D.receipt_id 
       WHERE ISNULL(D.CANCELLED,0)=0
       GROUP BY REF_ROW_ID
      ) REC ON A.row_id =REC.ref_row_id 
     WHERE   B.cancelled =0
    ) B ON A.REF_ROW_ID =B.row_id
    AND A.REC_QTY>ISNULL(B.PENDING_ISSUE_QTY,0)
    
  
    IF EXISTS (SELECT TOP 1'U' FROM #TMPVALIDATEISSUEQTY)
   BEGIN
       
       SET @CERRORMSG=' REC QTY MORE THEN ISSUE QTY. PLEASE CHECK'
       GOTO END_PROC  
   END
   
  

    SET @CCMD=N' INSERT INTO '+@CTEMPDETAILTABLE1+'(RECEIPT_ID,PRODUCT_CODE,QUANTITY,ROW_ID,BIN_ID,JOB_CODE,JOB_RATE,
    LAST_UPDATE,PRINT_LABEL,NO_HRS,REMARKS,REF_ROW_ID,WIP_UID,PREV_JOB_RATE )
    SELECT ''LATER'' AS RECEIPT_ID ,A.PRODUCT_CODE,1 AS QUANTITY,''LATER'' AS ROW_ID,B.BIN_ID,B.JOB_CODE,
    ISNULL(B.JOB_RATE,0) AS JOB_RATE,GETDATE() AS LAST_UPDATE,0 AS PRINT_LABEL,0 AS NO_HRS,'''' AS REMARKS,REF_ROW_ID AS REF_ROW_ID,
    NEWID() AS WIP_UID,0 AS PREV_JOB_RATE
    FROM #BARCODES A
    JOIN
    (
     SELECT DISTINCT REF_ROW_ID ,BIN_ID,JOB_CODE,ROW_ID,JOB_RATE
     FROM JWR_JOBWORK_RECEIVE_FG_DET_UPLOAD A WHERE SP_ID='''+RTRIM(LTRIM(STR(@NSPID)))+'''
    ) B ON A.PID_ROW_ID=B.ROW_ID
    '
    PRINT @CCMD
    EXEC SP_EXECUTESQL @CCMD
    
   -- INSERTING RECORDS IN SKU    
   INSERT SKU ( PRODUCT_CODE,PRODUCT_NAME,ARTICLE_CODE, PARA1_CODE, PARA2_CODE, PARA3_CODE,PARA4_CODE, PARA5_CODE, PARA6_CODE,    
	PURCHASE_PRICE, MRP,  LAST_UPDATE,INV_NO,INV_DT, RECEIPT_DT, AC_CODE,FORM_ID,WS_PRICE,BARCODE_CODING_SCHEME )    
      SELECT  B.PRODUCT_CODE,ART.ARTICLE_NAME, A.ARTICLE_CODE, A.PARA1_CODE, A.PARA2_CODE, 
      '0000000'   AS PARA3_CODE, '0000000'   AS PARA4_CODE, '0000000'   AS PARA5_CODE,'0000000' AS PARA6_CODE,    
      ART. PURCHASE_PRICE, ART.MRP,  GETDATE() AS LAST_UPDATE,     
      '' AS INV_NO, '' AS MEMO_DT, '' MEMO_DT,@CMIXNMATCHACCODE AS AC_CODE,     
     '0000000' AS FORM_ID,ART.wholesale_price  AS WS_PRICE,ART.CODING_SCHEME    
     FROM #BARCODES B    
     JOIN JWR_JOBWORK_RECEIVE_FG_DET_UPLOAD A ON A.ROW_ID =B.PID_ROW_ID 
     JOIN ARTICLE ART ON A.ARTICLE_CODE = ART.ARTICLE_CODE    
     LEFT OUTER JOIN SKU D ON B.PRODUCT_CODE = D.PRODUCT_CODE    
     WHERE SP_ID=RTRIM(LTRIM(STR(@NSPID))) AND   D.PRODUCT_CODE IS NULL       
       
   SET @NSTEP=370    
       
   PRINT 'GENBC-13'
   -- INSERTING RECORDS IN SKU_OH    
  INSERT SKU_OH ( PRODUCT_CODE, DISCOUNT_AMOUNT, TAX_AMOUNT, FREIGHT, OTHER_CHARGES, ROUND_OFF, VALUE_ADD )    
   SELECT DISTINCT A.PRODUCT_CODE, 0 AS DISCOUNT_AMOUNT, 0 AS TAX_AMOUNT, 0 AS FREIGHT, 0 AS OTHER_CHARGES,     
   0 AS ROUND_OFF, 0 AS VALUE_ADD    
   FROM #BARCODES A    
   LEFT OUTER JOIN SKU_OH B ON A.PRODUCT_CODE = B.PRODUCT_CODE    
   WHERE B.PRODUCT_CODE IS NULL    
       
   SET @NSTEP=380    
   
   PRINT 'GENBC-14'    
 
	   INSERT ORD_PLAN_DET	( PARA4_CODE, PARA5_CODE, PARA6_CODE, ARTICLE_CODE, PARA1_CODE, PARA2_CODE, QUANTITY, PURCHASE_PRICE, MRP, PRINT_LABEL, MP_PERCENTAGE, ROW_ID, LAST_UPDATE, PARA3_CODE, MEMO_ID, SRNO, WHOLESALE_PRICE, WSP_PERCENTAGE, TAX_PERCENTAGE, TAX_AMOUNT, RFNET, RFNET_WOTAX, FIX_MRP, MANUAL_MRP, MANUAL_WSP, MD_PERCENTAGE, WD_PERCENTAGE, AUTO_SRNO, MANUAL_WSPP, MANUAL_MPP, BIN_ID, CONSUMED_ITEM_COST, VALUE_ADDITION, VALUE_ADDITION_PER_UNIT, manual_cal, RATE, HSN_CODE, WOD_ROW_ID )  
	   SELECT 	'0000000'  PARA4_CODE,'0000000' AS  PARA5_CODE,'0000000' AS  PARA6_CODE, 
	   A.ARTICLE_CODE, A.PARA1_CODE, A.PARA2_CODE, A.QUANTITY, ART.PURCHASE_PRICE, 
	   art.MRP,0 AS PRINT_LABEL,0 AS MP_PERCENTAGE,A.ROW_ID AS ROW_ID,GETDATE() AS LAST_UPDATE, 
	   '0000000' AS PARA3_CODE, c.MEMO_ID, 0 as SRNO,art. WHOLESALE_PRICE,
	   art.WSP_PERCENTAGE,0 as  TAX_PERCENTAGE,0 as  TAX_AMOUNT,0 as  RFNET,0 as RFNET_WOTAX, art.FIX_MRP,
	   0 as  MANUAL_MRP,0 as MANUAL_WSP, 
	   0 as MD_PERCENTAGE,0 as WD_PERCENTAGE,0 as AUTO_SRNO, 0 as MANUAL_WSPP,0 as MANUAL_MPP,'000' as BIN_ID, CONSUMED_ITEM_COST, 
	   VALUE_ADDITION, VALUE_ADDITION_PER_UNIT, manual_cal, RATE, art.HSN_CODE, WOD_ROW_ID 
	   FROM JWR_JOBWORK_RECEIVE_FG_DET_UPLOAD A
	   JOIN ORD_PLAN_BARCODE_DET B (NOLOCK) ON a.FIX_PRODUCT_CODE=B.PRODUCT_CODE 
	   JOIN ORD_PLAN_DET C (NOLOCK) ON B.REFROW_ID=C.ROW_ID 
	   JOIN ORD_PLAN_MST D (NOLOCK) ON C.MEMO_ID =D.MEMO_ID  
	   JOIN ARTICLE ART (NOLOCK) ON A.ARTICLE_CODE =ART.article_code 
	   where sp_id = @NSPID and  D.CANCELLED =0
	   
 
      INSERT ORD_PLAN_BARCODE_DET (PRODUCT_CODE,REFROW_ID)
      SELECT A.PRODUCT_CODE ,tmp.ROW_ID   
      FROM #BARCODES  A
	  JOIN JWR_JOBWORK_RECEIVE_FG_DET_UPLOAD TMP ON A.PID_ROW_ID =TMP.ROW_ID 
	  JOIN ORD_PLAN_BARCODE_DET B (NOLOCK) ON TMP.FIX_PRODUCT_CODE=B.PRODUCT_CODE 
	  JOIN ORD_PLAN_DET C (NOLOCK) ON B.REFROW_ID=C.ROW_ID 
	  JOIN ORD_PLAN_MST D (NOLOCK) ON C.MEMO_ID =D.MEMO_ID 
	  WHERE D.CANCELLED =0 AND TMP.sp_id = @NSPID 
	  
	 
	 INSERT ORD_PLAN_BOM_DET	( PARA4_CODE, PARA5_CODE, PARA6_CODE, ARTICLE_CODE, PARA1_CODE, PARA2_CODE, PARA3_CODE, QUANTITY, ADD_AVG_QUANTITY, AVG_QUANTITY, PURCHASE_PRICE, BIN_ID, SRNO, AUTO_SRNO, LAST_UPDATE, ROW_ID, MEMO_ID, REF_ROW_ID, manual_qty, JOB_CODE, TOL_PER )  
	 SELECT 	'0000000' AS   PARA4_CODE,'0000000' AS  PARA5_CODE,'0000000' AS  PARA6_CODE, 
			bom_article_code AS ARTICLE_CODE,bom_para1_code AS PARA1_CODE,bom_para2_code  PARA2_CODE,'0000000' AS PARA3_CODE, 
			(ART.avg_qty+ART.ADD_AVG_QTY )*A.QUANTITY AS QUANTITY, ART.ADD_AVG_QTY,ART.avg_qty AS  AVG_QUANTITY, 
			ARTICLE.purchase_price  AS PURCHASE_PRICE, 
			'000' AS BIN_ID,0 AS SRNO,0 AS AUTO_SRNO,
			 GETDATE() AS LAST_UPDATE,NEWID() AS  ROW_ID, D.MEMO_ID,A.ROW_ID    AS REF_ROW_ID, 
			0 AS  manual_qty,ART.JOB_CODE AS JOB_CODE,ART.TOL_PER  TOL_PER 
	  FROM JWR_JOBWORK_RECEIVE_FG_DET_UPLOAD A
	  JOIN ORD_PLAN_BARCODE_DET B (NOLOCK) ON a.FIX_PRODUCT_CODE=B.PRODUCT_CODE 
	  JOIN ORD_PLAN_DET C (NOLOCK) ON B.REFROW_ID=C.ROW_ID 
	  JOIN ORD_PLAN_MST D (NOLOCK) ON C.MEMO_ID =D.MEMO_ID  
	  JOIN art_bom  ART (NOLOCK) ON A.ARTICLE_CODE =ART.article_code 
	  JOIN ARTICLE (NOLOCK) ON ARTICLE.article_code =ART.bom_article_code 
	  where sp_id = @NSPID and  D.CANCELLED =0
	  
	  
	   INSERT ORD_PLAN_JOB	( MEMO_ID, JOB_CODE, JOB_ORDER, ROW_ID, ARTICLE_CODE, TAT_DAYS )  
	   SELECT A.MEMO_ID, A.JOB_CODE,A.job_order JOB_ORDER,NEWID() AS ROW_ID, A.ARTICLE_CODE, A. TAT_DAYS  FROM
	   (
	   
	   SELECT 	DISTINCT  D.MEMO_ID, ART.JOB_CODE,ART.job_order JOB_ORDER, ART.ARTICLE_CODE, 0 AS TAT_DAYS 
	   FROM JWR_JOBWORK_RECEIVE_FG_DET_UPLOAD A
	  JOIN ORD_PLAN_BARCODE_DET B (NOLOCK) ON a.FIX_PRODUCT_CODE=B.PRODUCT_CODE 
	  JOIN ORD_PLAN_DET C (NOLOCK) ON B.REFROW_ID=C.ROW_ID 
	  JOIN ORD_PLAN_MST D (NOLOCK) ON C.MEMO_ID =D.MEMO_ID  
	  JOIN art_jobs   ART (NOLOCK) ON A.ARTICLE_CODE =ART.article_code 
	  where sp_id = @NSPID and  D.CANCELLED =0
	 
	  ) A
	  LEFT JOIN ORD_PLAN_JOB OJ (nolock) ON OJ.MEMO_ID =A.MEMO_ID AND OJ.ARTICLE_CODE =A.ARTICLE_CODE AND OJ.JOB_CODE =A.JOB_CODE 
	  WHERE OJ.MEMO_ID IS NULL
	  
	
	  
 
 END TRY     
     
 BEGIN CATCH    
	SET @CERRORMSG = 'PROCEDURE SAVETRAN_GENBARCODES_JOBCARD : STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()    
 END CATCH    
     
END_PROC:    
     
END    
--******************************* END OF PROCEDURE SAVETRAN_GENBARCODES_JOBCARD    
