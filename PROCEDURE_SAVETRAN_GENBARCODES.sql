create PROCEDURE SAVETRAN_GENBARCODES
(    
 @CXNID VARCHAR(40),    
 @CPREFIX VARCHAR(50),    
 @NMODE INT= 1,    
 @NSPID varchar(50)='',    
 @LOCID VARCHAR(4)='',    
 @CERRORMSG VARCHAR(MAX) OUTPUT    
) 

AS     
BEGIN   
 
	 -- @NMODE : SOURCE OF BARCODE GENERATION, 1- FROM PURCHASE, 2- FROM PO    
	 --PRINT 'ROHIT 1'    
	 -- THIS PROCEDURE ASSUMES THAT THE PID TABLE IS NORMALIZED FOR UNIQUE CODING    
	 -- IF IT IS NOT NORMALIZED THEN THE PROCESS WILL FAIL    
	     
BEGIN TRY    
	     
	 DECLARE @NROWS    BIGINT,    
	   @NEANROWS   BIGINT,    
	   @NFIXROWS   BIGINT,    
	   @NCTR    BIGINT,    
	   @CPIDROWID   VARCHAR(50),    
	   @CNEXTPRODUCTCODE VARCHAR(50),    
	   @NNEXTKEYVALUE  NUMERIC(30,0),    
	   @CPIMDEPTID   VARCHAR(5),  
	   @CBIN_ALIAS	VARCHAR(10),  
	   @CLOCID    VARCHAR(4),@CHOLOCID VARCHAR(5),    
	   @CCMD NVARCHAR(MAX),@CTEMPIRDTABLE VARCHAR(MAX),@NWHCOUNT INT,    
	   @CBARCODEPREFIX VARCHAR(100),@CADDPREFIX VARCHAR(50),@DMEMODT DATETIME,    
	   @CPREFIXYEARCODE BIT,@CPREFIXLOCID BIT,@CYEARCODE CHAR(2),@CADDLOCIDPREFIX CHAR(4),    
	   @CTEMPIRMTABLE VARCHAR(500),@NSTEP INT,@CCUSTOMPREFIX VARCHAR(50),@BLOOP BIT,@NPURLOCCNT INT,    
	   @BRANDOMGEN BIT,@NBARCODELEN INT,@CARTICLENO VARCHAR(300),@CARTPREFIX VARCHAR(50),    
	   @BGENEANCODES BIT,@CGENEANCODES VARCHAR(5),    
	   @CEANPREFIX VARCHAR(10),@NEANLENGTH INT,@CEANLENGTH VARCHAR(5),@CPREFIXFLOORID VARCHAR(10),  
	   @CADDFLOORIDPREFIX VARCHAR(10),@BBARCODEGENERATED BIT,
	   @CPREFIXMONTHCODE VARCHAR(10),@MONTHCODE VARCHAR(2),@CXNBARCODEPREFIX VARCHAR(50),
	   @CREATE_MANUAL_BARCODE BIT,@cMultipleFc VARCHAR(2)
	  
	          
	 SELECT @CYEARCODE='',@CADDLOCIDPREFIX='',@CERRORMSG=''    
	     
	 SET @NSTEP=10 

	 if @LOCID<>''
	 set @CLOCID=@LOCID
	 
	
	 IF OBJECT_ID('TEMPDB..#PIDROWS','U') IS NOT NULL    
		DROP TABLE #PIDROWS    
	    
	 IF OBJECT_ID('TEMPDB..#BARCODES','U') IS NOT NULL    
		DROP TABLE #BARCODES    
		
	 --FOR SKU NAMES 
	 DECLARE @TAB VARCHAR(1000),@MYSQL VARCHAR(MAX)
	 SET @TAB='TEMPDB..##GEN_BARCODE_'+DB_NAME()
	 SET @MYSQL='IF OBJECT_ID('''+@TAB+''',''U'') IS NULL
     SELECT TOP 0 PRODUCT_CODE,GETDATE() INSERTED_ON INTO '+REPLACE(@TAB,'TEMPDB..','')+' FROM SKU;'  
	 EXEC(@MYSQL)
     
	 SELECT A.ROW_ID AS PID_ROW_ID,B.CODING_SCHEME,A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,CONVERT(INT,0) AS SRNO  
	 ,CONVERT(BIT,0) AS GEN_EAN_CODES ,A.GST_PERCENTAGE,
	 CAST('' AS  VARCHAR(10)) AS PARA1_CODE,
	 CAST('' AS  VARCHAR(10)) AS PARA2_CODE
	 INTO #PIDROWS   
	 FROM PID01106 A    
	 JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
	 WHERE 1=2    
	          
	 SELECT A.ROW_ID AS PID_ROW_ID,A.PRODUCT_CODE INTO #BARCODES FROM PID01106 A  WHERE 1=2    
	 
	 	       
	SET @CTEMPIRDTABLE='IRD01106'
	SET @CTEMPIRMTABLE='IRM01106'   
		  
	 IF OBJECT_ID ('SAVETRAN_GENCUSTOM_BARCODE','P')   IS NOT NULL
	 BEGIN
	   ALTER TABLE #PIDROWS ADD SUB_SECTION_CODE VARCHAR(10) DEFAULT('')
	   --ALTER TABLE #PIDROWS ADD PARA1_CODE VARCHAR(10) DEFAULT('')
	   --ALTER TABLE #PIDROWS ADD PARA2_CODE VARCHAR(10) DEFAULT('')
	   ALTER TABLE #PIDROWS ADD KEY_CODE VARCHAR(50) DEFAULT('')
	  
	   EXEC SAVETRAN_GENCUSTOM_BARCODE @CXNID,@CPREFIX,@NMODE,@NSPID ,@LOCID,@CERRORMSG  OUTPUT 
	   IF ISNULL(@CERRORMSG,'')<>''
	   GOTO END_PROC
	     
	   GOTO INS_CODES
	 END
	     
	         
	 PRINT 'GENBC-1'    
	 SET @NSTEP=20    
	     
	 SET @NROWS = 0    
	 SET @NFIXROWS = 0    
	 SET @NEANROWS = 0    
	     
 	 SELECT TOP 1 @CREATE_MANUAL_BARCODE= VALUE FROM CONFIG WHERE CONFIG_OPTION='CREATE_MANUAL_BARCODE' 
    SET @CREATE_MANUAL_BARCODE=ISNULL(@CREATE_MANUAL_BARCODE,0) 

	     
	 SELECT TOP 1 @CGENEANCODES=VALUE FROM CONFIG WHERE CONFIG_OPTION='GEN_EAN_CODES'    
	 IF @CGENEANCODES='1'    
		 SET @BGENEANCODES=1    
	 ELSE    
		 SET @BGENEANCODES=0    
	     
	 SELECT TOP 1 @CEANPREFIX=VALUE FROM CONFIG WHERE CONFIG_OPTION='EAN_PREFIX'    
	 SELECT TOP 1 @CEANLENGTH=VALUE FROM CONFIG WHERE CONFIG_OPTION='EAN_LENGTH'    
	     
	 IF ISNULL(@CEANLENGTH,'')=''    
		SET @NEANLENGTH=12    
	 ELSE    
		SET @NEANLENGTH=CONVERT(INT,@CEANLENGTH)     

	 if isnull(@CEANPREFIX,'')=''
	    select @CEANPREFIX=loc_Ean_prefix from location  where dept_id=@CLOCID
	     
	     
	
	 SELECT @CLOCID = @LOCID     
	        
	 SELECT TOP 1 @CHOLOCID = [VALUE] FROM CONFIG WHERE CONFIG_OPTION = 'HO_LOCATION_ID'  
	 
	
	      
	 IF ISNULL(@CLOCID,'') = ''   
	 begin
	      SET @CERRORMSG='location id can not be blank in savetran gen barcodes'
	      GOTO END_PROC
	 end  
		
		  
		     
	    
	 --SELECT TOP 1 @CHOLOCID = [VALUE] FROM CONFIG WHERE CONFIG_OPTION = 'HO_LOCATION_ID'    
	 IF @NMODE=11 --FOR PRODUCTION TO GEN BARCODE    
	 BEGIN    
		  SET @NSTEP=30    
		  --PRD_STK_TRANSFER_DTM_MST    
		  --PRD_STK_TRANSFER_DTM_DET    
		  PRINT 'GENBC-2'     
		  --SELECT * FROM PIM01106 WHERE MRR_ID = @CXNID    
		   SELECT @CPIMDEPTID = DEPT_ID,@DMEMODT=MEMO_DT  FROM PRD_STK_TRANSFER_DTM_MST WHERE MEMO_ID = @CXNID    
		  IF ISNULL(@CPIMDEPTID,'') = ''    
		   GOTO END_PROC    
		    
		  PRINT 'GENBC-3'    
		      
		  SET @NSTEP=40    
		     
		  SET @NFIXROWS = @@ROWCOUNT    
		  
		  -- BARCODE GENERATION FOR LOT AND UNIQUE CODES  
		  	  
		    
		  INSERT #PIDROWS ( PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,ARTICLE_NO,SRNO,GEN_EAN_CODES )     
		  SELECT A.ROW_ID, B.CODING_SCHEME, A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,0,'' AS GEN_EAN_CODES  /*UNMERGED:16MAY2013*/    
		  FROM PRD_STK_TRANSFER_DTM_DET A    
		  JOIN PRD_SKU S ON A.PRODUCT_UID = S.PRODUCT_UID     
		  JOIN ARTICLE B ON S.ARTICLE_CODE = B.ARTICLE_CODE    
		  WHERE A.MEMO_ID = @CXNID    
		  AND   B.CODING_SCHEME <> 1    
		  AND   ISNULL(A.PRODUCT_CODE,'') = ''    
		  --ORDER BY A.SRNO    
		      
		  PRINT 'GENBC-4'    
		  SET @NSTEP=50    
		      
		  SET @NROWS = @@ROWCOUNT     
	 END  ---- END OF IF @NMODE=11    
	 ELSE
	  --SELECT TOP 1 @CHOLOCID = [VALUE] FROM CONFIG WHERE CONFIG_OPTION = 'HO_LOCATION_ID'    
	 IF @NMODE=12 --FOR PRODUCTION TO GEN BARCODE    
	 BEGIN    
		  SET @NSTEP=30    
		  --PRD_TRANSFER_MAIN_MST    
		  --PRD_TRANSFER_MAIN_DET    
		  PRINT 'GENBC-2'     
		  --SELECT * FROM PIM01106 WHERE MRR_ID = @CXNID    
		   SELECT @CPIMDEPTID = LEFT(MEMO_ID,2),@DMEMODT=MEMO_DT  FROM PRD_TRANSFER_MAIN_MST WHERE MEMO_ID = @CXNID    
		  IF ISNULL(@CPIMDEPTID,'') = ''    
		   GOTO END_PROC    
		    
		  PRINT 'GENBC-3'    
		      
		  SET @NSTEP=40    
		     
		  SET @NFIXROWS = @@ROWCOUNT    
		  
		  -- BARCODE GENERATION FOR LOT AND UNIQUE CODES  
		  	  
		    
		  INSERT #PIDROWS ( PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,ARTICLE_NO,SRNO,GEN_EAN_CODES,GST_PERCENTAGE )     
		  SELECT A.ROW_ID, B.CODING_SCHEME, A.QTY AS QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,0,'' AS GEN_EAN_CODES,0 AS GST_PERCENTAGE   /*UNMERGED:16MAY2013*/    
		  FROM PRD_TRANSFER_MAIN_DET A       
		  JOIN ARTICLE B ON A.ARTICLE_CODE = B.ARTICLE_CODE    
		  WHERE A.MEMO_ID = @CXNID    
		  AND   B.CODING_SCHEME <> 1    
		  AND   ISNULL(A.PRODUCT_CODE,'') = ''    
		  --ORDER BY A.SRNO    
		      
		  PRINT 'GENBC-4'    
		  SET @NSTEP=50    
		      
		  SET @NROWS = @@ROWCOUNT     
	 END  ---- END OF IF @NMODE=11  
	     
	 ELSE     
	 IF @NMODE=1 ---- FOR PURCHASE TO GENBARCODES   
	 BEGIN    
	      
		  SET @NSTEP=30    
		      
		  PRINT 'GENBC-2'     
		  --SELECT * FROM PIM01106 WHERE MRR_ID = @CXNID    
		  SELECT @CPIMDEPTID =A.BIN_ID,@CBIN_ALIAS= ISNULL(B.BIN_ALIAS,''),@DMEMODT=RECEIPT_DT 
		  FROM PIM01106 A
		  LEFT OUTER JOIN BIN B ON B.BIN_ID=A.BIN_ID
		  WHERE MRR_ID = @CXNID    
		  IF ISNULL(@CPIMDEPTID,'') = ''    
		   GOTO END_PROC    
		    
		  
		 UPDATE A SET PRODUCT_CODE=ISNULL(B.PRODUCT_CODE,'')  
		 FROM PID01106 A  
		 JOIN ARTICLE A1 (NOLOCK) ON A1.ARTICLE_CODE=A.ARTICLE_CODE  
		 LEFT OUTER JOIN SKU B (NOLOCK) ON A.ARTICLE_CODE=B.ARTICLE_CODE AND A.PARA1_CODE=B.PARA1_CODE AND A.PARA2_CODE=B.PARA2_CODE  
		 WHERE A.MRR_ID = @CXNID  
		-- AND   ISNULL(B.PRODUCT_CODE,'')<>''  
		 AND CHARINDEX('@',A.PRODUCT_CODE)=0
		 AND CHARINDEX('@',ISNULL(B.PRODUCT_CODE,0))=0
		 AND (A1.GEN_EAN_CODES=1 AND @BGENEANCODES=1)  
		 
		   
		      
		  PRINT 'GENBC-3'    
		      
		  SET @NSTEP=40    
		      
		  SET @NFIXROWS = @@ROWCOUNT    
		  --PRINT 'ROHIT 2'    
		  --BARCODE GENERATION FOR LOT AND UNIQUE CODES    
		  INSERT #PIDROWS ( PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,ARTICLE_NO,SRNO,GEN_EAN_CODES,GST_PERCENTAGE)    
		   SELECT A.ROW_ID, B.CODING_SCHEME, A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,A.SRNO,B.GEN_EAN_CODES ,A.GST_PERCENTAGE 
		   FROM PID01106 A    
		   JOIN ARTICLE B (NOLOCK) ON A.ARTICLE_CODE = B.ARTICLE_CODE    
		   WHERE A.MRR_ID = @CXNID    
		   AND ISNULL(A.PRODUCT_CODE,'') = ''   AND (B.GEN_EAN_CODES=0 OR @BGENEANCODES=0) AND B.CODING_SCHEME<>1  
		   ORDER BY A.SRNO  
		     
		   SET @NROWS = @@ROWCOUNT   
		  
		 -- BARCODE GENERATION FOR FIXED CODES  
		   INSERT #PIDROWS ( PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,ARTICLE_NO,SRNO,GEN_EAN_CODES,GST_PERCENTAGE)  
		   SELECT A.ROW_ID, B.CODING_SCHEME, A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,A.SRNO,B.GEN_EAN_CODES,A.GST_PERCENTAGE
		   FROM PID01106 A (NOLOCK)  
		   JOIN ARTICLE B (NOLOCK) ON A.ARTICLE_CODE = B.ARTICLE_CODE  
		   WHERE A.MRR_ID = @CXNID AND ISNULL(A.PRODUCT_CODE,'') =''  
		   AND B.GEN_EAN_CODES=1 AND @BGENEANCODES=1  
		   ORDER BY A.SRNO    
		   
		   SET @NEANROWS = @@ROWCOUNT 
		   
		   SET @NSTEP=400---MANUAL BARCODE 
		   IF @CREATE_MANUAL_BARCODE=1
		   BEGIN
			   GOTO INS_CODES 
		   END   
		    
	 END   --- END OF IF @NMODE=1 
	 
	 ELSE  
	 IF @NMODE = 3 -- @NMODE = 3 - BARCODE GENERATION FROM PURCHASE ORDER    
	 BEGIN    
		  SELECT @CPIMDEPTID = DEPT_ID,@DMEMODT=PO_DT,@CXNBARCODEPREFIX=BARCODE_PREFIX FROM POM01106 WHERE PO_ID = @CXNID    
		  IF ISNULL(@CPIMDEPTID,'') = ''    
			 GOTO END_PROC    
		    
		    
		    UPDATE A SET PRODUCT_CODE=ISNULL(B.PRODUCT_CODE,'')  
			FROM POD01106 A (NOLOCK) 
			JOIN ARTICLE A1 (NOLOCK) ON A1.ARTICLE_CODE=A.ARTICLE_CODE  
			LEFT OUTER JOIN SKU B (NOLOCK) ON A.ARTICLE_CODE=B.ARTICLE_CODE AND A.PARA1_CODE=B.PARA1_CODE AND A.PARA2_CODE=B.PARA2_CODE  
			WHERE  A.PO_ID = @CXNID    
			AND (A1.GEN_EAN_CODES=1 AND @BGENEANCODES=1)  
		   
		     UPDATE POD SET PRODUCT_CODE =ART.PRODUCT_CODE 
			 FROM POD01106 POD (NOLOCK) 
			 JOIN 
			 ( SELECT A.ARTICLE_CODE,B.PARA1_CODE ,C.PARA2_CODE ,SKU.PRODUCT_CODE 
			  FROM ARTICLE A (NOLOCK)
			  JOIN ART_PARA1 B (NOLOCK) ON A.ARTICLE_CODE =B.ARTICLE_CODE 
			  JOIN ART_DET C (NOLOCK) ON A.ARTICLE_CODE =C.ARTICLE_CODE 
			  JOIN SKU  (NOLOCK) ON SKU.ARTICLE_CODE =A.ARTICLE_CODE AND SKU.PARA1_CODE =B.PARA1_CODE AND C.PARA2_CODE =SKU.PARA2_CODE 
			  WHERE A.CODING_SCHEME =1
			 ) ART ON POD.ARTICLE_CODE =ART.ARTICLE_CODE 
			 AND POD.PARA1_CODE =ART.PARA1_CODE 
			 AND POD.PARA2_CODE =ART.PARA2_CODE
			 WHERE ISNULL(POD.PRODUCT_CODE,'') ='' 
			 AND  POD.PO_ID = @CXNID      
		      
		      
		   SET @NFIXROWS = @@ROWCOUNT    
		      
		   -- BARCODE GENERATION FOR LOT AND UNIQUE CODES    
		   INSERT #PIDROWS ( PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,ARTICLE_NO,SRNO,GEN_EAN_CODES,GST_PERCENTAGE )     
		   SELECT A.ROW_ID, B.CODING_SCHEME, A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,A.SRNO,B.GEN_EAN_CODES,0 AS GST_PERCENTAGE /*UNMERGED:16MAY2013*/    
		   FROM POD01106 A (NOLOCK)   
		   JOIN ARTICLE B (NOLOCK) ON A.ARTICLE_CODE = B.ARTICLE_CODE    
		   WHERE A.PO_ID = @CXNID    
		   --AND   B.CODING_SCHEME <> 1    
		   --AND   A.PRODUCT_CODE = ''    
		   AND   ISNULL(A.PRODUCT_CODE,'') = ''   AND (B.GEN_EAN_CODES=0 OR @BGENEANCODES=0)  AND B.CODING_SCHEME<>1  
		   ORDER BY A.SRNO    
		      
		   SET @NROWS=@@ROWCOUNT    
		  
		   -- BARCODE GENERATION FOR FIXED CODES  
		   INSERT #PIDROWS ( PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,ARTICLE_NO,SRNO,GEN_EAN_CODES,GST_PERCENTAGE )  
		   SELECT A.ROW_ID, B.CODING_SCHEME, A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,A.SRNO,B.GEN_EAN_CODES , 0 AS GST_PERCENTAGE
		   FROM POD01106 A  (NOLOCK) 
		   JOIN ARTICLE B (NOLOCK) ON A.ARTICLE_CODE = B.ARTICLE_CODE  
		   WHERE A.PO_ID = @CXNID AND ISNULL(A.PRODUCT_CODE,'') =''  
		   AND B.GEN_EAN_CODES=1 AND @BGENEANCODES=1  
		   ORDER BY A.SRNO    
		   
		   SET @NEANROWS = @@ROWCOUNT    
	 END   ---- END OF IF @NMODE = 3
	 
	 ELSE    
	 IF @NMODE = 2  -- BARCODE GENERATION FROM ITEM RATE REVISION    
	 BEGIN    
		  DECLARE @CDONOTGENIRRBARCODES VARCHAR(5)    
		  
		      
		  SELECT @NWHCOUNT=COUNT(*) FROM LOCATION WHERE DEPT_ID<>@CHOLOCID AND PUR_LOC=1     
		      
		  SET @NSTEP=60    
		      
		  SELECT TOP 1 @CDONOTGENIRRBARCODES=VALUE FROM CONFIG WHERE   
			  CONFIG_OPTION='DONOT_GEN_BARCODE_IRR' 
		   
		  SET @CDONOTGENIRRBARCODES = ISNULL(@CDONOTGENIRRBARCODES,0)       
	
		      
		  SET @NSTEP=70    
		      
		  -- BARCODE GENERATION FOR LOT AND UNIQUE CODES    
		      
		  SET @CCMD=N'SELECT @DMEMODTOUT=IRM_MEMO_DT FROM '+@CTEMPIRMTABLE + ' WHERE IRM_MEMO_ID ='''+@CXNID+''''
		  EXEC SP_EXECUTESQL @CCMD,N'@DMEMODTOUT DATETIME OUTPUT',@DMEMODTOUT=@DMEMODT OUTPUT    
		      
		  SET @NSTEP=75    
		  -- BARCODE GENERATION FOR FIXED CODES    
		      

		  SET @CCMD=N'SELECT ROW_ID,B.ARTICLE_NO FROM '+@CTEMPIRDTABLE+' A    
			 JOIN ARTICLE B ON A.ARTICLE_CODE = B.ARTICLE_CODE    
			 JOIN SKU C ON C.PRODUCT_CODE=A.PRODUCT_CODE    
			 JOIN ARTICLE D ON C.ARTICLE_CODE = D.ARTICLE_CODE    
			 WHERE A.IRM_MEMO_ID ='''+@CXNID+''' AND ( '''+@CDONOTGENIRRBARCODES+'''<>''1'' OR
			 ((A.OLD_MRP<>A.NEW_MRP OR A.OLD_WSP<>A.NEW_WSP )
			  AND ('''+@CHOLOCID+'''<>'''+@CLOCID+''' OR '+STR(@NWHCOUNT)+'>0) ))
			 AND ISNULL(C.BARCODE_CODING_SCHEME,D.CODING_SCHEME)<>1
			 AND A.ARTICLE_CODE<>A.OLD_ARTICLE_CODE AND B.CODING_SCHEME=1
			 AND ISNULL(A.NEW_PRODUCT_CODE,'''')=''''    
			 UNION ALL    
			 SELECT ROW_ID,NEW_PRODUCT_CODE FROM '+@CTEMPIRDTABLE+' A   
			 WHERE A.IRM_MEMO_ID ='''+@CXNID+''' AND ISNULL(NEW_PRODUCT_CODE,'''')<>'''''    
		      
		  PRINT @CCMD    
		  INSERT #BARCODES( PID_ROW_ID,PRODUCT_CODE )       
		  EXEC SP_EXECUTESQL @CCMD    
		  
		      
		  SET @NSTEP=77        
		  -- BARCODE GENERATION FOR LOT AND UNIQUE CODES    
		    
		  SET @CCMD=N'SELECT A.ROW_ID, B.CODING_SCHEME, A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO    
			 FROM '+@CTEMPIRDTABLE+' A    
			 JOIN ARTICLE B ON A.ARTICLE_CODE = B.ARTICLE_CODE    
			 JOIN SKU C ON C.PRODUCT_CODE=A.PRODUCT_CODE    
			 JOIN ARTICLE D ON D.ARTICLE_CODE=A.OLD_ARTICLE_CODE    
			 WHERE A.IRM_MEMO_ID ='''+@CXNID+''' AND   ( '''+@CDONOTGENIRRBARCODES+'''<>''1'' OR
			( ( A.OLD_MRP<>A.NEW_MRP OR A.OLD_WSP<>A.NEW_WSP )     
			  AND ('''+@CHOLOCID+'''<>'''+@CLOCID+''' OR '+STR(@NWHCOUNT)+'>0) ))
			 AND (B.ARTICLE_CODE=D.ARTICLE_CODE OR B.CODING_SCHEME<>1)
			 AND ISNULL(A.NEW_PRODUCT_CODE,'''')='''' AND (B.GEN_EAN_CODES=0 OR '+STR(@BGENEANCODES)+'=0)      
			 ORDER BY A.SRNO'    
		         
		  SET @NSTEP=80    

		  	-- AND ISNULL(C.BARCODE_CODING_SCHEME,D.CODING_SCHEME)<>1 (as Discuss with Sir and Arun ji unique or lot generate from fix code also)20230630
		      
		  PRINT @CCMD    
		    
		  INSERT #PIDROWS ( PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,ARTICLE_NO)     
		  EXEC SP_EXECUTESQL @CCMD    
		    
		  
		      
		  SET @NROWS = @@ROWCOUNT  
		  
		  
		  -- BARCODE GENERATION FOR EAN CODES
		  SET @CCMD=N'SELECT A.ROW_ID, B.CODING_SCHEME, A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,B.GEN_EAN_CODES      
			 FROM '+@CTEMPIRDTABLE+' A      
			 JOIN ARTICLE B ON A.ARTICLE_CODE = B.ARTICLE_CODE      
			 JOIN SKU C ON C.PRODUCT_CODE=A.PRODUCT_CODE      
			 JOIN ARTICLE D ON D.ARTICLE_CODE=A.OLD_ARTICLE_CODE      
			 WHERE A.IRM_MEMO_ID ='''+@CXNID+''' AND  ( '''+@CDONOTGENIRRBARCODES+'''<>''1'' OR
			 ( (A.OLD_MRP<>A.NEW_MRP OR A.OLD_WSP<>A.NEW_WSP )
			  AND ('''+@CHOLOCID+'''<>'''+@CLOCID+''' OR '+STR(@NWHCOUNT)+'>0))) 
			 AND ISNULL(A.NEW_PRODUCT_CODE,'''')='''' AND (B.GEN_EAN_CODES=1 AND  '+STR(@BGENEANCODES)+'=1)      
			 ORDER BY A.SRNO'      
		           
		        
		  PRINT @CCMD      
		    
		  INSERT #PIDROWS ( PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,ARTICLE_NO,GEN_EAN_CODES)       
		  EXEC SP_EXECUTESQL @CCMD      
		        
		  SET @NEANROWS = @@ROWCOUNT
	         
	 END  ---- END OF IF @NMODE = 2   
	 ELSE    
	 IF @NMODE = 4 -- @NMODE = 4 - BARCODE GENERATION FROM SPLIT/COMBINE    
	 BEGIN    
		  PRINT 'ENTER BCGEN-1'    
		  SELECT @CPIMDEPTID = DEPT_ID,@DMEMODT=MEMO_DT FROM SCM01106 WHERE MEMO_ID = @CXNID    
		  IF ISNULL(@CPIMDEPTID,'') = ''    
		   GOTO END_PROC    
		      
		  PRINT 'ENTER BCGEN-2'    
		      
		  SET @NFIXROWS = @@ROWCOUNT    
		      
		  PRINT 'ENTER BCGEN-3'    
		  -- BARCODE GENERATION FOR LOT AND UNIQUE CODES    
		  INSERT #PIDROWS ( PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,ARTICLE_NO,SRNO) /*UNMERGED:16MAY2013*/     
		  SELECT A.ROW_ID, B.CODING_SCHEME, A.QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,A.SRNO    
		  FROM SCF01106 A    
		  JOIN ARTICLE B ON A.ARTICLE_CODE = B.ARTICLE_CODE    
		  WHERE A.MEMO_ID = @CXNID    
		  AND   B.CODING_SCHEME <> 1    
		  AND   A.PRODUCT_CODE = ''    
		  ORDER BY A.SRNO    
		      
		  SET @NROWS=@@ROWCOUNT    
	 END  ---- END OF IF @NMODE = 4  
	 ELSE    
	 IF @NMODE = 13 -- @NMODE = 13 - EAN GENERATION AUTO BATCH   
	 BEGIN  
	     PRINT 'ENTER BCGEN-100'   
		 	      
		 
	     INSERT #PIDROWS ( PID_ROW_ID, CODING_SCHEME, QUANTITY,ARTICLE_CODE,ARTICLE_NO,SRNO,GEN_EAN_CODES,GST_PERCENTAGE,PARA1_CODE,PARA2_CODE)  
		 SELECT DISTINCT  A.ROW_ID, B.CODING_SCHEME, 0 AS QUANTITY,B.ARTICLE_CODE,B.ARTICLE_NO,0 AS SRNO,B.GEN_EAN_CODES,0 AS GST_PERCENTAGE,
		        p1.para1_code ,p2.para2_code 
		 FROM #TMPMASTERSENC A  
		 JOIN ARTICLE B ON A.ARTICLE_NO = B.ARTICLE_NO
		 JOIN PARA1 P1 (NOLOCK) ON P1.PARA1_NAME  =A.PARA1_NAME
		 JOIN PARA2 P2 (NOLOCK) ON P2.PARA2_NAME  =A.PARA2_NAME 
		 WHERE  ISNULL(A.PRODUCT_CODE,'') =''  
		 AND B.GEN_EAN_CODES=1 
		 AND   B.CODING_SCHEME = 1    

		 SET @NROWS=@@ROWCOUNT   
		 SET @NEANROWS=@@ROWCOUNT 
		 
		 IF EXISTS (SELECT TOP 1 'U' FROM #PIDROWS GROUP BY PID_ROW_ID HAVING COUNT(*)>1)
		 BEGIN
		        ;WITH DUPLICATE_EAN AS 
				(
				  SELECT * ,SR=ROW_NUMBER() OVER (PARTITION BY PID_ROW_ID ORDER BY PID_ROW_ID)
				  FROM #PIDROWS
				)
				DELETE FROM DUPLICATE_EAN WHERE SR>1
		 END

	  END   
	   
	     
	 SET @NSTEP=90    
	 
	 ----- GENERATE BARCODE PREFIX EXPRESSION WITHOUT CUSTOM PROCEDURE   
	 IF NOT EXISTS ( SELECT NAME FROM SYSOBJECTS WHERE NAME = 'SP_GETNEWPREFIX' )    
	 BEGIN  
	   --DECLARE LOCAL VARIABLE FOR BARCODE_PREFIX
	      --ADD BELOW LINE ON 31 MARCH 2017
	      DECLARE @BARCODE_PREFIX VARCHAR(5)
	      
	      SELECT @BARCODE_PREFIX=BARCODE_PREFIX FROM PIM01106 WITH(NOLOCK) WHERE MRR_ID =@CXNID
	      
		  IF ISNULL(@BARCODE_PREFIX,'')=''
		   BEGIN
		     
		  IF ISNULL(@CXNBARCODEPREFIX,'')=''
				SELECT TOP 1 @CADDPREFIX = VALUE FROM CONFIG WHERE CONFIG_OPTION='barcode_prefix'
		  ELSE
				SET @CADDPREFIX=@CXNBARCODEPREFIX    
				
		  SELECT TOP 1 @CPREFIXYEARCODE= VALUE FROM CONFIG WHERE CONFIG_OPTION='YEAR_CODE_IN_PC' 
		  
		  IF ISNULL(@CPREFIXYEARCODE,'')='1'    
			 SET @CYEARCODE= RIGHT(LTRIM(RTRIM(STR(DATEPART(YY,@DMEMODT)))),2)     
		   
		  SELECT TOP 1 @CPREFIXMONTHCODE= VALUE FROM CONFIG WHERE CONFIG_OPTION='MONTH_CODE_IN_PC' 
		  IF ISNULL(@CPREFIXMONTHCODE,'')='1'
				SELECT @MONTHCODE=CASE WHEN MONTH(GETDATE())<10 THEN '0'+ CAST(MONTH(GETDATE()) AS VARCHAR(2)) ELSE CAST(MONTH(GETDATE())AS VARCHAR(2))  END
		   
		  SELECT TOP 1 @CPREFIXFLOORID= VALUE FROM CONFIG WHERE  CONFIG_OPTION='FLOOR_ID_IN_PC'
		
		  IF ISNULL(@CPREFIXFLOORID,'')='1'    
				SET @CADDFLOORIDPREFIX=@CLOCID+ISNULL(@CBIN_ALIAS ,'')
		  ELSE  
				SET @CADDFLOORIDPREFIX=''  
		   
		      
		  SELECT TOP 1 @CPREFIXLOCID= VALUE FROM CONFIG WHERE  CONFIG_OPTION='LOCATION_ID_IN_PC'
		  
		  		
		  IF ISNULL(@CPREFIXLOCID,'')='1' AND ISNULL(@CPREFIXFLOORID,'')<>'1'   
			   SET @CADDLOCIDPREFIX=@CLOCID    
		  ELSE    
		  IF @CADDFLOORIDPREFIX=''  
		  BEGIN    
				-- IN CASE THE PURCHASES ARE DONE AT MULTIPLE LOCATIONS, FORCE THE LOCATION ID IN PREFIX    
				SELECT @NPURLOCCNT=COUNT(*) FROM LOCATION WHERE PUR_LOC = 1 OR DEPT_ID=@CHOLOCID    
				IF ISNULL(@NPURLOCCNT,0)>1    
				BEGIN    
					  IF NOT EXISTS (SELECT TOP 1 CONFIG_OPTION FROM CONFIG WHERE  CONFIG_OPTION='LOCATION_ID_IN_PC')     
					     INSERT CONFIG (  CONFIG_OPTION, VALUE, ROW_ID, LAST_UPDATE, REMARKS )     
						 SELECT 'LOCATION_ID_IN_PC' AS CONFIG_OPTION,'1' AS VALUE,'' AS ROW_ID,GETDATE() AS  LAST_UPDATE,'' AS  REMARKS
					  ELSE    
						 UPDATE CONFIG SET VALUE='1' WHERE  CONFIG_OPTION='LOCATION_ID_IN_PC'
						          
					  SET @CADDLOCIDPREFIX=@CLOCID    
				END    
		  END    
	    
		  PRINT 'GENBC-5'    
	  
	   
		  SET @NSTEP=100    
		  SET  @CPREFIX =	 LTRIM(RTRIM(ISNULL(@CYEARCODE,'')))
							+LTRIM(RTRIM(ISNULL(@MONTHCODE,''))) 
							+LTRIM(RTRIM(ISNULL(@CADDLOCIDPREFIX,''))) 
							+LTRIM(RTRIM(ISNULL(@CADDFLOORIDPREFIX,''))) 
							+LTRIM(RTRIM(ISNULL(@CADDPREFIX,'')))    
	   END
		ELSE
		    BEGIN
		      SET @CPREFIX= @BARCODE_PREFIX;
		    END
	 
	 END  ----- GENERATE BARCODE PREFIX EXPRESSION WITHOUT CUSTOM PROCEDURE
	 
	 ELSE    
	 BEGIN ----- GENERATE BARCODE PREFIX WITH CUSTOM PROCEDURE
		  -- GETTING CUSTOM PREFIX FOR THE CURRENT ROW OF PID    
		  SET @NSTEP=101

		  
		IF EXISTS (SELECT TOP 1 'U' FROM INFORMATION_SCHEMA .PARAMETERS  WHERE SPECIFIC_NAME='SP_GETNEWPREFIX' AND PARAMETER_NAME ='@DMEMODT')
		BEGIN
     
				  EXEC SP_GETNEWPREFIX @CPIDROWID, '', @CCUSTOMPREFIX OUTPUT ,@DMEMODT
		END 
		ELSE
		BEGIN
		  EXEC SP_GETNEWPREFIX @CPIDROWID, 'PUR', @CCUSTOMPREFIX OUTPUT   

		END
		  

		  IF @CCUSTOMPREFIX IS NULL    
			GOTO END_PROC    
		  
		  SET @CPREFIX = @CCUSTOMPREFIX    
	 END    


	 IF @NROWS > 0    
	 BEGIN    
	      SET @NSTEP=102
		  -- DO NOT PROCEED FOR BARCODE GENERATION IF PID IS NOT NORMALIZED FOR UNIQUE CODES    
		  IF EXISTS ( SELECT TOP 1 PID_ROW_ID FROM #PIDROWS WHERE CODING_SCHEME = 3 AND QUANTITY > 1 )    
		   GOTO END_PROC    
		      
		  SET @NSTEP=110    
		      
		  PRINT 'BAR CODE PREFIX :'+@CPREFIX    
		      
		  PRINT 'GENBC-6'    
		      
		  --CHECKING IF BARCODE SHOULD BE GENERATED RANDOMLY OR USING GETNEXTKEY    
		  SELECT TOP 1 @BRANDOMGEN=ISNULL(VALUE,0) FROM CONFIG WHERE CONFIG_OPTION='PRODUCT_CODE_GENERATION_RANDOM' 
		  SET @BRANDOMGEN=ISNULL(@BRANDOMGEN,0)      
		  IF @BRANDOMGEN=0 ---START GENERATE BARCODE WITHOUT NON-RANDOME METHOD
		  BEGIN
			   -- GENERATE BARCODES FOR ARTICLE WHICH ARE CONSIDERED AS PREFIX FOR BAR CODE GENERATION    
			  IF EXISTS (SELECT TOP 1 PID_ROW_ID FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
						 WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=0)    
			  BEGIN     
			       
				   SELECT @NROWS = COUNT(*) FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
				   WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=0      
				       
				   -- CALLING GETNEXTKEY PROCEDURE TO GENERATE NEW CODES IN BULK    
				   EXEC GETNEXTKEY 'SKU', 'PRODUCT_CODE', 50, @CPREFIX, 0, '', @NROWS,@CNEXTPRODUCTCODE OUTPUT     
				   IF @CNEXTPRODUCTCODE IS NULL    
					GOTO END_PROC    
				       
				   PRINT 'NEXT PRODUCT CODE AVAILABLE:'+@CNEXTPRODUCTCODE+STR(LEN(@CNEXTPRODUCTCODE))+STR(LEN(@CPREFIX))    
				   SET @NNEXTKEYVALUE = CONVERT(NUMERIC(30,0),RIGHT(LTRIM(RTRIM(@CNEXTPRODUCTCODE)),LEN(@CNEXTPRODUCTCODE)-LEN(@CPREFIX)))    
				       
				   PRINT 'NEXT PRODUCT CODE VALUE:'+STR(@NNEXTKEYVALUE)    
				       
				   PRINT 'GENBC-7'    
				   SET @NSTEP=120    
				   
				   SET @BBARCODEGENERATED=0
				   
				   IF CURSOR_STATUS('GLOBAL','PID_CUR') IN (0,1)
				   BEGIN
						CLOSE PID_CUR
						DEALLOCATE PID_CUR
				   END					   
				   -- GENERATING MULTIPLE ROWS FOR NEWLY GENERATED PRODUCT CODES    
				   DECLARE PID_CUR CURSOR FOR     
				   SELECT PID_ROW_ID FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE     
				   WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=0  AND B.GEN_EAN_CODES=0  
				   ORDER BY A.SRNO    
				       
				   OPEN PID_CUR    
				       
				   FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
				   WHILE @@FETCH_STATUS = 0    
				   BEGIN    
				        
						SET @NSTEP=130     
					        
						SET @BLOOP=1    
					        
						WHILE @BLOOP=1    
						BEGIN    
							 SET @NSTEP=135    
							 SET @CNEXTPRODUCTCODE = @CPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE)))       
						     
							 PRINT 'NEXT PRODUCT CODE GEN :'+@CNEXTPRODUCTCODE
							 SET @BBARCODEGENERATED=1
						         
							 IF NOT EXISTS (SELECT TOP 1 PRODUCT_CODE FROM SKU WHERE PRODUCT_CODE=@CNEXTPRODUCTCODE)    
							 BEGIN    
							  SET @NSTEP=137    
							  INSERT #BARCODES ( PID_ROW_ID, PRODUCT_CODE )    
								VALUES   ( @CPIDROWID, @CNEXTPRODUCTCODE )    
						            
							  SET @BLOOP=0      
							 END       
						         
							 SET @NSTEP=138    
							 SET @NNEXTKEYVALUE = @NNEXTKEYVALUE + 1          
						END    
					         
					        
						SET @NSTEP=140    
					        
						FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
				   END    
				   CLOSE PID_CUR    
				   DEALLOCATE PID_CUR    
				   
				   IF @BBARCODEGENERATED=1
				   BEGIN
					   PRINT 'LAST BAR CODE UPDATED :'+@CNEXTPRODUCTCODE
					   SET @NNEXTKEYVALUE = @NNEXTKEYVALUE - 1    
					   SET @CNEXTPRODUCTCODE = @CPREFIX + LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE)))    
					       
					   SET @NSTEP=150    
					       
					   ---- UPDATING KEYS TABLE WITH THE MAXIMUM BARCODE GENERATED     
					   UPDATE KEYS_PMT SET     
						LASTKEYVAL = LTRIM(RTRIM(@CNEXTPRODUCTCODE))     
					   WHERE TABLENAME = 'SKU'    
					   AND COLUMNNAME = 'PRODUCT_CODE'    
					   AND FINYEAR  = ''    
					   AND PREFIX  = @CPREFIX    
				   END
			   END	  
		   
			   SET  @BBARCODEGENERATED=0
			   -- GENERATE BARCODES FOR ARTICLES WHICH ARE CONSIDERED AS PREFIX FOR BAR CODE GENERATION    
			   IF EXISTS (SELECT TOP 1 PID_ROW_ID FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
					WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=1 AND B.GEN_EAN_CODES=0)     
			   BEGIN    
			         
					DECLARE ART_CUR CURSOR FOR SELECT DISTINCT A.ARTICLE_NO FROM #PIDROWS A    
					JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=1 AND B.GEN_EAN_CODES=0    
				        
					OPEN ART_CUR    
					FETCH NEXT FROM ART_CUR INTO @CARTICLENO    
					WHILE @@FETCH_STATUS=0    
					BEGIN    
				         
						 SET @CARTPREFIX=@CPREFIX+@CARTICLENO+'-'    
					    
						 SELECT @NROWS = COUNT(*) FROM #PIDROWS WHERE ARTICLE_NO=@CARTICLENO    
					         
						 -- CALLING GETNEXTKEY PROCEDURE TO GENERATE NEW CODES IN BULK    
						 EXEC GETNEXTKEY 'SKU', 'PRODUCT_CODE', 50, @CARTPREFIX, 0, '', @NROWS, @CNEXTPRODUCTCODE OUTPUT     
						 IF @CNEXTPRODUCTCODE IS NULL    
						  GOTO END_PROC    
					         
						 SET @NNEXTKEYVALUE = CAST(RIGHT(@CNEXTPRODUCTCODE,LEN(@CNEXTPRODUCTCODE)-LEN(@CARTPREFIX)) AS NUMERIC(30,0))    
					    
						 -- GENERATING MULTIPLE ROWS FOR NEWLY GENERATED PRODUCT CODES    
						 DECLARE PID_CUR CURSOR FOR     
						 SELECT PID_ROW_ID FROM #PIDROWS WHERE ARTICLE_NO=@CARTICLENO    
					         
						 OPEN PID_CUR    
					         
						 FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
						 WHILE @@FETCH_STATUS = 0    
						 BEGIN    
							  SET @NSTEP=130     
						        
							  SET @BLOOP=1    
						          
							  WHILE @BLOOP=1    
							  BEGIN    
								   SET @NSTEP=135    
								   SET  @BBARCODEGENERATED=1
							       
								   SET @CNEXTPRODUCTCODE = @CARTPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),@NNEXTKEYVALUE)))       
							           
								   IF NOT EXISTS (SELECT TOP 1 PRODUCT_CODE FROM SKU WHERE PRODUCT_CODE=@CNEXTPRODUCTCODE)    
								   BEGIN    
									SET @NSTEP=137    
									INSERT #BARCODES ( PID_ROW_ID, PRODUCT_CODE )    
									  VALUES   ( @CPIDROWID, @CNEXTPRODUCTCODE )    
							              
									SET @BLOOP=0      
								   END       
							           
								   SET @NSTEP=138    
								   SET @NNEXTKEYVALUE = @NNEXTKEYVALUE + 1          
							  END    
						         
							  FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
						 END    
						 CLOSE PID_CUR    
						 DEALLOCATE PID_CUR    
					     
						 IF @BBARCODEGENERATED=1
						 BEGIN    
							 SET @NNEXTKEYVALUE = @NNEXTKEYVALUE - 1    
							 SET @CNEXTPRODUCTCODE = @CARTPREFIX + CONVERT(VARCHAR(30), @NNEXTKEYVALUE)    
						    
							 -- UPDATING KEYS TABLE WITH THE MAXIMUM BARCODE GENERATED     
							 UPDATE KEYS_PMT SET     
							  LASTKEYVAL = LTRIM(RTRIM(@CNEXTPRODUCTCODE))     
							 WHERE TABLENAME = 'SKU'    
							 AND COLUMNNAME = 'PRODUCT_CODE'    
							 AND FINYEAR  = ''    
							 AND PREFIX  = @CARTPREFIX    
						         					         
						 END	 

						 FETCH NEXT FROM ART_CUR INTO @CARTICLENO    					 
					END    
					        
					CLOSE ART_CUR    
					DEALLOCATE ART_CUR    
			        
			   END  
		     
		  END ---- END OF GENERATE BARCODE WITHOUT NON-RANDOME METHOD   
	
		  ELSE    
		  BEGIN  ---START OF GENERATE RANDOM BARCODES       

			   SET @NSTEP=320    
			   SELECT TOP 1 @NBARCODELEN=ISNULL(VALUE,0) FROM CONFIG WHERE CONFIG_OPTION='NO_OF_ALPHA_NUMERIC_CHAR' 
			       
			   SET @NSTEP=330    
			   IF @NBARCODELEN=0    
			   BEGIN    
					SET @CERRORMSG='PLEASE DEFINE THE LENGTH OF ALPLA NUMERIC CHARACTERS FOR RANDOM BARCODE GENERATION'    
					GOTO END_PROC    
			   END     
			       
			   IF EXISTS (SELECT TOP 1 PID_ROW_ID FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
					WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=0 AND B.GEN_EAN_CODES=0)    
			   BEGIN     
				   SET @NSTEP=340    
				   DECLARE PID_CUR CURSOR FOR     
				   SELECT PID_ROW_ID FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE WHERE     
				   GENERATE_BARCODES_WITHARTICLE_PREFIX=0  AND B.GEN_EAN_CODES=0  
				    
				   OPEN PID_CUR    
				       
				   FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
				   WHILE @@FETCH_STATUS = 0    
				   BEGIN    
						SET @NSTEP=350     
					        
						SET @BLOOP=1    
					        
						WHILE @BLOOP=1    
						BEGIN    
						 SET @NSTEP=360    
						 SET @CNEXTPRODUCTCODE = @CPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),LEFT(REPLACE(NEWID(),'-',''),@NBARCODELEN))))       
					         
						 IF NOT EXISTS (SELECT TOP 1 PRODUCT_CODE FROM SKU WHERE PRODUCT_CODE=@CNEXTPRODUCTCODE)    
						 BEGIN    
						  SET @NSTEP=370    
						  INSERT #BARCODES ( PID_ROW_ID, PRODUCT_CODE )    
							VALUES   ( @CPIDROWID, @CNEXTPRODUCTCODE )    
					            
						  SET @BLOOP=0      
						 END       
						END    
					         
					        
						SET @NSTEP=380    
				        
						FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
				   END    
			
				   CLOSE PID_CUR    
				   DEALLOCATE PID_CUR     
			   END      
			        
			   IF EXISTS (SELECT TOP 1 PID_ROW_ID FROM #PIDROWS A JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE    
					WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=1 AND B.GEN_EAN_CODES=0)     
			   BEGIN    
					DECLARE ART_CUR CURSOR FOR SELECT DISTINCT A.ARTICLE_NO FROM #PIDROWS A    
					JOIN ARTICLE B ON A.ARTICLE_CODE=B.ARTICLE_CODE WHERE GENERATE_BARCODES_WITHARTICLE_PREFIX=1    
					AND B.GEN_EAN_CODES=0  
				        
					OPEN ART_CUR    
					FETCH NEXT FROM ART_CUR INTO @CARTICLENO    
					WHILE @@FETCH_STATUS=0    
					BEGIN    
				         
						 SET @CARTPREFIX=@CPREFIX+@CARTICLENO+'-'    
					    
						 -- GENERATING MULTIPLE ROWS FOR NEWLY GENERATED PRODUCT CODES    
						 DECLARE PID_CUR CURSOR FOR     
						 SELECT PID_ROW_ID FROM #PIDROWS WHERE ARTICLE_NO=@CARTICLENO    
					         
						 OPEN PID_CUR    
					         
						 FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
						 WHILE @@FETCH_STATUS = 0    
						 BEGIN    
							  SET @NSTEP=130     
						        
							  SET @BLOOP=1    
						          
							  WHILE @BLOOP=1    
							  BEGIN    
								   SET @NSTEP=135    
								   SET @CNEXTPRODUCTCODE = @CARTPREFIX+LTRIM(RTRIM(CONVERT(VARCHAR(40),LEFT(REPLACE(NEWID(),'-',''),@NBARCODELEN))))       
							           
								   IF NOT EXISTS (SELECT TOP 1 PRODUCT_CODE FROM SKU WHERE PRODUCT_CODE=@CNEXTPRODUCTCODE)    
								   BEGIN    
										SET @NSTEP=137    
										INSERT #BARCODES ( PID_ROW_ID, PRODUCT_CODE )    
										  VALUES   ( @CPIDROWID, @CNEXTPRODUCTCODE )    
								              
										SET @BLOOP=0      
								   END       
						           
							  END    
						         
							  FETCH NEXT FROM PID_CUR INTO @CPIDROWID    
						 END    
						 CLOSE PID_CUR    
						 DEALLOCATE PID_CUR    
				         
						 FETCH NEXT FROM ART_CUR INTO @CARTICLENO    
					END    
				        
					CLOSE ART_CUR    
					DEALLOCATE ART_CUR    
			        
			   END     
		  
		  END ----- END OF GENERATE RANDOM BARCODES         
	END   ----- END OF IF @NROWS>0
	  
	
	----- GENERATE EAN CODES IF PROCEDURE CALLED FROM PURCHASE INVOICE / PURCHASE ORDER  
	IF @NEANROWS > 0 AND @NMODE IN (1,3,2,13) --- 13 Removed ean code generation If called from Master import (04-06-2020)
										   --- as discussed during Zoom Meeting with Sir	 
	BEGIN  
		 DECLARE @CEANSOURCEABLE VARCHAR(100)  
		  IF @NMODE IN (1,3)  
				SET @CEANSOURCEABLE=(CASE WHEN @NMODE=1 THEN 'PID01106' ELSE 'POD01106' END)    
		  ELSE IF @NMODE=13
		       SET @CEANSOURCEABLE='#TMPMASTERSENC'
		  ELSE
 				SET @CEANSOURCEABLE='IRD01106'
		 
		 SET @NSTEP=152  

		 if @NMODE=13
		 begin
	         
			   SELECT ARTICLE_CODE,PARA1_CODE,PARA2_CODE,PRODUCT_CODE,CAST('' AS VARCHAR(10)) AS EAN_PREFIX 
				INTO #BARCODES_EAN 
			    FROM SKU (NOLOCK)
			    WHERE 1=2

				UPDATE A SET ARTICLE_CODE=B.ARTICLE_CODE,PARA1_CODE=B.PARA1_CODE ,PARA2_CODE =B.PARA2_CODE ,
				        GEN_EAN_CODES =B.GEN_EAN_CODES
				FROM #TMPMASTERSENC A
				JOIN #PIDROWS B ON A.ROW_ID=B.PID_ROW_ID
				WHERE ISNULL(A.PRODUCT_CODE,'')=''
				
 
			 INSERT INTO #BARCODES_EAN(ARTICLE_CODE,PARA1_CODE,PARA2_CODE,EAN_PREFIX,PRODUCT_CODE )
			 SELECT A.ARTICLE_CODE,A.PARA1_CODE ,A.PARA2_CODE ,a.EAN_PREFIX,a.PRODUCT_CODE
			 FROM #TMPMASTERSENC A
			 WHERE isnull(a.PRODUCT_CODE,'')='' and GEN_EAN_CODES=1
			 GROUP BY A.ARTICLE_CODE,A.PARA1_CODE ,A.PARA2_CODE ,a. EAN_PREFIX,
					a.PRODUCT_CODE
	 
	          EXEC GETNEXTEANCODE_OPT @CERRORMSG OUTPUT 

		 end
		 else
		 begin

		     EXEC GETNEXTEANCODE @NEANLENGTH,@CEANPREFIX,1,'', @NEANROWS,@CEANSOURCEABLE,@CXNID,@CERRORMSG OUTPUT   


		 end
	
		 IF @CERRORMSG<>''  
		 BEGIN  
			  PRINT 'GENBARCODE-RETURND-5'  
			  GOTO END_PROC  
		 END    

	END  
	
INS_CODES:    

	IF @NMODE=11 --PRODUCTION GEN BARCODE    
	BEGIN    
	    
		   SET @NSTEP=160   
		   
		   -- UPDATING PID TABLE WITH THE NEWLY GENERATED BARCODES    
		   UPDATE PRD_STK_TRANSFER_DTM_DET SET PRODUCT_CODE = B.PRODUCT_CODE    
		   FROM #BARCODES B     
		   WHERE PRD_STK_TRANSFER_DTM_DET.ROW_ID = B.PID_ROW_ID    
		   AND PRD_STK_TRANSFER_DTM_DET.PRODUCT_CODE <> B.PRODUCT_CODE    
		       
		   SET @NSTEP=170    
		   IF OBJECT_ID('tempdb..#GENSKU1') IS NOT NULL DROP TABLE #GENSKU1
		   SELECT  DISTINCT A.PRODUCT_CODE,C.ARTICLE_NAME PRODUCT_NAME, S.ARTICLE_CODE, S.PARA1_CODE, S.PARA2_CODE,     
			  A.PARA3_CODE, A.PARA4_CODE, A.PARA5_CODE, A.PARA6_CODE,    
		   A.PURCHASE_PRICE, A.MRP,  GETDATE() AS LAST_UPDATE,     
		   B.MEMO_NO  AS INV_NO, B.MEMO_DT AS INV_DT, B.MEMO_DT AS RECEIPT_DT, S.AC_CODE,     
		   S.FORM_ID,A.WS_PRICE ,C.CODING_SCHEME BARCODE_CODING_SCHEME,1 AS  ER_FLAG,B.MEMO_NO AS CHALLAN_NO
		   ,'0000000' AS EMP_CODE,'' AS  VENDOR_EAN_NO  
		   INTO #GENSKU1
		   FROM PRD_STK_TRANSFER_DTM_DET A    
		   JOIN PRD_STK_TRANSFER_DTM_MST B ON A.MEMO_ID  = B.MEMO_ID    
		   JOIN PRD_SKU S  ON A.PRODUCT_UID = S.PRODUCT_UID     
		   JOIN ARTICLE C ON S.ARTICLE_CODE = C.ARTICLE_CODE    
		   JOIN #BARCODES BC ON A.PRODUCT_CODE = BC.PRODUCT_CODE    
		   LEFT OUTER JOIN SKU D ON A.PRODUCT_CODE = D.PRODUCT_CODE    
		   WHERE B.MEMO_ID=@CXNID  AND D.PRODUCT_CODE IS NULL  --AND D.PRODUCT_CODE <> ''   
		   
		   -- INSERTING RECORDS IN SKU   
		   SET @NSTEP=171
		   INSERT SKU (PRODUCT_CODE,PRODUCT_NAME,ARTICLE_CODE, PARA1_CODE, PARA2_CODE, PARA3_CODE,PARA4_CODE, PARA5_CODE, 
		   PARA6_CODE,PURCHASE_PRICE, MRP,  LAST_UPDATE,INV_NO,INV_DT, RECEIPT_DT, AC_CODE,FORM_ID,WS_PRICE,BARCODE_CODING_SCHEME,
		   ER_FLAG ,CHALLAN_NO,EMP_CODE,VENDOR_EAN_NO)    
		   SELECT PRODUCT_CODE,PRODUCT_NAME,ARTICLE_CODE, PARA1_CODE, PARA2_CODE, PARA3_CODE,PARA4_CODE, PARA5_CODE, 
		   PARA6_CODE,PURCHASE_PRICE, MRP,  LAST_UPDATE,INV_NO,INV_DT, RECEIPT_DT, AC_CODE,FORM_ID,WS_PRICE,BARCODE_CODING_SCHEME,
		   ER_FLAG ,CHALLAN_NO,EMP_CODE,VENDOR_EAN_NO
		   FROM #GENSKU1
		       
		   SET @NSTEP=172
		   SET @MYSQL='INSERT '+REPLACE(@TAB,'TEMPDB..','')+'(PRODUCT_CODE,INSERTED_ON)    
		   SELECT DISTINCT PRODUCT_CODE,GETDATE() FROM #GENSKU1'
		   EXEC(@MYSQL)
		   IF OBJECT_ID('tempdb..#GENSKU1') IS NOT NULL DROP TABLE #GENSKU1

		   SET @NSTEP=180   
		   
		    
		       
		   -- INSERTING RECORDS IN SKU_OH    
		   INSERT SKU_OH ( PRODUCT_CODE, DISCOUNT_AMOUNT, TAX_AMOUNT, FREIGHT, OTHER_CHARGES, ROUND_OFF, VALUE_ADD,EXCISE_DUTY_AMOUNT )    
		   SELECT DISTINCT A.PRODUCT_CODE, 0 AS DISCOUNT_AMOUNT, 0 AS TAX_AMOUNT, 0 AS FREIGHT, 0 AS OTHER_CHARGES,     
		   0 AS ROUND_OFF, 0 AS VALUE_ADD ,0 AS EXCISE_DUTY_AMOUNT   
		   FROM #BARCODES A    
		   LEFT OUTER JOIN SKU_OH B ON A.PRODUCT_CODE = B.PRODUCT_CODE    
		   WHERE B.PRODUCT_CODE IS NULL    
		       
		   SET @NSTEP=190    
		       
		   -- INSERTING RECORDS IN PMT FOR PIM FLOOR    
		   INSERT PMT01106 (PRODUCT_CODE,  QUANTITY_IN_STOCK, DEPT_ID,LAST_UPDATE,BIN_ID,REP_ID )    
		   SELECT DISTINCT A.PRODUCT_CODE,  0 AS QUANTITY_IN_STOCK,B.DEPT_ID AS DEPT_ID, 
		   GETDATE() AS LAST_UPDATE ,'000' AS BIN_ID ,'' AS   REP_ID
		   FROM PRD_STK_TRANSFER_DTM_DET A    
		   JOIN PRD_STK_TRANSFER_DTM_MST B ON A.MEMO_ID = B.MEMO_ID    
		   JOIN #BARCODES BC ON A.PRODUCT_CODE = BC.PRODUCT_CODE    
		   LEFT OUTER JOIN PMT01106 D ON A.PRODUCT_CODE = D.PRODUCT_CODE AND D.DEPT_ID = B.DEPT_ID    
		   WHERE B.MEMO_ID = @CXNID    
		   AND   D.PRODUCT_CODE IS NULL    

	 END   --- IF @NMODE=11 
	 
	ELSE
	IF @NMODE=12 --PRODUCTION GEN BARCODE    
	BEGIN    
	    
		   SET @NSTEP=160   
		   
		   -- UPDATING PID TABLE WITH THE NEWLY GENERATED BARCODES    
		   UPDATE PRD_TRANSFER_MAIN_DET SET PRODUCT_CODE = B.PRODUCT_CODE    
		   FROM #BARCODES B     
		   WHERE PRD_TRANSFER_MAIN_DET.ROW_ID = B.PID_ROW_ID    
		   AND PRD_TRANSFER_MAIN_DET.PRODUCT_CODE <> B.PRODUCT_CODE    
		       
		   SET @NSTEP=170    
		   -- INSERTING RECORDS IN SKU   
		   IF OBJECT_ID('tempdb..#GENSKU2') IS NOT NULL DROP TABLE #GENSKU2      
		   SELECT DISTINCT A.PRODUCT_CODE,C.ARTICLE_NAME PRODUCT_NAME, C.ARTICLE_CODE, A.PARA1_CODE, A.PARA2_CODE, A.PARA3_CODE, A.PARA4_CODE, A.PARA5_CODE, A.PARA6_CODE,    
		   A.PURCHASE_PRICE, A.MRP,  GETDATE() AS LAST_UPDATE,     
		   B.MEMO_NO  AS INV_NO, B.MEMO_DT AS INV_DT, B.MEMO_DT AS RECEIPT_DT, '0000000000' AS AC_CODE,     
		   '0000000' AS FORM_ID,A.WS_PRICE ,C.CODING_SCHEME BARCODE_CODING_SCHEME,1 AS  ER_FLAG,B.MEMO_NO AS CHALLAN_NO
		   ,'0000000' AS EMP_CODE,'' AS  VENDOR_EAN_NO  
		   INTO #GENSKU2
		   FROM PRD_TRANSFER_MAIN_DET A    
		   JOIN PRD_TRANSFER_MAIN_MST  B ON A.MEMO_ID  = B.MEMO_ID      
		   JOIN ARTICLE C ON A.ARTICLE_CODE = C.ARTICLE_CODE    
		   JOIN #BARCODES BC ON A.PRODUCT_CODE = BC.PRODUCT_CODE    
		   LEFT OUTER JOIN SKU D ON A.PRODUCT_CODE = D.PRODUCT_CODE    
		   WHERE B.MEMO_ID  = @CXNID  AND   D.PRODUCT_CODE IS NULL  --AND D.PRODUCT_CODE <> '' 		   
		   	    
		   SET @NSTEP=171
		   INSERT SKU (PRODUCT_CODE,PRODUCT_NAME,ARTICLE_CODE, PARA1_CODE, PARA2_CODE, PARA3_CODE,PARA4_CODE, PARA5_CODE,PARA6_CODE,    
			PURCHASE_PRICE, MRP,LAST_UPDATE,INV_NO,INV_DT, RECEIPT_DT, AC_CODE,FORM_ID,WS_PRICE,BARCODE_CODING_SCHEME,
			ER_FLAG ,CHALLAN_NO,EMP_CODE,VENDOR_EAN_NO)    
		   SELECT PRODUCT_CODE,PRODUCT_NAME,ARTICLE_CODE, PARA1_CODE, PARA2_CODE, PARA3_CODE,PARA4_CODE, PARA5_CODE,PARA6_CODE,    
			PURCHASE_PRICE, MRP,LAST_UPDATE,INV_NO,INV_DT, RECEIPT_DT, AC_CODE,FORM_ID,WS_PRICE,BARCODE_CODING_SCHEME,
			ER_FLAG ,CHALLAN_NO,EMP_CODE,VENDOR_EAN_NO
		   FROM #GENSKU2	
		       
		   SET @NSTEP=172
		   SET @MYSQL='INSERT '+REPLACE(@TAB,'TEMPDB..','')+'(PRODUCT_CODE,INSERTED_ON) 
		   SELECT PRODUCT_CODE,GETDATE() FROM #GENSKU2;'
		   EXEC(@MYSQL)		   		   
		   IF OBJECT_ID('tempdb..#GENSKU2') IS NOT NULL DROP TABLE #GENSKU2
		   
		   SET @NSTEP=180   
		   
		    
		       
		   -- INSERTING RECORDS IN SKU_OH    
		   INSERT SKU_OH ( PRODUCT_CODE, DISCOUNT_AMOUNT, TAX_AMOUNT, FREIGHT, OTHER_CHARGES, ROUND_OFF, VALUE_ADD,EXCISE_DUTY_AMOUNT )    
		   SELECT DISTINCT A.PRODUCT_CODE, 0 AS DISCOUNT_AMOUNT, 0 AS TAX_AMOUNT, 0 AS FREIGHT, 0 AS OTHER_CHARGES,     
		   0 AS ROUND_OFF, 0 AS VALUE_ADD ,0 AS EXCISE_DUTY_AMOUNT   
		   FROM #BARCODES A    
		   LEFT OUTER JOIN SKU_OH B ON A.PRODUCT_CODE = B.PRODUCT_CODE    
		   WHERE B.PRODUCT_CODE IS NULL    
		       
		   SET @NSTEP=190    
		       
		   -- INSERTING RECORDS IN PMT FOR PIM FLOOR    
		   INSERT PMT01106 (PRODUCT_CODE,  QUANTITY_IN_STOCK, DEPT_ID,LAST_UPDATE,BIN_ID,REP_ID )    
		   SELECT DISTINCT A.PRODUCT_CODE,  0 AS QUANTITY_IN_STOCK,LEFT(B.MEMO_ID,2) AS DEPT_ID , 
		   GETDATE() AS LAST_UPDATE ,'000' AS BIN_ID ,'' AS   REP_ID
		   FROM PRD_TRANSFER_MAIN_DET A    
		   JOIN PRD_TRANSFER_MAIN_MST B ON A.MEMO_ID = B.MEMO_ID    
		   JOIN #BARCODES BC ON A.PRODUCT_CODE = BC.PRODUCT_CODE    
		   LEFT OUTER JOIN PMT01106 D ON A.PRODUCT_CODE = D.PRODUCT_CODE AND D.DEPT_ID = LEFT(B.MEMO_ID,2)    
		   WHERE B.MEMO_ID = @CXNID    
		   AND   D.PRODUCT_CODE IS NULL    

	 END   --- IF @NMODE=12 
	       
	 ELSE      
	 IF @NMODE=1    
	 BEGIN    
		    
		 SET @NSTEP=160  
         IF @CREATE_MANUAL_BARCODE=1
		    BEGIN
				   INSERT #BARCODES ( PID_ROW_ID,PRODUCT_CODE)  
				   SELECT A.ROW_ID,A.PRODUCT_CODE  
				   FROM PID01106 A  (NOLOCK)
				   JOIN ARTICLE B (NOLOCK) ON A.ARTICLE_CODE = B.ARTICLE_CODE  
				   WHERE A.MRR_ID = @CXNID  
				   ORDER BY A.SRNO
				   
		    END  
		     
		   SET @NSTEP=161
		   UPDATE PID01106 SET PRODUCT_CODE = B.PRODUCT_CODE    
		   FROM #BARCODES B     
		   WHERE PID01106.ROW_ID = B.PID_ROW_ID    
		   AND PID01106.PRODUCT_CODE <> B.PRODUCT_CODE 
		   AND PID01106.MRR_ID=@CXNID   
		       
		      SET @NSTEP=162
		   --for fix coding batch barcode-

	        EXEC SAVETRAN_GENPERISHABLE_BARCODE @NMODE, @CXNID,@CERRORMSG  OUTPUT 
            IF ISNULL(@CERRORMSG,'')<>''
            GOTO END_PROC

           --END OF 	for fix coding batch barcode
	       
	       IF EXISTS(SELECT TOP 1 'U' FROM PID01106 WHERE ISNULL(PRODUCT_CODE,'')=''  AND PID01106.MRR_ID=@CXNID)
	       BEGIN
	            SET @CERRORMSG='BLANK BARCODE CAN NOT BE SAVE PLEASE CHECK'
	            GOTO END_PROC
	       END
	       
		       
		   SET @NSTEP=170    
		   IF OBJECT_ID('tempdb..#GENSKU3') IS NOT NULL DROP TABLE #GENSKU3      
		   -- INSERTING RECORDS IN SKU    
		   SELECT  DISTINCT A.PRODUCT_CODE,C.ARTICLE_NAME PRODUCT_NAME, A.ARTICLE_CODE, A.PARA1_CODE, A.PARA2_CODE, A.PARA3_CODE, A.PARA4_CODE, A.PARA5_CODE, A.PARA6_CODE
		   ,(ISNULL(A.PURCHASE_PRICE,0)+ISNULL(A.MATERIAL_COST,0)-(CASE WHEN BILL_LEVEL_TAX_METHOD=2 THEN A.TAX_AMOUNT/A.QUANTITY ELSE 0 END))AS PURCHASE_PRICE
		   , A.MRP,  GETDATE() AS LAST_UPDATE,     
		   B.BILL_NO AS INV_NO, B.INV_DT, B.RECEIPT_DT, B.AC_CODE,     
		   A.FORM_ID,A.WHOLESALE_PRICE WS_PRICE,B.MEMO_TYPE,B.INV_NO AS CHALLAN_NO,C.CODING_SCHEME BARCODE_CODING_SCHEME
		   ,ISNULL(B.EMP_CODE,'') AS EMP_CODE,A.VENDOR_EAN_NO ,ISNULL(A.HSN_CODE,'0000000000') HSN_CODE,A.FIX_MRP,A.GST_PERCENTAGE
		   ,A.BATCH_NO , A.EXPIRY_DT    
		   INTO #GENSKU3
		   FROM PID01106 A    
		   JOIN PIM01106 B ON A.MRR_ID = B.MRR_ID    
		   JOIN ARTICLE C ON A.ARTICLE_CODE = C.ARTICLE_CODE    
		   --JOIN #BARCODES BC ON A.PRODUCT_CODE = BC.PRODUCT_CODE    
		   LEFT OUTER JOIN SKU D ON A.PRODUCT_CODE = D.PRODUCT_CODE    
		   WHERE B.MRR_ID = @CXNID AND D.PRODUCT_CODE IS NULL    
		   
		   
		   SET @NSTEP=171
		   INSERT SKU ( PRODUCT_CODE,PRODUCT_NAME,ARTICLE_CODE, PARA1_CODE, PARA2_CODE, PARA3_CODE,PARA4_CODE, PARA5_CODE, PARA6_CODE,    
			PURCHASE_PRICE, MRP,  LAST_UPDATE,INV_NO,INV_DT, RECEIPT_DT, AC_CODE,FORM_ID,WS_PRICE,ER_FLAG,CHALLAN_NO,BARCODE_CODING_SCHEME,EMP_CODE,VENDOR_EAN_NO,HSN_CODE,FIX_MRP,GST_PERCENTAGE  
		    ,BATCH_NO , EXPIRY_DT 	)    
		   SELECT PRODUCT_CODE,PRODUCT_NAME,ARTICLE_CODE, PARA1_CODE, PARA2_CODE, PARA3_CODE,PARA4_CODE, PARA5_CODE, PARA6_CODE,    
			PURCHASE_PRICE, MRP,  LAST_UPDATE,INV_NO,INV_DT, RECEIPT_DT, AC_CODE,FORM_ID,WS_PRICE,1 ER_FLAG,CHALLAN_NO,BARCODE_CODING_SCHEME,EMP_CODE,VENDOR_EAN_NO,HSN_CODE,FIX_MRP,GST_PERCENTAGE  
		    ,BATCH_NO , EXPIRY_DT FROM #GENSKU3       
		   SET @NSTEP=172
		   SET @MYSQL='INSERT '+REPLACE(@TAB,'TEMPDB..','')+'(PRODUCT_CODE,INSERTED_ON) SELECT PRODUCT_CODE,GETDATE() FROM #GENSKU3;'
		   EXEC(@MYSQL)
		   
		   
		   SET @NSTEP=180    
		     
		   -- INSERTING RECORDS IN SKU_OH    
		   INSERT SKU_OH ( PRODUCT_CODE, DISCOUNT_AMOUNT, TAX_AMOUNT, FREIGHT, OTHER_CHARGES, ROUND_OFF, VALUE_ADD )    
		   SELECT DISTINCT A.PRODUCT_CODE, 0 AS DISCOUNT_AMOUNT, 0 AS TAX_AMOUNT, 0 AS FREIGHT, 0 AS OTHER_CHARGES,     
		   0 AS ROUND_OFF, 0 AS VALUE_ADD   FROM PID01106 A    
		   JOIN PIM01106 B1 ON A.MRR_ID = B1.MRR_ID    
		   LEFT OUTER JOIN SKU_OH B ON A.PRODUCT_CODE = B.PRODUCT_CODE    
		   WHERE B1.MRR_ID = @CXNID  AND  B.PRODUCT_CODE IS NULL 
		       
		   SET @NSTEP=190    
		       
		   -- INSERTING RECORDS IN PMT FOR PIM FLOOR    
		   INSERT PMT01106 (PRODUCT_CODE,  QUANTITY_IN_STOCK, DEPT_ID,BIN_ID,LAST_UPDATE )    
		   SELECT DISTINCT A.PRODUCT_CODE,  0 AS QUANTITY_IN_STOCK,B.DEPT_ID AS DEPT_ID,A.BIN_ID, GETDATE() AS LAST_UPDATE    
		   FROM PID01106 A    
		   JOIN PIM01106 B ON A.MRR_ID = B.MRR_ID    
		   JOIN #BARCODES BC ON A.PRODUCT_CODE = BC.PRODUCT_CODE    
		   LEFT OUTER JOIN PMT01106 D ON A.PRODUCT_CODE = D.PRODUCT_CODE AND D.BIN_ID = B.BIN_ID    
		   WHERE B.MRR_ID = @CXNID AND B.DEPT_ID=@LOCID   
		   AND D.PRODUCT_CODE IS NULL    
		       
		   SET @NSTEP=200    

	 END    
	     
	 ELSE    
	 IF @NMODE=2    
	 BEGIN    
		   SET @NSTEP=210    
		       
		      -- SELECT * FROM #BARCODES
		       
		      -- SELECT @CTEMPIRDTABLE,@CTEMPIRDTABLE
		    
		   -- UPDATING IRD TABLE WITH THE NEWLY GENERATED BARCODES    
		   SET @CCMD=N'UPDATE '+@CTEMPIRDTABLE+' SET NEW_PRODUCT_CODE = B.PRODUCT_CODE    
		   FROM #BARCODES B     
		   WHERE '+@CTEMPIRDTABLE+'.ROW_ID = B.PID_ROW_ID    
		   AND '+@CTEMPIRDTABLE+'.NEW_PRODUCT_CODE <> B.PRODUCT_CODE'    
		       
		   PRINT @CCMD    
		   EXEC SP_EXECUTESQL @CCMD    
		       
		   SET @NSTEP=220    
		   -- INSERTING RECORDS IN SKU   
		   DECLARE @TABSKU VARCHAR(1000)
		   SET @TABSKU='TEMPDB..##GENSKU_'+DB_NAME() 
		   SET @MYSQL='IF OBJECT_ID('''+@TABSKU+''') IS NOT NULL DROP TABLE '+REPLACE(@TABSKU,'TEMPDB..','')+';'
		   EXEC(@MYSQL)
		   
		   SET @CCMD=N'SELECT DISTINCT A.NEW_PRODUCT_CODE PRODUCT_CODE,C.ARTICLE_NAME PRODUCT_NAME,A.ARTICLE_CODE
		   ,A.PARA1_CODE, A.PARA2_CODE, A.PARA3_CODE, A.PARA4_CODE, A.PARA5_CODE, A.PARA6_CODE
		   ,e.basic_purchase_price,E.PURCHASE_PRICE, A.NEW_MRP MRP, A.NEW_WSP WS_PRICE, GETDATE() AS LAST_UPDATE,     
		   E.INV_NO AS INV_NO,E.INV_DT,E.RECEIPT_DT,E.AC_CODE,E.FORM_ID,C.CODING_SCHEME BARCODE_CODING_SCHEME,A.NEW_HSN_CODE HSN_CODE ,A.NEW_EXPIRY_DT EXPIRY_DT ,
		   A.NEW_FIX_MRP AS FIX_MRP,e.purchaseLocId,E.PUR_MRR_NO
		   INTO '+REPLACE(@TABSKU,'TEMPDB..','')+'
		   FROM '+@CTEMPIRDTABLE+' A    
		   JOIN ARTICLE C ON A.ARTICLE_CODE = C.ARTICLE_CODE    
		   JOIN #BARCODES BC ON A.NEW_PRODUCT_CODE = BC.PRODUCT_CODE    
		   LEFT OUTER JOIN SKU D ON A.NEW_PRODUCT_CODE = D.PRODUCT_CODE    
		   JOIN SKU E ON E.PRODUCT_CODE=A.PRODUCT_CODE    
		   WHERE A.NEW_PRODUCT_CODE<>'''' 
		   AND A.IRM_MEMO_ID ='''+@CXNID+'''  
		   AND D.PRODUCT_CODE IS NULL'    
		   PRINT @CCMD    
		   EXEC SP_EXECUTESQL @CCMD    


		   SET @NSTEP=221
		   SET @MYSQL='INSERT SKU (PRODUCT_CODE,PRODUCT_NAME,ARTICLE_CODE
		   ,PARA1_CODE, PARA2_CODE, PARA3_CODE,PARA4_CODE, PARA5_CODE, PARA6_CODE
		   ,basic_purchase_price,PURCHASE_PRICE, MRP, WS_PRICE,LAST_UPDATE,INV_NO,INV_DT, RECEIPT_DT, AC_CODE,FORM_ID
		   ,BARCODE_CODING_SCHEME,HSN_CODE,EXPIRY_DT,FIX_MRP,purchaseLocId,PUR_MRR_NO)    
		   SELECT PRODUCT_CODE,PRODUCT_NAME,ARTICLE_CODE
		   ,PARA1_CODE, PARA2_CODE, PARA3_CODE,PARA4_CODE, PARA5_CODE, PARA6_CODE
		   ,basic_purchase_price,PURCHASE_PRICE, MRP, WS_PRICE,LAST_UPDATE,INV_NO,INV_DT, RECEIPT_DT, AC_CODE,FORM_ID
		   ,BARCODE_CODING_SCHEME,HSN_CODE,EXPIRY_DT,FIX_MRP,purchaseLocId,PUR_MRR_NO
		   FROM '+REPLACE(@TABSKU,'TEMPDB..','')+';'
		   EXEC(@MYSQL)
			
		   SELECT TOP 1 @cMultipleFc=value FROM config (NOLOCK) WHERE config_option='ENABLE_MULTI_CURRENCY'
		
		   IF ISNULL(@cMultipleFc,'')='1'
		   BEGIN
				SET @NSTEP=223
				SET @CCMD=N'SELECT DISTINCT A.NEW_PRODUCT_CODE PRODUCT_CODE,b.fc_code,b.fc_rate,
							getdate() as last_update
							FROM '+	@CTEMPIRDTABLE+' A 
							JOIN _TMPFCRATE b ON a.product_code=b.product_code'
				
				INSERT sku_fc_prices	( product_code, fc_code, fc_rate, last_update )  
				EXEC SP_EXECUTESQL @cCmd
			   	
		   END
		       
		   SET @NSTEP=226
		   SET @MYSQL='INSERT '+REPLACE(@TAB,'TEMPDB..','')+'(PRODUCT_CODE,INSERTED_ON) SELECT PRODUCT_CODE,GETDATE() FROM '+REPLACE(@TABSKU,'TEMPDB..','')+';'
		   EXEC(@MYSQL)
		   SET @MYSQL='IF OBJECT_ID('''+@TABSKU+''') IS NOT NULL DROP TABLE '+REPLACE(@TABSKU,'TEMPDB..','')+';'
		   EXEC(@MYSQL)

		          
		          
		   SET @NSTEP=230    
		       
		   SET @CCMD=N'INSERT SKU_OH ( PRODUCT_CODE, DISCOUNT_AMOUNT, TAX_AMOUNT, FREIGHT, OTHER_CHARGES, ROUND_OFF, VALUE_ADD,EXCISE_DUTY_AMOUNT )    
		   SELECT DISTINCT A.NEW_PRODUCT_CODE, C.DISCOUNT_AMOUNT,C.TAX_AMOUNT,C.FREIGHT,C.OTHER_CHARGES,     
		   C.ROUND_OFF,C.VALUE_ADD,C.EXCISE_DUTY_AMOUNT    
		   FROM '+@CTEMPIRDTABLE+' A    
		   LEFT OUTER JOIN SKU_OH B ON A.NEW_PRODUCT_CODE = B.PRODUCT_CODE    
		   JOIN SKU_OH C ON C.PRODUCT_CODE=A.PRODUCT_CODE    
		   WHERE A.NEW_PRODUCT_CODE<>''''     AND A.IRM_MEMO_ID ='''+@CXNID+''' 
		   AND B.PRODUCT_CODE IS NULL'    
		       
		   PRINT @CCMD    
		   EXEC SP_EXECUTESQL @CCMD    
		       
		   SET @NSTEP=240    
		    
		       
		   SET @CCMD=N'INSERT PMT01106 (PRODUCT_CODE,  QUANTITY_IN_STOCK,  DEPT_ID, LAST_UPDATE,BIN_ID )    
		   SELECT DISTINCT A.NEW_PRODUCT_CODE,  0 AS QUANTITY_IN_STOCK,A.DEPT_ID AS DEPT_ID,     
		   GETDATE() AS LAST_UPDATE,ISNULL(B.BIN_ID,''000'') AS BIN_ID    
		   FROM '+@CTEMPIRDTABLE+' A    
		   JOIN IRM01106 B ON A.IRM_MEMO_ID = B.IRM_MEMO_ID    
		   JOIN #BARCODES BC ON A.NEW_PRODUCT_CODE = BC.PRODUCT_CODE    
		   LEFT OUTER JOIN PMT01106 D ON A.NEW_PRODUCT_CODE = D.PRODUCT_CODE AND A.DEPT_ID = D.DEPT_ID    
		   WHERE D.PRODUCT_CODE IS NULL    AND A.IRM_MEMO_ID ='''+@CXNID+'''  '     
		       
		   PRINT @CCMD    
		   EXEC SP_EXECUTESQL @CCMD    
	      
	 END    
	     
	 ELSE     
	 IF @NMODE=3    
	 BEGIN    
		   SET @NSTEP=250    
		   -- UPDATING PID TABLE WITH THE NEWLY GENERATED BARCODES    
		   UPDATE a SET PRODUCT_CODE = B.PRODUCT_CODE    
		   FROM #BARCODES B   
		   join POD01106 a (nolock) on   B.PID_ROW_ID=a.row_id 
		   WHERE a.PRODUCT_CODE <> B.PRODUCT_CODE 
		   and a.po_id= @CXNID
		       
			 SET @NSTEP=255  
		  
		  IF EXISTS (SELECT TOP 1 'U' FROM POD01106 A   (NOLOCK) 
		   JOIN ARTICLE B  (NOLOCK) ON A.ARTICLE_CODE=B.ARTICLE_CODE  
		   WHERE B.GEN_EAN_CODES=1 AND A.PO_ID=@CXNID   )
		   BEGIN
		  
			  UPDATE A SET PRODUCT_CODE=X.PRODUCT_CODE  
			  FROM POD01106 A  (NOLOCK)
			  JOIN  
			  (  
			   SELECT ROW_NUMBER() OVER (PARTITION BY  A.ARTICLE_CODE,A.PARA1_CODE,A.PARA2_CODE,A.PURCHASE_PRICE ORDER BY  A.ARTICLE_CODE,A.PARA1_CODE,A.PARA2_CODE,A.PURCHASE_PRICE) AS [TEMP_SR_NO],  
			   A.ARTICLE_CODE,A.PARA1_CODE,A.PARA2_CODE,A.PURCHASE_PRICE,PRODUCT_CODE,A.PO_ID  
			   FROM POD01106 A  (NOLOCK)
			   JOIN ARTICLE B  (NOLOCK) ON A.ARTICLE_CODE=B.ARTICLE_CODE  
			   WHERE B.GEN_EAN_CODES=1 AND A.PO_ID=@CXNID   
			  )X ON A.ARTICLE_CODE=X.ARTICLE_CODE AND A.PARA1_CODE=X.PARA1_CODE AND A.PARA2_CODE=X.PARA2_CODE AND A.PO_ID=X.PO_ID  
			  WHERE X.TEMP_SR_NO=1  
			  AND A.PO_ID=@CXNID    
		 
		 END

		   SET @NSTEP=260    
		 --  IF OBJECT_ID('tempdb..#GENSKU4') IS NOT NULL DROP TABLE #GENSKU4
		 ;with GENSKU4 as
		 (
		   SELECT DISTINCT A.PRODUCT_CODE, A.ARTICLE_CODE, A.PARA1_CODE, A.PARA2_CODE, A.PARA3_CODE, A.PARA4_CODE, A.PARA5_CODE, A.PARA6_CODE
		   ,A.PURCHASE_PRICE, A.MRP,  GETDATE() AS LAST_UPDATE,'' AS INV_NO,'' AS INV_DT,'' AS RECEIPT_DT, B.AC_CODE
		   ,CASE WHEN ISNULL(A.FORM_ID,'')='' THEN '0000000' ELSE A.FORM_ID END FORM_ID,A.WHOLESALE_PRICE WS_PRICE,C.CODING_SCHEME BARCODE_CODING_SCHEME
		   ,C.ARTICLE_NAME PRODUCT_NAME
		   ,(CASE WHEN ISNULL(A.HSN_CODE,'') IN ('','0000000000') AND ISNULL(C.HSN_CODE,'') IN ('','0000000000')
		    THEN '0000000000' WHEN  ISNULL(C.HSN_CODE,'') NOT IN ('','0000000000') THEN C.HSN_CODE
		    ELSE ISNULL(A.HSN_CODE,'0000000000') END) AS HSN_CODE 
		  -- INTO #GENSKU4     
		   FROM POD01106 A (NOLOCK)   
		   JOIN POM01106 B (NOLOCK) ON A.PO_ID = B.PO_ID    
		   JOIN ARTICLE C (NOLOCK) ON A.ARTICLE_CODE = C.ARTICLE_CODE    
		   JOIN SECTIOND SD (NOLOCK) ON SD.SUB_SECTION_CODE=C.SUB_SECTION_CODE
		   LEFT OUTER JOIN SKU D (NOLOCK) ON A.PRODUCT_CODE = D.PRODUCT_CODE    
		   WHERE B.PO_ID = @CXNID  AND ISNULL(A.PRODUCT_CODE,'')<>''  
		   AND D.PRODUCT_CODE IS NULL   
		   
		   ) 
		   	
		   INSERT SKU (PRODUCT_CODE, ARTICLE_CODE, PARA1_CODE, PARA2_CODE, PARA3_CODE,PARA4_CODE, PARA5_CODE, PARA6_CODE
		   ,PURCHASE_PRICE, MRP, LAST_UPDATE,INV_NO,INV_DT, RECEIPT_DT, AC_CODE
		   ,FORM_ID
		   ,WS_PRICE,BARCODE_CODING_SCHEME,PRODUCT_NAME,HSN_CODE )    
		   SELECT PRODUCT_CODE, ARTICLE_CODE, PARA1_CODE, PARA2_CODE, PARA3_CODE,PARA4_CODE, PARA5_CODE, PARA6_CODE
		   ,PURCHASE_PRICE, MRP, LAST_UPDATE,INV_NO,INV_DT, RECEIPT_DT, AC_CODE
		   ,FORM_ID
		   ,WS_PRICE,BARCODE_CODING_SCHEME,PRODUCT_NAME,HSN_CODE
		   FROM GENSKU4
		   
		   --SET @NSTEP=262
		   --SET @MYSQL='INSERT '+REPLACE(@TAB,'TEMPDB..','')+'(PRODUCT_CODE,INSERTED_ON)    
		   --SELECT PRODUCT_CODE,GETDATE() FROM #GENSKU4;'
		   --EXEC(@MYSQL)
		   --IF OBJECT_ID('tempdb..#GENSKU4') IS NOT NULL DROP TABLE #GENSKU4
	 END    
	     
	 ELSE    
	 IF @NMODE=4    
	 BEGIN    
		   SET @NSTEP=270    
		       
		   PRINT 'ENTER BCGEN-4'    
		   DECLARE @CMIXNMATCHACCODE CHAR(10)    
		       
		   -- UPDATING PID TABLE WITH THE NEWLY GENERATED BARCODES    
		   UPDATE SCF01106 SET PRODUCT_CODE = B.PRODUCT_CODE    
		   FROM #BARCODES B     
		   WHERE SCF01106.ROW_ID = B.PID_ROW_ID    
		   AND SCF01106.PRODUCT_CODE <> B.PRODUCT_CODE    
		       
		   SET @NSTEP=280    
		       
		   PRINT 'ENTER BCGEN-5'    
		   SELECT TOP 1 @CMIXNMATCHACCODE=VALUE FROM CONFIG WHERE CONFIG_OPTION='MIXNMATCH_AC_CODE'    
		         
		   -- INSERTING RECORDS IN SKU    
		   IF OBJECT_ID('tempdb..#GENSKU5') IS NOT NULL DROP TABLE #GENSKU5
		   SELECT  A.PRODUCT_CODE,C.ARTICLE_NAME PRODUCT_NAME, A.ARTICLE_CODE, A.PARA1_CODE, A.PARA2_CODE, A.PARA3_CODE, A.PARA4_CODE, A.PARA5_CODE, A.PARA6_CODE,    
		   A.PURCHASE_PRICE, A.MRP,  GETDATE() AS LAST_UPDATE,     
		   B.MEMO_NO AS INV_NO, B.MEMO_DT INV_DT,B.MEMO_DT RECEIPT_DT,@CMIXNMATCHACCODE AS AC_CODE,     
		   '0000000' AS FORM_ID,A.WS_PRICE,C.CODING_SCHEME BARCODE_CODING_SCHEME   
		   INTO #GENSKU5
		   FROM SCF01106 A    
		   JOIN SCM01106 B ON A.MEMO_ID = B.MEMO_ID    
		   JOIN ARTICLE C ON A.ARTICLE_CODE = C.ARTICLE_CODE    
		   JOIN #BARCODES BC ON A.PRODUCT_CODE = BC.PRODUCT_CODE    
		   LEFT OUTER JOIN SKU D ON A.PRODUCT_CODE = D.PRODUCT_CODE    
		   WHERE B.MEMO_ID = @CXNID AND D.PRODUCT_CODE IS NULL    

		   SET @NSTEP=281	
		   INSERT SKU (PRODUCT_CODE,PRODUCT_NAME,ARTICLE_CODE, PARA1_CODE, PARA2_CODE, PARA3_CODE,PARA4_CODE, PARA5_CODE, PARA6_CODE,    
			PURCHASE_PRICE, MRP,  LAST_UPDATE
			,INV_NO
			,INV_DT, RECEIPT_DT, AC_CODE,FORM_ID,WS_PRICE,BARCODE_CODING_SCHEME,purchaseLocId )    
		   SELECT PRODUCT_CODE,PRODUCT_NAME,ARTICLE_CODE, PARA1_CODE, PARA2_CODE, PARA3_CODE,PARA4_CODE, PARA5_CODE, PARA6_CODE,    
			PURCHASE_PRICE, MRP,  LAST_UPDATE,INV_NO,INV_DT, RECEIPT_DT, AC_CODE
			,FORM_ID,WS_PRICE,BARCODE_CODING_SCHEME,@LOCID purchaseLocId 
		   FROM #GENSKU5
		       
		   SET @NSTEP=282
		   SET @MYSQL='INSERT '+REPLACE(@TAB,'TEMPDB..','')+' (PRODUCT_CODE,INSERTED_ON)    
		   SELECT PRODUCT_CODE,GETDATE() FROM #GENSKU5'
		   EXEC(@MYSQL)
		   IF OBJECT_ID('tempdb..#GENSKU5') IS NOT NULL DROP TABLE #GENSKU5
		   
		   
		   SET @NSTEP=290    
		       
		   PRINT 'ENTER BCGEN-6'    
		   -- INSERTING RECORDS IN SKU_OH    
		   INSERT SKU_OH ( PRODUCT_CODE, DISCOUNT_AMOUNT, TAX_AMOUNT, FREIGHT, OTHER_CHARGES, ROUND_OFF, VALUE_ADD )    
		   SELECT DISTINCT A.PRODUCT_CODE, 0 AS DISCOUNT_AMOUNT, 0 AS TAX_AMOUNT, 0 AS FREIGHT, 0 AS OTHER_CHARGES,     
		   0 AS ROUND_OFF, 0 AS VALUE_ADD FROM #BARCODES A    
		   LEFT OUTER JOIN SKU_OH B ON A.PRODUCT_CODE = B.PRODUCT_CODE    
		   WHERE B.PRODUCT_CODE IS NULL    
		       
		   SET @NSTEP=300    
		       
		   -- INSERTING RECORDS IN PMT FOR PIM FLOOR    
		   INSERT PMT01106 (PRODUCT_CODE,  QUANTITY_IN_STOCK, DEPT_ID,LAST_UPDATE,BIN_ID )    
		   SELECT DISTINCT A.PRODUCT_CODE,  0 AS QUANTITY_IN_STOCK,B.DEPT_ID AS DEPT_ID, GETDATE() AS LAST_UPDATE,'000' AS  BIN_ID 
		   FROM SCF01106 A    
		   JOIN SCM01106 B ON A.MEMO_ID = B.MEMO_ID    
		   JOIN #BARCODES BC ON A.PRODUCT_CODE = BC.PRODUCT_CODE    
		   LEFT OUTER JOIN PMT01106 D ON A.PRODUCT_CODE = D.PRODUCT_CODE AND D.DEPT_ID = B.DEPT_ID    
		   WHERE B.MEMO_ID = @CXNID    
		   AND   D.PRODUCT_CODE IS NULL    
		       
		   SET @NSTEP=310    
		       
		   -- INSERTING RECORDS IN PMT - IF DEFAULT FLOOR AND PIM FLOOR ARE DIFFERENT    
		   IF @CPIMDEPTID <> @CLOCID    
			INSERT PMT01106 (PRODUCT_CODE, QUANTITY_IN_STOCK,  DEPT_ID, LAST_UPDATE )    
			SELECT DISTINCT A.PRODUCT_CODE, 0 AS QUANTITY_IN_STOCK, @CPIMDEPTID AS DEPT_ID,GETDATE() AS LAST_UPDATE    
			FROM SCF01106 A    
			JOIN SCM01106 B ON A.MEMO_ID = B.MEMO_ID    
			JOIN #BARCODES BC ON A.PRODUCT_CODE = BC.PRODUCT_CODE    
			LEFT OUTER JOIN PMT01106 D ON A.PRODUCT_CODE = D.PRODUCT_CODE AND D.DEPT_ID = @CPIMDEPTID    
			WHERE B.MEMO_ID = @CXNID    
			AND   D.PRODUCT_CODE IS NULL    
	 END    
	 ELSE    
	 IF @NMODE=13    
	 BEGIN  
	 
	      UPDATE A SET PRODUCT_CODE=B.product_code  
	      FROM #TMPMASTERSENC A
	      JOIN #BARCODES B ON A.ROW_ID =B.PID_ROW_ID 
	      WHERE A.PRODUCT_CODE<>B.product_code 
	      
	 END
	 
	 SET @NSTEP=997 
	 --DECLARE @INSERTED_ON DATETIME,@TIME VARCHAR(100)
	 --IF OBJECT_ID('TEMPDB..#MAX_TIME') IS NOT NULL DROP TABLE #MAX_TIME
	 --CREATE TABLE #MAX_TIME(MAXTIME DATETIME)
	 --SET @MYSQL='INSERT #MAX_TIME SELECT MAX(INSERTED_ON) FROM '+REPLACE(@TAB,'TEMPDB..','')
	 --EXEC(@MYSQL)
	 --SELECT @INSERTED_ON=MAXTIME FROM #MAX_TIME
	 --EXEC PR_UPDATE_SKU_NAMES @INSERTED_ON
	 /*
	 SET @TIME=REPLACE(CONVERT(VARCHAR,@INSERTED_ON,102),'.','-')+' '+CONVERT(VARCHAR(8),@INSERTED_ON,108)+'.'+RIGHT(CONVERT(VARCHAR,@INSERTED_ON,113),3)
	 SET @MYSQL='IF OBJECT_ID('''+REPLACE(@TAB,'TEMPDB..','')+''') IS NOT NULL
       EXEC PR_UPDATE_SKU_NAMES '''+@TIME+''';'
	 EXEC(@MYSQL)
	 */
END TRY     
     
BEGIN CATCH    
		    
  SET @CERRORMSG = 'PROCEDURE SAVETRAN_GENBARCODES : STEP- ' + LTRIM(STR(@NSTEP)) + ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()    
    
END CATCH    
     
END_PROC:    
     
END    